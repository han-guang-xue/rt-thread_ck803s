<!DOCTYPE html PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
<title>Static Call Graph - [Obj/rt-thread.elf]</title>
</head>
<body><hr>
<h1>Static Call Graph for image Obj/rt-thread.elf</h1><hr>
<br>
<p>#&#060CALLGRAPH&#062# Csky GNU Linker<br>
<h3>Maximum Stack Usage = 5416 bytes + Unknown(Cycles, Untraceable Function Pointers)</h3>
<h3>Call Chain for Maximum Stack Depth:</h3>
webnet_thread &rArr; webnet_sessions_handle_fds &rArr; _webnet_session_handle  &rArr; webnet_module_handle_uri  &rArr; _webnet_module_system_uri_post  &rArr; webnet_module_dirindex  &rArr; webnet_session_set_header  &rArr; webnet_module_handle_event  &rArr; _webnet_module_system_uri_physical  &rArr; webnet_module_upload  &rArr; webnet_module_upload_open.part.3  &rArr; _webnet_module_upload_handle.part.2  &rArr; webnet_session_read  &rArr; tls_srv_session_read  &rArr; mbedtls_ssl_read  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<h3>Mutually Recursive functions</h3><ul>
<li><a href="#[110]">rt_assert_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f2]">rt_kprintf</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b0]">rt_device_write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[110]">rt_assert_handler</a><br><li><a href="#[134]">rt_schedule</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f3]">list_thread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f2]">object_name_maxlen</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[138]">rt_exit_critical</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[134]">rt_schedule</a><br><li><a href="#[380]">netconn_drain</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[380]">netconn_drain</a><br><li><a href="#[557]">mbedtls_cipher_update</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[630]">mbedtls_gcm_update</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[557]">mbedtls_cipher_update</a><br><li><a href="#[82b]">x509_crt_verify_child</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[82b]">x509_crt_verify_child</a><br><li><a href="#[3c2]">lwip_sendto</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c3]">lwip_send</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c2]">lwip_sendto</a><br><li><a href="#[183]">copydir</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[183]">copydir</a><br><li><a href="#[8dd]">_webnet_module_system_uri_post</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8e2]">webnet_module_asp</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8e0]">_webnet_asp_dofile</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8ce]">webnet_session_set_header</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8de]">webnet_module_handle_event</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8dd]">_webnet_module_system_uri_post</a><br><li><a href="#[8dd]">_webnet_module_system_uri_post</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[900]">webnet_module_ssi</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8ff]">_webnet_ssi_dofile</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8ce]">webnet_session_set_header</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8de]">webnet_module_handle_event</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8dd]">_webnet_module_system_uri_post</a><br><li><a href="#[8dd]">_webnet_module_system_uri_post</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8e8]">webnet_module_dirindex</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8ce]">webnet_session_set_header</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8de]">webnet_module_handle_event</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8dd]">_webnet_module_system_uri_post</a><br><li><a href="#[ae4]">ahci_error_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ae3]">ahci_error_recover</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[acb]">ahci_hba_reset</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ae4]">ahci_error_handler</a><br><li><a href="#[2ff]">msh_exec</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[313]">msh_exec_script</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ff]">msh_exec</a><br></ul><h3>Function Pointers</h3><ul>
<li><a href="#[1]">main</a> from Obj/entry_main.o(.text.startup.main) referenced from Obj/src_components.o(.text.main_thread_entry)
<li><a href="#[2]">data_print.constprop.1</a> from Obj/entry_ipraw.o(.text.data_print.constprop.1) referenced from Obj/entry_ipraw.o(.text.iprawtest)
<li><a href="#[a]">drv_crypto_lock.part.0</a> from Obj/drivers_drv_crypto.o(.fast) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[b]">tih_aes_crypt</a> from Obj/drivers_drv_crypto.o(.fast) referenced from Obj/library_aes_alt.o(.text._mbedtls_aes_crypt_cfb128)
<li><a href="#[c]">tih_aes_crypt_ctr</a> from Obj/drivers_drv_crypto.o(.fast) referenced from Obj/library_aes_alt.o(.text._mbedtls_aes_crypt_ctr)
<li><a href="#[e]">tih_sm4_crypt</a> from Obj/drivers_drv_crypto.o(.fast) referenced from Obj/library_sm4.o(.text._mbedtls_sm4_crypt_cfb128)
<li><a href="#[f]">tih_sm4_crypt_ctr</a> from Obj/drivers_drv_crypto.o(.fast) referenced from Obj/library_sm4.o(.text._mbedtls_sm4_crypt_ctr)
<li><a href="#[12]">tih_rsa_encrypt</a> from Obj/drivers_drv_crypto.o(.fast) referenced from Obj/library_rsa.o(.text.mbedtls_rsa_public)
<li><a href="#[13]">tih_rsa_decrypt</a> from Obj/drivers_drv_crypto.o(.fast) referenced from Obj/library_rsa.o(.text.mbedtls_rsa_private)
<li><a href="#[16]">tih_sm2_z_get</a> from Obj/drivers_drv_crypto.o(.fast) referenced from Obj/library_sm2.o(.text.mbedtls_sm2_z_get)
<li><a href="#[17]">tih_sm2_sign</a> from Obj/drivers_drv_crypto.o(.fast) referenced from Obj/library_ecdsa_sm2.o(.text.mbedtls_ecdsa_sm2_sign)
<li><a href="#[18]">tih_sm2_verify</a> from Obj/drivers_drv_crypto.o(.fast) referenced from Obj/library_ecdsa_sm2.o(.text.mbedtls_ecdsa_sm2_verify)
<li><a href="#[19]">tih_sm2_encrypt</a> from Obj/drivers_drv_crypto.o(.fast) referenced from Obj/library_sm2.o(.text.mbedtls_sm2_encrypt)
<li><a href="#[1a]">tih_sm2_decrypt</a> from Obj/drivers_drv_crypto.o(.fast) referenced from Obj/library_sm2.o(.text.mbedtls_sm2_decrypt)
<li><a href="#[1c]">tih_sha1_init</a> from Obj/drivers_drv_crypto.o(.fast) referenced from Obj/library_sha1_alt.o(.text.mbedtls_sha1_starts)
<li><a href="#[1d]">tih_sha1_update</a> from Obj/drivers_drv_crypto.o(.fast) referenced from Obj/library_sha1_alt.o(.text.mbedtls_sha1_update)
<li><a href="#[1e]">tih_sha1_final</a> from Obj/drivers_drv_crypto.o(.fast) referenced from Obj/library_sha1_alt.o(.text.mbedtls_sha1_finish)
<li><a href="#[1f]">tih_sha224_init</a> from Obj/drivers_drv_crypto.o(.fast) referenced from Obj/library_sha256_alt.o(.text.mbedtls_sha256_starts)
<li><a href="#[20]">tih_sha224_update</a> from Obj/drivers_drv_crypto.o(.fast) referenced from Obj/library_sha256_alt.o(.text.mbedtls_sha256_update)
<li><a href="#[21]">tih_sha224_final</a> from Obj/drivers_drv_crypto.o(.fast) referenced from Obj/library_sha256_alt.o(.text.mbedtls_sha256_finish)
<li><a href="#[22]">tih_sha256_init</a> from Obj/drivers_drv_crypto.o(.fast) referenced from Obj/library_sha256_alt.o(.text.mbedtls_sha256_starts)
<li><a href="#[23]">tih_sha256_update</a> from Obj/drivers_drv_crypto.o(.fast) referenced from Obj/library_sha256_alt.o(.text.mbedtls_sha256_update)
<li><a href="#[24]">tih_sha256_final</a> from Obj/drivers_drv_crypto.o(.fast) referenced from Obj/library_sha256_alt.o(.text.mbedtls_sha256_finish)
<li><a href="#[25]">tih_sm3_init</a> from Obj/drivers_drv_crypto.o(.fast) referenced from Obj/library_sm3.o(.text.mbedtls_sm3_starts)
<li><a href="#[26]">tih_sm3_update</a> from Obj/drivers_drv_crypto.o(.fast) referenced from Obj/library_sm3.o(.text.mbedtls_sm3_update)
<li><a href="#[27]">tih_sm3_final</a> from Obj/drivers_drv_crypto.o(.fast) referenced from Obj/library_sm3.o(.text.mbedtls_sm3_finish)
<li><a href="#[28]">tih_cmac_init</a> from Obj/drivers_drv_crypto.o(.fast) referenced from Obj/library_ccm.o(.text.ccm_auth_crypt)
<li><a href="#[29]">tih_cmac_update</a> from Obj/drivers_drv_crypto.o(.fast) referenced from Obj/library_ccm.o(.text.ccm_auth_crypt)
<li><a href="#[2a]">tih_cmac_final</a> from Obj/drivers_drv_crypto.o(.fast) referenced from Obj/library_ccm.o(.text.ccm_auth_crypt)
<li><a href="#[2b]">tih_rand_get</a> from Obj/drivers_drv_crypto.o(.fast) referenced from Obj/src_tls_hardware.o(.text.mbedtls_hardware_poll)
<li><a href="#[2c]">tih_ecp_mul</a> from Obj/drivers_drv_crypto.o(.fast) referenced from Obj/library_ecp_alt.o(.text.mbedtls_ecp_mul)
<li><a href="#[2d]">tih_ecp_muladd</a> from Obj/drivers_drv_crypto.o(.fast) referenced from Obj/library_ecp_alt.o(.text.mbedtls_ecp_muladd)
<li><a href="#[30]">tih_ecp_check</a> from Obj/drivers_drv_crypto.o(.fast) referenced from Obj/library_ecp_alt.o(.text.mbedtls_ecp_check_pubkey)
<li><a href="#[3c]">core_timer_init</a> from Obj/drivers_drv_ctimer.o(.text.core_timer_init) referenced from Obj/drivers_system.o(.fast)
<li><a href="#[52]">rt_hw_interrupt_init</a> from Obj/drivers_drv_intr.o(.text.rt_hw_interrupt_init) referenced from Obj/drivers_system.o(.text.sys_hw_init)
<li><a href="#[53]">rt_hw_interrupt_mask</a> from Obj/drivers_drv_intr.o(.fast) referenced from Obj/drivers_drv_ctimer.o(.text.core_timer_init)
<li><a href="#[54]">rt_hw_interrupt_umask</a> from Obj/drivers_drv_intr.o(.fast) referenced from Obj/drivers_drv_ctimer.o(.text.core_timer_init)
<li><a href="#[55]">rt_hw_interrupt_clear</a> from Obj/drivers_drv_intr.o(.fast) referenced from Obj/drivers_drv_ctimer.o(.fast)
<li><a href="#[56]">rt_hw_interrupt_install</a> from Obj/drivers_drv_intr.o(.fast) referenced from Obj/drivers_drv_ctimer.o(.text.core_timer_init)
<li><a href="#[59]">drv_ata_trim</a> from Obj/drivers_drv_sata.o(.fast) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[5b]">drv_ata_init</a> from Obj/drivers_drv_sata.o(.text.drv_ata_init) referenced from Obj/drivers_drv_sata.o(.text.drv_ata_reset)
<li><a href="#[5c]">drv_ata_reset</a> from Obj/drivers_drv_sata.o(.text.drv_ata_reset) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[77]">os_critical_enter</a> from critical.o(.text) referenced from fputs.o(.text)
<li><a href="#[78]">fputc</a> from Obj/drivers_retarget.o(.text.fputc) referenced from perror.o(.text)
<li><a href="#[7a]">rt_hw_console_output</a> from Obj/src_kservice.o(.text.rt_hw_console_output) referenced from Obj/src_kservice.o(.text.rt_kputs)
<li><a href="#[7d]">os_critical_exit</a> from critical.o(.text) referenced from fputs.o(.text)
<li><a href="#[81]">sys_hw_init</a> from Obj/drivers_system.o(.text.sys_hw_init) referenced from Obj/drivers_system.o(.fast)
<li><a href="#[82]">rt_hw_board_init</a> from Obj/drivers_system.o(.text.rt_hw_board_init) referenced from Obj/src_components.o(.text.rtthread_startup)
<li><a href="#[83]">system_init</a> from Obj/drivers_system.o(.fast) referenced from Obj/ck803_startup_gcc.o(.text)
<li><a href="#[85]">rt_hw_hardclock_get</a> from Obj/drivers_system.o(.fast) referenced from Obj/src_timing_alt.o(.text.mbedtls_timing_hardclock)
<li><a href="#[86]">rt_hw_dtcm_addr_check</a> from Obj/drivers_system.o(.fast) referenced from Obj/library_aes_alt.o(.text._mbedtls_aes_crypt_cfb128)
<li><a href="#[89]">marvell_phy_init</a> from Obj/src_tih_phy_m88e1512.o(.text.marvell_phy_init) referenced from Obj/src_tih_phy_m88e1512.o(.text.marvell_phy_speed_duplex_change)
<li><a href="#[98]">rt_tick_get</a> from Obj/src_clock.o(.fast) referenced from Obj/src_ipc.o(.fast)
<li><a href="#[9a]">rt_tick_increase</a> from Obj/src_clock.o(.fast) referenced from Obj/drivers_drv_ctimer.o(.fast)
<li><a href="#[9b]">rt_tick_from_millisecond</a> from Obj/src_clock.o(.fast) referenced from Obj/src_thread.o(.fast)
<li><a href="#[a1]">rt_components_board_init</a> from Obj/src_components.o(.text.rt_components_board_init) referenced from Obj/drivers_system.o(.text.rt_hw_board_init)
<li><a href="#[a3]">rt_application_init</a> from Obj/src_components.o(.text.rt_application_init) referenced from Obj/src_components.o(.text.rtthread_startup)
<li><a href="#[a4]">rtthread_startup</a> from Obj/src_components.o(.text.rtthread_startup) referenced from Obj/src_components.o(.text.entry)
<li><a href="#[a5]">entry</a> from Obj/src_components.o(.text.entry) referenced from Obj/ck803_startup_gcc.o(.text)
<li><a href="#[a8]">rt_device_find</a> from Obj/src_device.o(.fast) referenced from Obj/src_device.o(.text.rt_device_register)
<li><a href="#[a9]">rt_device_register</a> from Obj/src_device.o(.text.rt_device_register) referenced from Obj/sata_sata.o(.text.rt_ata_register)
<li><a href="#[ac]">rt_device_init</a> from Obj/src_device.o(.text.rt_device_init) referenced from Obj/arch_sys_arch.o(.text.netif_device_init)
<li><a href="#[ad]">rt_device_open</a> from Obj/src_device.o(.fast) referenced from Obj/src_kservice.o(.text.rt_console_set_device)
<li><a href="#[ae]">rt_device_close</a> from Obj/src_device.o(.fast) referenced from Obj/src_kservice.o(.text.rt_console_set_device)
<li><a href="#[af]">rt_device_read</a> from Obj/src_device.o(.fast) referenced from Obj/elmfat_dfs_elm.o(.fast)
<li><a href="#[b0]">rt_device_write</a> from Obj/src_device.o(.fast) referenced from Obj/drivers_retarget.o(.text.fputc)
<li><a href="#[b1]">rt_device_control</a> from Obj/src_device.o(.fast) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[b2]">rt_device_set_rx_indicate</a> from Obj/src_device.o(.fast) referenced from Obj/serial_serial.o(.text.serial_fops_close)
<li><a href="#[b5]">rt_thread_idle_init</a> from Obj/src_idle.o(.text.rt_thread_idle_init) referenced from Obj/src_components.o(.text.rtthread_startup)
<li><a href="#[b7]">rt_thread_idle_excute</a> from Obj/src_idle.o(.fast) referenced from Obj/src_idle.o(.fast)
<li><a href="#[ba]">rt_sem_init</a> from Obj/src_ipc.o(.fast) referenced from Obj/src_mem.o(.text.rt_system_heap_init)
<li><a href="#[bb]">rt_sem_detach</a> from Obj/src_ipc.o(.fast) referenced from Obj/arch_sys_arch.o(.text.lwip_system_init)
<li><a href="#[bc]">rt_sem_create</a> from Obj/src_ipc.o(.fast) referenced from Obj/arch_sys_arch.o(.fast)
<li><a href="#[bd]">rt_sem_delete</a> from Obj/src_ipc.o(.fast) referenced from Obj/arch_sys_arch.o(.fast)
<li><a href="#[be]">rt_sem_take</a> from Obj/src_ipc.o(.fast) referenced from Obj/src_ipc.o(.fast)
<li><a href="#[c0]">rt_sem_release</a> from Obj/src_ipc.o(.fast) referenced from Obj/src_mem.o(.fast)
<li><a href="#[c2]">rt_mutex_init</a> from Obj/src_ipc.o(.fast) referenced from Obj/src_dfs.o(.text.dfs_init)
<li><a href="#[c3]">rt_mutex_detach</a> from Obj/src_ipc.o(.fast) referenced from Obj/src_threading_alt.o(.text.threading_mutex_free_rtt)
<li><a href="#[c4]">rt_mutex_create</a> from Obj/src_ipc.o(.fast) referenced from Obj/elmfat_dfs_elm.o(.text.ff_cre_syncobj)
<li><a href="#[c5]">rt_mutex_delete</a> from Obj/src_ipc.o(.fast) referenced from Obj/elmfat_dfs_elm.o(.text.ff_del_syncobj)
<li><a href="#[c6]">rt_mutex_take</a> from Obj/src_ipc.o(.fast) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[c7]">rt_mutex_release</a> from Obj/src_ipc.o(.fast) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[d0]">rt_mb_init</a> from Obj/src_ipc.o(.fast) referenced from Obj/netif_ethernetif.o(.text.eth_system_device_init_private)
<li><a href="#[d2]">rt_mb_create</a> from Obj/src_ipc.o(.fast) referenced from Obj/arch_sys_arch.o(.fast)
<li><a href="#[d3]">rt_mb_delete</a> from Obj/src_ipc.o(.fast) referenced from Obj/arch_sys_arch.o(.fast)
<li><a href="#[d4]">rt_mb_send_wait</a> from Obj/src_ipc.o(.fast) referenced from Obj/src_ipc.o(.fast)
<li><a href="#[d5]">rt_mb_send</a> from Obj/src_ipc.o(.fast) referenced from Obj/arch_sys_arch.o(.fast)
<li><a href="#[d6]">rt_mb_recv</a> from Obj/src_ipc.o(.fast) referenced from Obj/arch_sys_arch.o(.fast)
<li><a href="#[da]">rt_mq_delete</a> from Obj/src_ipc.o(.fast) referenced from Obj/src_ipc.o(.fast)
<li><a href="#[e4]">rt_interrupt_get_nest</a> from Obj/src_irq.o(.fast) referenced from Obj/src_idle.o(.fast)
<li><a href="#[e5]">print_number</a> from Obj/src_kservice.o(.text.print_number) referenced from Obj/src_kservice.o(.text.rt_vsnprintf)
<li><a href="#[e7]">rt_vsnprintf</a> from Obj/src_kservice.o(.text.rt_vsnprintf) referenced from Obj/src_kservice.o(.text.rt_snprintf)
<li><a href="#[e8]">rt_snprintf</a> from Obj/src_kservice.o(.text.rt_snprintf) referenced from Obj/src_dfs.o(.text.dfs_normalize_path)
<li><a href="#[e9]">snprintf</a> from cklib_printf.o(.text.snprintf) referenced from Obj/iperf_iperf.o(.fast)
<li><a href="#[eb]">vsprintf</a> from cklib_printf.o(.text.vsprintf) referenced from common_log.o(.fast)
<li><a href="#[ec]">rt_sprintf</a> from Obj/src_kservice.o(.text.rt_sprintf) referenced from Obj/src_webnet.o(.text.webnet_thread)
<li><a href="#[ed]">sprintf</a> from cklib_printf.o(.text.sprintf) referenced from common_log.o(.fast)
<li><a href="#[ee]">rt_console_get_device</a> from Obj/src_kservice.o(.text.rt_console_get_device) referenced from Obj/drivers_retarget.o(.text.fputc)
<li><a href="#[ef]">rt_console_set_device</a> from Obj/src_kservice.o(.text.rt_console_set_device) referenced from Obj/drivers_system.o(.text.rt_hw_board_init)
<li><a href="#[7a]">rt_hw_console_output</a> from Obj/src_kservice.o(.text.rt_hw_console_output) referenced from Obj/src_kservice.o(.text.rt_kputs)
<li><a href="#[f1]">puts</a> from Obj/src_kservice.o(.text.rt_kputs) referenced from sata_host_ahci.o(.fast)
<li><a href="#[f2]">rt_kprintf</a> from Obj/src_kservice.o(.text.rt_kprintf) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth1_init)
<li><a href="#[f3]">printf</a> from cklib_printf.o(.text.printf) referenced from crypto_crypto.o(.fast)
<li><a href="#[f4]">rt_show_version</a> from Obj/src_kservice.o(.text.rt_show_version) referenced from Obj/src_components.o(.text.rtthread_startup)
<li><a href="#[f5]">xmem_init</a> from Obj/src_kservice.o(.text.xmem_init) referenced from Obj/drivers_system.o(.text.sys_hw_init)
<li><a href="#[f6]">rt_set_errno</a> from Obj/src_kservice.o(.fast) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_write)
<li><a href="#[f7]">_rt_errno</a> from Obj/src_kservice.o(.fast) referenced from Obj/api_sockets.o(.fast)
<li><a href="#[f8]">rt_memset</a> from Obj/src_kservice.o(.fast) referenced from Obj/drivers_drv_i2c.o(.text.drv_i2c_init)
<li><a href="#[f9]">rt_memcpy</a> from Obj/src_kservice.o(.fast) referenced from Obj/src_ipc.o(.fast)
<li><a href="#[fa]">rt_memmove</a> from Obj/src_kservice.o(.fast) referenced from Obj/finsh_shell.o(.text.finsh_thread_entry)
<li><a href="#[fb]">memmove</a> from Obj/src_kservice.o(.fast) referenced from Obj/library_aes_alt.o(.text._mbedtls_aes_crypt_cfb128)
<li><a href="#[fc]">rt_memcmp</a> from Obj/src_kservice.o(.fast) referenced from Obj/utest_utest.o(.text.utest_run)
<li><a href="#[fd]">memcmp</a> from Obj/src_kservice.o(.fast) referenced from Obj/netif_ethernet.o(.fast)
<li><a href="#[fe]">rt_strstr</a> from Obj/src_kservice.o(.fast) referenced from Obj/src_webclient.o(.text.webclient_connect)
<li><a href="#[ff]">strstr</a> from Obj/src_kservice.o(.fast) referenced from Obj/finsh_msh_file.o(.text.msh_exec_script)
<li><a href="#[102]">rt_strncpy</a> from Obj/src_kservice.o(.fast) referenced from Obj/src_object.o(.fast)
<li><a href="#[103]">strncpy</a> from Obj/minilibc_string.o(.fast) referenced from Obj/src_dfs_posix.o(.fast)
<li><a href="#[104]">rt_strncmp</a> from Obj/src_kservice.o(.fast) referenced from Obj/src_device.o(.fast)
<li><a href="#[105]">strncmp</a> from Obj/minilibc_string.o(.fast) referenced from Obj/netif_ethernetif.o(.text.set_if)
<li><a href="#[106]">rt_strcmp</a> from Obj/src_kservice.o(.fast) referenced from Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_lookup)
<li><a href="#[108]">rt_strlen</a> from Obj/src_kservice.o(.fast) referenced from Obj/elmfat_dfs_elm.o(.text.dfs_elm_getdents)
<li><a href="#[109]">strlen</a> from Obj/src_kservice.o(.fast) referenced from cklib_printf.o(.text.vsnprintf)
<li><a href="#[10a]">rt_strdup</a> from Obj/src_kservice.o(.fast) referenced from Obj/src_dfs.o(.text.dfs_normalize_path)
<li><a href="#[10b]">strdup</a> from Obj/src_kservice.o(.fast) referenced from Obj/src_tls_client.o(.text.tls_cli_session_create)
<li><a href="#[10e]">__rt_ffs</a> from Obj/src_kservice.o(.fast) referenced from Obj/src_scheduler.o(.fast)
<li><a href="#[110]">rt_assert_handler</a> from Obj/src_kservice.o(.fast) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[112]">memset</a> from Obj/src_kservice.o(.fast) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth1_init)
<li><a href="#[114]">memcpy</a> from Obj/src_kservice.o(.fast) referenced from Obj/elmfat_dfs_elm.o(.text.get_fattime)
<li><a href="#[115]">list_mem</a> from Obj/src_mem.o(.text.list_mem) referenced from Obj/finsh_msh_cmd.o(.text.cmd_free)
<li><a href="#[116]">plug_holes</a> from Obj/src_mem.o(.fast) referenced from Obj/src_mem.o(.fast)
<li><a href="#[117]">rt_system_heap_init</a> from Obj/src_mem.o(.text.rt_system_heap_init) referenced from Obj/drivers_system.o(.text.rt_hw_board_init)
<li><a href="#[11a]">rt_malloc</a> from Obj/src_mem.o(.fast) referenced from Obj/src_ipc.o(.fast)
<li><a href="#[11b]">rt_calloc</a> from Obj/src_mem.o(.fast) referenced from Obj/src_select.o(.fast)
<li><a href="#[11c]">rt_free</a> from Obj/src_mem.o(.fast) referenced from Obj/src_idle.o(.fast)
<li><a href="#[11d]">rt_realloc</a> from Obj/src_mem.o(.fast) referenced from Obj/src_dfs.o(.text.fd_new)
<li><a href="#[11f]">rt_memheap_init</a> from Obj/src_memheap.o(.text.rt_memheap_init) referenced from Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_create)
<li><a href="#[121]">rt_memheap_alloc</a> from Obj/src_memheap.o(.fast) referenced from Obj/src_memheap.o(.fast)
<li><a href="#[122]">rt_memheap_free</a> from Obj/src_memheap.o(.fast) referenced from Obj/src_memheap.o(.fast)
<li><a href="#[123]">rt_memheap_realloc</a> from Obj/src_memheap.o(.fast) referenced from Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_write)
<li><a href="#[12a]">rt_object_get_information</a> from Obj/src_object.o(.fast) referenced from Obj/src_device.o(.fast)
<li><a href="#[12b]">rt_object_init</a> from Obj/src_object.o(.fast) referenced from Obj/src_device.o(.text.rt_device_register)
<li><a href="#[12c]">rt_object_detach</a> from Obj/src_object.o(.fast) referenced from Obj/src_ipc.o(.fast)
<li><a href="#[12d]">rt_object_allocate</a> from Obj/src_object.o(.fast) referenced from Obj/src_ipc.o(.fast)
<li><a href="#[12e]">rt_object_delete</a> from Obj/src_object.o(.fast) referenced from Obj/src_idle.o(.fast)
<li><a href="#[12f]">rt_object_is_systemobject</a> from Obj/src_object.o(.fast) referenced from Obj/src_idle.o(.fast)
<li><a href="#[132]">rt_system_scheduler_init</a> from Obj/src_scheduler.o(.text.rt_system_scheduler_init) referenced from Obj/src_components.o(.text.rtthread_startup)
<li><a href="#[133]">rt_system_scheduler_start</a> from Obj/src_scheduler.o(.text.rt_system_scheduler_start) referenced from Obj/src_components.o(.text.rtthread_startup)
<li><a href="#[134]">rt_schedule</a> from Obj/src_scheduler.o(.fast) referenced from Obj/src_ipc.o(.fast)
<li><a href="#[135]">rt_schedule_insert_thread</a> from Obj/src_scheduler.o(.fast) referenced from Obj/src_thread.o(.fast)
<li><a href="#[136]">rt_schedule_remove_thread</a> from Obj/src_scheduler.o(.fast) referenced from Obj/src_thread.o(.text.rt_thread_exit)
<li><a href="#[137]">rt_enter_critical</a> from Obj/src_scheduler.o(.fast) referenced from Obj/src_device.o(.fast)
<li><a href="#[138]">rt_exit_critical</a> from Obj/src_scheduler.o(.fast) referenced from Obj/src_device.o(.fast)
<li><a href="#[13c]">_rt_thread_init.isra.0</a> from Obj/src_thread.o(.text._rt_thread_init.isra.0) referenced from Obj/src_thread.o(.text.rt_thread_init)
<li><a href="#[13d]">rt_thread_init</a> from Obj/src_thread.o(.text.rt_thread_init) referenced from Obj/src_idle.o(.text.rt_thread_idle_init)
<li><a href="#[13e]">rt_thread_create</a> from Obj/src_thread.o(.text.rt_thread_create) referenced from Obj/arch_sys_arch.o(.text.sys_thread_new)
<li><a href="#[142]">rt_thread_self</a> from Obj/src_thread.o(.fast) referenced from Obj/src_clock.o(.fast)
<li><a href="#[144]">rt_thread_delete</a> from Obj/src_thread.o(.fast) referenced from Obj/src_thread.o(.fast)
<li><a href="#[145]">rt_thread_yield</a> from Obj/src_thread.o(.fast) referenced from Obj/src_clock.o(.fast)
<li><a href="#[146]">rt_thread_suspend</a> from Obj/src_thread.o(.fast) referenced from Obj/src_ipc.o(.fast)
<li><a href="#[147]">rt_thread_sleep</a> from Obj/src_thread.o(.fast) referenced from Obj/src_thread.o(.fast)
<li><a href="#[148]">rt_thread_delay</a> from Obj/src_thread.o(.fast) referenced from Obj/iperf_iperf.o(.fast)
<li><a href="#[149]">rt_thread_mdelay</a> from Obj/src_thread.o(.fast) referenced from Obj/entry_ipraw.o(.text.iprawtest)
<li><a href="#[14a]">rt_thread_resume</a> from Obj/src_thread.o(.fast) referenced from Obj/src_ipc.o(.fast)
<li><a href="#[14b]">rt_thread_startup</a> from Obj/src_thread.o(.fast) referenced from Obj/src_idle.o(.text.rt_thread_idle_init)
<li><a href="#[14c]">rt_thread_control</a> from Obj/src_thread.o(.fast) referenced from Obj/src_ipc.o(.fast)
<li><a href="#[14d]">rt_thread_find</a> from Obj/src_thread.o(.fast) referenced from Obj/netif_ethernetif.o(.text.eth_device_init_with_flag)
<li><a href="#[14f]">rt_system_timer_thread_init</a> from Obj/src_timer.o(.text.rt_system_timer_thread_init) referenced from Obj/src_components.o(.text.rtthread_startup)
<li><a href="#[150]">rt_timer_init</a> from Obj/src_timer.o(.fast) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth1_init)
<li><a href="#[151]">rt_timer_detach</a> from Obj/src_timer.o(.fast) referenced from Obj/src_thread.o(.text.rt_thread_exit)
<li><a href="#[152]">rt_timer_create</a> from Obj/src_timer.o(.fast) referenced from Obj/src_timing_alt.o(.text.mbedtls_set_alarm)
<li><a href="#[153]">rt_timer_delete</a> from Obj/src_timer.o(.fast) referenced from Obj/src_timing_alt.o(.text.mbedtls_set_alarm)
<li><a href="#[154]">rt_timer_start</a> from Obj/src_timer.o(.fast) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth1_init)
<li><a href="#[155]">rt_timer_stop</a> from Obj/src_timer.o(.fast) referenced from Obj/src_thread.o(.fast)
<li><a href="#[156]">rt_timer_control</a> from Obj/src_timer.o(.fast) referenced from Obj/src_ipc.o(.fast)
<li><a href="#[157]">rt_timer_check</a> from Obj/src_timer.o(.fast) referenced from Obj/src_clock.o(.fast)
<li><a href="#[159]">rt_system_timer_init</a> from Obj/src_timer.o(.fast) referenced from Obj/src_components.o(.text.rtthread_startup)
<li><a href="#[15f]">rt_hw_stack_init</a> from Obj/ck803_stack_ck803.o(.fast) referenced from Obj/src_thread.o(.text._rt_thread_init.isra.0)
<li><a href="#[160]">rt_hw_interrupt_disable</a> from Obj/ck803_contex_ck803_gcc.o(.text) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[161]">rt_hw_interrupt_enable</a> from Obj/ck803_contex_ck803_gcc.o(.text) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[163]">rt_hw_context_switch_to</a> from Obj/ck803_contex_ck803_gcc.o(.text) referenced from Obj/src_scheduler.o(.text.rt_system_scheduler_start)
<li><a href="#[164]">rt_hw_context_switch_interrupt</a> from Obj/ck803_contex_ck803_gcc.o(.text) referenced from Obj/src_scheduler.o(.fast)
<li><a href="#[165]">rt_hw_context_switch</a> from Obj/ck803_contex_ck803_gcc.o(.text) referenced from Obj/src_scheduler.o(.fast)
<li><a href="#[16c]">rt_hw_show_memory</a> from Obj/common_showmem.o(.text.rt_hw_show_memory) referenced from Obj/common_showmem.o(.text.rt_show_memory)
<li><a href="#[170]">dfs_lock</a> from Obj/src_dfs.o(.fast) referenced from Obj/src_dfs.o(.fast)
<li><a href="#[171]">fd_new</a> from Obj/src_dfs.o(.text.fd_new) referenced from Obj/src_dfs_posix.o(.text.mkdir)
<li><a href="#[172]">dfs_subdir</a> from Obj/src_dfs.o(.text.dfs_subdir) referenced from Obj/src_dfs_file.o(.text.dfs_file_open)
<li><a href="#[173]">dfs_normalize_path</a> from Obj/src_dfs.o(.text.dfs_normalize_path) referenced from Obj/src_dfs.o(.fast)
<li><a href="#[174]">dfs_unlock</a> from Obj/src_dfs.o(.fast) referenced from Obj/src_dfs_posix.o(.text.chdir)
<li><a href="#[175]">fd_get</a> from Obj/src_dfs.o(.fast) referenced from Obj/src_dfs_posix.o(.text.mkdir)
<li><a href="#[176]">fd_put</a> from Obj/src_dfs.o(.fast) referenced from Obj/src_dfs_posix.o(.text.mkdir)
<li><a href="#[177]">fd_is_open</a> from Obj/src_dfs.o(.fast) referenced from Obj/src_dfs_file.o(.text.dfs_file_open)
<li><a href="#[179]">dfs_file_open</a> from Obj/src_dfs_file.o(.text.dfs_file_open) referenced from Obj/src_dfs_file.o(.text.cat)
<li><a href="#[17a]">dfs_file_close</a> from Obj/src_dfs_file.o(.text.dfs_file_close) referenced from Obj/src_dfs_file.o(.text.cat)
<li><a href="#[17b]">cat</a> from Obj/src_dfs_file.o(.text.cat) referenced from Obj/finsh_msh_cmd.o(.text.cmd_cat)
<li><a href="#[17c]">copyfile</a> from Obj/src_dfs_file.o(.text.copyfile) referenced from Obj/src_dfs_file.o(.text.copydir)
<li><a href="#[17d]">dfs_file_ioctl</a> from Obj/src_dfs_file.o(.text.dfs_file_ioctl) referenced from Obj/src_dfs_posix.o(.text.fcntl)
<li><a href="#[17e]">dfs_file_read</a> from Obj/src_dfs_file.o(.fast) referenced from Obj/src_dfs_posix.o(.fast)
<li><a href="#[17f]">dfs_file_unlink</a> from Obj/src_dfs_file.o(.text.dfs_file_unlink) referenced from Obj/src_dfs_file.o(.text.rm)
<li><a href="#[181]">dfs_file_stat</a> from Obj/src_dfs_file.o(.text.dfs_file_stat) referenced from Obj/src_dfs_file.o(.text.ls)
<li><a href="#[182]">ls</a> from Obj/src_dfs_file.o(.text.ls) referenced from Obj/finsh_msh_cmd.o(.text.cmd_ls)
<li><a href="#[183]">copydir</a> from Obj/src_dfs_file.o(.text.copydir) referenced from Obj/src_dfs_file.o(.text.copydir)
<li><a href="#[184]">copy</a> from Obj/src_dfs_file.o(.text.copy) referenced from Obj/finsh_msh_cmd.o(.text.cmd_cp)
<li><a href="#[185]">dfs_file_rename</a> from Obj/src_dfs_file.o(.text.dfs_file_rename) referenced from Obj/src_dfs_posix.o(.text.rename)
<li><a href="#[186]">dfs_file_getdents</a> from Obj/src_dfs_file.o(.fast) referenced from Obj/src_dfs_posix.o(.fast)
<li><a href="#[187]">dfs_file_write</a> from Obj/src_dfs_file.o(.fast) referenced from Obj/src_dfs_posix.o(.fast)
<li><a href="#[188]">dfs_file_flush</a> from Obj/src_dfs_file.o(.fast) referenced from Obj/src_dfs_posix.o(.fast)
<li><a href="#[189]">dfs_file_lseek</a> from Obj/src_dfs_file.o(.fast) referenced from Obj/src_dfs_posix.o(.fast)
<li><a href="#[18a]">dfs_register</a> from Obj/src_dfs_fs.o(.text.dfs_register) referenced from Obj/elmfat_dfs_elm.o(.text.elm_init)
<li><a href="#[18b]">dfs_filesystem_lookup</a> from Obj/src_dfs_fs.o(.text.dfs_filesystem_lookup) referenced from Obj/src_dfs.o(.fast)
<li><a href="#[18e]">dfs_mount</a> from Obj/src_dfs_fs.o(.text.dfs_mount) referenced from Obj/src_dfs.o(.text.dfs_init)
<li><a href="#[190]">dfs_mkfs</a> from Obj/src_dfs_fs.o(.text.dfs_mkfs) referenced from Obj/src_dfs_fs.o(.text.mkfs)
<li><a href="#[192]">dfs_statfs</a> from Obj/src_dfs_fs.o(.text.dfs_statfs) referenced from Obj/src_dfs_fs.o(.text.df)
<li><a href="#[193]">df</a> from Obj/src_dfs_fs.o(.text.df) referenced from Obj/finsh_msh_cmd.o(.text.cmd_df)
<li><a href="#[194]">mkdir</a> from Obj/src_dfs_posix.o(.text.mkdir) referenced from Obj/src_dfs_file.o(.text.copydir)
<li><a href="#[195]">open</a> from Obj/src_dfs_posix.o(.text.open) referenced from Obj/finsh_msh_cmd.o(.text.cmd_mv)
<li><a href="#[196]">close</a> from Obj/src_dfs_posix.o(.text.close) referenced from Obj/finsh_msh_cmd.o(.text.cmd_mv)
<li><a href="#[197]">read</a> from Obj/src_dfs_posix.o(.fast) referenced from Obj/finsh_msh_file.o(.text.msh_exec_script)
<li><a href="#[198]">rename</a> from Obj/src_dfs_posix.o(.text.rename) referenced from Obj/finsh_msh_cmd.o(.text.cmd_mv)
<li><a href="#[199]">stat</a> from Obj/src_dfs_posix.o(.text.stat) referenced from Obj/module_wn_module_index.o(.text.webnet_module_dirindex)
<li><a href="#[19b]">fcntl</a> from Obj/src_dfs_posix.o(.text.fcntl) referenced from Obj/src_tls_net.o(.text.mbedtls_net_accept)
<li><a href="#[19e]">rmdir</a> from Obj/src_dfs_posix.o(.text.rmdir) referenced from Obj/src_dfs_posix.o(.text.unlink)
<li><a href="#[19f]">unlink</a> from Obj/src_dfs_posix.o(.text.unlink) referenced from Obj/finsh_msh_cmd.o(.text.cmd_rm)
<li><a href="#[1a0]">opendir</a> from Obj/src_dfs_posix.o(.text.opendir) referenced from Obj/src_dfs_posix.o(.text.chdir)
<li><a href="#[1a2]">rewinddir</a> from Obj/src_dfs_posix.o(.text.rewinddir) referenced from Obj/finsh_msh.o(.text.msh_auto_complete_path)
<li><a href="#[1a3]">closedir</a> from Obj/src_dfs_posix.o(.text.closedir) referenced from Obj/src_dfs_posix.o(.text.chdir)
<li><a href="#[1a4]">chdir</a> from Obj/src_dfs_posix.o(.text.chdir) referenced from Obj/finsh_msh.o(.text.msh_exec)
<li><a href="#[1a6]">write</a> from Obj/src_dfs_posix.o(.fast) referenced from Obj/finsh_msh_cmd.o(.text.cmd_echo)
<li><a href="#[1a7]">lseek</a> from Obj/src_dfs_posix.o(.fast) referenced from Obj/src_wn_module.o(.text._webnet_dofile_handle)
<li><a href="#[1a9]">readdir</a> from Obj/src_dfs_posix.o(.fast) referenced from Obj/finsh_msh.o(.text.msh_auto_complete_path)
<li><a href="#[1ab]">getcwd</a> from Obj/src_dfs_posix.o(.fast) referenced from Obj/finsh_shell.o(.text.finsh_get_prompt)
<li><a href="#[1ae]">poll</a> from Obj/src_poll.o(.fast) referenced from Obj/src_select.o(.fast)
<li><a href="#[1af]">select</a> from Obj/src_select.o(.fast) referenced from Obj/iperf_iperf.o(.fast)
<li><a href="#[1b9]">devfs_init</a> from Obj/devfs_devfs.o(.text.devfs_init) referenced from Obj/src_dfs.o(.text.dfs_init)
<li><a href="#[1ca]">disk_initialize</a> from Obj/elmfat_dfs_elm.o(.text.disk_initialize) referenced from Obj/elmfat_ff.o(.text.find_volume)
<li><a href="#[1cb]">disk_status</a> from Obj/elmfat_dfs_elm.o(.text.disk_status) referenced from Obj/elmfat_ff.o(.text.validate)
<li><a href="#[1cc]">get_fattime</a> from Obj/elmfat_dfs_elm.o(.text.get_fattime) referenced from Obj/elmfat_ff.o(.text.f_open)
<li><a href="#[1cd]">ff_cre_syncobj</a> from Obj/elmfat_dfs_elm.o(.text.ff_cre_syncobj) referenced from Obj/elmfat_ff.o(.text.f_mount)
<li><a href="#[1ce]">ff_del_syncobj</a> from Obj/elmfat_dfs_elm.o(.text.ff_del_syncobj) referenced from Obj/elmfat_ff.o(.text.f_mount)
<li><a href="#[1cf]">ff_memalloc</a> from Obj/elmfat_dfs_elm.o(.text.ff_memalloc) referenced from Obj/elmfat_ff.o(.text.f_open)
<li><a href="#[1d0]">ff_memfree</a> from Obj/elmfat_dfs_elm.o(.text.ff_memfree) referenced from Obj/elmfat_ff.o(.text.f_open)
<li><a href="#[1d2]">disk_read</a> from Obj/elmfat_dfs_elm.o(.fast) referenced from Obj/elmfat_ff.o(.fast)
<li><a href="#[1d3]">disk_write</a> from Obj/elmfat_dfs_elm.o(.fast) referenced from Obj/elmfat_ff.o(.fast)
<li><a href="#[1d4]">disk_ioctl</a> from Obj/elmfat_dfs_elm.o(.fast) referenced from Obj/elmfat_ff.o(.text.sync_fs)
<li><a href="#[1d5]">ff_req_grant</a> from Obj/elmfat_dfs_elm.o(.fast) referenced from Obj/elmfat_ff.o(.text.validate)
<li><a href="#[1d6]">ff_rel_grant</a> from Obj/elmfat_dfs_elm.o(.fast) referenced from Obj/elmfat_ff.o(.fast)
<li><a href="#[1d7]">get_ldnumber</a> from Obj/elmfat_ff.o(.text.get_ldnumber) referenced from Obj/elmfat_ff.o(.text.find_volume)
<li><a href="#[1d8]">xname_sum</a> from Obj/elmfat_ff.o(.text.xname_sum) referenced from Obj/elmfat_ff.o(.text.dir_find)
<li><a href="#[1d9]">validate</a> from Obj/elmfat_ff.o(.text.validate) referenced from Obj/elmfat_ff.o(.fast)
<li><a href="#[1da]">sync_window.part.5</a> from Obj/elmfat_ff.o(.fast) referenced from Obj/elmfat_ff.o(.fast)
<li><a href="#[1db]">dir_sdi</a> from Obj/elmfat_ff.o(.text.dir_sdi) referenced from Obj/elmfat_ff.o(.text.dir_alloc)
<li><a href="#[1dc]">sync_fs</a> from Obj/elmfat_ff.o(.text.sync_fs) referenced from Obj/elmfat_ff.o(.text.f_sync)
<li><a href="#[1dd]">check_fs</a> from Obj/elmfat_ff.o(.text.check_fs) referenced from Obj/elmfat_ff.o(.text.find_volume)
<li><a href="#[1de]">find_volume</a> from Obj/elmfat_ff.o(.text.find_volume) referenced from Obj/elmfat_ff.o(.text.f_mount)
<li><a href="#[1df]">remove_chain</a> from Obj/elmfat_ff.o(.text.remove_chain) referenced from Obj/elmfat_ff.o(.text.f_open)
<li><a href="#[1e0]">fill_fat_chain.part.8</a> from Obj/elmfat_ff.o(.text.fill_fat_chain.part.8) referenced from Obj/elmfat_ff.o(.text.dir_register)
<li><a href="#[1e1]">unlock_fs.part.9</a> from Obj/elmfat_ff.o(.text.unlock_fs.part.9) referenced from Obj/elmfat_ff.o(.fast)
<li><a href="#[1e2]">get_fileinfo</a> from Obj/elmfat_ff.o(.text.get_fileinfo) referenced from Obj/elmfat_ff.o(.text.f_readdir)
<li><a href="#[1e3]">dir_next</a> from Obj/elmfat_ff.o(.text.dir_next) referenced from Obj/elmfat_ff.o(.text.load_xdir)
<li><a href="#[1e4]">load_xdir</a> from Obj/elmfat_ff.o(.text.load_xdir) referenced from Obj/elmfat_ff.o(.text.dir_read.constprop.11)
<li><a href="#[1e5]">dir_alloc</a> from Obj/elmfat_ff.o(.text.dir_alloc) referenced from Obj/elmfat_ff.o(.text.dir_register)
<li><a href="#[1e6]">store_xdir</a> from Obj/elmfat_ff.o(.text.store_xdir) referenced from Obj/elmfat_ff.o(.text.dir_register)
<li><a href="#[1e7]">dir_remove</a> from Obj/elmfat_ff.o(.text.dir_remove) referenced from Obj/elmfat_ff.o(.text.f_unlink)
<li><a href="#[1e8]">dir_read.constprop.11</a> from Obj/elmfat_ff.o(.text.dir_read.constprop.11) referenced from Obj/elmfat_ff.o(.text.dir_find)
<li><a href="#[1e9]">dir_find</a> from Obj/elmfat_ff.o(.text.dir_find) referenced from Obj/elmfat_ff.o(.text.follow_path)
<li><a href="#[1ea]">follow_path</a> from Obj/elmfat_ff.o(.text.follow_path) referenced from Obj/elmfat_ff.o(.text.f_open)
<li><a href="#[1eb]">dir_register</a> from Obj/elmfat_ff.o(.text.dir_register) referenced from Obj/elmfat_ff.o(.text.f_open)
<li><a href="#[1ec]">f_mount</a> from Obj/elmfat_ff.o(.text.f_mount) referenced from Obj/elmfat_dfs_elm.o(.text.dfs_elm_mount)
<li><a href="#[1ed]">f_open</a> from Obj/elmfat_ff.o(.text.f_open) referenced from Obj/elmfat_dfs_elm.o(.text.dfs_elm_open)
<li><a href="#[1ee]">f_sync</a> from Obj/elmfat_ff.o(.text.f_sync) referenced from Obj/elmfat_dfs_elm.o(.text.dfs_elm_flush)
<li><a href="#[1ef]">f_close</a> from Obj/elmfat_ff.o(.text.f_close) referenced from Obj/elmfat_dfs_elm.o(.text.dfs_elm_close)
<li><a href="#[1f0]">f_lseek</a> from Obj/elmfat_ff.o(.text.f_lseek) referenced from Obj/elmfat_dfs_elm.o(.text.dfs_elm_open)
<li><a href="#[1f1]">f_opendir</a> from Obj/elmfat_ff.o(.text.f_opendir) referenced from Obj/elmfat_dfs_elm.o(.text.dfs_elm_mount)
<li><a href="#[1f3]">f_readdir</a> from Obj/elmfat_ff.o(.text.f_readdir) referenced from Obj/elmfat_dfs_elm.o(.text.dfs_elm_getdents)
<li><a href="#[1f4]">f_seekdir</a> from Obj/elmfat_ff.o(.text.f_seekdir) referenced from Obj/elmfat_dfs_elm.o(.text.dfs_elm_lseek)
<li><a href="#[1f5]">f_stat</a> from Obj/elmfat_ff.o(.text.f_stat) referenced from Obj/elmfat_dfs_elm.o(.text.dfs_elm_stat)
<li><a href="#[1f6]">f_getfree</a> from Obj/elmfat_ff.o(.text.f_getfree) referenced from Obj/elmfat_dfs_elm.o(.text.dfs_elm_statfs)
<li><a href="#[1f8]">f_unlink</a> from Obj/elmfat_ff.o(.text.f_unlink) referenced from Obj/elmfat_dfs_elm.o(.text.dfs_elm_unlink)
<li><a href="#[1f9]">f_mkdir</a> from Obj/elmfat_ff.o(.text.f_mkdir) referenced from Obj/elmfat_dfs_elm.o(.text.dfs_elm_open)
<li><a href="#[1fa]">f_rename</a> from Obj/elmfat_ff.o(.text.f_rename) referenced from Obj/elmfat_dfs_elm.o(.text.dfs_elm_rename)
<li><a href="#[1fb]">f_mkfs</a> from Obj/elmfat_ff.o(.text.f_mkfs) referenced from Obj/elmfat_dfs_elm.o(.text.dfs_elm_mkfs)
<li><a href="#[1fc]">elm_get_vol</a> from Obj/elmfat_ff.o(.text.elm_get_vol) referenced from Obj/elmfat_dfs_elm.o(.text.dfs_elm_open)
<li><a href="#[202]">f_read</a> from Obj/elmfat_ff.o(.fast) referenced from Obj/elmfat_dfs_elm.o(.fast)
<li><a href="#[203]">f_write</a> from Obj/elmfat_ff.o(.fast) referenced from Obj/elmfat_dfs_elm.o(.fast)
<li><a href="#[204]">ff_convert</a> from Obj/option_ccsbcs.o(.text.ff_convert) referenced from Obj/elmfat_ff.o(.text.get_fileinfo)
<li><a href="#[205]">ff_wtoupper</a> from Obj/option_ccsbcs.o(.text.ff_wtoupper) referenced from Obj/elmfat_ff.o(.text.xname_sum)
<li><a href="#[20a]">dfs_net_get_fops</a> from Obj/net_dfs_net.o(.text.dfs_net_get_fops) referenced from Obj/net_net_sockets.o(.text.accept)
<li><a href="#[20c]">dfs_net_getsocket</a> from Obj/net_dfs_net.o(.fast) referenced from Obj/net_net_sockets.o(.text.accept)
<li><a href="#[20d]">gethostbyname</a> from Obj/net_net_netdb.o(.text.gethostbyname) referenced from Obj/ntp_ntp.o(.text.sendto_ntp_server)
<li><a href="#[20f]">freeaddrinfo</a> from Obj/net_net_netdb.o(.text.freeaddrinfo) referenced from Obj/entry_ipraw.o(.text.iprawtest)
<li><a href="#[210]">getaddrinfo</a> from Obj/net_net_netdb.o(.text.getaddrinfo) referenced from Obj/entry_ipraw.o(.text.iprawtest)
<li><a href="#[212]">accept</a> from Obj/net_net_sockets.o(.text.accept) referenced from Obj/iperf_iperf.o(.fast)
<li><a href="#[213]">bind</a> from Obj/net_net_sockets.o(.text.bind) referenced from Obj/iperf_iperf.o(.fast)
<li><a href="#[216]">getsockname</a> from Obj/net_net_sockets.o(.text.getsockname) referenced from Obj/src_tls_net.o(.text.mbedtls_net_accept)
<li><a href="#[217]">getsockopt</a> from Obj/net_net_sockets.o(.text.getsockopt) referenced from Obj/src_tls_net.o(.text.mbedtls_net_accept)
<li><a href="#[218]">setsockopt</a> from Obj/net_net_sockets.o(.text.setsockopt) referenced from Obj/iperf_iperf.o(.fast)
<li><a href="#[219]">connect</a> from Obj/net_net_sockets.o(.text.connect) referenced from Obj/iperf_iperf.o(.fast)
<li><a href="#[21a]">listen</a> from Obj/net_net_sockets.o(.text.listen) referenced from Obj/iperf_iperf.o(.fast)
<li><a href="#[21b]">recv</a> from Obj/net_net_sockets.o(.fast) referenced from Obj/iperf_iperf.o(.fast)
<li><a href="#[21c]">socket</a> from Obj/net_net_sockets.o(.text.socket) referenced from Obj/iperf_iperf.o(.fast)
<li><a href="#[21d]">closesocket</a> from Obj/net_net_sockets.o(.text.closesocket) referenced from Obj/iperf_iperf.o(.fast)
<li><a href="#[21f]">recvfrom</a> from Obj/net_net_sockets.o(.fast) referenced from Obj/iperf_iperf.o(.fast)
<li><a href="#[220]">send</a> from Obj/net_net_sockets.o(.fast) referenced from Obj/iperf_iperf.o(.fast)
<li><a href="#[221]">sendto</a> from Obj/net_net_sockets.o(.fast) referenced from Obj/iperf_iperf.o(.fast)
<li><a href="#[22c]">dfs_ramfs_lookup</a> from Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_lookup) referenced from Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_open)
<li><a href="#[231]">dfs_ramfs_create</a> from Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_create) referenced from Obj/samples_wn_sample.o(.text.webnet_test)
<li><a href="#[23a]">dfs_romfs_lookup</a> from Obj/romfs_dfs_romfs.o(.text.dfs_romfs_lookup) referenced from Obj/romfs_dfs_romfs.o(.text.dfs_romfs_open)
<li><a href="#[241]">clock_cpu_setops</a> from Obj/cputime_cputime.o(.text.clock_cpu_setops) referenced from Obj/drivers_drv_cputime.o(.text.drv_cputime_init)
<li><a href="#[248]">rt_crypto_register</a> from Obj/crypto_crypto_dev.o(.text.rt_crypto_register) referenced from Obj/drivers_drv_crypto.o(.text.drv_crypto_init)
<li><a href="#[24f]">rt_device_hwtimer_isr</a> from Obj/hwtimer_hwtimer.o(.text.rt_device_hwtimer_isr) referenced from Obj/drivers_drv_timer.o(.fast)
<li><a href="#[250]">rt_device_hwtimer_register</a> from Obj/hwtimer_hwtimer.o(.text.rt_device_hwtimer_register) referenced from Obj/drivers_drv_timer.o(.text.drv_timers_init)
<li><a href="#[252]">rt_i2c_bus_device_register</a> from Obj/i2c_i2c_core.o(.text.rt_i2c_bus_device_register) referenced from Obj/drivers_drv_i2c.o(.text.drv_i2c_init)
<li><a href="#[253]">rt_i2c_bus_device_find</a> from Obj/i2c_i2c_core.o(.text.rt_i2c_bus_device_find) referenced from Obj/i2c_i2c_eeprom.o(.text.eeprom_24aa128_init)
<li><a href="#[254]">rt_i2c_transfer</a> from Obj/i2c_i2c_core.o(.text.rt_i2c_transfer) referenced from Obj/i2c_i2c_core.o(.text.rt_i2c_master_send)
<li><a href="#[255]">rt_i2c_master_send</a> from Obj/i2c_i2c_core.o(.text.rt_i2c_master_send) referenced from Obj/i2c_i2c_dev.o(.text.i2c_bus_device_write)
<li><a href="#[256]">rt_i2c_master_recv</a> from Obj/i2c_i2c_core.o(.text.rt_i2c_master_recv) referenced from Obj/i2c_i2c_dev.o(.text.i2c_bus_device_read)
<li><a href="#[25a]">rt_i2c_bus_device_device_init</a> from Obj/i2c_i2c_dev.o(.text.rt_i2c_bus_device_device_init) referenced from Obj/i2c_i2c_core.o(.text.rt_i2c_bus_device_register)
<li><a href="#[270]">rt_device_pin_register</a> from Obj/misc_pin.o(.text.rt_device_pin_register) referenced from Obj/drivers_drv_gpio.o(.text.drv_pin_init)
<li><a href="#[274]">set_date</a> from Obj/rtc_rtc.o(.text.set_date) referenced from Obj/rtc_rtc.o(.text.date)
<li><a href="#[275]">set_time</a> from Obj/rtc_rtc.o(.text.set_time) referenced from Obj/rtc_rtc.o(.text.date)
<li><a href="#[27e]">rt_ata_register</a> from Obj/sata_sata.o(.text.rt_ata_register) referenced from Obj/drivers_drv_sata.o(.text.drv_ata_register)
<li><a href="#[283]">_serial_fifo_calc_recved_len</a> from Obj/serial_serial.o(.text._serial_fifo_calc_recved_len) referenced from Obj/serial_serial.o(.text.rt_serial_control)
<li><a href="#[291]">rt_hw_serial_register</a> from Obj/serial_serial.o(.text.rt_hw_serial_register) referenced from Obj/drivers_drv_uart.o(.text.drv_uart_init)
<li><a href="#[292]">rt_hw_serial_isr</a> from Obj/serial_serial.o(.text.rt_hw_serial_isr) referenced from Obj/drivers_drv_uart.o(.fast)
<li><a href="#[293]">rt_spi_bus_register</a> from Obj/spi_spi_core.o(.text.rt_spi_bus_register) referenced from Obj/drivers_drv_spi.o(.text.drv_spi_init)
<li><a href="#[294]">rt_spi_bus_attach_device</a> from Obj/spi_spi_core.o(.text.rt_spi_bus_attach_device) referenced from Obj/spi_spi_adc.o(.text.mcp3202_init)
<li><a href="#[295]">rt_spi_configure</a> from Obj/spi_spi_core.o(.text.rt_spi_configure) referenced from Obj/spi_spi_adc.o(.text.mcp3202_init)
<li><a href="#[298]">rt_spi_transfer</a> from Obj/spi_spi_core.o(.text.rt_spi_transfer) referenced from Obj/spi_spi_dev.o(.text._spi_bus_device_write)
<li><a href="#[299]">rt_spi_transfer_message</a> from Obj/spi_spi_core.o(.text.rt_spi_transfer_message) referenced from Obj/spi_spi_adc.o(.text.mcp3202_adc_read)
<li><a href="#[2a4]">rt_spi_bus_device_init</a> from Obj/spi_spi_dev.o(.text.rt_spi_bus_device_init) referenced from Obj/spi_spi_core.o(.text.rt_spi_bus_register)
<li><a href="#[2a5]">rt_spidev_device_init</a> from Obj/spi_spi_dev.o(.text.rt_spidev_device_init) referenced from Obj/spi_spi_core.o(.text.rt_spi_bus_attach_device)
<li><a href="#[2b1]">rt_hw_watchdog_register</a> from Obj/watchdog_watchdog.o(.text.rt_hw_watchdog_register) referenced from Obj/drivers_drv_wdt.o(.text.drv_wdt_init)
<li><a href="#[2b2]">rt_completion_init</a> from Obj/src_completion.o(.text.rt_completion_init) referenced from Obj/serial_serial.o(.text.rt_serial_open)
<li><a href="#[2b3]">rt_completion_wait</a> from Obj/src_completion.o(.fast) referenced from Obj/serial_serial.o(.text.rt_serial_write)
<li><a href="#[2b4]">rt_completion_done</a> from Obj/src_completion.o(.fast) referenced from Obj/serial_serial.o(.text.rt_hw_serial_isr)
<li><a href="#[2b5]">rt_data_queue_init</a> from Obj/src_dataqueue.o(.text.rt_data_queue_init) referenced from Obj/serial_serial.o(.text.rt_serial_open)
<li><a href="#[2b6]">rt_data_queue_push</a> from Obj/src_dataqueue.o(.fast) referenced from Obj/serial_serial.o(.text.rt_serial_write)
<li><a href="#[2b7]">rt_data_queue_pop</a> from Obj/src_dataqueue.o(.fast) referenced from Obj/serial_serial.o(.text.rt_hw_serial_isr)
<li><a href="#[2b8]">rt_data_queue_peak</a> from Obj/src_dataqueue.o(.fast) referenced from Obj/serial_serial.o(.text.rt_hw_serial_isr)
<li><a href="#[2d4]">__wqueue_default_wake</a> from Obj/src_waitqueue.o(.fast) referenced from Obj/src_poll.o(.fast)
<li><a href="#[2d5]">rt_wqueue_add</a> from Obj/src_waitqueue.o(.fast) referenced from Obj/src_poll.o(.fast)
<li><a href="#[2d6]">rt_wqueue_remove</a> from Obj/src_waitqueue.o(.fast) referenced from Obj/src_poll.o(.fast)
<li><a href="#[2d7]">rt_wqueue_wakeup</a> from Obj/src_waitqueue.o(.fast) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[2d8]">rt_wqueue_wait</a> from Obj/src_waitqueue.o(.fast) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[2e4]">finsh_get_prompt</a> from Obj/finsh_shell.o(.text.finsh_get_prompt) referenced from Obj/finsh_shell.o(.text.shell_handle_history)
<li><a href="#[2e5]">shell_handle_history</a> from Obj/finsh_shell.o(.text.shell_handle_history) referenced from Obj/finsh_shell.o(.text.finsh_thread_entry)
<li><a href="#[2e8]">finsh_set_device</a> from Obj/finsh_shell.o(.text.finsh_set_device) referenced from Obj/finsh_shell.o(.text.finsh_thread_entry)
<li><a href="#[2f0]">show_wait_queue</a> from Obj/finsh_cmd.o(.text.show_wait_queue) referenced from Obj/finsh_cmd.o(.text.list_sem)
<li><a href="#[2f2]">object_name_maxlen</a> from Obj/finsh_cmd.o(.text.object_name_maxlen) referenced from Obj/finsh_cmd.o(.text.list_thread)
<li><a href="#[2f3]">list_thread</a> from Obj/finsh_cmd.o(.text.list_thread) referenced from Obj/src_scheduler.o(.fast)
<li><a href="#[2fd]">msh_help</a> from Obj/finsh_msh.o(.text.msh_help) referenced from Obj/finsh_msh.o(.text.msh_auto_complete)
<li><a href="#[2fe]">msh_is_used</a> from Obj/finsh_msh.o(.text.msh_is_used) referenced from Obj/finsh_shell.o(.text.finsh_get_prompt)
<li><a href="#[2ff]">msh_exec</a> from Obj/finsh_msh.o(.text.msh_exec) referenced from Obj/finsh_shell.o(.text.finsh_thread_entry)
<li><a href="#[300]">msh_auto_complete_path</a> from Obj/finsh_msh.o(.text.msh_auto_complete_path) referenced from Obj/finsh_msh.o(.text.msh_auto_complete)
<li><a href="#[301]">msh_auto_complete</a> from Obj/finsh_msh.o(.text.msh_auto_complete) referenced from Obj/finsh_shell.o(.text.finsh_thread_entry)
<li><a href="#[313]">msh_exec_script</a> from Obj/finsh_msh_file.o(.text.msh_exec_script) referenced from Obj/finsh_msh.o(.text.msh_exec)
<li><a href="#[314]">malloc</a> from cklib_malloc.o(.text.malloc) referenced from Obj/iperf_iperf.o(.fast)
<li><a href="#[315]">free</a> from cklib_malloc.o(.text.free) referenced from Obj/iperf_iperf.o(.fast)
<li><a href="#[317]">calloc</a> from cklib_malloc.o(.text.calloc) referenced from Obj/iperf_iperf.o(.fast)
<li><a href="#[318]">strcpy</a> from Obj/minilibc_string.o(.fast) referenced from Obj/netif_ethernetif.o(.text.list_udps)
<li><a href="#[103]">strncpy</a> from Obj/minilibc_string.o(.fast) referenced from Obj/src_dfs_posix.o(.fast)
<li><a href="#[31a]">strcmp</a> from Obj/minilibc_string.o(.fast) referenced from Obj/src_dfs.o(.fast)
<li><a href="#[105]">strncmp</a> from Obj/minilibc_string.o(.fast) referenced from Obj/netif_ethernetif.o(.text.set_if)
<li><a href="#[31d]">strrchr</a> from Obj/minilibc_string.o(.fast) referenced from Obj/src_dfs_file.o(.text.copy)
<li><a href="#[31e]">strncasecmp</a> from Obj/minilibc_string.o(.fast) referenced from Obj/src_wn_utils.o(.text.str_path_with)
<li><a href="#[31f]">tolower</a> from Obj/minilibc_string.o(.fast) referenced from Obj/src_wn_utils.o(.text.urldecode)
<li><a href="#[321]">simple_strtoul</a> from Obj/minilibc_string.o(.fast) referenced from Obj/minilibc_string.o(.fast)
<li><a href="#[322]">simple_strtol</a> from Obj/minilibc_string.o(.fast) referenced from Obj/minilibc_string.o(.fast)
<li><a href="#[323]">simple_strtoull</a> from Obj/minilibc_string.o(.fast) referenced from Obj/minilibc_string.o(.fast)
<li><a href="#[324]">simple_strtoll</a> from Obj/minilibc_string.o(.fast) referenced from Obj/minilibc_string.o(.fast)
<li><a href="#[325]">vsscanf</a> from Obj/minilibc_string.o(.fast) referenced from Obj/minilibc_string.o(.fast)
<li><a href="#[327]">strspn</a> from Obj/minilibc_string.o(.fast) referenced from Obj/minilibc_string.o(.fast)
<li><a href="#[328]">strcspn</a> from Obj/minilibc_string.o(.fast) referenced from Obj/minilibc_string.o(.fast)
<li><a href="#[329]">strtok_r</a> from Obj/minilibc_string.o(.fast) referenced from Obj/minilibc_string.o(.fast)
<li><a href="#[32b]">strchr</a> from Obj/minilibc_string.o(.fast) referenced from Obj/netif_ethernetif.o(.text.set_if)
<li><a href="#[32c]">strtol</a> from Obj/minilibc_string.o(.fast) referenced from atoi.o(.text)
<li><a href="#[32f]">gmtime_r</a> from Obj/minilibc_time.o(.fast) referenced from Obj/minilibc_time.o(.fast)
<li><a href="#[330]">mktime</a> from Obj/minilibc_time.o(.fast) referenced from Obj/elmfat_dfs_elm.o(.text.dfs_elm_stat)
<li><a href="#[331]">asctime_r</a> from Obj/minilibc_time.o(.fast) referenced from Obj/minilibc_time.o(.fast)
<li><a href="#[333]">gettimeofday</a> from Obj/minilibc_time.o(.fast) referenced from Obj/minilibc_time.o(.fast)
<li><a href="#[334]">localtime_r</a> from Obj/minilibc_time.o(.fast) referenced from Obj/minilibc_time.o(.fast)
<li><a href="#[335]">localtime</a> from Obj/minilibc_time.o(.fast) referenced from Obj/elmfat_dfs_elm.o(.text.get_fattime)
<li><a href="#[336]">ctime</a> from Obj/minilibc_time.o(.fast) referenced from Obj/rtc_rtc.o(.text.list_date)
<li><a href="#[338]">time</a> from Obj/minilibc_time.o(.fast) referenced from Obj/elmfat_dfs_elm.o(.text.get_fattime)
<li><a href="#[342]">sys_init</a> from Obj/arch_sys_arch.o(.text.sys_init) referenced from Obj/core_init.o(.text.lwip_init)
<li><a href="#[343]">sys_sem_new</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/api_api_lib.o(.text.netconn_gethostbyname)
<li><a href="#[344]">sys_thread_new</a> from Obj/arch_sys_arch.o(.text.sys_thread_new) referenced from Obj/api_tcpip.o(.text.tcpip_init)
<li><a href="#[348]">mem_init</a> from Obj/arch_sys_arch.o(.text.mem_init) referenced from Obj/core_init.o(.text.lwip_init)
<li><a href="#[34a]">mem_trim</a> from Obj/arch_sys_arch.o(.text.mem_trim) referenced from Obj/core_pbuf.o(.fast)
<li><a href="#[34b]">sys_sem_free</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/api_api_lib.o(.text.netconn_new_with_proto_and_callback)
<li><a href="#[34c]">sys_sem_signal</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/api_api_msg.o(.fast)
<li><a href="#[34d]">sys_arch_sem_wait</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/api_api_lib.o(.text.netconn_gethostbyname)
<li><a href="#[34e]">sys_sem_valid</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/api_api_lib.o(.text.netconn_new_with_proto_and_callback)
<li><a href="#[34f]">sys_sem_set_invalid</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/api_api_msg.o(.text.netconn_free)
<li><a href="#[350]">sys_mutex_new</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/api_tcpip.o(.text.tcpip_init)
<li><a href="#[351]">sys_mutex_lock</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/arch_sys_arch.o(.text.tcpip_init_done_callback)
<li><a href="#[352]">sys_mutex_unlock</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/api_api_msg.o(.fast)
<li><a href="#[356]">sys_mbox_new</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/api_api_msg.o(.text.netconn_alloc)
<li><a href="#[357]">sys_mbox_free</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/api_api_lib.o(.text.netconn_new_with_proto_and_callback)
<li><a href="#[358]">sys_mbox_post</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/api_tcpip.o(.fast)
<li><a href="#[359]">sys_mbox_trypost</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/api_api_msg.o(.fast)
<li><a href="#[35a]">sys_arch_mbox_tryfetch</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/api_api_msg.o(.text.netconn_drain)
<li><a href="#[35b]">sys_mbox_valid</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/api_api_lib.o(.fast)
<li><a href="#[35c]">sys_mbox_set_invalid</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/api_api_msg.o(.text.netconn_alloc)
<li><a href="#[35d]">sys_arch_protect</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/drivers_drv_eth.o(.fast)
<li><a href="#[35e]">sys_arch_unprotect</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/drivers_drv_eth.o(.fast)
<li><a href="#[35f]">sys_arch_assert</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_init)
<li><a href="#[360]">sys_arch_mbox_fetch</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/api_api_lib.o(.fast)
<li><a href="#[362]">sys_now</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/api_api_lib.o(.text.netconn_close_shutdown)
<li><a href="#[363]">mem_malloc</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/core_pbuf.o(.fast)
<li><a href="#[364]">mem_free</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/core_pbuf.o(.fast)
<li><a href="#[365]">netconn_close_shutdown</a> from Obj/api_api_lib.o(.text.netconn_close_shutdown) referenced from Obj/api_api_lib.o(.fast)
<li><a href="#[366]">netconn_recv_data</a> from Obj/api_api_lib.o(.fast) referenced from Obj/api_api_lib.o(.fast)
<li><a href="#[367]">netconn_new_with_proto_and_callback</a> from Obj/api_api_lib.o(.text.netconn_new_with_proto_and_callback) referenced from Obj/api_sockets.o(.text.lwip_socket)
<li><a href="#[368]">netconn_delete</a> from Obj/api_api_lib.o(.text.netconn_delete) referenced from Obj/api_sockets.o(.text.lwip_accept)
<li><a href="#[369]">netconn_getaddr</a> from Obj/api_api_lib.o(.text.netconn_getaddr) referenced from Obj/api_sockets.o(.fast)
<li><a href="#[36a]">netconn_bind</a> from Obj/api_api_lib.o(.text.netconn_bind) referenced from Obj/api_sockets.o(.text.lwip_bind)
<li><a href="#[36b]">netconn_connect</a> from Obj/api_api_lib.o(.text.netconn_connect) referenced from Obj/api_sockets.o(.text.lwip_connect)
<li><a href="#[36c]">netconn_disconnect</a> from Obj/api_api_lib.o(.text.netconn_disconnect) referenced from Obj/api_sockets.o(.text.lwip_connect)
<li><a href="#[36d]">netconn_listen_with_backlog</a> from Obj/api_api_lib.o(.text.netconn_listen_with_backlog) referenced from Obj/api_sockets.o(.text.lwip_listen)
<li><a href="#[36e]">netconn_accept</a> from Obj/api_api_lib.o(.text.netconn_accept) referenced from Obj/api_sockets.o(.text.lwip_accept)
<li><a href="#[371]">netconn_join_leave_group</a> from Obj/api_api_lib.o(.text.netconn_join_leave_group) referenced from Obj/api_sockets.o(.text.lwip_close)
<li><a href="#[372]">netconn_gethostbyname</a> from Obj/api_api_lib.o(.text.netconn_gethostbyname) referenced from Obj/api_netdb.o(.text.lwip_gethostbyname)
<li><a href="#[373]">netconn_recv_tcp_pbuf</a> from Obj/api_api_lib.o(.fast) referenced from Obj/api_sockets.o(.fast)
<li><a href="#[374]">netconn_recv</a> from Obj/api_api_lib.o(.fast) referenced from Obj/api_sockets.o(.fast)
<li><a href="#[375]">netconn_send</a> from Obj/api_api_lib.o(.fast) referenced from Obj/api_api_lib.o(.fast)
<li><a href="#[377]">netconn_write_partly</a> from Obj/api_api_lib.o(.fast) referenced from Obj/api_sockets.o(.fast)
<li><a href="#[378]">recv_udp</a> from Obj/api_api_msg.o(.fast) referenced from Obj/api_api_msg.o(.fast)
<li><a href="#[379]">setup_tcp</a> from Obj/api_api_msg.o(.text.setup_tcp) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_connected)
<li><a href="#[37c]">lwip_netconn_do_close_internal</a> from Obj/api_api_msg.o(.text.lwip_netconn_do_close_internal) referenced from Obj/api_api_msg.o(.fast)
<li><a href="#[37e]">netconn_alloc</a> from Obj/api_api_msg.o(.text.netconn_alloc) referenced from Obj/api_api_lib.o(.text.netconn_new_with_proto_and_callback)
<li><a href="#[37f]">netconn_free</a> from Obj/api_api_msg.o(.text.netconn_free) referenced from Obj/api_api_lib.o(.text.netconn_delete)
<li><a href="#[380]">netconn_drain</a> from Obj/api_api_msg.o(.text.netconn_drain) referenced from Obj/api_api_msg.o(.text.netconn_drain)
<li><a href="#[394]">err_to_errno</a> from Obj/api_err.o(.text.err_to_errno) referenced from Obj/api_sockets.o(.fast)
<li><a href="#[395]">netbuf_new</a> from Obj/api_netbuf.o(.fast) referenced from Obj/api_sockets.o(.fast)
<li><a href="#[399]">netbuf_delete</a> from Obj/api_netbuf.o(.fast) referenced from Obj/api_api_msg.o(.fast)
<li><a href="#[39a]">netbuf_alloc</a> from Obj/api_netbuf.o(.fast) referenced from Obj/api_sockets.o(.fast)
<li><a href="#[39b]">netbuf_free</a> from Obj/api_netbuf.o(.fast) referenced from Obj/api_sockets.o(.fast)
<li><a href="#[39e]">lwip_gethostbyname</a> from Obj/api_netdb.o(.text.lwip_gethostbyname) referenced from Obj/net_net_netdb.o(.text.gethostbyname)
<li><a href="#[3a0]">lwip_freeaddrinfo</a> from Obj/api_netdb.o(.text.lwip_freeaddrinfo) referenced from Obj/net_net_netdb.o(.text.freeaddrinfo)
<li><a href="#[3a1]">lwip_getaddrinfo</a> from Obj/api_netdb.o(.text.lwip_getaddrinfo) referenced from Obj/net_net_netdb.o(.text.getaddrinfo)
<li><a href="#[3a5]">netifapi_netif_add</a> from Obj/api_netifapi.o(.text.netifapi_netif_add) referenced from Obj/netif_ethernetif.o(.text.eth_device_init_with_flag)
<li><a href="#[3a6]">netifapi_netif_set_addr</a> from Obj/api_netifapi.o(.text.netifapi_netif_set_addr) referenced from Obj/netif_ethernetif.o(.text.set_if)
<li><a href="#[3a7]">netifapi_netif_common</a> from Obj/api_netifapi.o(.text.netifapi_netif_common) referenced from Obj/netif_ethernetif.o(.fast)
<li><a href="#[3a8]">alloc_socket</a> from Obj/api_sockets.o(.text.alloc_socket) referenced from Obj/api_sockets.o(.text.lwip_accept)
<li><a href="#[3a9]">lwip_selscan</a> from Obj/api_sockets.o(.fast) referenced from Obj/api_sockets.o(.fast)
<li><a href="#[3aa]">lwip_getaddrname</a> from Obj/api_sockets.o(.text.lwip_getaddrname) referenced from Obj/api_sockets.o(.text.lwip_getsockname)
<li><a href="#[3ad]">lwip_tryget_socket</a> from Obj/api_sockets.o(.text.lwip_tryget_socket) referenced from Obj/net_dfs_net.o(.text.dfs_net_poll)
<li><a href="#[3ae]">lwip_accept</a> from Obj/api_sockets.o(.text.lwip_accept) referenced from Obj/net_net_sockets.o(.text.accept)
<li><a href="#[3af]">lwip_bind</a> from Obj/api_sockets.o(.text.lwip_bind) referenced from Obj/net_net_sockets.o(.text.bind)
<li><a href="#[3b0]">lwip_close</a> from Obj/api_sockets.o(.text.lwip_close) referenced from Obj/net_dfs_net.o(.text.dfs_net_close)
<li><a href="#[3b1]">lwip_connect</a> from Obj/api_sockets.o(.text.lwip_connect) referenced from Obj/net_net_sockets.o(.text.connect)
<li><a href="#[3b2]">lwip_listen</a> from Obj/api_sockets.o(.text.lwip_listen) referenced from Obj/net_net_sockets.o(.text.listen)
<li><a href="#[3b3]">lwip_socket</a> from Obj/api_sockets.o(.text.lwip_socket) referenced from Obj/net_net_sockets.o(.text.socket)
<li><a href="#[3b7]">lwip_getsockname</a> from Obj/api_sockets.o(.text.lwip_getsockname) referenced from Obj/net_net_sockets.o(.text.getsockname)
<li><a href="#[3b8]">lwip_getsockopt</a> from Obj/api_sockets.o(.text.lwip_getsockopt) referenced from Obj/net_net_sockets.o(.text.getsockopt)
<li><a href="#[3b9]">lwip_setsockopt</a> from Obj/api_sockets.o(.text.lwip_setsockopt) referenced from Obj/net_net_sockets.o(.text.setsockopt)
<li><a href="#[3ba]">lwip_ioctl</a> from Obj/api_sockets.o(.text.lwip_ioctl) referenced from Obj/net_dfs_net.o(.text.dfs_net_ioctl)
<li><a href="#[3be]">lwip_recvfrom</a> from Obj/api_sockets.o(.fast) referenced from Obj/net_net_sockets.o(.fast)
<li><a href="#[3bf]">lwip_read</a> from Obj/api_sockets.o(.fast) referenced from Obj/net_dfs_net.o(.fast)
<li><a href="#[3c0]">lwip_recv</a> from Obj/api_sockets.o(.fast) referenced from Obj/net_net_sockets.o(.fast)
<li><a href="#[3c1]">lwip_sendmsg</a> from Obj/api_sockets.o(.fast) referenced from Obj/api_sockets.o(.fast)
<li><a href="#[3c2]">lwip_sendto</a> from Obj/api_sockets.o(.fast) referenced from Obj/net_net_sockets.o(.fast)
<li><a href="#[3c3]">lwip_send</a> from Obj/api_sockets.o(.fast) referenced from Obj/net_net_sockets.o(.fast)
<li><a href="#[3c4]">lwip_write</a> from Obj/api_sockets.o(.fast) referenced from Obj/net_dfs_net.o(.fast)
<li><a href="#[3cb]">tcpip_init</a> from Obj/api_tcpip.o(.text.tcpip_init) referenced from Obj/arch_sys_arch.o(.text.lwip_system_init)
<li><a href="#[3ce]">tcpip_inpkt</a> from Obj/api_tcpip.o(.fast) referenced from Obj/api_tcpip.o(.fast)
<li><a href="#[3d0]">tcpip_callback_with_block</a> from Obj/api_tcpip.o(.fast) referenced from Obj/api_api_lib.o(.text.netconn_gethostbyname)
<li><a href="#[3d1]">tcpip_send_msg_wait_sem</a> from Obj/api_tcpip.o(.fast) referenced from Obj/api_api_lib.o(.text.netconn_close_shutdown)
<li><a href="#[3d2]">tcpip_api_call</a> from Obj/api_tcpip.o(.fast) referenced from Obj/api_netifapi.o(.text.netifapi_netif_add)
<li><a href="#[3d3]">lwip_htons</a> from Obj/core_def.o(.fast) referenced from Obj/api_sockets.o(.fast)
<li><a href="#[3d6]">lwip_strnicmp</a> from Obj/core_def.o(.text.lwip_strnicmp) referenced from Obj/core_dns.o(.text.dns_gethostbyname_addrtype)
<li><a href="#[3d8]">lwip_htonl</a> from Obj/core_def.o(.fast) referenced from Obj/core_tcp_in.o(.fast)
<li><a href="#[3d9]">dns_call_found</a> from Obj/core_dns.o(.text.dns_call_found) referenced from Obj/core_dns.o(.text.dns_send)
<li><a href="#[3da]">dns_send</a> from Obj/core_dns.o(.text.dns_send) referenced from Obj/core_dns.o(.text.dns_check_entry)
<li><a href="#[3db]">dns_check_entry</a> from Obj/core_dns.o(.text.dns_check_entry) referenced from Obj/core_dns.o(.text.dns_tmr)
<li><a href="#[3dd]">dns_init</a> from Obj/core_dns.o(.text.dns_init) referenced from Obj/core_init.o(.text.lwip_init)
<li><a href="#[3de]">dns_setserver</a> from Obj/core_dns.o(.text.dns_setserver) referenced from Obj/netif_ethernetif.o(.text.set_dns)
<li><a href="#[3df]">dns_getserver</a> from Obj/core_dns.o(.text.dns_getserver) referenced from Obj/netif_ethernetif.o(.text.list_if)
<li><a href="#[3e1]">dns_gethostbyname_addrtype</a> from Obj/core_dns.o(.text.dns_gethostbyname_addrtype) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_gethostbyname)
<li><a href="#[3e3]">lwip_standard_chksum</a> from Obj/core_inet_chksum.o(.fast) referenced from Obj/core_inet_chksum.o(.fast)
<li><a href="#[3e4]">inet_chksum_pseudo</a> from Obj/core_inet_chksum.o(.fast) referenced from Obj/core_inet_chksum.o(.fast)
<li><a href="#[3e5]">ip_chksum_pseudo</a> from Obj/core_inet_chksum.o(.fast) referenced from Obj/core_udp.o(.fast)
<li><a href="#[3e6]">inet_chksum_pseudo_partial</a> from Obj/core_inet_chksum.o(.fast) referenced from Obj/core_inet_chksum.o(.fast)
<li><a href="#[3e8]">inet_chksum</a> from Obj/core_inet_chksum.o(.fast) referenced from Obj/ipv4_icmp.o(.text.icmp_send_response.isra.0)
<li><a href="#[3e9]">inet_chksum_pbuf</a> from Obj/core_inet_chksum.o(.fast) referenced from Obj/ipv4_icmp.o(.text.icmp_input)
<li><a href="#[3ea]">lwip_init</a> from Obj/core_init.o(.text.lwip_init) referenced from Obj/api_tcpip.o(.text.tcpip_init)
<li><a href="#[3ed]">do_memp_malloc_pool.isra.0</a> from Obj/core_memp.o(.fast) referenced from Obj/core_memp.o(.fast)
<li><a href="#[3ef]">memp_init</a> from Obj/core_memp.o(.text.memp_init) referenced from Obj/core_init.o(.text.lwip_init)
<li><a href="#[3f2]">memp_malloc</a> from Obj/core_memp.o(.fast) referenced from Obj/api_api_lib.o(.fast)
<li><a href="#[3f4]">memp_free</a> from Obj/core_memp.o(.fast) referenced from Obj/api_api_lib.o(.fast)
<li><a href="#[3f5]">netif_issue_reports.part.0</a> from Obj/core_netif.o(.text.netif_issue_reports.part.0) referenced from Obj/core_netif.o(.text.netif_set_ipaddr)
<li><a href="#[3f6]">netif_init</a> from Obj/core_netif.o(.text.netif_init) referenced from Obj/core_init.o(.text.lwip_init)
<li><a href="#[3fc]">netif_set_ipaddr</a> from Obj/core_netif.o(.text.netif_set_ipaddr) referenced from Obj/core_netif.o(.text.netif_set_addr)
<li><a href="#[3fd]">netif_set_addr</a> from Obj/core_netif.o(.text.netif_set_addr) referenced from Obj/api_netifapi.o(.text.netifapi_do_netif_set_addr)
<li><a href="#[3fe]">netif_add</a> from Obj/core_netif.o(.text.netif_add) referenced from Obj/arch_sys_arch.o(.text.tcpip_init_done_callback)
<li><a href="#[401]">netif_set_default</a> from Obj/core_netif.o(.text.netif_set_default) referenced from Obj/arch_sys_arch.o(.text.tcpip_init_done_callback)
<li><a href="#[402]">netif_set_up</a> from Obj/core_netif.o(.text.netif_set_up) referenced from Obj/arch_sys_arch.o(.text.tcpip_init_done_callback)
<li><a href="#[406]">netif_set_link_up</a> from Obj/core_netif.o(.text.netif_set_link_up) referenced from Obj/arch_sys_arch.o(.text.tcpip_init_done_callback)
<li><a href="#[408]">pbuf_header_impl</a> from Obj/core_pbuf.o(.fast) referenced from Obj/core_pbuf.o(.fast)
<li><a href="#[40a]">pbuf_header</a> from Obj/core_pbuf.o(.fast) referenced from Obj/core_raw.o(.fast)
<li><a href="#[40b]">pbuf_header_force</a> from Obj/core_pbuf.o(.fast) referenced from Obj/core_udp.o(.fast)
<li><a href="#[40c]">pbuf_free</a> from Obj/core_pbuf.o(.fast) referenced from Obj/drivers_drv_eth.o(.fast)
<li><a href="#[40d]">pbuf_alloc</a> from Obj/core_pbuf.o(.fast) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth1_init)
<li><a href="#[40e]">pbuf_realloc</a> from Obj/core_pbuf.o(.fast) referenced from Obj/core_tcp_in.o(.fast)
<li><a href="#[40f]">pbuf_clen</a> from Obj/core_pbuf.o(.fast) referenced from Obj/core_tcp_in.o(.fast)
<li><a href="#[410]">pbuf_ref</a> from Obj/core_pbuf.o(.fast) referenced from Obj/drivers_drv_eth.o(.fast)
<li><a href="#[411]">pbuf_cat</a> from Obj/core_pbuf.o(.fast) referenced from Obj/api_netbuf.o(.fast)
<li><a href="#[412]">pbuf_chain</a> from Obj/core_pbuf.o(.fast) referenced from Obj/core_raw.o(.fast)
<li><a href="#[414]">pbuf_copy</a> from Obj/core_pbuf.o(.fast) referenced from Obj/drivers_drv_eth.o(.fast)
<li><a href="#[415]">pbuf_copy_partial</a> from Obj/core_pbuf.o(.fast) referenced from Obj/api_sockets.o(.fast)
<li><a href="#[417]">pbuf_take</a> from Obj/core_pbuf.o(.fast) referenced from Obj/core_pbuf.o(.fast)
<li><a href="#[418]">pbuf_take_at</a> from Obj/core_pbuf.o(.fast) referenced from Obj/core_dns.o(.text.dns_send)
<li><a href="#[41b]">pbuf_try_get_at</a> from Obj/core_pbuf.o(.fast) referenced from Obj/core_dns.o(.text.dns_recv)
<li><a href="#[41c]">pbuf_put_at</a> from Obj/core_pbuf.o(.fast) referenced from Obj/core_dns.o(.text.dns_send)
<li><a href="#[41e]">pbuf_memfind</a> from Obj/core_pbuf.o(.fast) referenced from Obj/core_pbuf.o(.fast)
<li><a href="#[420]">raw_input</a> from Obj/core_raw.o(.fast) referenced from Obj/ipv4_ip4.o(.fast)
<li><a href="#[421]">raw_bind</a> from Obj/core_raw.o(.text.raw_bind) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_bind)
<li><a href="#[422]">raw_connect</a> from Obj/core_raw.o(.text.raw_connect) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_connect)
<li><a href="#[423]">raw_recv</a> from Obj/core_raw.o(.text.raw_recv) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_newconn)
<li><a href="#[424]">raw_remove</a> from Obj/core_raw.o(.text.raw_remove) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_delconn)
<li><a href="#[425]">raw_new</a> from Obj/core_raw.o(.text.raw_new) referenced from Obj/core_raw.o(.fast)
<li><a href="#[426]">raw_netif_ip_addr_changed</a> from Obj/core_raw.o(.text.raw_netif_ip_addr_changed) referenced from Obj/core_netif.o(.text.netif_set_ipaddr)
<li><a href="#[427]">raw_sendto</a> from Obj/core_raw.o(.fast) referenced from Obj/api_api_msg.o(.fast)
<li><a href="#[428]">raw_send</a> from Obj/core_raw.o(.fast) referenced from Obj/api_api_msg.o(.fast)
<li><a href="#[429]">raw_new_ip_type</a> from Obj/core_raw.o(.fast) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_newconn)
<li><a href="#[42b]">tcp_pcbs_sane</a> from Obj/core_tcp.o(.text.tcp_pcbs_sane) referenced from Obj/core_tcp.o(.text.tcp_pcb_remove)
<li><a href="#[42c]">tcp_pcb_remove</a> from Obj/core_tcp.o(.text.tcp_pcb_remove) referenced from Obj/core_tcp.o(.text.tcp_close_shutdown)
<li><a href="#[42d]">tcp_close_shutdown</a> from Obj/core_tcp.o(.text.tcp_close_shutdown) referenced from Obj/core_tcp.o(.fast)
<li><a href="#[42e]">tcp_close</a> from Obj/core_tcp.o(.text.tcp_close) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_close_internal)
<li><a href="#[42f]">tcp_shutdown</a> from Obj/core_tcp.o(.text.tcp_shutdown) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_close_internal)
<li><a href="#[430]">tcp_abandon</a> from Obj/core_tcp.o(.text.tcp_abandon) referenced from Obj/core_tcp.o(.fast)
<li><a href="#[431]">tcp_abort</a> from Obj/core_tcp.o(.text.tcp_abort) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_close_internal)
<li><a href="#[433]">tcp_netif_ip_addr_changed_pcblist</a> from Obj/core_tcp.o(.text.tcp_netif_ip_addr_changed_pcblist) referenced from Obj/core_tcp.o(.text.tcp_netif_ip_addr_changed)
<li><a href="#[434]">tcp_netif_ip_addr_changed</a> from Obj/core_tcp.o(.text.tcp_netif_ip_addr_changed) referenced from Obj/core_netif.o(.text.netif_set_ipaddr)
<li><a href="#[436]">tcp_new_port</a> from Obj/core_tcp.o(.fast) referenced from Obj/core_tcp.o(.fast)
<li><a href="#[437]">tcp_close_shutdown_fin</a> from Obj/core_tcp.o(.text.tcp_close_shutdown_fin) referenced from Obj/core_tcp.o(.fast)
<li><a href="#[438]">tcp_init</a> from Obj/core_tcp.o(.text.tcp_init) referenced from Obj/core_init.o(.text.lwip_init)
<li><a href="#[439]">tcp_bind</a> from Obj/core_tcp.o(.text.tcp_bind) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_bind)
<li><a href="#[43a]">tcp_listen_with_backlog_and_err</a> from Obj/core_tcp.o(.text.tcp_listen_with_backlog_and_err) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_listen)
<li><a href="#[43c]">tcp_connect</a> from Obj/core_tcp.o(.text.tcp_connect) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_connect)
<li><a href="#[43d]">tcp_arg</a> from Obj/core_tcp.o(.text.tcp_arg) referenced from Obj/api_api_msg.o(.text.setup_tcp)
<li><a href="#[43e]">tcp_recv</a> from Obj/core_tcp.o(.text.tcp_recv) referenced from Obj/api_api_msg.o(.text.setup_tcp)
<li><a href="#[43f]">tcp_sent</a> from Obj/core_tcp.o(.text.tcp_sent) referenced from Obj/api_api_msg.o(.text.setup_tcp)
<li><a href="#[440]">tcp_err</a> from Obj/core_tcp.o(.text.tcp_err) referenced from Obj/api_api_msg.o(.text.setup_tcp)
<li><a href="#[441]">tcp_accept</a> from Obj/core_tcp.o(.text.tcp_accept) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_close_internal)
<li><a href="#[442]">tcp_poll</a> from Obj/core_tcp.o(.text.tcp_poll) referenced from Obj/api_api_msg.o(.text.setup_tcp)
<li><a href="#[443]">tcp_debug_state_str</a> from Obj/core_tcp.o(.text.tcp_debug_state_str) referenced from Obj/netif_ethernetif.o(.text.list_tcps)
<li><a href="#[448]">tcp_update_rcv_ann_wnd</a> from Obj/core_tcp.o(.fast) referenced from Obj/core_tcp.o(.fast)
<li><a href="#[449]">tcp_recved</a> from Obj/core_tcp.o(.fast) referenced from Obj/api_api_msg.o(.fast)
<li><a href="#[44b]">tcp_seg_free</a> from Obj/core_tcp.o(.fast) referenced from Obj/core_tcp.o(.fast)
<li><a href="#[44c]">tcp_segs_free</a> from Obj/core_tcp.o(.fast) referenced from Obj/core_tcp_out.o(.fast)
<li><a href="#[44e]">tcp_slowtmr</a> from Obj/core_tcp.o(.fast) referenced from Obj/core_tcp.o(.fast)
<li><a href="#[450]">tcp_pcb_purge</a> from Obj/core_tcp.o(.fast) referenced from Obj/core_tcp_in.o(.fast)
<li><a href="#[451]">tcp_next_iss</a> from Obj/core_tcp.o(.fast) referenced from Obj/core_tcp_in.o(.fast)
<li><a href="#[452]">tcp_eff_send_mss_impl</a> from Obj/core_tcp.o(.fast) referenced from Obj/core_tcp_in.o(.fast)
<li><a href="#[453]">tcp_recv_null</a> from Obj/core_tcp.o(.fast) referenced from Obj/core_tcp.o(.fast)
<li><a href="#[454]">tcp_process_refused_data</a> from Obj/core_tcp.o(.fast) referenced from Obj/core_tcp.o(.fast)
<li><a href="#[455]">tcp_fasttmr</a> from Obj/core_tcp.o(.fast) referenced from Obj/core_tcp.o(.fast)
<li><a href="#[456]">tcp_tmr</a> from Obj/core_tcp.o(.fast) referenced from Obj/core_timeouts.o(.fast)
<li><a href="#[458]">tcp_alloc</a> from Obj/core_tcp.o(.fast) referenced from Obj/core_tcp.o(.fast)
<li><a href="#[459]">tcp_new_ip_type</a> from Obj/core_tcp.o(.fast) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_newconn)
<li><a href="#[45a]">tcp_receive</a> from Obj/core_tcp_in.o(.fast) referenced from Obj/core_tcp_in.o(.fast)
<li><a href="#[45e]">tcp_input</a> from Obj/core_tcp_in.o(.fast) referenced from Obj/ipv4_ip4.o(.fast)
<li><a href="#[45f]">tcp_trigger_input_pcb_close</a> from Obj/core_tcp_in.o(.fast) referenced from Obj/core_tcp.o(.text.tcp_close_shutdown)
<li><a href="#[460]">tcp_pbuf_prealloc.isra.0</a> from Obj/core_tcp_out.o(.fast) referenced from Obj/core_tcp_out.o(.fast)
<li><a href="#[461]">tcp_send_fin</a> from Obj/core_tcp_out.o(.text.tcp_send_fin) referenced from Obj/core_tcp.o(.text.tcp_close_shutdown_fin)
<li><a href="#[462]">tcp_rst</a> from Obj/core_tcp_out.o(.text.tcp_rst) referenced from Obj/core_tcp.o(.fast)
<li><a href="#[463]">tcp_keepalive</a> from Obj/core_tcp_out.o(.text.tcp_keepalive) referenced from Obj/core_tcp.o(.fast)
<li><a href="#[466]">tcp_write</a> from Obj/core_tcp_out.o(.fast) referenced from Obj/api_api_msg.o(.fast)
<li><a href="#[467]">tcp_enqueue_flags</a> from Obj/core_tcp_out.o(.fast) referenced from Obj/core_tcp.o(.text.tcp_connect)
<li><a href="#[468]">tcp_send_empty_ack</a> from Obj/core_tcp_out.o(.fast) referenced from Obj/core_tcp_in.o(.fast)
<li><a href="#[469]">tcp_output</a> from Obj/core_tcp_out.o(.fast) referenced from Obj/api_api_msg.o(.fast)
<li><a href="#[46a]">tcp_rexmit_rto</a> from Obj/core_tcp_out.o(.fast) referenced from Obj/core_tcp.o(.fast)
<li><a href="#[46b]">tcp_rexmit</a> from Obj/core_tcp_out.o(.fast) referenced from Obj/core_tcp_in.o(.fast)
<li><a href="#[46c]">tcp_rexmit_fast</a> from Obj/core_tcp_out.o(.fast) referenced from Obj/core_tcp_in.o(.fast)
<li><a href="#[46d]">tcp_zero_window_probe</a> from Obj/core_tcp_out.o(.fast) referenced from Obj/core_tcp.o(.fast)
<li><a href="#[46e]">sys_timeout</a> from Obj/core_timeouts.o(.text.sys_timeout) referenced from Obj/core_timeouts.o(.fast)
<li><a href="#[46f]">tcp_timer_needed</a> from Obj/core_timeouts.o(.fast) referenced from Obj/core_tcp.o(.text.tcp_bind)
<li><a href="#[470]">sys_timeouts_init</a> from Obj/core_timeouts.o(.text.sys_timeouts_init) referenced from Obj/core_init.o(.text.lwip_init)
<li><a href="#[473]">sys_untimeout</a> from Obj/core_timeouts.o(.fast) referenced from Obj/tftp_tftp_server.o(.text.close_handle)
<li><a href="#[475]">sys_timeouts_mbox_fetch</a> from Obj/core_timeouts.o(.fast) referenced from Obj/api_tcpip.o(.fast)
<li><a href="#[476]">udp_init</a> from Obj/core_udp.o(.text.udp_init) referenced from Obj/core_init.o(.text.lwip_init)
<li><a href="#[477]">udp_input</a> from Obj/core_udp.o(.fast) referenced from Obj/ipv4_ip4.o(.fast)
<li><a href="#[478]">udp_bind</a> from Obj/core_udp.o(.text.udp_bind) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_bind)
<li><a href="#[479]">udp_connect</a> from Obj/core_udp.o(.text.udp_connect) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_connect)
<li><a href="#[47a]">udp_disconnect</a> from Obj/core_udp.o(.text.udp_disconnect) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_disconnect)
<li><a href="#[47b]">udp_remove</a> from Obj/core_udp.o(.text.udp_remove) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_delconn)
<li><a href="#[47c]">udp_new</a> from Obj/core_udp.o(.text.udp_new) referenced from Obj/core_udp.o(.text.udp_new_ip_type)
<li><a href="#[47d]">udp_new_ip_type</a> from Obj/core_udp.o(.text.udp_new_ip_type) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_newconn)
<li><a href="#[47e]">udp_netif_ip_addr_changed</a> from Obj/core_udp.o(.text.udp_netif_ip_addr_changed) referenced from Obj/core_netif.o(.text.netif_set_ipaddr)
<li><a href="#[47f]">udp_sendto_if_src</a> from Obj/core_udp.o(.fast) referenced from Obj/core_udp.o(.fast)
<li><a href="#[480]">udp_sendto_if</a> from Obj/core_udp.o(.fast) referenced from Obj/core_udp.o(.fast)
<li><a href="#[481]">udp_sendto</a> from Obj/core_udp.o(.fast) referenced from Obj/api_api_msg.o(.fast)
<li><a href="#[482]">udp_send</a> from Obj/core_udp.o(.fast) referenced from Obj/api_api_msg.o(.fast)
<li><a href="#[483]">udp_recv</a> from Obj/core_udp.o(.fast) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_newconn)
<li><a href="#[485]">ethernet_output</a> from Obj/netif_ethernet.o(.fast) referenced from Obj/ipv4_etharp.o(.fast)
<li><a href="#[488]">set_if</a> from Obj/netif_ethernetif.o(.text.set_if) referenced from Obj/finsh_msh_cmd.o(.text.cmd_ifconfig)
<li><a href="#[489]">set_dns</a> from Obj/netif_ethernetif.o(.text.set_dns) referenced from Obj/finsh_msh_cmd.o(.text.cmd_dns)
<li><a href="#[48a]">list_if</a> from Obj/netif_ethernetif.o(.text.list_if) referenced from Obj/finsh_msh_cmd.o(.text.cmd_ifconfig)
<li><a href="#[48b]">list_udps</a> from Obj/netif_ethernetif.o(.text.list_udps) referenced from Obj/finsh_msh_cmd.o(.text.cmd_netstat)
<li><a href="#[48c]">list_tcps</a> from Obj/netif_ethernetif.o(.text.list_tcps) referenced from Obj/finsh_msh_cmd.o(.text.cmd_netstat)
<li><a href="#[48d]">eth_device_init_with_flag</a> from Obj/netif_ethernetif.o(.text.eth_device_init_with_flag) referenced from Obj/netif_ethernetif.o(.text.eth_device_init)
<li><a href="#[48e]">eth_device_init</a> from Obj/netif_ethernetif.o(.text.eth_device_init) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth1_init)
<li><a href="#[48f]">eth_device_linkchange</a> from Obj/netif_ethernetif.o(.text.eth_device_linkchange) referenced from Obj/drivers_drv_eth.o(.fast)
<li><a href="#[491]">eth_system_device_init_private</a> from Obj/netif_ethernetif.o(.text.eth_system_device_init_private) referenced from Obj/arch_sys_arch.o(.text.lwip_system_init)
<li><a href="#[492]">eth_get_ipv4</a> from Obj/netif_ethernetif.o(.text.eth_get_ipv4) referenced from Obj/api_sockets.o(.text.lwip_ioctl)
<li><a href="#[494]">eth_device_ready</a> from Obj/netif_ethernetif.o(.fast) referenced from Obj/drivers_drv_eth.o(.fast)
<li><a href="#[497]">dhcp_network_changed</a> from Obj/ipv4_dhcp.o(.text.dhcp_network_changed) referenced from Obj/core_netif.o(.text.netif_set_link_up)
<li><a href="#[498]">dhcp_arp_reply</a> from Obj/ipv4_dhcp.o(.text.dhcp_arp_reply) referenced from Obj/ipv4_etharp.o(.fast)
<li><a href="#[499]">dhcp_renew</a> from Obj/ipv4_dhcp.o(.text.dhcp_renew) referenced from Obj/ipv4_dhcp.o(.text.dhcp_coarse_tmr)
<li><a href="#[49a]">dhcp_release</a> from Obj/ipv4_dhcp.o(.text.dhcp_release) referenced from Obj/ipv4_dhcp.o(.text.dhcp_coarse_tmr)
<li><a href="#[49d]">dhcp_stop</a> from Obj/ipv4_dhcp.o(.text.dhcp_stop) referenced from Obj/ipv4_dhcp.o(.text.dhcp_start)
<li><a href="#[49e]">dhcp_start</a> from Obj/ipv4_dhcp.o(.text.dhcp_start) referenced from Obj/arch_sys_arch.o(.text.tcpip_init_done_callback)
<li><a href="#[4a0]">dhcp_check</a> from Obj/ipv4_dhcp.o(.text.dhcp_check) referenced from Obj/ipv4_dhcp.o(.text.dhcp_recv)
<li><a href="#[4a1]">dhcp_bind</a> from Obj/ipv4_dhcp.o(.text.dhcp_bind) referenced from Obj/ipv4_dhcp.o(.text.dhcp_recv)
<li><a href="#[4a2]">dhcp_inc_pcb_refcount</a> from Obj/ipv4_dhcp.o(.text.dhcp_inc_pcb_refcount) referenced from Obj/ipv4_dhcp.o(.text.dhcp_start)
<li><a href="#[4a3]">dhcp_option_short.isra.0</a> from Obj/ipv4_dhcp.o(.text.dhcp_option_short.isra.0) referenced from Obj/ipv4_dhcp.o(.text.dhcp_discover)
<li><a href="#[4a4]">dhcp_option.isra.1</a> from Obj/ipv4_dhcp.o(.text.dhcp_option.isra.1) referenced from Obj/ipv4_dhcp.o(.text.dhcp_create_msg)
<li><a href="#[4a5]">dhcp_option_byte.isra.2</a> from Obj/ipv4_dhcp.o(.text.dhcp_option_byte.isra.2) referenced from Obj/ipv4_dhcp.o(.text.dhcp_create_msg)
<li><a href="#[4a6]">dhcp_create_msg</a> from Obj/ipv4_dhcp.o(.text.dhcp_create_msg) referenced from Obj/ipv4_dhcp.o(.text.dhcp_discover)
<li><a href="#[4a7]">dhcp_option_trailer</a> from Obj/ipv4_dhcp.o(.text.dhcp_option_trailer) referenced from Obj/ipv4_dhcp.o(.text.dhcp_discover)
<li><a href="#[4a8]">dhcp_option_long.isra.4</a> from Obj/ipv4_dhcp.o(.text.dhcp_option_long.isra.4) referenced from Obj/ipv4_dhcp.o(.text.dhcp_select)
<li><a href="#[4a9]">dhcp_delete_msg</a> from Obj/ipv4_dhcp.o(.text.dhcp_delete_msg) referenced from Obj/ipv4_dhcp.o(.text.dhcp_discover)
<li><a href="#[4aa]">dhcp_discover</a> from Obj/ipv4_dhcp.o(.text.dhcp_discover) referenced from Obj/ipv4_dhcp.o(.text.dhcp_recv)
<li><a href="#[4ab]">dhcp_select</a> from Obj/ipv4_dhcp.o(.text.dhcp_select) referenced from Obj/ipv4_dhcp.o(.text.dhcp_recv)
<li><a href="#[4ac]">dhcp_reboot</a> from Obj/ipv4_dhcp.o(.text.dhcp_reboot) referenced from Obj/ipv4_dhcp.o(.text.dhcp_network_changed)
<li><a href="#[4ad]">dhcp_dec_pcb_refcount</a> from Obj/ipv4_dhcp.o(.text.dhcp_dec_pcb_refcount) referenced from Obj/ipv4_dhcp.o(.text.dhcp_stop)
<li><a href="#[4ae]">dhcp_handle_ack.isra.8</a> from Obj/ipv4_dhcp.o(.text.unlikely.dhcp_handle_ack.isra.8) referenced from Obj/ipv4_dhcp.o(.text.dhcp_recv)
<li><a href="#[4b1]">free_etharp_q</a> from Obj/ipv4_etharp.o(.text.free_etharp_q) referenced from Obj/ipv4_etharp.o(.fast)
<li><a href="#[4b2]">etharp_raw</a> from Obj/ipv4_etharp.o(.fast) referenced from Obj/ipv4_etharp.o(.fast)
<li><a href="#[4b3]">etharp_output_to_arp_index</a> from Obj/ipv4_etharp.o(.text.etharp_output_to_arp_index) referenced from Obj/ipv4_etharp.o(.fast)
<li><a href="#[4b5]">etharp_query</a> from Obj/ipv4_etharp.o(.text.etharp_query) referenced from Obj/ipv4_etharp.o(.fast)
<li><a href="#[4b6]">etharp_request</a> from Obj/ipv4_etharp.o(.text.etharp_request) referenced from Obj/core_netif.o(.text.netif_issue_reports.part.0)
<li><a href="#[4bb]">etharp_input</a> from Obj/ipv4_etharp.o(.fast) referenced from Obj/netif_ethernet.o(.fast)
<li><a href="#[4bd]">icmp_send_response.isra.0</a> from Obj/ipv4_icmp.o(.text.icmp_send_response.isra.0) referenced from Obj/ipv4_icmp.o(.text.icmp_dest_unreach)
<li><a href="#[4be]">icmp_input</a> from Obj/ipv4_icmp.o(.text.icmp_input) referenced from Obj/ipv4_ip4.o(.fast)
<li><a href="#[4bf]">icmp_dest_unreach</a> from Obj/ipv4_icmp.o(.text.icmp_dest_unreach) referenced from Obj/core_udp.o(.fast)
<li><a href="#[4c0]">icmp_time_exceeded</a> from Obj/ipv4_icmp.o(.text.icmp_time_exceeded) referenced from Obj/ipv4_ip4.o(.fast)
<li><a href="#[4c1]">igmp_send</a> from Obj/ipv4_igmp.o(.text.igmp_send) referenced from Obj/ipv4_igmp.o(.text.igmp_joingroup_netif)
<li><a href="#[4c2]">igmp_delaying_member</a> from Obj/ipv4_igmp.o(.text.igmp_delaying_member) referenced from Obj/ipv4_igmp.o(.text.igmp_report_groups)
<li><a href="#[4c3]">igmp_lookup_group.isra.3</a> from Obj/ipv4_igmp.o(.text.igmp_lookup_group.isra.3) referenced from Obj/ipv4_igmp.o(.text.igmp_start)
<li><a href="#[4c4]">igmp_init</a> from Obj/ipv4_igmp.o(.text.igmp_init) referenced from Obj/core_init.o(.text.lwip_init)
<li><a href="#[4c5]">igmp_start</a> from Obj/ipv4_igmp.o(.text.igmp_start) referenced from Obj/core_netif.o(.text.netif_add)
<li><a href="#[4c7]">igmp_report_groups</a> from Obj/ipv4_igmp.o(.text.igmp_report_groups) referenced from Obj/core_netif.o(.text.netif_issue_reports.part.0)
<li><a href="#[4c8]">igmp_lookfor_group</a> from Obj/ipv4_igmp.o(.text.igmp_lookfor_group) referenced from Obj/ipv4_ip4.o(.fast)
<li><a href="#[4c9]">igmp_input</a> from Obj/ipv4_igmp.o(.text.igmp_input) referenced from Obj/ipv4_ip4.o(.fast)
<li><a href="#[4ca]">igmp_joingroup_netif</a> from Obj/ipv4_igmp.o(.text.igmp_joingroup_netif) referenced from Obj/ipv4_igmp.o(.text.igmp_joingroup)
<li><a href="#[4cb]">igmp_joingroup</a> from Obj/ipv4_igmp.o(.text.igmp_joingroup) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_join_leave_group)
<li><a href="#[4cc]">igmp_leavegroup_netif</a> from Obj/ipv4_igmp.o(.text.igmp_leavegroup_netif) referenced from Obj/ipv4_igmp.o(.text.igmp_leavegroup)
<li><a href="#[4cd]">igmp_leavegroup</a> from Obj/ipv4_igmp.o(.text.igmp_leavegroup) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_join_leave_group)
<li><a href="#[4d0]">ip4_route</a> from Obj/ipv4_ip4.o(.fast) referenced from Obj/core_raw.o(.fast)
<li><a href="#[4d1]">ip4_input</a> from Obj/ipv4_ip4.o(.fast) referenced from Obj/netif_ethernet.o(.fast)
<li><a href="#[4d2]">ip4_output_if_opt_src</a> from Obj/ipv4_ip4.o(.fast) referenced from Obj/ipv4_ip4.o(.fast)
<li><a href="#[4d3]">ip4_output_if_opt</a> from Obj/ipv4_ip4.o(.fast) referenced from Obj/ipv4_igmp.o(.text.igmp_send)
<li><a href="#[4d4]">ip4_output_if</a> from Obj/ipv4_ip4.o(.fast) referenced from Obj/core_raw.o(.fast)
<li><a href="#[4d5]">ip4_output_if_src</a> from Obj/ipv4_ip4.o(.fast) referenced from Obj/core_udp.o(.fast)
<li><a href="#[4d7]">ip4_addr_isbroadcast_u32</a> from Obj/ipv4_ip4_addr.o(.fast) referenced from Obj/core_raw.o(.fast)
<li><a href="#[4d9]">ip4addr_aton</a> from Obj/ipv4_ip4_addr.o(.fast) referenced from Obj/netif_ethernetif.o(.text.set_dns)
<li><a href="#[4da]">ipaddr_addr</a> from Obj/ipv4_ip4_addr.o(.fast) referenced from Obj/netif_ethernetif.o(.text.set_if)
<li><a href="#[4db]">ip4addr_ntoa_r</a> from Obj/ipv4_ip4_addr.o(.fast) referenced from Obj/ipv4_ip4_addr.o(.fast)
<li><a href="#[4dc]">ip4addr_ntoa</a> from Obj/ipv4_ip4_addr.o(.fast) referenced from Obj/netif_ethernetif.o(.text.list_if)
<li><a href="#[4dd]">ip_reass_dequeue_datagram</a> from Obj/ipv4_ip4_frag.o(.fast) referenced from Obj/ipv4_ip4_frag.o(.fast)
<li><a href="#[4e1]">ip4_reass</a> from Obj/ipv4_ip4_frag.o(.fast) referenced from Obj/ipv4_ip4.o(.fast)
<li><a href="#[4e2]">ip4_frag</a> from Obj/ipv4_ip4_frag.o(.fast) referenced from Obj/ipv4_ip4.o(.fast)
<li><a href="#[4e5]">utest_run</a> from Obj/utest_utest.o(.text.utest_run) referenced from Obj/utest_utest.o(.text.utest_testcase_run)
<li><a href="#[4e6]">utest_help</a> from Obj/utest_utest.o(.text.utest_help) referenced from Obj/utest_utest.o(.text.utest_testcase_run)
<li><a href="#[4ef]">mbedtls_aes_self_test</a> from Obj/library_aes.o(.text.mbedtls_aes_self_test) referenced from Obj/samples_crypto_app_test.o(.text.mbedtls_crypto_test)
<li><a href="#[4f0]">_mbedtls_aes_crypt_cfb128</a> from Obj/library_aes_alt.o(.text._mbedtls_aes_crypt_cfb128) referenced from Obj/library_aes_alt.o(.text.mbedtls_aes_crypt_cfb128)
<li><a href="#[4f1]">mbedtls_aes_init</a> from Obj/library_aes_alt.o(.text.mbedtls_aes_init) referenced from Obj/library_aes.o(.text.mbedtls_aes_self_test)
<li><a href="#[4f2]">mbedtls_aes_free</a> from Obj/library_aes_alt.o(.text.mbedtls_aes_free) referenced from Obj/library_aes.o(.text.mbedtls_aes_self_test)
<li><a href="#[4f3]">mbedtls_aes_setkey_enc</a> from Obj/library_aes_alt.o(.text.mbedtls_aes_setkey_enc) referenced from Obj/library_aes.o(.text.mbedtls_aes_self_test)
<li><a href="#[4f4]">mbedtls_aes_setkey_dec</a> from Obj/library_aes_alt.o(.text.mbedtls_aes_setkey_dec) referenced from Obj/library_aes.o(.text.mbedtls_aes_self_test)
<li><a href="#[4f7]">mbedtls_aes_crypt_ecb</a> from Obj/library_aes_alt.o(.text.mbedtls_aes_crypt_ecb) referenced from Obj/library_aes.o(.text.mbedtls_aes_self_test)
<li><a href="#[4f8]">mbedtls_aes_crypt_cbc</a> from Obj/library_aes_alt.o(.text.mbedtls_aes_crypt_cbc) referenced from Obj/library_aes.o(.text.mbedtls_aes_self_test)
<li><a href="#[4f9]">mbedtls_aes_crypt_cfb128</a> from Obj/library_aes_alt.o(.text.mbedtls_aes_crypt_cfb128) referenced from Obj/library_aes.o(.text.mbedtls_aes_self_test)
<li><a href="#[4fb]">_mbedtls_aes_crypt_ctr</a> from Obj/library_aes_alt.o(.text._mbedtls_aes_crypt_ctr) referenced from Obj/library_aes_alt.o(.text.mbedtls_aes_crypt_ctr)
<li><a href="#[4fc]">mbedtls_aes_crypt_ctr</a> from Obj/library_aes_alt.o(.text.mbedtls_aes_crypt_ctr) referenced from Obj/library_aes.o(.text.mbedtls_aes_self_test)
<li><a href="#[4fd]">mbedtls_asn1_get_len</a> from Obj/library_asn1parse.o(.text.mbedtls_asn1_get_len) referenced from Obj/library_asn1parse.o(.text.mbedtls_asn1_get_tag)
<li><a href="#[4fe]">mbedtls_asn1_get_tag</a> from Obj/library_asn1parse.o(.text.mbedtls_asn1_get_tag) referenced from Obj/library_ecdsa.o(.text.mbedtls_ecdsa_read_signature)
<li><a href="#[4ff]">mbedtls_asn1_get_bool</a> from Obj/library_asn1parse.o(.text.mbedtls_asn1_get_bool) referenced from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_parse_der)
<li><a href="#[500]">mbedtls_asn1_get_int</a> from Obj/library_asn1parse.o(.text.mbedtls_asn1_get_int) referenced from Obj/library_pkcs12.o(.text.mbedtls_pkcs12_pbe)
<li><a href="#[501]">mbedtls_asn1_get_mpi</a> from Obj/library_asn1parse.o(.text.mbedtls_asn1_get_mpi) referenced from Obj/library_ecdsa.o(.text.mbedtls_ecdsa_read_signature)
<li><a href="#[502]">mbedtls_asn1_get_bitstring</a> from Obj/library_asn1parse.o(.text.mbedtls_asn1_get_bitstring) referenced from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_parse_der)
<li><a href="#[503]">mbedtls_asn1_get_bitstring_null</a> from Obj/library_asn1parse.o(.text.mbedtls_asn1_get_bitstring_null) referenced from Obj/library_pkparse.o(.text.pk_parse_key_sec1_der)
<li><a href="#[504]">mbedtls_asn1_get_sequence_of</a> from Obj/library_asn1parse.o(.text.mbedtls_asn1_get_sequence_of) referenced from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_parse_der)
<li><a href="#[505]">mbedtls_asn1_get_alg</a> from Obj/library_asn1parse.o(.text.mbedtls_asn1_get_alg) referenced from Obj/library_asn1parse.o(.text.mbedtls_asn1_get_alg_null)
<li><a href="#[506]">mbedtls_asn1_get_alg_null</a> from Obj/library_asn1parse.o(.text.mbedtls_asn1_get_alg_null) referenced from Obj/library_pkcs5.o(.text.mbedtls_pkcs5_pbes2)
<li><a href="#[50a]">mbedtls_asn1_write_len</a> from Obj/library_asn1write.o(.text.mbedtls_asn1_write_len) referenced from Obj/library_asn1write.o(.text.mbedtls_asn1_write_mpi)
<li><a href="#[50b]">mbedtls_asn1_write_tag</a> from Obj/library_asn1write.o(.text.mbedtls_asn1_write_tag) referenced from Obj/library_ecdsa.o(.text.mbedtls_ecdsa_write_signature)
<li><a href="#[50c]">mbedtls_asn1_write_raw_buffer</a> from Obj/library_asn1write.o(.text.mbedtls_asn1_write_raw_buffer) referenced from Obj/library_pk_wrap.o(.text.sm2_encrypt_wrap)
<li><a href="#[50d]">mbedtls_asn1_write_mpi</a> from Obj/library_asn1write.o(.text.mbedtls_asn1_write_mpi) referenced from Obj/library_ecdsa.o(.text.mbedtls_ecdsa_write_signature)
<li><a href="#[518]">mbedtls_base64_encode.part.0</a> from Obj/library_base64.o(.text.mbedtls_base64_encode.part.0) referenced from Obj/library_base64.o(.text.mbedtls_base64_self_test)
<li><a href="#[51a]">mbedtls_base64_decode</a> from Obj/library_base64.o(.text.mbedtls_base64_decode) referenced from Obj/library_base64.o(.text.mbedtls_base64_self_test)
<li><a href="#[51b]">mbedtls_base64_self_test</a> from Obj/library_base64.o(.text.mbedtls_base64_self_test) referenced from Obj/samples_crypto_app_test.o(.text.mbedtls_crypto_test)
<li><a href="#[51c]">mbedtls_mpi_write_binary</a> from Obj/library_bignum.o(.text.mbedtls_mpi_write_binary) referenced from Obj/library_asn1write.o(.text.mbedtls_asn1_write_mpi)
<li><a href="#[51d]">mbedtls_mpi_shift_l</a> from Obj/library_bignum.o(.text.mbedtls_mpi_shift_l) referenced from Obj/library_bignum.o(.text.mbedtls_mpi_div_mpi)
<li><a href="#[51e]">mbedtls_mpi_shift_r</a> from Obj/library_bignum.o(.text.mbedtls_mpi_shift_r) referenced from Obj/library_bignum.o(.text.mbedtls_mpi_div_mpi)
<li><a href="#[51f]">mbedtls_mpi_cmp_abs</a> from Obj/library_bignum.o(.text.mbedtls_mpi_cmp_abs) referenced from Obj/library_bignum.o(.text.mpi_montmul.isra.2)
<li><a href="#[520]">mpi_montmul.isra.2</a> from Obj/library_bignum.o(.text.mpi_montmul.isra.2) referenced from Obj/library_bignum.o(.text.mbedtls_mpi_exp_mod)
<li><a href="#[521]">mbedtls_mpi_cmp_mpi</a> from Obj/library_bignum.o(.text.mbedtls_mpi_cmp_mpi) referenced from Obj/library_bignum.o(.text.mbedtls_mpi_cmp_int)
<li><a href="#[522]">mbedtls_mpi_cmp_int</a> from Obj/library_bignum.o(.text.mbedtls_mpi_cmp_int) referenced from Obj/library_ecdsa.o(.text.mbedtls_ecdsa_sign)
<li><a href="#[523]">mbedtls_mpi_add_abs</a> from Obj/library_bignum.o(.text.mbedtls_mpi_add_abs) referenced from Obj/library_bignum.o(.text.mbedtls_mpi_add_mpi)
<li><a href="#[524]">mbedtls_mpi_sub_abs</a> from Obj/library_bignum.o(.text.mbedtls_mpi_sub_abs) referenced from Obj/library_bignum.o(.text.mbedtls_mpi_add_mpi)
<li><a href="#[525]">mbedtls_mpi_add_mpi</a> from Obj/library_bignum.o(.text.mbedtls_mpi_add_mpi) referenced from Obj/library_bignum.o(.text.mbedtls_mpi_read_string)
<li><a href="#[526]">mbedtls_mpi_sub_mpi</a> from Obj/library_bignum.o(.text.mbedtls_mpi_sub_mpi) referenced from Obj/library_bignum.o(.text.mbedtls_mpi_sub_int)
<li><a href="#[528]">mbedtls_mpi_sub_int</a> from Obj/library_bignum.o(.text.mbedtls_mpi_sub_int) referenced from Obj/library_rsa.o(.text.mbedtls_rsa_check_privkey)
<li><a href="#[529]">mbedtls_mpi_mul_mpi</a> from Obj/library_bignum.o(.text.mbedtls_mpi_mul_mpi) referenced from Obj/library_bignum.o(.text.mbedtls_mpi_read_string)
<li><a href="#[52a]">mbedtls_mpi_read_string</a> from Obj/library_bignum.o(.text.mbedtls_mpi_read_string) referenced from Obj/library_bignum.o(.text.mbedtls_mpi_self_test)
<li><a href="#[52c]">mbedtls_mpi_div_mpi</a> from Obj/library_bignum.o(.text.mbedtls_mpi_div_mpi) referenced from Obj/library_bignum.o(.text.mbedtls_mpi_mod_mpi)
<li><a href="#[52e]">mbedtls_mpi_mod_mpi</a> from Obj/library_bignum.o(.text.mbedtls_mpi_mod_mpi) referenced from Obj/library_bignum.o(.text.mbedtls_mpi_exp_mod)
<li><a href="#[530]">mpi_sub_hlp</a> from Obj/library_bignum.o(.text.mpi_sub_hlp) referenced from Obj/library_bignum.o(.text.mpi_montmul.isra.2)
<li><a href="#[531]">mpi_mul_hlp</a> from Obj/library_bignum.o(.text.mpi_mul_hlp) referenced from Obj/library_bignum.o(.text.mpi_montmul.isra.2)
<li><a href="#[533]">mbedtls_mpi_init</a> from Obj/library_bignum.o(.text.mbedtls_mpi_init) referenced from Obj/library_ecdsa.o(.text.mbedtls_ecdsa_sign)
<li><a href="#[534]">mbedtls_mpi_free</a> from Obj/library_bignum.o(.text.mbedtls_mpi_free) referenced from Obj/library_bignum.o(.text.mbedtls_mpi_copy)
<li><a href="#[535]">mbedtls_mpi_grow</a> from Obj/library_bignum.o(.text.mbedtls_mpi_grow) referenced from Obj/library_bignum.o(.text.mbedtls_mpi_copy)
<li><a href="#[537]">mbedtls_mpi_copy</a> from Obj/library_bignum.o(.text.mbedtls_mpi_copy) referenced from Obj/library_bignum.o(.text.mbedtls_mpi_add_abs)
<li><a href="#[53b]">mbedtls_mpi_lset</a> from Obj/library_bignum.o(.text.mbedtls_mpi_lset) referenced from Obj/library_bignum.o(.text.mbedtls_mpi_read_binary)
<li><a href="#[53c]">mbedtls_mpi_get_bit</a> from Obj/library_bignum.o(.text.mbedtls_mpi_get_bit) referenced from Obj/library_ecp_alt.o(.text.mbedtls_ecp_point_write_binary)
<li><a href="#[53f]">mbedtls_mpi_bitlen</a> from Obj/library_bignum.o(.text.mbedtls_mpi_bitlen) referenced from Obj/library_bignum.o(.text.mbedtls_mpi_size)
<li><a href="#[540]">mbedtls_mpi_size</a> from Obj/library_bignum.o(.text.mbedtls_mpi_size) referenced from Obj/library_asn1write.o(.text.mbedtls_asn1_write_mpi)
<li><a href="#[541]">mbedtls_mpi_read_binary</a> from Obj/library_bignum.o(.text.mbedtls_mpi_read_binary) referenced from Obj/library_asn1parse.o(.text.mbedtls_asn1_get_mpi)
<li><a href="#[545]">mbedtls_mpi_exp_mod</a> from Obj/library_bignum.o(.text.mbedtls_mpi_exp_mod) referenced from Obj/library_bignum.o(.text.mbedtls_mpi_self_test)
<li><a href="#[546]">mbedtls_mpi_gcd</a> from Obj/library_bignum.o(.text.mbedtls_mpi_gcd) referenced from Obj/library_bignum.o(.text.mbedtls_mpi_inv_mod)
<li><a href="#[547]">mbedtls_mpi_fill_random</a> from Obj/library_bignum.o(.text.mbedtls_mpi_fill_random) referenced from Obj/library_ecdsa.o(.text.mbedtls_ecdsa_sign)
<li><a href="#[549]">mbedtls_mpi_inv_mod</a> from Obj/library_bignum.o(.text.mbedtls_mpi_inv_mod) referenced from Obj/library_bignum.o(.text.mbedtls_mpi_self_test)
<li><a href="#[54c]">mbedtls_mpi_self_test</a> from Obj/library_bignum.o(.text.mbedtls_mpi_self_test) referenced from Obj/samples_crypto_app_test.o(.text.mbedtls_crypto_test)
<li><a href="#[54d]">ccm_update_mac.isra.0</a> from Obj/library_ccm.o(.text.ccm_update_mac.isra.0) referenced from Obj/library_ccm.o(.text.ccm_auth_crypt)
<li><a href="#[54e]">ccm_auth_crypt</a> from Obj/library_ccm.o(.text.ccm_auth_crypt) referenced from Obj/library_ccm.o(.text.mbedtls_ccm_encrypt_and_tag)
<li><a href="#[54f]">mbedtls_ccm_init</a> from Obj/library_ccm.o(.text.mbedtls_ccm_init) referenced from Obj/library_cipher_wrap.o(.text.ccm_ctx_alloc)
<li><a href="#[550]">mbedtls_ccm_setkey</a> from Obj/library_ccm.o(.text.mbedtls_ccm_setkey) referenced from Obj/library_ccm.o(.text.mbedtls_ccm_self_test)
<li><a href="#[551]">mbedtls_ccm_free</a> from Obj/library_ccm.o(.text.mbedtls_ccm_free) referenced from Obj/library_cipher_wrap.o(.text.ccm_ctx_free)
<li><a href="#[552]">mbedtls_ccm_encrypt_and_tag</a> from Obj/library_ccm.o(.text.mbedtls_ccm_encrypt_and_tag) referenced from Obj/library_cipher.o(.text.mbedtls_cipher_auth_encrypt)
<li><a href="#[553]">mbedtls_ccm_auth_decrypt</a> from Obj/library_ccm.o(.text.mbedtls_ccm_auth_decrypt) referenced from Obj/library_ccm.o(.text.mbedtls_ccm_self_test)
<li><a href="#[554]">mbedtls_ccm_self_test</a> from Obj/library_ccm.o(.text.mbedtls_ccm_self_test) referenced from Obj/samples_crypto_app_test.o(.text.mbedtls_crypto_test)
<li><a href="#[555]">mbedtls_cipher_reset</a> from Obj/library_cipher.o(.text.mbedtls_cipher_reset) referenced from Obj/library_pkcs12.o(.text.mbedtls_pkcs12_pbe)
<li><a href="#[557]">mbedtls_cipher_update</a> from Obj/library_cipher.o(.text.mbedtls_cipher_update) referenced from Obj/library_cipher.o(.text.mbedtls_cipher_crypt)
<li><a href="#[558]">mbedtls_cipher_finish</a> from Obj/library_cipher.o(.text.mbedtls_cipher_finish) referenced from Obj/library_cipher.o(.text.mbedtls_cipher_crypt)
<li><a href="#[559]">mbedtls_cipher_set_padding_mode</a> from Obj/library_cipher.o(.text.mbedtls_cipher_set_padding_mode) referenced from Obj/library_ssl_tls.o(.text.mbedtls_ssl_derive_keys)
<li><a href="#[55c]">mbedtls_cipher_crypt</a> from Obj/library_cipher.o(.text.mbedtls_cipher_crypt) referenced from Obj/library_pkcs5.o(.text.mbedtls_pkcs5_pbes2)
<li><a href="#[55d]">mbedtls_cipher_auth_encrypt</a> from Obj/library_cipher.o(.text.mbedtls_cipher_auth_encrypt) referenced from Obj/library_ssl_tls.o(.text.mbedtls_ssl_write_record)
<li><a href="#[55e]">mbedtls_cipher_auth_decrypt</a> from Obj/library_cipher.o(.text.mbedtls_cipher_auth_decrypt) referenced from Obj/library_ssl_tls.o(.text.mbedtls_ssl_read_record_layer)
<li><a href="#[569]">mbedtls_cipher_info_from_type</a> from Obj/library_cipher.o(.text.mbedtls_cipher_info_from_type) referenced from Obj/library_cmac.o(.text.cmac_test_subkeys.constprop.2)
<li><a href="#[56b]">mbedtls_cipher_info_from_values</a> from Obj/library_cipher.o(.text.mbedtls_cipher_info_from_values) referenced from Obj/library_ccm.o(.text.mbedtls_ccm_setkey)
<li><a href="#[56c]">mbedtls_cipher_init</a> from Obj/library_cipher.o(.text.mbedtls_cipher_init) referenced from Obj/library_cmac.o(.text.cmac_test_subkeys.constprop.2)
<li><a href="#[56d]">mbedtls_cipher_free</a> from Obj/library_cipher.o(.text.mbedtls_cipher_free) referenced from Obj/library_ccm.o(.text.mbedtls_ccm_setkey)
<li><a href="#[56e]">mbedtls_cipher_setup</a> from Obj/library_cipher.o(.text.mbedtls_cipher_setup) referenced from Obj/library_ccm.o(.text.mbedtls_ccm_setkey)
<li><a href="#[56f]">mbedtls_cipher_setkey</a> from Obj/library_cipher.o(.text.mbedtls_cipher_setkey) referenced from Obj/library_ccm.o(.text.mbedtls_ccm_setkey)
<li><a href="#[570]">mbedtls_cipher_set_iv</a> from Obj/library_cipher.o(.text.mbedtls_cipher_set_iv) referenced from Obj/library_cipher.o(.text.mbedtls_cipher_crypt)
<li><a href="#[595]">cmac_multiply_by_u</a> from Obj/library_cmac.o(.text.cmac_multiply_by_u) referenced from Obj/library_cmac.o(.text.cmac_generate_subkeys)
<li><a href="#[596]">cmac_generate_subkeys</a> from Obj/library_cmac.o(.text.cmac_generate_subkeys) referenced from Obj/library_cmac.o(.text.cmac_test_subkeys.constprop.2)
<li><a href="#[597]">cmac_test_subkeys.constprop.2</a> from Obj/library_cmac.o(.text.cmac_test_subkeys.constprop.2) referenced from Obj/library_cmac.o(.text.mbedtls_cmac_self_test)
<li><a href="#[598]">mbedtls_cipher_cmac_starts</a> from Obj/library_cmac.o(.text.mbedtls_cipher_cmac_starts) referenced from Obj/library_cmac.o(.text.mbedtls_cipher_cmac)
<li><a href="#[599]">mbedtls_cipher_cmac_update</a> from Obj/library_cmac.o(.text.mbedtls_cipher_cmac_update) referenced from Obj/library_cmac.o(.text.mbedtls_cipher_cmac)
<li><a href="#[59a]">mbedtls_cipher_cmac_finish</a> from Obj/library_cmac.o(.text.mbedtls_cipher_cmac_finish) referenced from Obj/library_cmac.o(.text.mbedtls_cipher_cmac)
<li><a href="#[59c]">mbedtls_cipher_cmac</a> from Obj/library_cmac.o(.text.mbedtls_cipher_cmac) referenced from Obj/library_cmac.o(.text.cmac_test_wth_cipher.constprop.1)
<li><a href="#[59d]">cmac_test_wth_cipher.constprop.1</a> from Obj/library_cmac.o(.text.cmac_test_wth_cipher.constprop.1) referenced from Obj/library_cmac.o(.text.mbedtls_cmac_self_test)
<li><a href="#[59e]">mbedtls_aes_cmac_prf_128</a> from Obj/library_cmac.o(.text.mbedtls_aes_cmac_prf_128) referenced from Obj/library_cmac.o(.text.mbedtls_cmac_self_test)
<li><a href="#[59f]">mbedtls_cmac_self_test</a> from Obj/library_cmac.o(.text.mbedtls_cmac_self_test) referenced from Obj/samples_crypto_app_test.o(.text.mbedtls_crypto_test)
<li><a href="#[5a1]">block_cipher_df</a> from Obj/library_ctr_drbg.o(.text.block_cipher_df) referenced from Obj/library_ctr_drbg.o(.text.mbedtls_ctr_drbg_reseed)
<li><a href="#[5a2]">ctr_drbg_update_internal</a> from Obj/library_ctr_drbg.o(.text.ctr_drbg_update_internal) referenced from Obj/library_ctr_drbg.o(.text.mbedtls_ctr_drbg_reseed)
<li><a href="#[5a4]">mbedtls_ctr_drbg_free</a> from Obj/library_ctr_drbg.o(.text.mbedtls_ctr_drbg_free) referenced from Obj/library_ctr_drbg.o(.text.mbedtls_ctr_drbg_self_test)
<li><a href="#[5a9]">mbedtls_ctr_drbg_reseed</a> from Obj/library_ctr_drbg.o(.text.mbedtls_ctr_drbg_reseed) referenced from Obj/library_ctr_drbg.o(.text.mbedtls_ctr_drbg_seed_entropy_len)
<li><a href="#[5aa]">mbedtls_ctr_drbg_seed_entropy_len</a> from Obj/library_ctr_drbg.o(.text.mbedtls_ctr_drbg_seed_entropy_len) referenced from Obj/library_ctr_drbg.o(.text.mbedtls_ctr_drbg_self_test)
<li><a href="#[5ac]">mbedtls_ctr_drbg_random_with_add</a> from Obj/library_ctr_drbg.o(.text.mbedtls_ctr_drbg_random_with_add) referenced from Obj/library_ctr_drbg.o(.text.mbedtls_ctr_drbg_random)
<li><a href="#[5ad]">mbedtls_ctr_drbg_random</a> from Obj/library_ctr_drbg.o(.text.mbedtls_ctr_drbg_random) referenced from Obj/library_ctr_drbg.o(.text.mbedtls_ctr_drbg_self_test)
<li><a href="#[5ae]">mbedtls_ctr_drbg_self_test</a> from Obj/library_ctr_drbg.o(.text.mbedtls_ctr_drbg_self_test) referenced from Obj/samples_crypto_app_test.o(.text.mbedtls_crypto_test)
<li><a href="#[5af]">mbedtls_debug_print_mpi.part.0</a> from Obj/library_debug.o(.text.mbedtls_debug_print_mpi.part.0) referenced from Obj/library_debug.o(.text.mbedtls_debug_print_mpi)
<li><a href="#[5b0]">mbedtls_debug_set_threshold</a> from Obj/library_debug.o(.text.mbedtls_debug_set_threshold) referenced from Obj/src_tls_client.o(.text.tls_cli_session_init)
<li><a href="#[5b1]">mbedtls_debug_print_msg</a> from Obj/library_debug.o(.text.mbedtls_debug_print_msg) referenced from Obj/library_ssl_cli.o(.text.ssl_write_client_hello)
<li><a href="#[5b2]">mbedtls_debug_print_ret</a> from Obj/library_debug.o(.text.mbedtls_debug_print_ret) referenced from Obj/library_ssl_cli.o(.text.ssl_write_client_hello)
<li><a href="#[5b3]">mbedtls_debug_print_buf</a> from Obj/library_debug.o(.text.mbedtls_debug_print_buf) referenced from Obj/library_ssl_cli.o(.text.ssl_write_client_hello)
<li><a href="#[5b4]">mbedtls_debug_print_mpi</a> from Obj/library_debug.o(.text.mbedtls_debug_print_mpi) referenced from Obj/library_debug.o(.text.mbedtls_debug_print_ecp.part.1)
<li><a href="#[5b5]">mbedtls_debug_print_ecp.part.1</a> from Obj/library_debug.o(.text.mbedtls_debug_print_ecp.part.1) referenced from Obj/library_debug.o(.text.mbedtls_debug_print_ecp)
<li><a href="#[5b6]">mbedtls_debug_print_ecp</a> from Obj/library_debug.o(.text.mbedtls_debug_print_ecp) referenced from Obj/library_debug.o(.text.mbedtls_debug_print_crt)
<li><a href="#[5b7]">mbedtls_debug_print_crt</a> from Obj/library_debug.o(.text.mbedtls_debug_print_crt) referenced from Obj/library_ssl_srv.o(.text.ssl_parse_client_hello)
<li><a href="#[5b8]">mbedtls_des3_crypt_ecb</a> from Obj/library_des.o(.text.mbedtls_des3_crypt_ecb) referenced from Obj/library_cipher_wrap.o(.text.des3_crypt_ecb_wrap)
<li><a href="#[5b9]">mbedtls_des3_crypt_cbc</a> from Obj/library_des.o(.text.mbedtls_des3_crypt_cbc) referenced from Obj/library_cipher_wrap.o(.text.des3_crypt_cbc_wrap)
<li><a href="#[5ba]">mbedtls_des_self_test</a> from Obj/library_des.o(.text.mbedtls_des_self_test) referenced from Obj/samples_crypto_app_test.o(.text.mbedtls_crypto_test)
<li><a href="#[5bb]">mbedtls_des_init</a> from Obj/library_des.o(.text.mbedtls_des_init) referenced from Obj/library_cipher_wrap.o(.text.des_ctx_alloc)
<li><a href="#[5bc]">mbedtls_des_free</a> from Obj/library_des.o(.text.mbedtls_des_free) referenced from Obj/library_cipher_wrap.o(.text.des_ctx_free)
<li><a href="#[5bd]">mbedtls_des3_init</a> from Obj/library_des.o(.text.mbedtls_des3_init) referenced from Obj/library_cipher_wrap.o(.text.des3_ctx_alloc)
<li><a href="#[5be]">mbedtls_des3_free</a> from Obj/library_des.o(.text.mbedtls_des3_free) referenced from Obj/library_cipher_wrap.o(.text.des3_ctx_free)
<li><a href="#[5c2]">mbedtls_des_setkey</a> from Obj/library_des.o(.text.mbedtls_des_setkey) referenced from Obj/library_des.o(.text.des3_set2key)
<li><a href="#[5c3]">des3_set2key</a> from Obj/library_des.o(.text.des3_set2key) referenced from Obj/library_des.o(.text.mbedtls_des3_set2key_enc)
<li><a href="#[5c4]">des3_set3key</a> from Obj/library_des.o(.text.des3_set3key) referenced from Obj/library_des.o(.text.mbedtls_des3_set3key_enc)
<li><a href="#[5c5]">mbedtls_des_setkey_enc</a> from Obj/library_des.o(.text.mbedtls_des_setkey_enc) referenced from Obj/library_cipher_wrap.o(.text.des_setkey_enc_wrap)
<li><a href="#[5c6]">mbedtls_des_setkey_dec</a> from Obj/library_des.o(.text.mbedtls_des_setkey_dec) referenced from Obj/library_cipher_wrap.o(.text.des_setkey_dec_wrap)
<li><a href="#[5c7]">mbedtls_des3_set2key_enc</a> from Obj/library_des.o(.text.mbedtls_des3_set2key_enc) referenced from Obj/library_cipher_wrap.o(.text.des3_set2key_enc_wrap)
<li><a href="#[5c8]">mbedtls_des3_set2key_dec</a> from Obj/library_des.o(.text.mbedtls_des3_set2key_dec) referenced from Obj/library_cipher_wrap.o(.text.des3_set2key_dec_wrap)
<li><a href="#[5c9]">mbedtls_des3_set3key_enc</a> from Obj/library_des.o(.text.mbedtls_des3_set3key_enc) referenced from Obj/library_cipher_wrap.o(.text.des3_set3key_enc_wrap)
<li><a href="#[5ca]">mbedtls_des3_set3key_dec</a> from Obj/library_des.o(.text.mbedtls_des3_set3key_dec) referenced from Obj/library_cipher_wrap.o(.text.des3_set3key_dec_wrap)
<li><a href="#[5cb]">mbedtls_des_crypt_ecb</a> from Obj/library_des.o(.text.mbedtls_des_crypt_ecb) referenced from Obj/library_cipher_wrap.o(.text.des_crypt_ecb_wrap)
<li><a href="#[5cc]">mbedtls_des_crypt_cbc</a> from Obj/library_des.o(.text.mbedtls_des_crypt_cbc) referenced from Obj/library_cipher_wrap.o(.text.des_crypt_cbc_wrap)
<li><a href="#[5ce]">mbedtls_ecdh_compute_shared</a> from Obj/library_ecdh.o(.text.mbedtls_ecdh_compute_shared) referenced from Obj/library_ecdh.o(.text.mbedtls_ecdh_calc_secret)
<li><a href="#[5cf]">mbedtls_ecdh_init</a> from Obj/library_ecdh.o(.text.mbedtls_ecdh_init) referenced from Obj/library_ssl_tls.o(.text.ssl_handshake_init)
<li><a href="#[5d0]">mbedtls_ecdh_free</a> from Obj/library_ecdh.o(.text.mbedtls_ecdh_free) referenced from Obj/library_ssl_tls.o(.text.mbedtls_ssl_handshake_free)
<li><a href="#[5d1]">mbedtls_ecdh_make_params</a> from Obj/library_ecdh.o(.text.mbedtls_ecdh_make_params) referenced from Obj/library_ssl_srv.o(.text.ssl_write_server_key_exchange)
<li><a href="#[5d2]">mbedtls_ecdh_read_params</a> from Obj/library_ecdh.o(.text.mbedtls_ecdh_read_params) referenced from Obj/library_ssl_cli.o(.text.ssl_parse_server_key_exchange)
<li><a href="#[5d3]">mbedtls_ecdh_get_params</a> from Obj/library_ecdh.o(.text.mbedtls_ecdh_get_params) referenced from Obj/library_ssl_cli.o(.text.ssl_parse_server_key_exchange)
<li><a href="#[5d4]">mbedtls_ecdh_make_public</a> from Obj/library_ecdh.o(.text.mbedtls_ecdh_make_public) referenced from Obj/library_ssl_cli.o(.text.mbedtls_ssl_handshake_client_step)
<li><a href="#[5d5]">mbedtls_ecdh_read_public</a> from Obj/library_ecdh.o(.text.mbedtls_ecdh_read_public) referenced from Obj/library_ssl_srv.o(.text.mbedtls_ssl_handshake_server_step)
<li><a href="#[5d6]">mbedtls_ecdh_calc_secret</a> from Obj/library_ecdh.o(.text.mbedtls_ecdh_calc_secret) referenced from Obj/library_ssl_cli.o(.text.mbedtls_ssl_handshake_client_step)
<li><a href="#[5e6]">derive_mpi</a> from Obj/library_ecdsa.o(.text.derive_mpi) referenced from Obj/library_ecdsa.o(.text.mbedtls_ecdsa_sign)
<li><a href="#[5e7]">mbedtls_ecdsa_sign</a> from Obj/library_ecdsa.o(.text.mbedtls_ecdsa_sign) referenced from Obj/library_ecdsa.o(.text.mbedtls_ecdsa_sign_det)
<li><a href="#[5e8]">mbedtls_ecdsa_sign_det</a> from Obj/library_ecdsa.o(.text.mbedtls_ecdsa_sign_det) referenced from Obj/library_ecdsa.o(.text.mbedtls_ecdsa_write_signature)
<li><a href="#[5e9]">mbedtls_ecdsa_verify</a> from Obj/library_ecdsa.o(.text.mbedtls_ecdsa_verify) referenced from Obj/library_ecdsa.o(.text.mbedtls_ecdsa_read_signature)
<li><a href="#[5ea]">mbedtls_ecdsa_write_signature</a> from Obj/library_ecdsa.o(.text.mbedtls_ecdsa_write_signature) referenced from Obj/library_pk_wrap.o(.text.ecdsa_sign_wrap)
<li><a href="#[5ec]">mbedtls_ecdsa_read_signature</a> from Obj/library_ecdsa.o(.text.mbedtls_ecdsa_read_signature) referenced from Obj/library_pk_wrap.o(.text.ecdsa_verify_wrap)
<li><a href="#[5ee]">mbedtls_ecdsa_from_keypair</a> from Obj/library_ecdsa.o(.text.mbedtls_ecdsa_from_keypair) referenced from Obj/library_pk_wrap.o(.text.eckey_sign_wrap)
<li><a href="#[5ef]">mbedtls_ecdsa_init</a> from Obj/library_ecdsa.o(.text.mbedtls_ecdsa_init) referenced from Obj/library_pk_wrap.o(.text.ecdsa_alloc_wrap)
<li><a href="#[5f0]">mbedtls_ecdsa_free</a> from Obj/library_ecdsa.o(.text.mbedtls_ecdsa_free) referenced from Obj/library_pk_wrap.o(.text.ecdsa_free_wrap)
<li><a href="#[5f1]">mbedtls_ecdsa_sm2_sign</a> from Obj/library_ecdsa_sm2.o(.text.mbedtls_ecdsa_sm2_sign) referenced from Obj/library_ecdsa_sm2.o(.text.mbedtls_ecdsa_sm2_sign_det)
<li><a href="#[5f2]">mbedtls_ecdsa_sm2_sign_det</a> from Obj/library_ecdsa_sm2.o(.text.mbedtls_ecdsa_sm2_sign_det) referenced from Obj/library_ecdsa_sm2.o(.text.mbedtls_ecdsa_sm2_write_signature)
<li><a href="#[5f3]">mbedtls_ecdsa_sm2_verify</a> from Obj/library_ecdsa_sm2.o(.text.mbedtls_ecdsa_sm2_verify) referenced from Obj/library_ecdsa_sm2.o(.text.mbedtls_ecdsa_sm2_read_signature)
<li><a href="#[5f4]">mbedtls_ecdsa_sm2_write_signature</a> from Obj/library_ecdsa_sm2.o(.text.mbedtls_ecdsa_sm2_write_signature) referenced from Obj/library_pk_wrap.o(.text.ecdsa_sm2_sign_wrap)
<li><a href="#[5f6]">mbedtls_ecdsa_sm2_read_signature</a> from Obj/library_ecdsa_sm2.o(.text.mbedtls_ecdsa_sm2_read_signature) referenced from Obj/library_pk_wrap.o(.text.ecdsa_sm2_verify_wrap)
<li><a href="#[5f9]">mbedtls_ecdsa_sm2_init</a> from Obj/library_ecdsa_sm2.o(.text.mbedtls_ecdsa_sm2_init) referenced from Obj/library_pk_wrap.o(.text.ecdsa_sm2_alloc_wrap)
<li><a href="#[5fa]">mbedtls_ecdsa_sm2_free</a> from Obj/library_ecdsa_sm2.o(.text.mbedtls_ecdsa_sm2_free) referenced from Obj/library_pk_wrap.o(.text.ecdsa_sm2_free_wrap)
<li><a href="#[5fd]">mbedtls_ecp_grp_id_list</a> from Obj/library_ecp_alt.o(.text.mbedtls_ecp_grp_id_list) referenced from Obj/library_pkparse.o(.text.pk_use_ecparams)
<li><a href="#[5fe]">mbedtls_ecp_curve_info_from_grp_id</a> from Obj/library_ecp_alt.o(.text.mbedtls_ecp_curve_info_from_grp_id) referenced from Obj/library_ssl_cli.o(.text.ssl_write_client_hello)
<li><a href="#[5ff]">mbedtls_ecp_curve_info_from_tls_id</a> from Obj/library_ecp_alt.o(.text.mbedtls_ecp_curve_info_from_tls_id) referenced from Obj/library_ssl_srv.o(.text.ssl_parse_client_hello)
<li><a href="#[601]">mbedtls_ecp_point_init</a> from Obj/library_ecp_alt.o(.text.mbedtls_ecp_point_init) referenced from Obj/library_ecdh.o(.text.mbedtls_ecdh_compute_shared)
<li><a href="#[602]">mbedtls_ecp_group_init</a> from Obj/library_ecp_alt.o(.text.mbedtls_ecp_group_init) referenced from Obj/library_pkparse.o(.text.pk_use_ecparams)
<li><a href="#[603]">mbedtls_ecp_keypair_init</a> from Obj/library_ecp_alt.o(.text.mbedtls_ecp_keypair_init) referenced from Obj/library_ecdsa.o(.text.mbedtls_ecdsa_init)
<li><a href="#[604]">mbedtls_ecp_point_free</a> from Obj/library_ecp_alt.o(.text.mbedtls_ecp_point_free) referenced from Obj/library_ecdh.o(.text.mbedtls_ecdh_compute_shared)
<li><a href="#[605]">mbedtls_ecp_group_free</a> from Obj/library_ecp_alt.o(.text.mbedtls_ecp_group_free) referenced from Obj/library_ecdh.o(.text.mbedtls_ecdh_free)
<li><a href="#[606]">mbedtls_ecp_keypair_free</a> from Obj/library_ecp_alt.o(.text.mbedtls_ecp_keypair_free) referenced from Obj/library_ecdsa.o(.text.mbedtls_ecdsa_from_keypair)
<li><a href="#[607]">mbedtls_ecp_copy</a> from Obj/library_ecp_alt.o(.text.mbedtls_ecp_copy) referenced from Obj/library_ecdh.o(.text.mbedtls_ecdh_get_params)
<li><a href="#[608]">mbedtls_ecp_group_copy</a> from Obj/library_ecp_alt.o(.text.mbedtls_ecp_group_copy) referenced from Obj/library_ecdh.o(.text.mbedtls_ecdh_get_params)
<li><a href="#[609]">mbedtls_ecp_set_zero</a> from Obj/library_ecp_alt.o(.text.mbedtls_ecp_set_zero) referenced from Obj/library_ecp_alt.o(.text.mbedtls_ecp_point_read_binary)
<li><a href="#[60a]">mbedtls_ecp_is_zero</a> from Obj/library_ecp_alt.o(.text.mbedtls_ecp_is_zero) referenced from Obj/library_ecdh.o(.text.mbedtls_ecdh_compute_shared)
<li><a href="#[60d]">mbedtls_ecp_point_write_binary</a> from Obj/library_ecp_alt.o(.text.mbedtls_ecp_point_write_binary) referenced from Obj/library_ecp_alt.o(.text.mbedtls_ecp_tls_write_point)
<li><a href="#[60e]">mbedtls_ecp_point_read_binary</a> from Obj/library_ecp_alt.o(.text.mbedtls_ecp_point_read_binary) referenced from Obj/library_ecp_alt.o(.text.mbedtls_ecp_tls_read_point)
<li><a href="#[60f]">mbedtls_ecp_tls_read_point</a> from Obj/library_ecp_alt.o(.text.mbedtls_ecp_tls_read_point) referenced from Obj/library_ecdh.o(.text.mbedtls_ecdh_read_params)
<li><a href="#[610]">mbedtls_ecp_tls_write_point</a> from Obj/library_ecp_alt.o(.text.mbedtls_ecp_tls_write_point) referenced from Obj/library_ecdh.o(.text.mbedtls_ecdh_make_params)
<li><a href="#[611]">mbedtls_ecp_tls_read_group</a> from Obj/library_ecp_alt.o(.text.mbedtls_ecp_tls_read_group) referenced from Obj/library_ecdh.o(.text.mbedtls_ecdh_read_params)
<li><a href="#[612]">mbedtls_ecp_tls_write_group</a> from Obj/library_ecp_alt.o(.text.mbedtls_ecp_tls_write_group) referenced from Obj/library_ecdh.o(.text.mbedtls_ecdh_make_params)
<li><a href="#[614]">mbedtls_ecp_muladd</a> from Obj/library_ecp_alt.o(.text.mbedtls_ecp_muladd) referenced from Obj/library_ecdsa.o(.text.mbedtls_ecdsa_verify)
<li><a href="#[615]">mbedtls_ecp_check_pubkey</a> from Obj/library_ecp_alt.o(.text.mbedtls_ecp_check_pubkey) referenced from Obj/library_ecdh.o(.text.mbedtls_ecdh_compute_shared)
<li><a href="#[616]">mbedtls_ecp_check_privkey</a> from Obj/library_ecp_alt.o(.text.mbedtls_ecp_check_privkey) referenced from Obj/library_ecp_alt.o(.text.mbedtls_ecp_mul)
<li><a href="#[617]">mbedtls_ecp_mul</a> from Obj/library_ecp_alt.o(.text.mbedtls_ecp_mul) referenced from Obj/library_ecdh.o(.text.mbedtls_ecdh_compute_shared)
<li><a href="#[618]">mbedtls_ecp_gen_keypair_base</a> from Obj/library_ecp_alt.o(.text.mbedtls_ecp_gen_keypair_base) referenced from Obj/library_ecp_alt.o(.text.mbedtls_ecp_gen_keypair)
<li><a href="#[619]">mbedtls_ecp_gen_keypair</a> from Obj/library_ecp_alt.o(.text.mbedtls_ecp_gen_keypair) referenced from Obj/library_ecdh.o(.text.mbedtls_ecdh_make_params)
<li><a href="#[61b]">mbedtls_ecp_check_pub_priv</a> from Obj/library_ecp_alt.o(.text.mbedtls_ecp_check_pub_priv) referenced from Obj/library_pk_wrap.o(.text.eckey_check_pair)
<li><a href="#[61c]">mbedtls_ecp_self_test</a> from Obj/library_ecp_alt.o(.text.mbedtls_ecp_self_test) referenced from Obj/samples_crypto_app_test.o(.text.mbedtls_crypto_test)
<li><a href="#[61d]">mbedtls_ecp_group_load</a> from Obj/library_ecp_curves_alt.o(.text.mbedtls_ecp_group_load) referenced from Obj/library_ecp_alt.o(.text.mbedtls_ecp_group_copy)
<li><a href="#[61f]">entropy_update</a> from Obj/library_entropy.o(.text.entropy_update) referenced from Obj/library_entropy.o(.text.entropy_gather_internal)
<li><a href="#[620]">entropy_gather_internal</a> from Obj/library_entropy.o(.text.entropy_gather_internal) referenced from Obj/library_entropy.o(.text.mbedtls_entropy_gather)
<li><a href="#[621]">mbedtls_entropy_source_self_test_gather.constprop.0</a> from Obj/library_entropy.o(.text.mbedtls_entropy_source_self_test_gather.constprop.0) referenced from Obj/library_entropy.o(.text.mbedtls_entropy_source_self_test)
<li><a href="#[623]">mbedtls_entropy_add_source</a> from Obj/library_entropy.o(.text.mbedtls_entropy_add_source) referenced from Obj/library_entropy.o(.text.mbedtls_entropy_init)
<li><a href="#[624]">mbedtls_entropy_init</a> from Obj/library_entropy.o(.text.mbedtls_entropy_init) referenced from Obj/library_entropy.o(.text.mbedtls_entropy_self_test)
<li><a href="#[625]">mbedtls_entropy_update_manual</a> from Obj/library_entropy.o(.text.mbedtls_entropy_update_manual) referenced from Obj/library_entropy.o(.text.mbedtls_entropy_self_test)
<li><a href="#[626]">mbedtls_entropy_gather</a> from Obj/library_entropy.o(.text.mbedtls_entropy_gather) referenced from Obj/library_entropy.o(.text.mbedtls_entropy_self_test)
<li><a href="#[627]">mbedtls_entropy_func</a> from Obj/library_entropy.o(.text.mbedtls_entropy_func) referenced from Obj/library_entropy.o(.text.mbedtls_entropy_self_test)
<li><a href="#[628]">mbedtls_entropy_source_self_test</a> from Obj/library_entropy.o(.text.mbedtls_entropy_source_self_test) referenced from Obj/library_entropy.o(.text.mbedtls_entropy_self_test)
<li><a href="#[629]">mbedtls_entropy_self_test</a> from Obj/library_entropy.o(.text.mbedtls_entropy_self_test) referenced from Obj/samples_crypto_app_test.o(.text.mbedtls_crypto_test)
<li><a href="#[62c]">gcm_mult</a> from Obj/library_gcm.o(.text.gcm_mult) referenced from Obj/library_gcm.o(.text.mbedtls_gcm_starts)
<li><a href="#[62d]">mbedtls_gcm_init</a> from Obj/library_gcm.o(.text.mbedtls_gcm_init) referenced from Obj/library_cipher_wrap.o(.text.gcm_ctx_alloc)
<li><a href="#[62e]">mbedtls_gcm_setkey</a> from Obj/library_gcm.o(.text.mbedtls_gcm_setkey) referenced from Obj/library_cipher_wrap.o(.text.gcm_aes_setkey_wrap)
<li><a href="#[62f]">mbedtls_gcm_starts</a> from Obj/library_gcm.o(.text.mbedtls_gcm_starts) referenced from Obj/library_gcm.o(.text.mbedtls_gcm_crypt_and_tag)
<li><a href="#[630]">mbedtls_gcm_update</a> from Obj/library_gcm.o(.text.mbedtls_gcm_update) referenced from Obj/library_cipher.o(.text.mbedtls_cipher_update)
<li><a href="#[631]">mbedtls_gcm_finish</a> from Obj/library_gcm.o(.text.mbedtls_gcm_finish) referenced from Obj/library_gcm.o(.text.mbedtls_gcm_crypt_and_tag)
<li><a href="#[632]">mbedtls_gcm_crypt_and_tag</a> from Obj/library_gcm.o(.text.mbedtls_gcm_crypt_and_tag) referenced from Obj/library_cipher.o(.text.mbedtls_cipher_auth_encrypt)
<li><a href="#[633]">mbedtls_gcm_auth_decrypt</a> from Obj/library_gcm.o(.text.mbedtls_gcm_auth_decrypt) referenced from Obj/library_cipher.o(.text.mbedtls_cipher_auth_decrypt)
<li><a href="#[634]">mbedtls_gcm_free</a> from Obj/library_gcm.o(.text.mbedtls_gcm_free) referenced from Obj/library_cipher_wrap.o(.text.gcm_ctx_free)
<li><a href="#[635]">mbedtls_gcm_self_test</a> from Obj/library_gcm.o(.text.mbedtls_gcm_self_test) referenced from Obj/samples_crypto_app_test.o(.text.mbedtls_crypto_test)
<li><a href="#[637]">mbedtls_hmac_drbg_init</a> from Obj/library_hmac_drbg.o(.text.mbedtls_hmac_drbg_init) referenced from Obj/library_ecdsa.o(.text.mbedtls_ecdsa_sign_det)
<li><a href="#[638]">mbedtls_hmac_drbg_update</a> from Obj/library_hmac_drbg.o(.text.mbedtls_hmac_drbg_update) referenced from Obj/library_hmac_drbg.o(.text.mbedtls_hmac_drbg_seed_buf)
<li><a href="#[639]">mbedtls_hmac_drbg_seed_buf</a> from Obj/library_hmac_drbg.o(.text.mbedtls_hmac_drbg_seed_buf) referenced from Obj/library_ecdsa.o(.text.mbedtls_ecdsa_sign_det)
<li><a href="#[63a]">mbedtls_hmac_drbg_reseed</a> from Obj/library_hmac_drbg.o(.text.mbedtls_hmac_drbg_reseed) referenced from Obj/library_hmac_drbg.o(.text.mbedtls_hmac_drbg_seed)
<li><a href="#[63b]">mbedtls_hmac_drbg_seed</a> from Obj/library_hmac_drbg.o(.text.mbedtls_hmac_drbg_seed) referenced from Obj/library_hmac_drbg.o(.text.mbedtls_hmac_drbg_self_test)
<li><a href="#[63f]">mbedtls_hmac_drbg_random_with_add</a> from Obj/library_hmac_drbg.o(.text.mbedtls_hmac_drbg_random_with_add) referenced from Obj/library_hmac_drbg.o(.text.mbedtls_hmac_drbg_random)
<li><a href="#[640]">mbedtls_hmac_drbg_random</a> from Obj/library_hmac_drbg.o(.text.mbedtls_hmac_drbg_random) referenced from Obj/library_hmac_drbg.o(.text.mbedtls_hmac_drbg_self_test)
<li><a href="#[641]">mbedtls_hmac_drbg_free</a> from Obj/library_hmac_drbg.o(.text.mbedtls_hmac_drbg_free) referenced from Obj/library_ecdsa.o(.text.mbedtls_ecdsa_sign_det)
<li><a href="#[642]">mbedtls_hmac_drbg_self_test</a> from Obj/library_hmac_drbg.o(.text.mbedtls_hmac_drbg_self_test) referenced from Obj/samples_crypto_app_test.o(.text.mbedtls_crypto_test)
<li><a href="#[645]">mbedtls_md_info_from_type</a> from Obj/library_md.o(.text.mbedtls_md_info_from_type) referenced from Obj/library_ecdsa.o(.text.mbedtls_ecdsa_sign_det)
<li><a href="#[646]">mbedtls_md_init</a> from Obj/library_md.o(.text.mbedtls_md_init) referenced from Obj/library_pkcs12.o(.text.mbedtls_pkcs12_derivation)
<li><a href="#[647]">mbedtls_md_free</a> from Obj/library_md.o(.text.mbedtls_md_free) referenced from Obj/library_hmac_drbg.o(.text.mbedtls_hmac_drbg_free)
<li><a href="#[649]">mbedtls_md_setup</a> from Obj/library_md.o(.text.mbedtls_md_setup) referenced from Obj/library_hmac_drbg.o(.text.mbedtls_hmac_drbg_seed_buf)
<li><a href="#[64b]">mbedtls_md_starts</a> from Obj/library_md.o(.text.mbedtls_md_starts) referenced from Obj/library_pkcs12.o(.text.mbedtls_pkcs12_derivation)
<li><a href="#[64c]">mbedtls_md_update</a> from Obj/library_md.o(.text.mbedtls_md_update) referenced from Obj/library_pkcs12.o(.text.mbedtls_pkcs12_derivation)
<li><a href="#[64d]">mbedtls_md_finish</a> from Obj/library_md.o(.text.mbedtls_md_finish) referenced from Obj/library_pkcs12.o(.text.mbedtls_pkcs12_derivation)
<li><a href="#[64e]">mbedtls_md</a> from Obj/library_md.o(.text.mbedtls_md) referenced from Obj/library_pkcs12.o(.text.mbedtls_pkcs12_derivation)
<li><a href="#[64f]">mbedtls_md_hmac_starts</a> from Obj/library_md.o(.text.mbedtls_md_hmac_starts) referenced from Obj/library_hmac_drbg.o(.text.mbedtls_hmac_drbg_update)
<li><a href="#[650]">mbedtls_md_hmac_update</a> from Obj/library_md.o(.text.mbedtls_md_hmac_update) referenced from Obj/library_hmac_drbg.o(.text.mbedtls_hmac_drbg_update)
<li><a href="#[651]">mbedtls_md_hmac_finish</a> from Obj/library_md.o(.text.mbedtls_md_hmac_finish) referenced from Obj/library_hmac_drbg.o(.text.mbedtls_hmac_drbg_update)
<li><a href="#[652]">mbedtls_md_hmac_reset</a> from Obj/library_md.o(.text.mbedtls_md_hmac_reset) referenced from Obj/library_hmac_drbg.o(.text.mbedtls_hmac_drbg_update)
<li><a href="#[655]">mbedtls_md_get_size</a> from Obj/library_md.o(.text.mbedtls_md_get_size) referenced from Obj/library_hmac_drbg.o(.text.mbedtls_hmac_drbg_update)
<li><a href="#[657]">mbedtls_md_get_name</a> from Obj/library_md.o(.text.mbedtls_md_get_name) referenced from Obj/library_x509.o(.text.mbedtls_x509_sig_alg_gets)
<li><a href="#[658]">mbedtls_md5_init</a> from Obj/library_md5.o(.text.mbedtls_md5_init) referenced from Obj/library_md_wrap.o(.text.md5_ctx_alloc)
<li><a href="#[659]">mbedtls_md5_free</a> from Obj/library_md5.o(.text.mbedtls_md5_free) referenced from Obj/library_md_wrap.o(.text.md5_ctx_free)
<li><a href="#[65a]">mbedtls_md5_clone</a> from Obj/library_md5.o(.text.mbedtls_md5_clone) referenced from Obj/library_md_wrap.o(.text.md5_clone_wrap)
<li><a href="#[65b]">mbedtls_md5_starts</a> from Obj/library_md5.o(.text.mbedtls_md5_starts) referenced from Obj/library_md_wrap.o(.text.md5_starts_wrap)
<li><a href="#[65c]">mbedtls_md5_process</a> from Obj/library_md5.o(.text.mbedtls_md5_process) referenced from Obj/library_md5.o(.text.mbedtls_md5_update.part.0)
<li><a href="#[65d]">mbedtls_md5_update.part.0</a> from Obj/library_md5.o(.text.mbedtls_md5_update.part.0) referenced from Obj/library_md5.o(.text.mbedtls_md5_update)
<li><a href="#[65e]">mbedtls_md5_update</a> from Obj/library_md5.o(.text.mbedtls_md5_update) referenced from Obj/library_md_wrap.o(.text.md5_update_wrap)
<li><a href="#[65f]">mbedtls_md5_finish</a> from Obj/library_md5.o(.text.mbedtls_md5_finish) referenced from Obj/library_md5.o(.text.mbedtls_md5)
<li><a href="#[660]">mbedtls_md5</a> from Obj/library_md5.o(.text.mbedtls_md5) referenced from Obj/library_md5.o(.text.mbedtls_md5_self_test)
<li><a href="#[661]">mbedtls_md5_self_test</a> from Obj/library_md5.o(.text.mbedtls_md5_self_test) referenced from Obj/samples_crypto_app_test.o(.text.mbedtls_crypto_test)
<li><a href="#[684]">oid_sig_alg_from_asn1</a> from Obj/library_oid.o(.text.oid_sig_alg_from_asn1) referenced from Obj/library_oid.o(.text.mbedtls_oid_get_sig_alg_desc)
<li><a href="#[685]">mbedtls_oid_get_attr_short_name</a> from Obj/library_oid.o(.text.mbedtls_oid_get_attr_short_name) referenced from Obj/library_x509.o(.text.mbedtls_x509_dn_gets)
<li><a href="#[686]">mbedtls_oid_get_x509_ext_type</a> from Obj/library_oid.o(.text.mbedtls_oid_get_x509_ext_type) referenced from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_parse_der)
<li><a href="#[687]">mbedtls_oid_get_extended_key_usage</a> from Obj/library_oid.o(.text.mbedtls_oid_get_extended_key_usage) referenced from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_info)
<li><a href="#[688]">mbedtls_oid_get_sig_alg_desc</a> from Obj/library_oid.o(.text.mbedtls_oid_get_sig_alg_desc) referenced from Obj/library_x509.o(.text.mbedtls_x509_sig_alg_gets)
<li><a href="#[689]">mbedtls_oid_get_sig_alg</a> from Obj/library_oid.o(.text.mbedtls_oid_get_sig_alg) referenced from Obj/library_x509.o(.text.mbedtls_x509_get_sig_alg)
<li><a href="#[68b]">mbedtls_oid_get_pk_alg</a> from Obj/library_oid.o(.text.mbedtls_oid_get_pk_alg) referenced from Obj/library_pkparse.o(.text.pk_get_pk_alg)
<li><a href="#[68d]">mbedtls_oid_get_ec_grp</a> from Obj/library_oid.o(.text.mbedtls_oid_get_ec_grp) referenced from Obj/library_pkparse.o(.text.pk_use_ecparams)
<li><a href="#[68f]">mbedtls_oid_get_cipher_alg</a> from Obj/library_oid.o(.text.mbedtls_oid_get_cipher_alg) referenced from Obj/library_pkcs5.o(.text.mbedtls_pkcs5_pbes2)
<li><a href="#[690]">mbedtls_oid_get_md_alg</a> from Obj/library_oid.o(.text.mbedtls_oid_get_md_alg) referenced from Obj/library_rsa.o(.text.mbedtls_rsa_rsassa_pkcs1_v15_verify)
<li><a href="#[691]">mbedtls_oid_get_oid_by_md</a> from Obj/library_oid.o(.text.mbedtls_oid_get_oid_by_md) referenced from Obj/library_rsa.o(.text.mbedtls_rsa_rsassa_pkcs1_v15_sign)
<li><a href="#[692]">mbedtls_oid_get_pkcs12_pbe_alg</a> from Obj/library_oid.o(.text.mbedtls_oid_get_pkcs12_pbe_alg) referenced from Obj/library_pkparse.o(.text.pk_parse_key_pkcs8_encrypted_der)
<li><a href="#[694]">pem_get_iv</a> from Obj/library_pem.o(.text.pem_get_iv) referenced from Obj/library_pem.o(.text.mbedtls_pem_read_buffer)
<li><a href="#[695]">pem_pbkdf1</a> from Obj/library_pem.o(.text.pem_pbkdf1) referenced from Obj/library_pem.o(.text.pem_des3_decrypt)
<li><a href="#[696]">pem_des3_decrypt</a> from Obj/library_pem.o(.text.pem_des3_decrypt) referenced from Obj/library_pem.o(.text.mbedtls_pem_read_buffer)
<li><a href="#[697]">pem_aes_decrypt</a> from Obj/library_pem.o(.text.pem_aes_decrypt) referenced from Obj/library_pem.o(.text.mbedtls_pem_read_buffer)
<li><a href="#[698]">mbedtls_pem_init</a> from Obj/library_pem.o(.text.mbedtls_pem_init) referenced from Obj/library_pkparse.o(.text.mbedtls_gm_pk_parse_key)
<li><a href="#[699]">mbedtls_pem_read_buffer</a> from Obj/library_pem.o(.text.mbedtls_pem_read_buffer) referenced from Obj/library_pkparse.o(.text.mbedtls_gm_pk_parse_key)
<li><a href="#[69a]">mbedtls_pem_free</a> from Obj/library_pem.o(.text.mbedtls_pem_free) referenced from Obj/library_pkparse.o(.text.mbedtls_gm_pk_parse_key)
<li><a href="#[69c]">mbedtls_pk_init</a> from Obj/library_pk.o(.text.mbedtls_pk_init) referenced from Obj/src_tls_client.o(.text.tls_cli_session_init)
<li><a href="#[69d]">mbedtls_pk_free</a> from Obj/library_pk.o(.text.mbedtls_pk_free) referenced from Obj/library_pkparse.o(.text.pk_parse_key_pkcs8_unencrypted_der)
<li><a href="#[69e]">mbedtls_pk_info_from_type</a> from Obj/library_pk.o(.text.mbedtls_pk_info_from_type) referenced from Obj/library_pkparse.o(.text.pk_parse_key_pkcs8_unencrypted_der)
<li><a href="#[69f]">mbedtls_pk_setup</a> from Obj/library_pk.o(.text.mbedtls_pk_setup) referenced from Obj/library_pkparse.o(.text.pk_parse_key_pkcs8_unencrypted_der)
<li><a href="#[6a1]">mbedtls_pk_can_do</a> from Obj/library_pk.o(.text.mbedtls_pk_can_do) referenced from Obj/library_ssl_cli.o(.text.ssl_write_encrypted_pms)
<li><a href="#[6a2]">mbedtls_pk_verify</a> from Obj/library_pk.o(.text.mbedtls_pk_verify) referenced from Obj/library_pk.o(.text.mbedtls_pk_verify_ext)
<li><a href="#[6a3]">mbedtls_pk_verify_ext</a> from Obj/library_pk.o(.text.mbedtls_pk_verify_ext) referenced from Obj/library_x509_crt.o(.text.x509_crt_verifycrl)
<li><a href="#[6a4]">mbedtls_pk_sign</a> from Obj/library_pk.o(.text.mbedtls_pk_sign) referenced from Obj/library_ssl_cli.o(.text.mbedtls_ssl_handshake_client_step)
<li><a href="#[6a5]">mbedtls_pk_z_get</a> from Obj/library_pk.o(.text.mbedtls_pk_z_get) referenced from Obj/library_ssl_cli.o(.text.ssl_parse_server_key_exchange)
<li><a href="#[6a6]">mbedtls_pk_decrypt</a> from Obj/library_pk.o(.text.mbedtls_pk_decrypt) referenced from Obj/library_ssl_srv.o(.text.ssl_parse_encrypted_pms)
<li><a href="#[6a7]">mbedtls_pk_encrypt</a> from Obj/library_pk.o(.text.mbedtls_pk_encrypt) referenced from Obj/library_ssl_cli.o(.text.ssl_write_encrypted_pms)
<li><a href="#[6a9]">mbedtls_pk_get_bitlen</a> from Obj/library_pk.o(.text.mbedtls_pk_get_bitlen) referenced from Obj/library_ssl_srv.o(.text.ssl_parse_encrypted_pms)
<li><a href="#[6aa]">mbedtls_pk_debug</a> from Obj/library_pk.o(.text.mbedtls_pk_debug) referenced from Obj/library_debug.o(.text.mbedtls_debug_print_crt)
<li><a href="#[6ab]">mbedtls_pk_get_name</a> from Obj/library_pk.o(.text.mbedtls_pk_get_name) referenced from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_info)
<li><a href="#[6ac]">mbedtls_pk_get_type</a> from Obj/library_pk.o(.text.mbedtls_pk_get_type) referenced from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_verify_with_profile)
<li><a href="#[6d4]">mbedtls_pkcs12_pbe_sha1_rc4_128</a> from Obj/library_pkcs12.o(.text.mbedtls_pkcs12_pbe_sha1_rc4_128) referenced from Obj/library_pkparse.o(.text.pk_parse_key_pkcs8_encrypted_der)
<li><a href="#[6d5]">mbedtls_pkcs12_derivation</a> from Obj/library_pkcs12.o(.text.mbedtls_pkcs12_derivation) referenced from Obj/library_pkcs12.o(.text.mbedtls_pkcs12_pbe)
<li><a href="#[6d6]">mbedtls_pkcs12_pbe</a> from Obj/library_pkcs12.o(.text.mbedtls_pkcs12_pbe) referenced from Obj/library_pkparse.o(.text.pk_parse_key_pkcs8_encrypted_der)
<li><a href="#[6d7]">mbedtls_pkcs5_pbkdf2_hmac</a> from Obj/library_pkcs5.o(.text.mbedtls_pkcs5_pbkdf2_hmac) referenced from Obj/library_pkcs5.o(.text.mbedtls_pkcs5_pbes2)
<li><a href="#[6d8]">mbedtls_pkcs5_pbes2</a> from Obj/library_pkcs5.o(.text.mbedtls_pkcs5_pbes2) referenced from Obj/library_pkparse.o(.text.pk_parse_key_pkcs8_encrypted_der)
<li><a href="#[6d9]">mbedtls_pkcs5_self_test</a> from Obj/library_pkcs5.o(.text.mbedtls_pkcs5_self_test) referenced from Obj/samples_crypto_app_test.o(.text.mbedtls_crypto_test)
<li><a href="#[6da]">pk_get_ecpubkey</a> from Obj/library_pkparse.o(.text.pk_get_ecpubkey) referenced from Obj/library_pkparse.o(.text.pk_parse_key_sec1_der)
<li><a href="#[6db]">pk_parse_key_pkcs1_der</a> from Obj/library_pkparse.o(.text.pk_parse_key_pkcs1_der) referenced from Obj/library_pkparse.o(.text.pk_parse_key_pkcs8_unencrypted_der)
<li><a href="#[6dc]">pk_get_pk_alg</a> from Obj/library_pkparse.o(.text.pk_get_pk_alg) referenced from Obj/library_pkparse.o(.text.pk_parse_key_pkcs8_unencrypted_der)
<li><a href="#[6dd]">pk_get_rsapubkey</a> from Obj/library_pkparse.o(.text.pk_get_rsapubkey) referenced from Obj/library_pkparse.o(.text.mbedtls_gm_pk_parse_subpubkey)
<li><a href="#[6de]">pk_use_ecparams</a> from Obj/library_pkparse.o(.text.pk_use_ecparams) referenced from Obj/library_pkparse.o(.text.pk_parse_key_sec1_der)
<li><a href="#[6df]">pk_parse_key_sec1_der</a> from Obj/library_pkparse.o(.text.pk_parse_key_sec1_der) referenced from Obj/library_pkparse.o(.text.pk_parse_key_pkcs8_unencrypted_der)
<li><a href="#[6e0]">pk_parse_key_pkcs8_unencrypted_der</a> from Obj/library_pkparse.o(.text.pk_parse_key_pkcs8_unencrypted_der) referenced from Obj/library_pkparse.o(.text.pk_parse_key_pkcs8_encrypted_der)
<li><a href="#[6e1]">pk_parse_key_pkcs8_encrypted_der</a> from Obj/library_pkparse.o(.text.pk_parse_key_pkcs8_encrypted_der) referenced from Obj/library_pkparse.o(.text.mbedtls_gm_pk_parse_key)
<li><a href="#[6e2]">mbedtls_gm_pk_parse_subpubkey</a> from Obj/library_pkparse.o(.text.mbedtls_gm_pk_parse_subpubkey) referenced from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_parse_der)
<li><a href="#[6e3]">mbedtls_pk_parse_subpubkey</a> from Obj/library_pkparse.o(.text.mbedtls_pk_parse_subpubkey) referenced from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_parse_der)
<li><a href="#[6e4]">mbedtls_gm_pk_parse_key</a> from Obj/library_pkparse.o(.text.mbedtls_gm_pk_parse_key) referenced from Obj/src_tls_client.o(.text.tls_cli_session_config)
<li><a href="#[6e5]">mbedtls_pk_parse_key</a> from Obj/library_pkparse.o(.text.mbedtls_pk_parse_key) referenced from Obj/src_tls_client.o(.text.tls_cli_session_config)
<li><a href="#[6ee]">mgf_mask</a> from Obj/library_rsa.o(.text.mgf_mask) referenced from Obj/library_rsa.o(.text.mbedtls_rsa_rsaes_oaep_encrypt)
<li><a href="#[6f0]">mbedtls_rsa_init</a> from Obj/library_rsa.o(.text.mbedtls_rsa_init) referenced from Obj/library_pk_wrap.o(.text.rsa_alloc_wrap)
<li><a href="#[6f3]">mbedtls_rsa_check_pubkey</a> from Obj/library_rsa.o(.text.mbedtls_rsa_check_pubkey) referenced from Obj/library_pkparse.o(.text.pk_get_rsapubkey)
<li><a href="#[6f4]">mbedtls_rsa_check_privkey</a> from Obj/library_rsa.o(.text.mbedtls_rsa_check_privkey) referenced from Obj/library_pkparse.o(.text.pk_parse_key_pkcs1_der)
<li><a href="#[6f5]">mbedtls_rsa_check_pub_priv</a> from Obj/library_rsa.o(.text.mbedtls_rsa_check_pub_priv) referenced from Obj/library_pk_wrap.o(.text.rsa_check_pair_wrap)
<li><a href="#[6f6]">mbedtls_rsa_public</a> from Obj/library_rsa.o(.text.mbedtls_rsa_public) referenced from Obj/library_rsa.o(.text.mbedtls_rsa_rsaes_oaep_encrypt)
<li><a href="#[6f7]">mbedtls_rsa_private</a> from Obj/library_rsa.o(.text.mbedtls_rsa_private) referenced from Obj/library_rsa.o(.text.mbedtls_rsa_rsaes_oaep_encrypt)
<li><a href="#[6f8]">mbedtls_rsa_rsaes_oaep_encrypt</a> from Obj/library_rsa.o(.text.mbedtls_rsa_rsaes_oaep_encrypt) referenced from Obj/library_rsa.o(.text.mbedtls_rsa_pkcs1_encrypt)
<li><a href="#[6f9]">mbedtls_rsa_rsaes_pkcs1_v15_encrypt</a> from Obj/library_rsa.o(.text.mbedtls_rsa_rsaes_pkcs1_v15_encrypt) referenced from Obj/library_rsa.o(.text.mbedtls_rsa_pkcs1_encrypt)
<li><a href="#[6fa]">mbedtls_rsa_pkcs1_encrypt</a> from Obj/library_rsa.o(.text.mbedtls_rsa_pkcs1_encrypt) referenced from Obj/library_pk_wrap.o(.text.rsa_encrypt_wrap)
<li><a href="#[6fb]">mbedtls_rsa_rsaes_oaep_decrypt</a> from Obj/library_rsa.o(.text.mbedtls_rsa_rsaes_oaep_decrypt) referenced from Obj/library_rsa.o(.text.mbedtls_rsa_pkcs1_decrypt)
<li><a href="#[6fc]">mbedtls_rsa_rsaes_pkcs1_v15_decrypt</a> from Obj/library_rsa.o(.text.mbedtls_rsa_rsaes_pkcs1_v15_decrypt) referenced from Obj/library_rsa.o(.text.mbedtls_rsa_pkcs1_decrypt)
<li><a href="#[6fd]">mbedtls_rsa_pkcs1_decrypt</a> from Obj/library_rsa.o(.text.mbedtls_rsa_pkcs1_decrypt) referenced from Obj/library_pk_wrap.o(.text.rsa_decrypt_wrap)
<li><a href="#[6fe]">mbedtls_rsa_rsassa_pss_sign</a> from Obj/library_rsa.o(.text.mbedtls_rsa_rsassa_pss_sign) referenced from Obj/library_rsa.o(.text.mbedtls_rsa_pkcs1_sign)
<li><a href="#[6ff]">mbedtls_rsa_rsassa_pkcs1_v15_sign</a> from Obj/library_rsa.o(.text.mbedtls_rsa_rsassa_pkcs1_v15_sign) referenced from Obj/library_rsa.o(.text.mbedtls_rsa_pkcs1_sign)
<li><a href="#[700]">mbedtls_rsa_pkcs1_sign</a> from Obj/library_rsa.o(.text.mbedtls_rsa_pkcs1_sign) referenced from Obj/library_pk_wrap.o(.text.rsa_sign_wrap)
<li><a href="#[701]">mbedtls_rsa_rsassa_pss_verify_ext</a> from Obj/library_rsa.o(.text.mbedtls_rsa_rsassa_pss_verify_ext) referenced from Obj/library_pk.o(.text.mbedtls_pk_verify_ext)
<li><a href="#[703]">mbedtls_rsa_rsassa_pkcs1_v15_verify</a> from Obj/library_rsa.o(.text.mbedtls_rsa_rsassa_pkcs1_v15_verify) referenced from Obj/library_rsa.o(.text.mbedtls_rsa_pkcs1_verify)
<li><a href="#[704]">mbedtls_rsa_pkcs1_verify</a> from Obj/library_rsa.o(.text.mbedtls_rsa_pkcs1_verify) referenced from Obj/library_pk_wrap.o(.text.rsa_verify_wrap)
<li><a href="#[705]">mbedtls_rsa_free</a> from Obj/library_rsa.o(.text.mbedtls_rsa_free) referenced from Obj/library_pk_wrap.o(.text.rsa_free_wrap)
<li><a href="#[707]">mbedtls_rsa_self_test</a> from Obj/library_rsa.o(.text.mbedtls_rsa_self_test) referenced from Obj/samples_crypto_app_test.o(.text.mbedtls_crypto_test)
<li><a href="#[708]">mbedtls_sha1</a> from Obj/library_sha1.o(.text.mbedtls_sha1) referenced from Obj/library_rsa.o(.text.mbedtls_rsa_self_test)
<li><a href="#[709]">mbedtls_sha1_self_test</a> from Obj/library_sha1.o(.text.mbedtls_sha1_self_test) referenced from Obj/samples_crypto_app_test.o(.text.mbedtls_crypto_test)
<li><a href="#[70a]">mbedtls_sha1_set</a> from Obj/library_sha1_alt.o(.text.mbedtls_sha1_set) referenced from Obj/library_md_wrap.o(.text.sha1_offload_set_wrap)
<li><a href="#[70b]">mbedtls_sha1_free</a> from Obj/library_sha1_alt.o(.text.mbedtls_sha1_free) referenced from Obj/library_md_wrap.o(.text.sha1_ctx_free)
<li><a href="#[70c]">mbedtls_sha1_init</a> from Obj/library_sha1_alt.o(.text.mbedtls_sha1_init) referenced from Obj/library_md_wrap.o(.text.sha1_ctx_alloc)
<li><a href="#[70d]">mbedtls_sha1_clone</a> from Obj/library_sha1_alt.o(.text.mbedtls_sha1_clone) referenced from Obj/library_md_wrap.o(.text.sha1_clone_wrap)
<li><a href="#[70e]">mbedtls_sha1_starts</a> from Obj/library_sha1_alt.o(.text.mbedtls_sha1_starts) referenced from Obj/library_md_wrap.o(.text.sha1_starts_wrap)
<li><a href="#[70f]">mbedtls_sha1_process</a> from Obj/library_sha1_alt.o(.text.mbedtls_sha1_process) referenced from Obj/library_md_wrap.o(.text.sha1_process_wrap)
<li><a href="#[710]">mbedtls_sha1_update</a> from Obj/library_sha1_alt.o(.text.mbedtls_sha1_update) referenced from Obj/library_md_wrap.o(.text.sha1_update_wrap)
<li><a href="#[711]">mbedtls_sha1_finish</a> from Obj/library_sha1_alt.o(.text.mbedtls_sha1_finish) referenced from Obj/library_md_wrap.o(.text.sha1_finish_wrap)
<li><a href="#[712]">mbedtls_sha256</a> from Obj/library_sha256.o(.text.mbedtls_sha256) referenced from Obj/library_entropy.o(.text.entropy_update)
<li><a href="#[713]">mbedtls_sha256_self_test</a> from Obj/library_sha256.o(.text.mbedtls_sha256_self_test) referenced from Obj/samples_crypto_app_test.o(.text.mbedtls_crypto_test)
<li><a href="#[714]">mbedtls_sha256_init</a> from Obj/library_sha256_alt.o(.text.mbedtls_sha256_init) referenced from Obj/library_md_wrap.o(.text.sha224_ctx_alloc)
<li><a href="#[715]">mbedtls_sha256_set</a> from Obj/library_sha256_alt.o(.text.mbedtls_sha256_set) referenced from Obj/library_md_wrap.o(.text.sha224_offload_set_wrap)
<li><a href="#[716]">mbedtls_sha256_free</a> from Obj/library_sha256_alt.o(.text.mbedtls_sha256_free) referenced from Obj/library_md_wrap.o(.text.sha224_ctx_free)
<li><a href="#[717]">mbedtls_sha256_clone</a> from Obj/library_sha256_alt.o(.text.mbedtls_sha256_clone) referenced from Obj/library_md_wrap.o(.text.sha224_clone_wrap)
<li><a href="#[718]">mbedtls_sha256_starts</a> from Obj/library_sha256_alt.o(.text.mbedtls_sha256_starts) referenced from Obj/library_entropy.o(.text.mbedtls_entropy_init)
<li><a href="#[719]">mbedtls_sha256_process</a> from Obj/library_sha256_alt.o(.text.mbedtls_sha256_process) referenced from Obj/library_md_wrap.o(.text.sha224_process_wrap)
<li><a href="#[71a]">mbedtls_sha256_update</a> from Obj/library_sha256_alt.o(.text.mbedtls_sha256_update) referenced from Obj/library_entropy.o(.text.entropy_update)
<li><a href="#[71b]">mbedtls_sha256_finish</a> from Obj/library_sha256_alt.o(.text.mbedtls_sha256_finish) referenced from Obj/library_entropy.o(.text.mbedtls_entropy_func)
<li><a href="#[71e]">mbedtls_sm2_z_get</a> from Obj/library_sm2.o(.text.mbedtls_sm2_z_get) referenced from Obj/library_pk_wrap.o(.text.sm2_z_get_wrap)
<li><a href="#[71f]">mbedtls_sm2_encrypt</a> from Obj/library_sm2.o(.text.mbedtls_sm2_encrypt) referenced from Obj/library_pk_wrap.o(.text.sm2_encrypt_wrap)
<li><a href="#[720]">mbedtls_sm2_decrypt</a> from Obj/library_sm2.o(.text.mbedtls_sm2_decrypt) referenced from Obj/library_pk_wrap.o(.text.sm2_decrypt_wrap)
<li><a href="#[722]">mbedtls_sm3_init</a> from Obj/library_sm3.o(.text.mbedtls_sm3_init) referenced from Obj/library_md_wrap.o(.text.sm3_ctx_alloc)
<li><a href="#[723]">mbedtls_sm3_set</a> from Obj/library_sm3.o(.text.mbedtls_sm3_set) referenced from Obj/library_md_wrap.o(.text.sm3_offload_set_wrap)
<li><a href="#[724]">mbedtls_sm3_free</a> from Obj/library_sm3.o(.text.mbedtls_sm3_free) referenced from Obj/library_md_wrap.o(.text.sm3_ctx_free)
<li><a href="#[725]">mbedtls_sm3_clone</a> from Obj/library_sm3.o(.text.mbedtls_sm3_clone) referenced from Obj/library_md_wrap.o(.text.sm3_clone_wrap)
<li><a href="#[726]">mbedtls_sm3_starts</a> from Obj/library_sm3.o(.text.mbedtls_sm3_starts) referenced from Obj/library_md_wrap.o(.text.sm3_starts_wrap)
<li><a href="#[727]">mbedtls_sm3_process</a> from Obj/library_sm3.o(.text.mbedtls_sm3_process) referenced from Obj/library_md_wrap.o(.text.sm3_process_wrap)
<li><a href="#[728]">mbedtls_sm3_update</a> from Obj/library_sm3.o(.text.mbedtls_sm3_update) referenced from Obj/library_md_wrap.o(.text.sm3_update_wrap)
<li><a href="#[729]">mbedtls_sm3_finish</a> from Obj/library_sm3.o(.text.mbedtls_sm3_finish) referenced from Obj/library_md_wrap.o(.text.sm3_finish_wrap)
<li><a href="#[72b]">mbedtls_sm3_self_test</a> from Obj/library_sm3.o(.text.mbedtls_sm3_self_test) referenced from Obj/samples_crypto_app_test.o(.text.mbedtls_crypto_test)
<li><a href="#[72c]">_mbedtls_sm4_crypt_cfb128</a> from Obj/library_sm4.o(.text._mbedtls_sm4_crypt_cfb128) referenced from Obj/library_sm4.o(.text.mbedtls_sm4_crypt_cfb128)
<li><a href="#[72d]">mbedtls_sm4_init</a> from Obj/library_sm4.o(.text.mbedtls_sm4_init) referenced from Obj/library_cipher_wrap.o(.text.sm4_ctx_alloc)
<li><a href="#[72e]">mbedtls_sm4_free</a> from Obj/library_sm4.o(.text.mbedtls_sm4_free) referenced from Obj/library_cipher_wrap.o(.text.sm4_ctx_free)
<li><a href="#[72f]">mbedtls_sm4_setkey_dec</a> from Obj/library_sm4.o(.text.mbedtls_sm4_setkey_dec) referenced from Obj/library_cipher_wrap.o(.text.sm4_setkey_dec_wrap)
<li><a href="#[730]">mbedtls_sm4_setkey_enc</a> from Obj/library_sm4.o(.text.mbedtls_sm4_setkey_enc) referenced from Obj/library_cipher_wrap.o(.text.sm4_setkey_enc_wrap)
<li><a href="#[731]">mbedtls_sm4_crypt_ecb</a> from Obj/library_sm4.o(.text.mbedtls_sm4_crypt_ecb) referenced from Obj/library_cipher_wrap.o(.text.sm4_crypt_ecb_wrap)
<li><a href="#[732]">mbedtls_sm4_crypt_cbc</a> from Obj/library_sm4.o(.text.mbedtls_sm4_crypt_cbc) referenced from Obj/library_cipher_wrap.o(.text.sm4_crypt_cbc_wrap)
<li><a href="#[733]">mbedtls_sm4_crypt_cfb128</a> from Obj/library_sm4.o(.text.mbedtls_sm4_crypt_cfb128) referenced from Obj/library_cipher_wrap.o(.text.sm4_crypt_cfb128_wrap)
<li><a href="#[735]">mbedtls_sm4_crypt_ofb</a> from Obj/library_sm4.o(.text.mbedtls_sm4_crypt_ofb) referenced from Obj/library_sm4.o(.text.mbedtls_sm4_self_test)
<li><a href="#[736]">_mbedtls_sm4_crypt_ctr</a> from Obj/library_sm4.o(.text._mbedtls_sm4_crypt_ctr) referenced from Obj/library_sm4.o(.text.mbedtls_sm4_crypt_ctr)
<li><a href="#[737]">mbedtls_sm4_crypt_ctr</a> from Obj/library_sm4.o(.text.mbedtls_sm4_crypt_ctr) referenced from Obj/library_ccm.o(.text.ccm_update_mac.isra.0)
<li><a href="#[738]">mbedtls_sm4_self_test</a> from Obj/library_sm4.o(.text.mbedtls_sm4_self_test) referenced from Obj/samples_crypto_app_test.o(.text.mbedtls_crypto_test)
<li><a href="#[739]">mbedtls_ssl_cache_init</a> from Obj/library_ssl_cache.o(.text.mbedtls_ssl_cache_init) referenced from Obj/src_tls_server.o(.text.tls_srv_create)
<li><a href="#[73e]">mbedtls_ssl_cache_free</a> from Obj/library_ssl_cache.o(.text.mbedtls_ssl_cache_free) referenced from Obj/src_tls_server.o(.text.tls_srv_destroy)
<li><a href="#[73f]">mbedtls_ssl_list_ciphersuites</a> from Obj/library_ssl_ciphersuites.o(.text.mbedtls_ssl_list_ciphersuites) referenced from Obj/library_ssl_tls.o(.text.mbedtls_ssl_config_defaults)
<li><a href="#[740]">mbedtls_gmssl_list_ciphersuites</a> from Obj/library_ssl_ciphersuites.o(.text.mbedtls_gmssl_list_ciphersuites) referenced from Obj/library_ssl_tls.o(.text.mbedtls_ssl_config_defaults)
<li><a href="#[741]">mbedtls_all_list_ciphersuites</a> from Obj/library_ssl_ciphersuites.o(.text.mbedtls_all_list_ciphersuites) referenced from Obj/library_ssl_tls.o(.text.mbedtls_ssl_config_defaults)
<li><a href="#[743]">mbedtls_ssl_ciphersuite_from_id</a> from Obj/library_ssl_ciphersuites.o(.text.mbedtls_ssl_ciphersuite_from_id) referenced from Obj/library_ssl_cli.o(.text.ssl_write_client_hello)
<li><a href="#[744]">mbedtls_ssl_get_ciphersuite_name</a> from Obj/library_ssl_ciphersuites.o(.text.mbedtls_ssl_get_ciphersuite_name) referenced from Obj/library_ssl_srv.o(.text.mbedtls_ssl_handshake_server_step)
<li><a href="#[746]">mbedtls_ssl_get_ciphersuite_sig_pk_alg</a> from Obj/library_ssl_ciphersuites.o(.text.mbedtls_ssl_get_ciphersuite_sig_pk_alg) referenced from Obj/library_ssl_cli.o(.text.ssl_parse_server_key_exchange)
<li><a href="#[747]">mbedtls_ssl_get_ciphersuite_sig_alg</a> from Obj/library_ssl_ciphersuites.o(.text.mbedtls_ssl_get_ciphersuite_sig_alg) referenced from Obj/library_ssl_srv.o(.text.ssl_parse_client_hello)
<li><a href="#[748]">mbedtls_ssl_ciphersuite_uses_ec</a> from Obj/library_ssl_ciphersuites.o(.text.mbedtls_ssl_ciphersuite_uses_ec) referenced from Obj/library_ssl_srv.o(.text.ssl_parse_client_hello)
<li><a href="#[749]">mbedtls_ssl_ciphersuite_uses_psk</a> from Obj/library_ssl_ciphersuites.o(.text.mbedtls_ssl_ciphersuite_uses_psk) referenced from Obj/library_ssl_cli.o(.text.mbedtls_ssl_handshake_client_step)
<li><a href="#[74a]">ssl_write_client_hello</a> from Obj/library_ssl_cli.o(.text.ssl_write_client_hello) referenced from Obj/library_ssl_cli.o(.text.mbedtls_ssl_handshake_client_step)
<li><a href="#[74b]">ssl_write_encrypted_pms</a> from Obj/library_ssl_cli.o(.text.ssl_write_encrypted_pms) referenced from Obj/library_ssl_cli.o(.text.mbedtls_ssl_handshake_client_step)
<li><a href="#[74c]">ssl_check_server_ecdh_params</a> from Obj/library_ssl_cli.o(.text.ssl_check_server_ecdh_params) referenced from Obj/library_ssl_cli.o(.text.ssl_parse_server_key_exchange)
<li><a href="#[74d]">ssl_parse_server_key_exchange</a> from Obj/library_ssl_cli.o(.text.ssl_parse_server_key_exchange) referenced from Obj/library_ssl_cli.o(.text.mbedtls_ssl_handshake_client_step)
<li><a href="#[74e]">mbedtls_ssl_handshake_client_step</a> from Obj/library_ssl_cli.o(.text.mbedtls_ssl_handshake_client_step) referenced from Obj/library_ssl_tls.o(.text.mbedtls_ssl_handshake_step)
<li><a href="#[756]">ssl_parse_client_psk_identity</a> from Obj/library_ssl_srv.o(.text.ssl_parse_client_psk_identity) referenced from Obj/library_ssl_srv.o(.text.mbedtls_ssl_handshake_server_step)
<li><a href="#[757]">ssl_write_server_key_exchange</a> from Obj/library_ssl_srv.o(.text.ssl_write_server_key_exchange) referenced from Obj/library_ssl_srv.o(.text.mbedtls_ssl_handshake_server_step)
<li><a href="#[758]">ssl_parse_encrypted_pms</a> from Obj/library_ssl_srv.o(.text.ssl_parse_encrypted_pms) referenced from Obj/library_ssl_srv.o(.text.mbedtls_ssl_handshake_server_step)
<li><a href="#[759]">ssl_parse_client_hello</a> from Obj/library_ssl_srv.o(.text.ssl_parse_client_hello) referenced from Obj/library_ssl_srv.o(.text.mbedtls_ssl_handshake_server_step)
<li><a href="#[75c]">mbedtls_ssl_handshake_server_step</a> from Obj/library_ssl_srv.o(.text.mbedtls_ssl_handshake_server_step) referenced from Obj/library_ssl_tls.o(.text.mbedtls_ssl_handshake_step)
<li><a href="#[766]">ssl_set_timer</a> from Obj/library_ssl_tls.o(.text.ssl_set_timer) referenced from Obj/library_ssl_tls.o(.text.mbedtls_ssl_recv_flight_completed)
<li><a href="#[767]">ssl_swap_epochs</a> from Obj/library_ssl_tls.o(.text.ssl_swap_epochs) referenced from Obj/library_ssl_tls.o(.text.mbedtls_ssl_resend)
<li><a href="#[76a]">tls_prf_generic</a> from Obj/library_ssl_tls.o(.text.tls_prf_generic) referenced from Obj/library_ssl_tls.o(.text.tls_prf_sha256)
<li><a href="#[772]">ssl_flight_free</a> from Obj/library_ssl_tls.o(.text.ssl_flight_free) referenced from Obj/library_ssl_tls.o(.text.mbedtls_ssl_recv_flight_completed)
<li><a href="#[773]">ssl_append_key_cert</a> from Obj/library_ssl_tls.o(.text.ssl_append_key_cert) referenced from Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_own_cert)
<li><a href="#[776]">mbedtls_ssl_handle_message_type</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_handle_message_type) referenced from Obj/library_ssl_srv.o(.text.mbedtls_ssl_handshake_server_step)
<li><a href="#[777]">mbedtls_ssl_send_alert_message</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_send_alert_message) referenced from Obj/library_ssl_cli.o(.text.ssl_parse_server_key_exchange)
<li><a href="#[779]">mbedtls_ssl_write_certificate</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_write_certificate) referenced from Obj/library_ssl_cli.o(.text.mbedtls_ssl_handshake_client_step)
<li><a href="#[77a]">mbedtls_ssl_write_change_cipher_spec</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_write_change_cipher_spec) referenced from Obj/library_ssl_cli.o(.text.mbedtls_ssl_handshake_client_step)
<li><a href="#[77b]">mbedtls_ssl_optimize_checksum</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_optimize_checksum) referenced from Obj/library_ssl_cli.o(.text.mbedtls_ssl_handshake_client_step)
<li><a href="#[77c]">mbedtls_ssl_reset_checksum</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_reset_checksum) referenced from Obj/library_ssl_cli.o(.text.mbedtls_ssl_handshake_client_step)
<li><a href="#[77d]">mbedtls_ssl_write_finished</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_write_finished) referenced from Obj/library_ssl_cli.o(.text.mbedtls_ssl_handshake_client_step)
<li><a href="#[77e]">mbedtls_ssl_session_init</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_session_init) referenced from Obj/library_ssl_srv.o(.text.ssl_parse_client_hello)
<li><a href="#[77f]">mbedtls_ssl_init</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_init) referenced from Obj/src_tls_client.o(.text.tls_cli_session_init)
<li><a href="#[785]">mbedtls_ssl_conf_authmode</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_authmode) referenced from Obj/src_tls_client.o(.text.tls_cli_session_config)
<li><a href="#[787]">mbedtls_ssl_conf_rng</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_rng) referenced from Obj/src_tls_client.o(.text.tls_cli_session_config)
<li><a href="#[788]">mbedtls_ssl_conf_dbg</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_dbg) referenced from Obj/src_tls_server.o(.text.tls_srv_session_config)
<li><a href="#[79c]">mbedtls_ssl_get_verify_result</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_get_verify_result) referenced from Obj/src_tls_client.o(.text.tls_cli_session_connect)
<li><a href="#[7a2]">mbedtls_ssl_handshake_step</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_handshake_step) referenced from Obj/library_ssl_tls.o(.text.mbedtls_ssl_handshake)
<li><a href="#[7a3]">mbedtls_ssl_handshake</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_handshake) referenced from Obj/library_ssl_tls.o(.text.ssl_start_renegotiation)
<li><a href="#[7a4]">mbedtls_ssl_close_notify</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_close_notify) referenced from Obj/src_tls_client.o(.text.tls_cli_session_close)
<li><a href="#[7a5]">mbedtls_ssl_transform_free</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_transform_free) referenced from Obj/library_ssl_tls.o(.text.ssl_handshake_wrapup_free_hs_transform)
<li><a href="#[7a6]">mbedtls_ssl_handshake_free</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_handshake_free) referenced from Obj/library_ssl_tls.o(.text.ssl_handshake_wrapup_free_hs_transform)
<li><a href="#[7a7]">ssl_handshake_wrapup_free_hs_transform</a> from Obj/library_ssl_tls.o(.text.ssl_handshake_wrapup_free_hs_transform) referenced from Obj/library_ssl_tls.o(.text.mbedtls_ssl_handshake_wrapup)
<li><a href="#[7a8]">mbedtls_ssl_session_free</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_session_free) referenced from Obj/library_ssl_cache.o(.text.mbedtls_ssl_cache_free)
<li><a href="#[7a9]">mbedtls_ssl_handshake_wrapup</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_handshake_wrapup) referenced from Obj/library_ssl_cli.o(.text.mbedtls_ssl_handshake_client_step)
<li><a href="#[7ad]">ssl_handshake_init</a> from Obj/library_ssl_tls.o(.text.ssl_handshake_init) referenced from Obj/library_ssl_tls.o(.text.mbedtls_ssl_setup)
<li><a href="#[7ae]">mbedtls_ssl_setup</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_setup) referenced from Obj/src_tls_client.o(.text.tls_cli_session_config)
<li><a href="#[7b1]">ssl_check_timer</a> from Obj/library_ssl_tls.o(.text.ssl_check_timer) referenced from Obj/library_ssl_tls.o(.text.mbedtls_ssl_fetch_input)
<li><a href="#[7b2]">mbedtls_ssl_write_version.part.12</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_write_version.part.12) referenced from Obj/library_ssl_tls.o(.text.mbedtls_ssl_write_record)
<li><a href="#[7b3]">mbedtls_ssl_derive_keys</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_derive_keys) referenced from Obj/library_ssl_cli.o(.text.mbedtls_ssl_handshake_client_step)
<li><a href="#[7b5]">mbedtls_ssl_psk_derive_premaster</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_psk_derive_premaster) referenced from Obj/library_ssl_cli.o(.text.mbedtls_ssl_handshake_client_step)
<li><a href="#[7b6]">mbedtls_ssl_flush_output</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_flush_output) referenced from Obj/library_ssl_cli.o(.text.mbedtls_ssl_handshake_client_step)
<li><a href="#[7b7]">mbedtls_ssl_recv_flight_completed</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_recv_flight_completed) referenced from Obj/library_ssl_cli.o(.text.mbedtls_ssl_handshake_client_step)
<li><a href="#[7b8]">mbedtls_ssl_send_flight_completed</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_send_flight_completed) referenced from Obj/library_ssl_cli.o(.text.ssl_write_client_hello)
<li><a href="#[7b9]">mbedtls_ssl_write_record</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_write_record) referenced from Obj/library_ssl_cli.o(.text.ssl_write_client_hello)
<li><a href="#[7ba]">ssl_write_hello_request</a> from Obj/library_ssl_tls.o(.text.ssl_write_hello_request) referenced from Obj/library_ssl_tls.o(.text.ssl_resend_hello_request)
<li><a href="#[7bb]">ssl_resend_hello_request</a> from Obj/library_ssl_tls.o(.text.ssl_resend_hello_request) referenced from Obj/library_ssl_tls.o(.text.mbedtls_ssl_fetch_input)
<li><a href="#[7bc]">mbedtls_ssl_resend</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_resend) referenced from Obj/library_ssl_cli.o(.text.mbedtls_ssl_handshake_client_step)
<li><a href="#[7bd]">mbedtls_ssl_fetch_input</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_fetch_input) referenced from Obj/library_ssl_srv.o(.text.ssl_parse_client_hello)
<li><a href="#[7be]">ssl_write_real</a> from Obj/library_ssl_tls.o(.text.ssl_write_real) referenced from Obj/library_ssl_tls.o(.text.mbedtls_ssl_write)
<li><a href="#[7bf]">mbedtls_ssl_prepare_handshake_record</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_prepare_handshake_record) referenced from Obj/library_ssl_tls.o(.text.mbedtls_ssl_handle_message_type)
<li><a href="#[7c0]">mbedtls_ssl_update_handshake_status</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_update_handshake_status) referenced from Obj/library_ssl_srv.o(.text.mbedtls_ssl_handshake_server_step)
<li><a href="#[7c1]">mbedtls_ssl_dtls_replay_check</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_dtls_replay_check) referenced from Obj/library_ssl_srv.o(.text.ssl_parse_client_hello)
<li><a href="#[7c2]">mbedtls_ssl_dtls_replay_update</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_dtls_replay_update) referenced from Obj/library_ssl_srv.o(.text.ssl_parse_client_hello)
<li><a href="#[7c3]">mbedtls_ssl_set_bio</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_set_bio) referenced from Obj/src_tls_client.o(.text.tls_cli_session_connect)
<li><a href="#[7c6]">mbedtls_ssl_conf_session_cache</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_session_cache) referenced from Obj/src_tls_server.o(.text.tls_srv_session_config)
<li><a href="#[7ca]">mbedtls_ssl_conf_own_cert</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_own_cert) referenced from Obj/src_tls_client.o(.text.tls_cli_session_config)
<li><a href="#[7cb]">mbedtls_gmssl_conf_own_cert</a> from Obj/library_ssl_tls.o(.text.mbedtls_gmssl_conf_own_cert) referenced from Obj/src_tls_client.o(.text.tls_cli_session_config)
<li><a href="#[7cd]">mbedtls_ssl_conf_ca_chain</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_ca_chain) referenced from Obj/src_tls_client.o(.text.tls_cli_session_config)
<li><a href="#[7ce]">mbedtls_gmssl_conf_ca_chain</a> from Obj/library_ssl_tls.o(.text.mbedtls_gmssl_conf_ca_chain) referenced from Obj/src_tls_client.o(.text.tls_cli_session_config)
<li><a href="#[7d7]">mbedtls_ssl_set_hostname</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_set_hostname) referenced from Obj/src_tls_client.o(.text.tls_cli_session_config)
<li><a href="#[7d9]">mbedtls_ssl_hash_from_md_alg</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_hash_from_md_alg) referenced from Obj/library_ssl_cli.o(.text.ssl_write_client_hello)
<li><a href="#[7da]">mbedtls_ssl_check_curve</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_check_curve) referenced from Obj/library_ssl_cli.o(.text.ssl_check_server_ecdh_params)
<li><a href="#[7db]">mbedtls_ssl_check_sig_hash</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_check_sig_hash) referenced from Obj/library_ssl_cli.o(.text.ssl_parse_server_key_exchange)
<li><a href="#[7dc]">mbedtls_ssl_check_cert_usage</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_check_cert_usage) referenced from Obj/library_ssl_srv.o(.text.ssl_parse_client_hello)
<li><a href="#[7dd]">mbedtls_ssl_parse_certificate</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_parse_certificate) referenced from Obj/library_ssl_cli.o(.text.mbedtls_ssl_handshake_client_step)
<li><a href="#[7de]">mbedtls_ssl_write_version</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_write_version) referenced from Obj/library_ssl_cli.o(.text.ssl_write_client_hello)
<li><a href="#[7df]">mbedtls_ssl_read_version</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_read_version) referenced from Obj/library_ssl_cli.o(.text.mbedtls_ssl_handshake_client_step)
<li><a href="#[7e0]">mbedtls_ssl_set_calc_verify_md</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_set_calc_verify_md) referenced from Obj/library_ssl_srv.o(.text.mbedtls_ssl_handshake_server_step)
<li><a href="#[7e1]">ssl_start_renegotiation</a> from Obj/library_ssl_tls.o(.text.ssl_start_renegotiation) referenced from Obj/library_ssl_tls.o(.text.mbedtls_ssl_renegotiate)
<li><a href="#[7e2]">mbedtls_ssl_renegotiate</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_renegotiate) referenced from Obj/library_ssl_tls.o(.text.ssl_check_ctr_renegotiate)
<li><a href="#[7e3]">ssl_check_ctr_renegotiate</a> from Obj/library_ssl_tls.o(.text.ssl_check_ctr_renegotiate) referenced from Obj/library_ssl_tls.o(.text.mbedtls_ssl_write)
<li><a href="#[7e4]">mbedtls_ssl_write</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_write) referenced from Obj/src_tls_client.o(.text.tls_cli_session_write)
<li><a href="#[7e5]">ssl_session_reset_int</a> from Obj/library_ssl_tls.o(.text.ssl_session_reset_int) referenced from Obj/library_ssl_tls.o(.text.mbedtls_ssl_read_record_layer)
<li><a href="#[7e6]">mbedtls_ssl_read_record_layer</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_read_record_layer) referenced from Obj/library_ssl_srv.o(.text.mbedtls_ssl_handshake_server_step)
<li><a href="#[7e7]">mbedtls_ssl_read_record</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_read_record) referenced from Obj/library_ssl_cli.o(.text.ssl_parse_server_key_exchange)
<li><a href="#[7e8]">mbedtls_ssl_parse_change_cipher_spec</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_parse_change_cipher_spec) referenced from Obj/library_ssl_cli.o(.text.mbedtls_ssl_handshake_client_step)
<li><a href="#[7e9]">mbedtls_ssl_parse_finished</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_parse_finished) referenced from Obj/library_ssl_cli.o(.text.mbedtls_ssl_handshake_client_step)
<li><a href="#[7ea]">mbedtls_ssl_read</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_read) referenced from Obj/src_tls_client.o(.text.tls_cli_session_read)
<li><a href="#[7eb]">mbedtls_ssl_session_reset</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_session_reset) referenced from Obj/src_tls_server.o(.text.tls_srv_session_close)
<li><a href="#[7ec]">mbedtls_ssl_free</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_free) referenced from Obj/src_tls_client.o(.text.tls_cli_session_close)
<li><a href="#[7ed]">mbedtls_ssl_config_init</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_config_init) referenced from Obj/src_tls_client.o(.text.tls_cli_session_init)
<li><a href="#[7ee]">mbedtls_ssl_config_defaults</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_config_defaults) referenced from Obj/src_tls_client.o(.text.tls_cli_session_config)
<li><a href="#[7ef]">mbedtls_ssl_config_free</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_config_free) referenced from Obj/src_tls_client.o(.text.tls_cli_session_close)
<li><a href="#[7f0]">mbedtls_ssl_sig_from_pk</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_sig_from_pk) referenced from Obj/library_ssl_cli.o(.text.mbedtls_ssl_handshake_client_step)
<li><a href="#[7f1]">mbedtls_ssl_sig_from_pk_alg</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_sig_from_pk_alg) referenced from Obj/library_ssl_srv.o(.text.ssl_write_server_key_exchange)
<li><a href="#[7f2]">mbedtls_ssl_pk_alg_from_sig</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_pk_alg_from_sig) referenced from Obj/library_ssl_cli.o(.text.ssl_parse_server_key_exchange)
<li><a href="#[7f3]">mbedtls_ssl_sig_hash_set_find</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_sig_hash_set_find) referenced from Obj/library_ssl_srv.o(.text.ssl_write_server_key_exchange)
<li><a href="#[7f4]">mbedtls_ssl_sig_hash_set_add</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_sig_hash_set_add) referenced from Obj/library_ssl_srv.o(.text.ssl_parse_client_hello)
<li><a href="#[7f5]">mbedtls_ssl_sig_hash_set_const_hash</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_sig_hash_set_const_hash) referenced from Obj/library_ssl_srv.o(.text.ssl_parse_client_hello)
<li><a href="#[7f6]">mbedtls_ssl_md_alg_from_hash</a> from Obj/library_ssl_tls.o(.text.mbedtls_ssl_md_alg_from_hash) referenced from Obj/library_ssl_cli.o(.text.ssl_parse_server_key_exchange)
<li><a href="#[7f9]">mbedtls_threading_set_alt</a> from Obj/library_threading.o(.text.mbedtls_threading_set_alt) referenced from Obj/crypto_crypto_dev.o(.text.rt_crypto_register)
<li><a href="#[7fb]">busy_msleep</a> from Obj/library_timing.o(.text.busy_msleep) referenced from Obj/library_timing.o(.text.mbedtls_timing_self_test)
<li><a href="#[7fc]">mbedtls_timing_self_test</a> from Obj/library_timing.o(.text.mbedtls_timing_self_test) referenced from Obj/samples_crypto_app_test.o(.text.mbedtls_crypto_test)
<li><a href="#[801]">x509_check_time</a> from Obj/library_x509.o(.text.x509_check_time) referenced from Obj/library_x509.o(.text.mbedtls_x509_time_is_past)
<li><a href="#[802]">x509_get_current_time</a> from Obj/library_x509.o(.text.x509_get_current_time) referenced from Obj/library_x509.o(.text.mbedtls_x509_time_is_past)
<li><a href="#[803]">mbedtls_x509_get_serial</a> from Obj/library_x509.o(.text.mbedtls_x509_get_serial) referenced from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_parse_der)
<li><a href="#[805]">mbedtls_x509_get_alg</a> from Obj/library_x509.o(.text.mbedtls_x509_get_alg) referenced from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_parse_der)
<li><a href="#[806]">mbedtls_x509_get_rsassa_pss_params</a> from Obj/library_x509.o(.text.mbedtls_x509_get_rsassa_pss_params) referenced from Obj/library_x509.o(.text.mbedtls_x509_get_sig_alg)
<li><a href="#[807]">mbedtls_x509_get_name</a> from Obj/library_x509.o(.text.mbedtls_x509_get_name) referenced from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_parse_der)
<li><a href="#[808]">mbedtls_x509_get_time</a> from Obj/library_x509.o(.text.mbedtls_x509_get_time) referenced from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_parse_der)
<li><a href="#[809]">mbedtls_x509_get_sig</a> from Obj/library_x509.o(.text.mbedtls_x509_get_sig) referenced from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_parse_der)
<li><a href="#[80a]">mbedtls_x509_get_sig_alg</a> from Obj/library_x509.o(.text.mbedtls_x509_get_sig_alg) referenced from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_parse_der)
<li><a href="#[80b]">mbedtls_x509_get_ext</a> from Obj/library_x509.o(.text.mbedtls_x509_get_ext) referenced from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_parse_der)
<li><a href="#[80d]">mbedtls_x509_dn_gets</a> from Obj/library_x509.o(.text.mbedtls_x509_dn_gets) referenced from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_info)
<li><a href="#[80e]">mbedtls_x509_serial_gets</a> from Obj/library_x509.o(.text.mbedtls_x509_serial_gets) referenced from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_info)
<li><a href="#[80f]">mbedtls_x509_sig_alg_gets</a> from Obj/library_x509.o(.text.mbedtls_x509_sig_alg_gets) referenced from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_info)
<li><a href="#[810]">mbedtls_x509_key_size_helper</a> from Obj/library_x509.o(.text.mbedtls_x509_key_size_helper) referenced from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_info)
<li><a href="#[811]">mbedtls_x509_time_is_past</a> from Obj/library_x509.o(.text.mbedtls_x509_time_is_past) referenced from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_is_revoked)
<li><a href="#[812]">mbedtls_x509_time_is_future</a> from Obj/library_x509.o(.text.mbedtls_x509_time_is_future) referenced from Obj/library_x509_crt.o(.text.x509_crt_verifycrl)
<li><a href="#[813]">mbedtls_x509_self_test</a> from Obj/library_x509.o(.text.mbedtls_x509_self_test) referenced from Obj/samples_crypto_app_test.o(.text.mbedtls_crypto_test)
<li><a href="#[81e]">x509_name_cmp</a> from Obj/library_x509_crt.o(.text.x509_name_cmp) referenced from Obj/library_x509_crt.o(.text.x509_crt_check_parent)
<li><a href="#[81f]">x509_get_uid</a> from Obj/library_x509_crt.o(.text.unlikely.x509_get_uid) referenced from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_parse_der)
<li><a href="#[820]">x509_profile_check_key.isra.4</a> from Obj/library_x509_crt.o(.text.x509_profile_check_key.isra.4) referenced from Obj/library_x509_crt.o(.text.x509_crt_verifycrl)
<li><a href="#[821]">x509_check_wildcard.isra.6</a> from Obj/library_x509_crt.o(.text.x509_check_wildcard.isra.6) referenced from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_verify_with_profile)
<li><a href="#[822]">mbedtls_x509_crt_check_key_usage.part.7</a> from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_check_key_usage.part.7) referenced from Obj/library_x509_crt.o(.text.x509_crt_check_parent)
<li><a href="#[823]">x509_crt_check_parent</a> from Obj/library_x509_crt.o(.text.x509_crt_check_parent) referenced from Obj/library_x509_crt.o(.text.x509_crt_verify_top)
<li><a href="#[824]">mbedtls_x509_crt_info</a> from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_info) referenced from Obj/library_debug.o(.text.mbedtls_debug_print_crt)
<li><a href="#[825]">mbedtls_x509_crt_verify_info</a> from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_verify_info) referenced from Obj/src_tls_client.o(.text.tls_cli_session_connect)
<li><a href="#[826]">mbedtls_x509_crt_check_key_usage</a> from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_check_key_usage) referenced from Obj/library_ssl_tls.o(.text.mbedtls_ssl_check_cert_usage)
<li><a href="#[827]">mbedtls_x509_crt_check_extended_key_usage</a> from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_check_extended_key_usage) referenced from Obj/library_ssl_tls.o(.text.mbedtls_ssl_check_cert_usage)
<li><a href="#[828]">mbedtls_x509_crt_is_revoked</a> from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_is_revoked) referenced from Obj/library_x509_crt.o(.text.x509_crt_verifycrl)
<li><a href="#[829]">x509_crt_verifycrl</a> from Obj/library_x509_crt.o(.text.x509_crt_verifycrl) referenced from Obj/library_x509_crt.o(.text.x509_crt_verify_top)
<li><a href="#[82a]">x509_crt_verify_top</a> from Obj/library_x509_crt.o(.text.x509_crt_verify_top) referenced from Obj/library_x509_crt.o(.text.x509_crt_verify_child)
<li><a href="#[82b]">x509_crt_verify_child</a> from Obj/library_x509_crt.o(.text.x509_crt_verify_child) referenced from Obj/library_x509_crt.o(.text.x509_crt_verify_child)
<li><a href="#[82c]">mbedtls_x509_crt_verify_with_profile</a> from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_verify_with_profile) referenced from Obj/library_ssl_tls.o(.text.mbedtls_ssl_parse_certificate)
<li><a href="#[82d]">mbedtls_x509_crt_verify</a> from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_verify) referenced from Obj/library_x509.o(.text.mbedtls_x509_self_test)
<li><a href="#[82e]">mbedtls_x509_crt_init</a> from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_init) referenced from Obj/library_ssl_cache.o(.text.mbedtls_ssl_cache_get)
<li><a href="#[82f]">mbedtls_x509_crt_free</a> from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_free) referenced from Obj/library_ssl_tls.o(.text.mbedtls_ssl_session_free)
<li><a href="#[830]">mbedtls_x509_crt_parse_der</a> from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_parse_der) referenced from Obj/library_ssl_tls.o(.text.mbedtls_ssl_parse_certificate)
<li><a href="#[831]">mbedtls_x509_crt_parse</a> from Obj/library_x509_crt.o(.text.mbedtls_x509_crt_parse) referenced from Obj/library_ssl_cache.o(.text.mbedtls_ssl_cache_get)
<li><a href="#[859]">mbedtls_timing_hardclock</a> from Obj/src_timing_alt.o(.text.mbedtls_timing_hardclock) referenced from Obj/library_entropy_poll.o(.text.mbedtls_hardclock_poll)
<li><a href="#[85a]">mbedtls_timing_get_timer</a> from Obj/src_timing_alt.o(.text.mbedtls_timing_get_timer) referenced from Obj/library_timing.o(.text.busy_msleep)
<li><a href="#[85b]">mbedtls_set_alarm</a> from Obj/src_timing_alt.o(.text.mbedtls_set_alarm) referenced from Obj/library_timing.o(.text.mbedtls_timing_self_test)
<li><a href="#[85c]">mbedtls_timing_set_delay</a> from Obj/src_timing_alt.o(.text.mbedtls_timing_set_delay) referenced from Obj/library_timing.o(.text.mbedtls_timing_self_test)
<li><a href="#[85d]">mbedtls_timing_get_delay</a> from Obj/src_timing_alt.o(.text.mbedtls_timing_get_delay) referenced from Obj/library_timing.o(.text.mbedtls_timing_self_test)
<li><a href="#[85e]">tls_cli_session_destroy</a> from Obj/src_tls_client.o(.text.tls_cli_session_destroy) referenced from Obj/src_tls_client.o(.text.tls_cli_session_create)
<li><a href="#[85f]">tls_cli_session_create</a> from Obj/src_tls_client.o(.text.tls_cli_session_create) referenced from Obj/samples_tls_app_test.o(.text.mbedlts_client_start)
<li><a href="#[860]">tls_cli_session_init</a> from Obj/src_tls_client.o(.text.tls_cli_session_init) referenced from Obj/samples_tls_app_test.o(.text.mbedlts_client_entry)
<li><a href="#[861]">tls_cli_session_close</a> from Obj/src_tls_client.o(.text.tls_cli_session_close) referenced from Obj/samples_tls_app_test.o(.text.mbedlts_client_entry)
<li><a href="#[862]">tls_cli_session_config</a> from Obj/src_tls_client.o(.text.tls_cli_session_config) referenced from Obj/samples_tls_app_test.o(.text.mbedlts_client_entry)
<li><a href="#[863]">tls_cli_session_connect</a> from Obj/src_tls_client.o(.text.tls_cli_session_connect) referenced from Obj/samples_tls_app_test.o(.text.mbedlts_client_entry)
<li><a href="#[864]">tls_cli_session_read</a> from Obj/src_tls_client.o(.text.tls_cli_session_read) referenced from Obj/samples_tls_app_test.o(.text.mbedlts_client_entry)
<li><a href="#[865]">tls_cli_session_write</a> from Obj/src_tls_client.o(.text.tls_cli_session_write) referenced from Obj/samples_tls_app_test.o(.text.mbedlts_client_entry)
<li><a href="#[866]">mbedtls_hardware_poll</a> from Obj/src_tls_hardware.o(.text.mbedtls_hardware_poll) referenced from Obj/library_entropy.o(.text.mbedtls_entropy_source_self_test_gather.constprop.0)
<li><a href="#[868]">mbedtls_net_init</a> from Obj/src_tls_net.o(.text.mbedtls_net_init) referenced from Obj/src_tls_client.o(.text.tls_cli_session_init)
<li><a href="#[869]">mbedtls_net_connect</a> from Obj/src_tls_net.o(.text.mbedtls_net_connect) referenced from Obj/src_tls_client.o(.text.tls_cli_session_connect)
<li><a href="#[86a]">mbedtls_net_bind</a> from Obj/src_tls_net.o(.text.mbedtls_net_bind) referenced from Obj/src_tls_server.o(.text.tls_srv_listen)
<li><a href="#[86b]">mbedtls_net_accept</a> from Obj/src_tls_net.o(.text.mbedtls_net_accept) referenced from Obj/src_tls_server.o(.text.tls_srv_session_create)
<li><a href="#[872]">mbedtls_net_free</a> from Obj/src_tls_net.o(.text.mbedtls_net_free) referenced from Obj/src_tls_client.o(.text.tls_cli_session_close)
<li><a href="#[874]">tls_srv_destroy</a> from Obj/src_tls_server.o(.text.tls_srv_destroy) referenced from Obj/src_tls_server.o(.text.tls_srv_create)
<li><a href="#[875]">tls_srv_create</a> from Obj/src_tls_server.o(.text.tls_srv_create) referenced from Obj/src_webnet.o(.text.webnet_thread)
<li><a href="#[876]">tls_srv_listen</a> from Obj/src_tls_server.o(.text.tls_srv_listen) referenced from Obj/src_webnet.o(.text.webnet_thread)
<li><a href="#[877]">tls_srv_session_destroy</a> from Obj/src_tls_server.o(.text.tls_srv_session_destroy) referenced from Obj/src_tls_server.o(.text.tls_srv_session_create)
<li><a href="#[878]">tls_srv_session_create</a> from Obj/src_tls_server.o(.text.tls_srv_session_create) referenced from Obj/src_wn_session.o(.text.webnet_session_create)
<li><a href="#[879]">tls_srv_session_init</a> from Obj/src_tls_server.o(.text.tls_srv_session_init) referenced from Obj/src_wn_session.o(.text.webnet_session_create)
<li><a href="#[87a]">tls_srv_session_close</a> from Obj/src_tls_server.o(.text.tls_srv_session_close) referenced from Obj/src_wn_session.o(.text.webnet_session_create)
<li><a href="#[87b]">tls_srv_session_config</a> from Obj/src_tls_server.o(.text.tls_srv_session_config) referenced from Obj/src_wn_session.o(.text.webnet_session_create)
<li><a href="#[87c]">tls_srv_session_read</a> from Obj/src_tls_server.o(.text.tls_srv_session_read) referenced from Obj/src_wn_session.o(.text._webnet_session_handle)
<li><a href="#[87d]">tls_srv_session_write</a> from Obj/src_tls_server.o(.text.tls_srv_session_write) referenced from Obj/src_wn_session.o(.text.webnet_session_printf)
<li><a href="#[87e]">test_snprintf</a> from Obj/samples_crypto_app_test.o(.text.test_snprintf) referenced from Obj/samples_crypto_app_test.o(.text.mbedtls_crypto_test)
<li><a href="#[883]">iperf_usage</a> from Obj/iperf_iperf.o(.text.iperf_usage) referenced from Obj/iperf_iperf.o(.text.iperf)
<li><a href="#[888]">sendto_ntp_server</a> from Obj/ntp_ntp.o(.text.sendto_ntp_server) referenced from Obj/ntp_ntp.o(.text.ntp_get_time)
<li><a href="#[889]">ntp_get_time</a> from Obj/ntp_ntp.o(.text.ntp_get_time) referenced from Obj/ntp_ntp.o(.text.ntp_sync_to_rtc)
<li><a href="#[88b]">ntp_sync_to_rtc</a> from Obj/ntp_ntp.o(.text.ntp_sync_to_rtc) referenced from Obj/rtc_rtc.o(.text.ntp_sync_thread_enrty)
<li><a href="#[88c]">ntp_sync</a> from Obj/ntp_ntp.o(.text.ntp_sync) referenced from Obj/ntp_ntp.o(.text.cmd_ntp_sync)
<li><a href="#[88e]">ping</a> from Obj/ping_ping.o(.text.ping) referenced from Obj/ping_ping.o(.text.cmd_ping)
<li><a href="#[893]">resend_data</a> from Obj/tftp_tftp_server.o(.text.resend_data) referenced from Obj/tftp_tftp_server.o(.text.send_data)
<li><a href="#[894]">send_ack</a> from Obj/tftp_tftp_server.o(.text.send_ack) referenced from Obj/tftp_tftp_server.o(.text.recv)
<li><a href="#[895]">close_handle</a> from Obj/tftp_tftp_server.o(.text.close_handle) referenced from Obj/tftp_tftp_server.o(.text.send_data)
<li><a href="#[896]">send_error</a> from Obj/tftp_tftp_server.o(.text.send_error) referenced from Obj/tftp_tftp_server.o(.text.send_data)
<li><a href="#[897]">send_data</a> from Obj/tftp_tftp_server.o(.text.send_data) referenced from Obj/tftp_tftp_server.o(.text.recv)
<li><a href="#[89a]">tftp_init</a> from Obj/tftp_tftp_server.o(.text.tftp_init) referenced from Obj/tftp_tftp_port.o(.text.tftp_server)
<li><a href="#[89b]">webclient_connect</a> from Obj/src_webclient.o(.text.webclient_connect) referenced from Obj/src_webclient.o(.text.webclient_get)
<li><a href="#[89c]">webclient_recv.isra.0.constprop.7</a> from Obj/src_webclient.o(.text.webclient_recv.isra.0.constprop.7) referenced from Obj/src_webclient.o(.text.webclient_read_line)
<li><a href="#[89d]">webclient_read_line</a> from Obj/src_webclient.o(.text.webclient_read_line) referenced from Obj/src_webclient.o(.text.webclient_handle_response)
<li><a href="#[89e]">webclient_header_fields_add</a> from Obj/src_webclient.o(.text.webclient_header_fields_add) referenced from Obj/src_webclient.o(.text.webclient_send_header)
<li><a href="#[89f]">webclient_header_fields_get</a> from Obj/src_webclient.o(.text.webclient_header_fields_get) referenced from Obj/src_webclient.o(.text.webclient_handle_response)
<li><a href="#[8a1]">webclient_content_length_get</a> from Obj/src_webclient.o(.text.webclient_content_length_get) referenced from Obj/samples_webclient_get_sample.o(.text.webclient_get_test)
<li><a href="#[8a2]">webclient_handle_response</a> from Obj/src_webclient.o(.text.webclient_handle_response) referenced from Obj/src_webclient.o(.text.webclient_get)
<li><a href="#[8a3]">webclient_session_create</a> from Obj/src_webclient.o(.text.webclient_session_create) referenced from Obj/samples_webclient_get_sample.o(.text.webclient_get_test)
<li><a href="#[8a5]">webclient_read</a> from Obj/src_webclient.o(.text.webclient_read) referenced from Obj/samples_webclient_get_sample.o(.text.webclient_get_test)
<li><a href="#[8a6]">webclient_write</a> from Obj/src_webclient.o(.text.webclient_write) referenced from Obj/src_webclient.o(.text.webclient_send_header)
<li><a href="#[8a7]">webclient_send_header</a> from Obj/src_webclient.o(.text.webclient_send_header) referenced from Obj/src_webclient.o(.text.webclient_get)
<li><a href="#[8a8]">webclient_get</a> from Obj/src_webclient.o(.text.webclient_get) referenced from Obj/samples_webclient_get_sample.o(.text.webclient_get_test)
<li><a href="#[8aa]">webclient_post</a> from Obj/src_webclient.o(.text.webclient_post) referenced from Obj/samples_webclient_post_sample.o(.text.webclient_post_test)
<li><a href="#[8ab]">webclient_close</a> from Obj/src_webclient.o(.text.webclient_close) referenced from Obj/samples_webclient_get_sample.o(.text.webclient_get_test)
<li><a href="#[8b7]">webnet_get_root</a> from Obj/src_webnet.o(.text.webnet_get_root) referenced from Obj/src_wn_session.o(.text.webnet_session_get_physical_path)
<li><a href="#[8b8]">webnet_init</a> from Obj/src_webnet.o(.text.webnet_init) referenced from Obj/samples_wn_sample.o(.text.webnet_test)
<li><a href="#[8b9]">mime_get_type</a> from Obj/src_wn_mimetype.o(.text.mime_get_type) referenced from Obj/src_wn_module.o(.text.webnet_module_system_dofile)
<li><a href="#[8bb]">_webnet_request_parse_query</a> from Obj/src_wn_request.o(.text._webnet_request_parse_query) referenced from Obj/src_wn_request.o(.text.webnet_request_parse_method)
<li><a href="#[8bd]">webnet_request_get_query</a> from Obj/src_wn_request.o(.text.webnet_request_get_query) referenced from Obj/samples_wn_sample.o(.text.cgi_calc_handler)
<li><a href="#[8be]">webnet_request_parse_method</a> from Obj/src_wn_request.o(.text.webnet_request_parse_method) referenced from Obj/src_wn_session.o(.text._webnet_session_handle)
<li><a href="#[8bf]">webnet_request_parse_header</a> from Obj/src_wn_request.o(.text.webnet_request_parse_header) referenced from Obj/src_wn_session.o(.text._webnet_session_handle)
<li><a href="#[8c0]">webnet_request_parse_post</a> from Obj/src_wn_request.o(.text.webnet_request_parse_post) referenced from Obj/src_wn_session.o(.text._webnet_session_handle)
<li><a href="#[8c2]">webnet_request_create</a> from Obj/src_wn_request.o(.text.webnet_request_create) referenced from Obj/src_wn_session.o(.text.webnet_sessions_handle_fds)
<li><a href="#[8c3]">webnet_request_destory</a> from Obj/src_wn_request.o(.text.webnet_request_destory) referenced from Obj/src_wn_session.o(.text.webnet_session_close)
<li><a href="#[8c5]">_webnet_session_handle</a> from Obj/src_wn_session.o(.text._webnet_session_handle) referenced from Obj/src_wn_session.o(.text.webnet_sessions_handle_fds)
<li><a href="#[8c6]">webnet_session_create</a> from Obj/src_wn_session.o(.text.webnet_session_create) referenced from Obj/src_webnet.o(.text.webnet_thread)
<li><a href="#[8c7]">webnet_session_read</a> from Obj/src_wn_session.o(.text.webnet_session_read) referenced from Obj/module_wn_module_upload.o(.text._webnet_module_upload_handle.part.2)
<li><a href="#[8c8]">webnet_session_close</a> from Obj/src_wn_session.o(.text.webnet_session_close) referenced from Obj/src_wn_session.o(.text.webnet_sessions_handle_fds)
<li><a href="#[8c9]">webnet_session_printf</a> from Obj/src_wn_session.o(.text.webnet_session_printf) referenced from Obj/src_wn_session.o(.text.webnet_session_set_header_status_line)
<li><a href="#[8ca]">webnet_session_write</a> from Obj/src_wn_session.o(.text.webnet_session_write) referenced from Obj/src_wn_module.o(.text._webnet_dofile_handle)
<li><a href="#[8cc]">webnet_session_get_physical_path</a> from Obj/src_wn_session.o(.text.webnet_session_get_physical_path) referenced from Obj/module_wn_module_ssi.o(.text._webnet_ssi_dofile)
<li><a href="#[8cd]">webnet_session_set_header_status_line</a> from Obj/src_wn_session.o(.text.webnet_session_set_header_status_line) referenced from Obj/src_wn_module.o(.text.webnet_module_system_dofile)
<li><a href="#[8ce]">webnet_session_set_header</a> from Obj/src_wn_session.o(.text.webnet_session_set_header) referenced from Obj/src_wn_session.o(.text.webnet_sessions_handle_fds)
<li><a href="#[8cf]">webnet_sessions_set_fds</a> from Obj/src_wn_session.o(.text.webnet_sessions_set_fds) referenced from Obj/src_webnet.o(.text.webnet_thread)
<li><a href="#[8d1]">webnet_sessions_handle_fds</a> from Obj/src_wn_session.o(.text.webnet_sessions_handle_fds) referenced from Obj/src_webnet.o(.text.webnet_thread)
<li><a href="#[8d2]">str_path_with</a> from Obj/src_wn_utils.o(.text.str_path_with) referenced from Obj/module_wn_module_auth.o(.text.webnet_module_auth)
<li><a href="#[8d3]">str_begin_with</a> from Obj/src_wn_utils.o(.text.str_begin_with) referenced from Obj/src_wn_request.o(.text.webnet_request_parse_method)
<li><a href="#[8d4]">str_end_with</a> from Obj/src_wn_utils.o(.text.str_end_with) referenced from Obj/src_wn_mimetype.o(.text.mime_get_type)
<li><a href="#[8d6]">str_base64_encode</a> from Obj/src_wn_utils.o(.text.str_base64_encode) referenced from Obj/module_wn_module_auth.o(.text.webnet_auth_set)
<li><a href="#[8d7]">str_normalize_path</a> from Obj/src_wn_utils.o(.text.str_normalize_path) referenced from Obj/src_wn_session.o(.text.webnet_session_get_physical_path)
<li><a href="#[8d9]">urldecode</a> from Obj/src_wn_utils.o(.text.urldecode) referenced from Obj/src_wn_request.o(.text._webnet_request_parse_query)
<li><a href="#[8db]">_webnet_module_system_uri_physical</a> from Obj/src_wn_module.o(.text._webnet_module_system_uri_physical) referenced from Obj/src_wn_module.o(.text.webnet_module_handle_event)
<li><a href="#[8dc]">webnet_module_system_dofile</a> from Obj/src_wn_module.o(.text.webnet_module_system_dofile) referenced from Obj/src_wn_module.o(.text._webnet_module_system_uri_post)
<li><a href="#[8dd]">_webnet_module_system_uri_post</a> from Obj/src_wn_module.o(.text._webnet_module_system_uri_post) referenced from Obj/src_wn_module.o(.text.webnet_module_handle_event)
<li><a href="#[8de]">webnet_module_handle_event</a> from Obj/src_wn_module.o(.text.webnet_module_handle_event) referenced from Obj/src_webnet.o(.text.webnet_thread)
<li><a href="#[8df]">webnet_module_handle_uri</a> from Obj/src_wn_module.o(.text.webnet_module_handle_uri) referenced from Obj/src_wn_session.o(.text._webnet_session_handle)
<li><a href="#[8e0]">_webnet_asp_dofile</a> from Obj/module_wn_module_asp.o(.text._webnet_asp_dofile) referenced from Obj/module_wn_module_asp.o(.text.webnet_module_asp)
<li><a href="#[8e1]">webnet_asp_add_var</a> from Obj/module_wn_module_asp.o(.text.webnet_asp_add_var) referenced from Obj/samples_wn_sample.o(.text.webnet_test)
<li><a href="#[8e2]">webnet_module_asp</a> from Obj/module_wn_module_asp.o(.text.webnet_module_asp) referenced from Obj/src_wn_module.o(.text._webnet_module_system_uri_post)
<li><a href="#[8e3]">webnet_auth_set</a> from Obj/module_wn_module_auth.o(.text.webnet_auth_set) referenced from Obj/samples_wn_sample.o(.text.webnet_test)
<li><a href="#[8e4]">webnet_module_auth</a> from Obj/module_wn_module_auth.o(.text.webnet_module_auth) referenced from Obj/src_wn_module.o(.text._webnet_module_system_uri_physical)
<li><a href="#[8e6]">webnet_cgi_register</a> from Obj/module_wn_module_cgi.o(.text.webnet_cgi_register) referenced from Obj/samples_wn_sample.o(.text.webnet_test)
<li><a href="#[8e7]">webnet_module_cgi</a> from Obj/module_wn_module_cgi.o(.text.webnet_module_cgi) referenced from Obj/src_wn_module.o(.text._webnet_module_system_uri_physical)
<li><a href="#[8e8]">webnet_module_dirindex</a> from Obj/module_wn_module_index.o(.text.webnet_module_dirindex) referenced from Obj/src_wn_module.o(.text._webnet_module_system_uri_post)
<li><a href="#[8e9]">webnet_alias_set</a> from Obj/module_wn_module_alias.o(.text.webnet_alias_set) referenced from Obj/samples_wn_sample.o(.text.webnet_test)
<li><a href="#[8ea]">webnet_module_alias</a> from Obj/module_wn_module_alias.o(.text.webnet_module_alias) referenced from Obj/src_wn_module.o(.text._webnet_module_system_uri_physical)
<li><a href="#[8ec]">str_begin_with_strs</a> from Obj/module_wn_module_upload.o(.text.str_begin_with_strs) referenced from Obj/module_wn_module_upload.o(.text._next_possible_boundary.isra.0)
<li><a href="#[8ed]">memstr</a> from Obj/module_wn_module_upload.o(.text.memstr) referenced from Obj/module_wn_module_upload.o(.text.memstrs)
<li><a href="#[8ee]">memstrs</a> from Obj/module_wn_module_upload.o(.text.memstrs) referenced from Obj/module_wn_module_upload.o(.text._next_possible_boundary.isra.0)
<li><a href="#[8ef]">_handle_section</a> from Obj/module_wn_module_upload.o(.text._handle_section) referenced from Obj/module_wn_module_upload.o(.text._webnet_module_upload_handle.part.2)
<li><a href="#[8f0]">_next_possible_boundary.isra.0</a> from Obj/module_wn_module_upload.o(.text._next_possible_boundary.isra.0) referenced from Obj/module_wn_module_upload.o(.text._webnet_module_upload_handle.part.2)
<li><a href="#[8f1]">_webnet_module_upload_handle.part.2</a> from Obj/module_wn_module_upload.o(.text._webnet_module_upload_handle.part.2) referenced from Obj/module_wn_module_upload.o(.text._webnet_module_upload_handle)
<li><a href="#[8f3]">webnet_module_upload_open.part.3</a> from Obj/module_wn_module_upload.o(.text.webnet_module_upload_open.part.3) referenced from Obj/module_wn_module_upload.o(.text.webnet_module_upload)
<li><a href="#[8f5]">webnet_module_upload</a> from Obj/module_wn_module_upload.o(.text.webnet_module_upload) referenced from Obj/src_wn_module.o(.text._webnet_module_system_uri_physical)
<li><a href="#[8f6]">webnet_upload_add</a> from Obj/module_wn_module_upload.o(.text.webnet_upload_add) referenced from Obj/samples_wn_sample.o(.text.webnet_test)
<li><a href="#[8f7]">webnet_upload_get_filename</a> from Obj/module_wn_module_upload.o(.text.webnet_upload_get_filename) referenced from Obj/samples_wn_sample_upload.o(.text.get_file_name)
<li><a href="#[8f8]">webnet_upload_get_content_type</a> from Obj/module_wn_module_upload.o(.text.webnet_upload_get_content_type) referenced from Obj/samples_wn_sample_upload.o(.text.upload_open)
<li><a href="#[8fa]">webnet_upload_get_userdata</a> from Obj/module_wn_module_upload.o(.text.webnet_upload_get_userdata) referenced from Obj/samples_wn_sample_upload.o(.text.upload_write)
<li><a href="#[8fe]">_webnet_ssi_sendfile</a> from Obj/module_wn_module_ssi.o(.text._webnet_ssi_sendfile) referenced from Obj/module_wn_module_ssi.o(.text._webnet_ssi_dofile)
<li><a href="#[8ff]">_webnet_ssi_dofile</a> from Obj/module_wn_module_ssi.o(.text._webnet_ssi_dofile) referenced from Obj/module_wn_module_ssi.o(.text.webnet_module_ssi)
<li><a href="#[900]">webnet_module_ssi</a> from Obj/module_wn_module_ssi.o(.text.webnet_module_ssi) referenced from Obj/src_wn_module.o(.text._webnet_module_system_uri_post)
<li><a href="#[908]">get_file_name</a> from Obj/samples_wn_sample_upload.o(.text.get_file_name) referenced from Obj/samples_wn_sample_upload.o(.text.upload_open)
<li><a href="#[90a]">dma_channel_intr_enable</a> from bsp_dma.o(.fast) referenced from bsp_dma.o(.fast)
<li><a href="#[90c]">dma_intr_enable</a> from bsp_dma.o(.text.dma_intr_enable) referenced from common_memcpy_hw.o(.text.mem_hw_init)
<li><a href="#[911]">dma_intr_status</a> from bsp_dma.o(.fast) referenced from common_memcpy_hw.o(.fast)
<li><a href="#[912]">dma_intr_clear</a> from bsp_dma.o(.fast) referenced from common_memcpy_hw.o(.fast)
<li><a href="#[915]">gpio_pull_mode_set.part.0</a> from bsp_gpio.o(.text.gpio_pull_mode_set.part.0) referenced from bsp_gpio.o(.text.gpio_hw_init)
<li><a href="#[916]">gpio_intr_enable</a> from bsp_gpio.o(.text.gpio_intr_enable) referenced from Obj/drivers_drv_gpio.o(.text.drv_pin_irq_enable)
<li><a href="#[917]">gpio_intr_disable</a> from bsp_gpio.o(.text.gpio_intr_disable) referenced from Obj/drivers_drv_gpio.o(.text.drv_pin_detach_irq)
<li><a href="#[91b]">gpio_hw_init</a> from bsp_gpio.o(.text.gpio_hw_init) referenced from Obj/drivers_drv_gpio.o(.text.drv_pin_mode)
<li><a href="#[91c]">gpio_set</a> from bsp_gpio.o(.text.gpio_set) referenced from Obj/drivers_drv_gpio.o(.text.drv_pin_write)
<li><a href="#[91d]">gpio_get</a> from bsp_gpio.o(.text.gpio_get) referenced from Obj/drivers_drv_gpio.o(.text.drv_pin_read)
<li><a href="#[91f]">h2x_hw_init</a> from bsp_h2x.o(.text.h2x_hw_init) referenced from Obj/drivers_system.o(.text.sys_hw_init)
<li><a href="#[926]">i2c_recv</a> from bsp_i2c.o(.text.i2c_recv) referenced from Obj/drivers_drv_i2c.o(.fast)
<li><a href="#[927]">i2c_send</a> from bsp_i2c.o(.text.i2c_send) referenced from Obj/drivers_drv_i2c.o(.fast)
<li><a href="#[928]">i2c_is_busy</a> from bsp_i2c.o(.text.i2c_is_busy) referenced from Obj/drivers_drv_i2c.o(.fast)
<li><a href="#[929]">i2c_hw_init</a> from bsp_i2c.o(.text.i2c_hw_init) referenced from Obj/drivers_drv_i2c.o(.text.drv_i2c_init)
<li><a href="#[92d]">clock_source_set.part.0</a> from bsp_scu.o(.fast) referenced from bsp_scu.o(.fast)
<li><a href="#[931]">scu_pin_mux_set</a> from bsp_scu.o(.text.scu_pin_mux_set) referenced from Obj/drivers_drv_gpio.o(.text.drv_pin_mode)
<li><a href="#[936]">scu_sw_cnt_get</a> from bsp_scu.o(.fast) referenced from Obj/drivers_system.o(.fast)
<li><a href="#[937]">scu_sw_cnt_enable</a> from bsp_scu.o(.fast) referenced from Obj/drivers_system.o(.fast)
<li><a href="#[93b]">multi_module_reset</a> from bsp_scu.o(.fast) referenced from Obj/drivers_drv_sata.o(.text.drv_ata_reset)
<li><a href="#[93c]">module_enable</a> from bsp_scu.o(.fast) referenced from Obj/drivers_system.o(.text.sys_hw_init)
<li><a href="#[93e]">clock_freq_get</a> from bsp_scu.o(.fast) referenced from Obj/drivers_drv_sata.o(.text.drv_ata_init)
<li><a href="#[93f]">clock_freq_set</a> from bsp_scu.o(.fast) referenced from Obj/drivers_system.o(.text.sys_hw_init)
<li><a href="#[940]">clock_source_set</a> from bsp_scu.o(.fast) referenced from Obj/drivers_system.o(.text.sys_hw_init)
<li><a href="#[942]">clock_enable</a> from bsp_scu.o(.fast) referenced from Obj/drivers_system.o(.text.sys_hw_init)
<li><a href="#[944]">clock_reset</a> from bsp_scu.o(.fast) referenced from Obj/drivers_system.o(.text.sys_hw_init)
<li><a href="#[94b]">spi_frame_output_port_set</a> from bsp_spi.o(.text.spi_frame_output_port_set) referenced from Obj/drivers_drv_spi.o(.text.drv_spi_init)
<li><a href="#[94c]">spi_frame_output_low</a> from bsp_spi.o(.text.spi_frame_output_low) referenced from Obj/drivers_drv_spi.o(.fast)
<li><a href="#[94d]">spi_frame_output_high</a> from bsp_spi.o(.text.spi_frame_output_high) referenced from Obj/drivers_drv_spi.o(.fast)
<li><a href="#[957]">spi_tx_rx_fifo</a> from bsp_spi.o(.text.spi_tx_rx_fifo) referenced from bsp_spi.o(.text.spi_send_recv)
<li><a href="#[95a]">spi_hw_init</a> from bsp_spi.o(.text.spi_hw_init) referenced from Obj/drivers_drv_spi.o(.text.drv_spi_configure)
<li><a href="#[95b]">spi_send_recv</a> from bsp_spi.o(.text.spi_send_recv) referenced from Obj/drivers_drv_spi.o(.fast)
<li><a href="#[95d]">timer_count_get</a> from bsp_timer.o(.fast) referenced from Obj/drivers_drv_timer.o(.fast)
<li><a href="#[95e]">timer_hw_init</a> from bsp_timer.o(.text.timer_hw_init) referenced from Obj/drivers_drv_timer.o(.fast)
<li><a href="#[965]">timer_intr_status</a> from bsp_timer.o(.fast) referenced from Obj/drivers_drv_timer.o(.fast)
<li><a href="#[966]">timer_intr_clear</a> from bsp_timer.o(.fast) referenced from Obj/drivers_drv_timer.o(.fast)
<li><a href="#[967]">timer_start</a> from bsp_timer.o(.fast) referenced from Obj/drivers_drv_timer.o(.fast)
<li><a href="#[968]">timer_stop</a> from bsp_timer.o(.fast) referenced from Obj/drivers_drv_timer.o(.fast)
<li><a href="#[96b]">tic_us_get</a> from bsp_timer.o(.fast) referenced from Obj/drivers_drv_timer.o(.fast)
<li><a href="#[96f]">uart_rx_ready</a> from bsp_uart.o(.text.uart_rx_ready) referenced from Obj/drivers_drv_uart.o(.fast)
<li><a href="#[970]">uart_ndelay_getc</a> from bsp_uart.o(.text.uart_ndelay_getc) referenced from Obj/drivers_drv_uart.o(.fast)
<li><a href="#[97a]">uart_hw_init</a> from bsp_uart.o(.text.uart_hw_init) referenced from Obj/drivers_drv_uart.o(.fast)
<li><a href="#[97b]">uart_intr_enable</a> from bsp_uart.o(.text.uart_intr_enable) referenced from Obj/drivers_drv_uart.o(.fast)
<li><a href="#[97c]">uart_intr_disable</a> from bsp_uart.o(.text.uart_intr_disable) referenced from Obj/drivers_drv_uart.o(.fast)
<li><a href="#[97d]">uart_intr_status</a> from bsp_uart.o(.fast) referenced from Obj/drivers_drv_uart.o(.fast)
<li><a href="#[97e]">console_putc</a> from bsp_uart.o(.text.console_putc) referenced from Obj/drivers_retarget.o(.text.fputc)
<li><a href="#[980]">uart_putc</a> from bsp_uart.o(.text.uart_putc) referenced from Obj/drivers_drv_uart.o(.fast)
<li><a href="#[983]">uart_intr_clear</a> from bsp_uart.o(.fast) referenced from Obj/drivers_drv_uart.o(.fast)
<li><a href="#[988]">wdt_hw_init</a> from bsp_wdt.o(.text.wdt_hw_init) referenced from Obj/drivers_drv_wdt.o(.fast)
<li><a href="#[989]">wdt_start</a> from bsp_wdt.o(.text.wdt_start) referenced from Obj/drivers_drv_wdt.o(.fast)
<li><a href="#[98a]">wdt_stop</a> from bsp_wdt.o(.text.wdt_stop) referenced from Obj/drivers_drv_wdt.o(.fast)
<li><a href="#[98b]">chip_reset</a> from bsp_wdt.o(.text.chip_reset) referenced from Obj/ck803_cpuport.o(.text.rt_hw_hard_fault_exception)
<li><a href="#[98f]">wdt_feed</a> from bsp_wdt.o(.fast) referenced from Obj/drivers_drv_wdt.o(.fast)
<li><a href="#[999]">aes_crypt</a> from crypto_aes.o(.fast) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[99a]">aes_crypt_ctr</a> from crypto_aes.o(.fast) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[99b]">aes_crypt_xts</a> from crypto_aes.o(.fast) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[99c]">cmac_init</a> from crypto_cmac.o(.text.cmac_init) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[99d]">cmac_update</a> from crypto_cmac.o(.text.cmac_update) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[99e]">cmac_final</a> from crypto_cmac.o(.text.cmac_final) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[9a6]">hash_dma_write</a> from crypto_hash.o(.fast) referenced from crypto_hash.o(.fast)
<li><a href="#[9a7]">hash_init</a> from crypto_hash.o(.fast) referenced from crypto_sha1.o(.fast)
<li><a href="#[9a8]">hash_update</a> from crypto_hash.o(.fast) referenced from crypto_hash.o(.fast)
<li><a href="#[9a9]">hash_final</a> from crypto_hash.o(.fast) referenced from crypto_sha1.o(.fast)
<li><a href="#[9b1]">get_valid_bits.part.1</a> from crypto_pke.o(.text.get_valid_bits.part.1) referenced from crypto_pke.o(.text.pke_mul)
<li><a href="#[9b2]">Bigint_Check_1.part.3</a> from crypto_pke.o(.text.Bigint_Check_1.part.3) referenced from crypto_pke.o(.text.prime_Test_Miller_Rabin)
<li><a href="#[9b3]">Bigint_Check_p_1.part.4</a> from crypto_pke.o(.text.Bigint_Check_p_1.part.4) referenced from crypto_pke.o(.text.prime_Test_Miller_Rabin)
<li><a href="#[9b4]">pke_init</a> from crypto_pke.o(.text.pke_init) referenced from Obj/drivers_drv_crypto.o(.text.drv_crypto_reset)
<li><a href="#[9b5]">uint8_XOR</a> from crypto_pke.o(.text.uint8_XOR) referenced from crypto_sm2_osr.o(.text.sm2_encrypt_with_k)
<li><a href="#[9b8]">convert_byte_array</a> from crypto_pke.o(.text.convert_byte_array) referenced from crypto_rsa.o(.fast)
<li><a href="#[9bb]">uint32_BigNumCmp</a> from crypto_pke.o(.text.uint32_BigNumCmp) referenced from crypto_pke.o(.text.pke_mod)
<li><a href="#[9bc]">uint8_BigNum_Check_NULL</a> from crypto_pke.o(.text.uint8_BigNum_Check_NULL) referenced from crypto_sm2_osr.o(.text.sm2_encrypt_with_k)
<li><a href="#[9bd]">uint32_BigNum_Check_NULL</a> from crypto_pke.o(.text.uint32_BigNum_Check_NULL) referenced from crypto_sm2_osr.o(.text.sm2_keyget)
<li><a href="#[9be]">uint32_copy</a> from crypto_pke.o(.text.uint32_copy) referenced from crypto_rsa_osr.o(.text.RSA_CRTModExp)
<li><a href="#[9bf]">uint32_clear</a> from crypto_pke.o(.text.uint32_clear) referenced from crypto_rsa_osr.o(.text.RSA_CRTModExp)
<li><a href="#[9c0]">uint32_set</a> from crypto_pke.o(.text.uint32_set) referenced from crypto_rsa_osr.o(.text.RSA_GetKey)
<li><a href="#[9c1]">pke_set_operand_width</a> from crypto_pke.o(.text.pke_set_operand_width) referenced from crypto_pke.o(.text.pke_add)
<li><a href="#[9c2]">pke_get_operand_bytes</a> from crypto_pke.o(.text.pke_get_operand_bytes) referenced from crypto_rsa_osr.o(.text.RSA_CRTModExp)
<li><a href="#[9c3]">pke_add</a> from crypto_pke.o(.text.pke_add) referenced from crypto_rsa_osr.o(.text.RSA_CRTModExp)
<li><a href="#[9c4]">pke_sub</a> from crypto_pke.o(.text.pke_sub) referenced from crypto_pke.o(.text.pke_mod)
<li><a href="#[9c5]">pke_mul</a> from crypto_pke.o(.text.pke_mul) referenced from crypto_rsa_osr.o(.text.RSA_CRTModExp)
<li><a href="#[9c6]">pke_modadd</a> from crypto_pke.o(.text.pke_modadd) referenced from crypto_pke.o(.text.pke_mod)
<li><a href="#[9c7]">pke_modsub</a> from crypto_pke.o(.text.pke_modsub) referenced from crypto_rsa_osr.o(.text.RSA_CRTModExp)
<li><a href="#[9c8]">pke_pre_calc_mont_N0</a> from crypto_pke.o(.text.pke_pre_calc_mont_N0) referenced from crypto_pke.o(.text.pke_pre_calc_mont_H)
<li><a href="#[9c9]">pke_pre_calc_mont_H</a> from crypto_pke.o(.text.pke_pre_calc_mont_H) referenced from crypto_pke.o(.text.pke_pre_calc_mont_H_without_output)
<li><a href="#[9ca]">pke_pre_calc_mont_H_without_output</a> from crypto_pke.o(.text.pke_pre_calc_mont_H_without_output) referenced from crypto_rsa_osr.o(.text.RSA_ModExp)
<li><a href="#[9cb]">pke_load_pre_calc_mont_H</a> from crypto_pke.o(.text.pke_load_pre_calc_mont_H) referenced from crypto_pke.o(.text.pke_mod)
<li><a href="#[9cc]">pke_modmul</a> from crypto_pke.o(.text.pke_modmul) referenced from crypto_pke.o(.text.pke_mod)
<li><a href="#[9cd]">pke_modexp</a> from crypto_pke.o(.text.pke_modexp) referenced from crypto_pke.o(.text.prime_Test_Miller_Rabin)
<li><a href="#[9ce]">pke_modinv</a> from crypto_pke.o(.text.pke_modinv) referenced from crypto_rsa_osr.o(.text.RSA_GetKey)
<li><a href="#[9cf]">Bigint_div_table_high</a> from crypto_pke.o(.text.Bigint_div_table_high) referenced from crypto_pke.o(.text.GetPrime)
<li><a href="#[9d0]">Bigint_div_table_low</a> from crypto_pke.o(.text.Bigint_div_table_low) referenced from crypto_pke.o(.text.GetPrime)
<li><a href="#[9d2]">Big_Div2n</a> from crypto_pke.o(.text.Big_Div2n) referenced from crypto_pke.o(.text.pke_mod)
<li><a href="#[9d3]">pke_mod</a> from crypto_pke.o(.text.pke_mod) referenced from crypto_rsa_osr.o(.text.RSA_CRTModExp)
<li><a href="#[9d6]">prime_Test_Miller_Rabin</a> from crypto_pke.o(.text.prime_Test_Miller_Rabin) referenced from crypto_pke.o(.text.GetPrime)
<li><a href="#[9d7]">GetPrime</a> from crypto_pke.o(.text.GetPrime) referenced from crypto_rsa_osr.o(.text.RSA_GetKey)
<li><a href="#[9d8]">pointMul</a> from crypto_pke.o(.text.pointMul) referenced from crypto_sm2_osr.o(.text.sm2_encrypt_with_k)
<li><a href="#[9d9]">pointMul_Shamir</a> from crypto_pke.o(.text.pointMul_Shamir) referenced from crypto_sm2_osr.o(.text.sm2_pointMul_base)
<li><a href="#[9da]">pointAdd</a> from crypto_pke.o(.text.pointAdd) referenced from crypto_ecc.o(.text.ecc_point_add)
<li><a href="#[9db]">pointDouble</a> from crypto_pke.o(.text.pointDouble) referenced from crypto_ecc.o(.text.ecc_point_double)
<li><a href="#[9dc]">pointVerify</a> from crypto_pke.o(.text.pointVerify) referenced from crypto_sm2_osr.o(.text.sm2_decrypt_osr)
<li><a href="#[9dd]">get_rand</a> from crypto_rng.o(.fast) referenced from crypto_rng.o(.fast)
<li><a href="#[9df]">rand_get</a> from crypto_rng.o(.fast) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[9e0]">rsa_crt_keypair_gen</a> from crypto_rsa.o(.fast) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[9e1]">rsa_encrypt</a> from crypto_rsa.o(.fast) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[9e2]">rsa_crt_decrypt</a> from crypto_rsa.o(.fast) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[9e6]">RSA_ModExp</a> from crypto_rsa_osr.o(.text.RSA_ModExp) referenced from crypto_rsa.o(.fast)
<li><a href="#[9e7]">RSA_CRTModExp</a> from crypto_rsa_osr.o(.text.RSA_CRTModExp) referenced from crypto_rsa.o(.fast)
<li><a href="#[9e8]">RSA_Get_E1</a> from crypto_rsa_osr.o(.text.RSA_Get_E1) referenced from crypto_rsa_osr.o(.text.RSA_Get_E2.part.0)
<li><a href="#[9e9]">RSA_Get_E2.part.0</a> from crypto_rsa_osr.o(.text.RSA_Get_E2.part.0) referenced from crypto_rsa_osr.o(.text.RSA_GetKey)
<li><a href="#[9ec]">RSA_GetKey</a> from crypto_rsa_osr.o(.text.RSA_GetKey) referenced from crypto_rsa.o(.fast)
<li><a href="#[9ed]">RSA_GetCRTKey</a> from crypto_rsa_osr.o(.text.RSA_GetCRTKey) referenced from crypto_rsa.o(.fast)
<li><a href="#[9ee]">RSA_pq_GetKey</a> from crypto_rsa_osr.o(.text.RSA_pq_GetKey) referenced from crypto_rsa.o(.fast)
<li><a href="#[9ef]">sha1_init</a> from crypto_sha1.o(.fast) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[9f0]">sha1_update</a> from crypto_sha1.o(.fast) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[9f1]">sha1_final</a> from crypto_sha1.o(.fast) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[9f2]">sha224_init</a> from crypto_sha224.o(.fast) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[9f3]">sha224_update</a> from crypto_sha224.o(.fast) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[9f4]">sha224_final</a> from crypto_sha224.o(.fast) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[9f5]">sha256_init</a> from crypto_sha256.o(.fast) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[9f6]">sha256_update</a> from crypto_sha256.o(.fast) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[9f7]">sha256_final</a> from crypto_sha256.o(.fast) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[9f8]">sm2_e_get</a> from crypto_sm2.o(.fast) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[9f9]">sm2_z_get</a> from crypto_sm2.o(.fast) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[9fa]">sm2_keypair_gen</a> from crypto_sm2.o(.fast) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[9fb]">sm2_sign</a> from crypto_sm2.o(.fast) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[9fc]">sm2_verify</a> from crypto_sm2.o(.fast) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[9fd]">sm2_encrypt</a> from crypto_sm2.o(.fast) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[9fe]">sm2_decrypt</a> from crypto_sm2.o(.fast) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[9ff]">sm2_key_exchange</a> from crypto_sm2.o(.fast) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[a00]">sm2_pointMul_base</a> from crypto_sm2_osr.o(.text.sm2_pointMul_base) referenced from crypto_sm2_osr.o(.text.sm2_keyget)
<li><a href="#[a03]">sm2_kdf</a> from crypto_sm2_osr.o(.text.sm2_kdf) referenced from crypto_sm2_osr.o(.text.sm2_encrypt_with_k)
<li><a href="#[a04]">sm2_getZ_osr</a> from crypto_sm2_osr.o(.text.sm2_getZ_osr) referenced from crypto_sm2.o(.fast)
<li><a href="#[a05]">sm2_getE_osr</a> from crypto_sm2_osr.o(.text.sm2_getE_osr) referenced from crypto_sm2.o(.fast)
<li><a href="#[a06]">sm2_keyget</a> from crypto_sm2_osr.o(.text.sm2_keyget) referenced from crypto_sm2.o(.fast)
<li><a href="#[a07]">sm2_sign_with_k</a> from crypto_sm2_osr.o(.text.sm2_sign_with_k) referenced from crypto_sm2_osr.o(.text.sm2_sign_osr)
<li><a href="#[a08]">sm2_sign_osr</a> from crypto_sm2_osr.o(.text.sm2_sign_osr) referenced from crypto_sm2.o(.fast)
<li><a href="#[a09]">sm2_verify_osr</a> from crypto_sm2_osr.o(.text.sm2_verify_osr) referenced from crypto_sm2.o(.fast)
<li><a href="#[a0a]">sm2_encrypt_with_k</a> from crypto_sm2_osr.o(.text.sm2_encrypt_with_k) referenced from crypto_sm2_osr.o(.text.sm2_encrypt_osr)
<li><a href="#[a0b]">sm2_encrypt_osr</a> from crypto_sm2_osr.o(.text.sm2_encrypt_osr) referenced from crypto_sm2.o(.fast)
<li><a href="#[a0c]">sm2_decrypt_osr</a> from crypto_sm2_osr.o(.text.sm2_decrypt_osr) referenced from crypto_sm2.o(.fast)
<li><a href="#[a0d]">sm2_exchangekey_osr</a> from crypto_sm2_osr.o(.text.sm2_exchangekey_osr) referenced from crypto_sm2.o(.fast)
<li><a href="#[a0e]">sm3_init</a> from crypto_sm3.o(.fast) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[a0f]">sm3_update</a> from crypto_sm3.o(.fast) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[a10]">sm3_final</a> from crypto_sm3.o(.fast) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[a11]">sm4_crypt</a> from crypto_sm4.o(.fast) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[a12]">sm4_crypt_ctr</a> from crypto_sm4.o(.fast) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[a13]">sm4_crypt_xts</a> from crypto_sm4.o(.fast) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[a14]">symm_param_cfg</a> from crypto_crypto.o(.fast) referenced from crypto_crypto.o(.fast)
<li><a href="#[a15]">crypto_hw_init</a> from crypto_crypto.o(.text.crypto_hw_init) referenced from Obj/drivers_drv_crypto.o(.text.drv_crypto_ioctl)
<li><a href="#[a16]">crypto_reset</a> from crypto_crypto.o(.text.crypto_reset) referenced from Obj/drivers_drv_crypto.o(.text.drv_crypto_ioctl)
<li><a href="#[a17]">crypto_hash_reset</a> from crypto_crypto.o(.text.crypto_hash_reset) referenced from crypto_hash.o(.fast)
<li><a href="#[a18]">crypto_data_pad</a> from crypto_crypto.o(.text.crypto_data_pad) referenced from Obj/drivers_drv_sata.o(.text.drv_ata_reset)
<li><a href="#[a19]">crypto_data_discard</a> from crypto_crypto.o(.text.crypto_data_discard) referenced from Obj/drivers_drv_sata.o(.text.drv_ata_reset)
<li><a href="#[a1e]">crypto_is_busy</a> from crypto_crypto.o(.fast) referenced from Obj/drivers_drv_sata.o(.text.drv_ata_reset)
<li><a href="#[a1f]">crypto_bridge_is_required</a> from crypto_crypto.o(.fast) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[a20]">crypto_frontend_port_addr</a> from crypto_crypto.o(.fast) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[a23]">crypto_bridge_enable</a> from crypto_crypto.o(.fast) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[a25]">crypto_dma_start</a> from crypto_crypto.o(.fast) referenced from crypto_aes.o(.fast)
<li><a href="#[a26]">bn_mod</a> from crypto_bignum.o(.text.bn_mod) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[a27]">bn_cmp</a> from crypto_bignum.o(.text.bn_cmp) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[a28]">bn_add</a> from crypto_bignum.o(.text.bn_add) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[a29]">bn_sub</a> from crypto_bignum.o(.text.bn_sub) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[a2a]">bn_mul</a> from crypto_bignum.o(.text.bn_mul) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[a2b]">bn_modadd</a> from crypto_bignum.o(.text.bn_modadd) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[a2c]">bn_modsub</a> from crypto_bignum.o(.text.bn_modsub) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[a2d]">bn_modmul</a> from crypto_bignum.o(.text.bn_modmul) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[a2e]">bn_modexp</a> from crypto_bignum.o(.text.bn_modexp) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[a2f]">bn_modinv</a> from crypto_bignum.o(.text.bn_modinv) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[a30]">ecc_point_verify</a> from crypto_ecc.o(.text.ecc_point_verify) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[a31]">ecc_point_add</a> from crypto_ecc.o(.text.ecc_point_add) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[a32]">ecc_point_double</a> from crypto_ecc.o(.text.ecc_point_double) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[a33]">ecc_point_mul</a> from crypto_ecc.o(.text.ecc_point_mul) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[a34]">ecc_point_shamir</a> from crypto_ecc.o(.text.ecc_point_shamir) referenced from Obj/drivers_drv_crypto.o(.fast)
<li><a href="#[a35]">norc_port_switch_cmd.part.0</a> from norflash_norflash.o(.text.norc_port_switch_cmd.part.0) referenced from norflash_norflash.o(.text.norflash_hw_init)
<li><a href="#[a36]">norc_port_switch_xip.part.1</a> from norflash_norflash.o(.text.norc_port_switch_xip.part.1) referenced from norflash_norflash.o(.text.norflash_hw_init)
<li><a href="#[a39]">norflash_hw_init</a> from norflash_norflash.o(.text.norflash_hw_init) referenced from Obj/drivers_system.o(.fast)
<li><a href="#[a3b]">norflash_byte_write</a> from norflash_norflash.o(.text.norflash_byte_write) referenced from common_log.o(.fast)
<li><a href="#[a3c]">norflash_read</a> from norflash_norflash.o(.text.norflash_read) referenced from common_log.o(.fast)
<li><a href="#[a3d]">norflash_write</a> from norflash_norflash.o(.text.norflash_write) referenced from common_log.o(.fast)
<li><a href="#[a3e]">norflash_sector_erase</a> from norflash_norflash.o(.text.norflash_sector_erase) referenced from common_log.o(.fast)
<li><a href="#[a99]">ahci_hex_print</a> from sata_host_ahci.o(.text.ahci_hex_print) referenced from sata_host_ahci_cmd.o(.fast)
<li><a href="#[a9c]">ahci_port_serr_clear</a> from sata_host_ahci.o(.text.ahci_port_serr_clear) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[a9f]">ahci_reg_is_flush</a> from sata_host_ahci.o(.text.ahci_reg_is_flush) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[aa1]">ahci_reg_ci_get</a> from sata_host_ahci.o(.text.ahci_reg_ci_get) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[aa7]">ahci_ccs_get</a> from sata_host_ahci.o(.text.ahci_ccs_get) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[aab]">ahci_intr_enable</a> from sata_host_ahci.o(.text.ahci_intr_enable) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[aac]">ahci_intr_disable</a> from sata_host_ahci.o(.text.ahci_intr_disable) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[aad]">ahci_intr_status</a> from sata_host_ahci.o(.text.ahci_intr_status) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[aae]">ahci_intr_clear</a> from sata_host_ahci.o(.text.ahci_intr_clear) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[ab0]">ahci_port_init</a> from sata_host_ahci.o(.text.ahci_port_init) referenced from sata_host_ahci.o(.text.ahci_hba_reset)
<li><a href="#[ac0]">ahci_xfer_mode_set</a> from sata_host_ahci.o(.text.ahci_xfer_mode_set) referenced from Obj/drivers_drv_sata.o(.text.drv_ata_probe)
<li><a href="#[ac2]">identify_revise</a> from sata_host_ahci.o(.text.identify_revise) referenced from sata_host_ahci.o(.text.ahci_identify_read)
<li><a href="#[ac3]">ahci_identify_read</a> from sata_host_ahci.o(.text.ahci_identify_read) referenced from Obj/drivers_drv_sata.o(.text.drv_ata_probe)
<li><a href="#[aca]">ahci_passthru</a> from sata_host_ahci.o(.text.ahci_passthru) referenced from sata_host_ahci.o(.text.ahci_hba_reset)
<li><a href="#[acb]">ahci_hba_reset</a> from sata_host_ahci.o(.text.ahci_hba_reset) referenced from Obj/drivers_drv_sata.o(.text.drv_ata_probe)
<li><a href="#[ace]">ahci_hw_init</a> from sata_host_ahci.o(.text.ahci_hw_init) referenced from Obj/drivers_drv_sata.o(.text.drv_ata_init)
<li><a href="#[acf]">ahci_clock_set</a> from sata_host_ahci.o(.text.ahci_clock_set) referenced from Obj/drivers_drv_sata.o(.text.drv_ata_init)
<li><a href="#[ad1]">ahci_wait_timeout_set</a> from sata_host_ahci.o(.text.ahci_wait_timeout_set) referenced from Obj/drivers_drv_sata.o(.text.drv_ata_init)
<li><a href="#[ad2]">ahci_speed_set</a> from sata_host_ahci.o(.text.ahci_speed_set) referenced from Obj/drivers_drv_sata.o(.text.drv_ata_init)
<li><a href="#[ad3]">ahci_prdt_setup</a> from sata_host_ahci.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[ad4]">ahci_prdt_setup2</a> from sata_host_ahci.o(.fast) referenced from sata_host_ahci_cmd.o(.fast)
<li><a href="#[ad5]">ahci_prdt_pre_setup</a> from sata_host_ahci.o(.fast) referenced from sata_host_ahci_cmd.o(.fast)
<li><a href="#[ad6]">ahci_hba_get</a> from sata_host_ahci.o(.fast) referenced from Obj/drivers_drv_sata.o(.text.drv_ata_register)
<li><a href="#[ad8]">ahci_reg_sact_get</a> from sata_host_ahci.o(.fast) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[ad9]">ahci_link_change_handler</a> from sata_host_ahci.o(.fast) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[ada]">ahci_port_reset</a> from sata_host_ahci.o(.fast) referenced from sata_host_ahci.o(.text.ahci_hba_reset)
<li><a href="#[adb]">ahci_cmd_complete_wait</a> from sata_host_ahci.o(.fast) referenced from sata_host_ahci_cmd.o(.fast)
<li><a href="#[adc]">ahci_cache_flush</a> from sata_host_ahci.o(.fast) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[add]">ahci_data_set_trim</a> from sata_host_ahci.o(.fast) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[adf]">ahci_sector_read</a> from sata_host_ahci.o(.fast) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[ae0]">ahci_sector_write</a> from sata_host_ahci.o(.fast) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[ae3]">ahci_error_recover</a> from sata_host_ahci.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[ae4]">ahci_error_handler</a> from sata_host_ahci.o(.fast) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[ae5]">ahci_cmd_slot_is_empty</a> from sata_host_ahci_cmd.o(.fast) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[ae7]">ahci_cmd_identify</a> from sata_host_ahci_cmd.o(.text.ahci_cmd_identify) referenced from sata_host_ahci.o(.text.ahci_identify_read)
<li><a href="#[aeb]">ahci_cmd_set_features</a> from sata_host_ahci_cmd.o(.text.ahci_cmd_set_features) referenced from sata_host_ahci.o(.text.ahci_xfer_mode_set)
<li><a href="#[af1]">ahci_cmd_slot_free</a> from sata_host_ahci_cmd.o(.fast) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[af4]">ahci_fis_rx</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[af5]">ahci_cmd_issue</a> from sata_host_ahci_cmd.o(.fast) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[af6]">ahci_non_data_lba</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.text.ahci_passthru)
<li><a href="#[af7]">ahci_inout_data_lba</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.text.ahci_passthru)
<li><a href="#[af8]">ahci_dma_ncq_lba</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci_cmd.o(.fast)
<li><a href="#[af9]">ahci_cmd_flush_cache</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[afa]">ahci_cmd_flush_cache_ext</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[afb]">ahci_cmd_read_sector_lba28</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[afc]">ahci_cmd_read_sector_lba48</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[afd]">ahci_cmd_write_sector_lba28</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[afe]">ahci_cmd_write_sector_lba48</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[aff]">ahci_cmd_ncq_queue_mgmt</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[b00]">ahci_cmd_rw_ncq</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[b01]">ahci_cmd_rw_dma</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[b04]">ahci_cmd_read_ncq</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[b05]">ahci_cmd_write_ncq</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[b06]">ahci_cmd_read_multi_lba28</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[b07]">ahci_cmd_read_multi_lba48</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[b08]">ahci_cmd_write_multi_lba28</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[b09]">ahci_cmd_write_multi_lba48</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[b0a]">ahci_cmd_data_set_management_trim</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[b13]">ascii_to_dec</a> from common_log.o(.fast) referenced from common_log.o(.fast)
<li><a href="#[b16]">log_write</a> from common_log.o(.fast) referenced from common_log.o(.fast)
<li><a href="#[b19]">log_nonvolatile</a> from common_log.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[b1a]">log_error_id</a> from common_log.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[b1c]">mem_hw_internal</a> from common_memcpy_hw.o(.fast) referenced from common_memcpy_hw.o(.fast)
<li><a href="#[b1d]">mem_hw_init</a> from common_memcpy_hw.o(.text.mem_hw_init) referenced from Obj/src_kservice.o(.text.xmem_init)
<li><a href="#[b1e]">memcpy_hw</a> from common_memcpy_hw.o(.fast) referenced from Obj/src_kservice.o(.fast)
<li><a href="#[b1f]">memset_hw</a> from common_memcpy_hw.o(.fast) referenced from Obj/src_kservice.o(.fast)
<li><a href="#[b91]">gmac_phy_addr_set</a> from gmac_gmac.o(.fast) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth1_init)
<li><a href="#[b92]">gmac_addr_filter_set</a> from gmac_gmac.o(.text.gmac_addr_filter_set) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth1_init)
<li><a href="#[b93]">gmac_addr_filter_get</a> from gmac_gmac.o(.text.gmac_addr_filter_get) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[b94]">gmac_hash_filter_set</a> from gmac_gmac.o(.text.gmac_hash_filter_set) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[b95]">gmac_hash_filter_get</a> from gmac_gmac.o(.text.gmac_hash_filter_get) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[b96]">gmac_mac_addr_set</a> from gmac_gmac.o(.text.gmac_mac_addr_set) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth1_init)
<li><a href="#[b97]">gmac_mac_addr_get</a> from gmac_gmac.o(.text.gmac_mac_addr_get) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[b98]">gmac_flow_ctrl_enable</a> from gmac_gmac.o(.text.gmac_flow_ctrl_enable) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth1_init)
<li><a href="#[b99]">gmac_flow_ctrl_disable</a> from gmac_gmac.o(.text.gmac_flow_ctrl_disable) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[b9a]">gmac_tx_enable</a> from gmac_gmac.o(.text.gmac_tx_enable) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth1_init)
<li><a href="#[b9b]">gmac_tx_disable</a> from gmac_gmac.o(.text.gmac_tx_disable) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[b9c]">gmac_rx_enable</a> from gmac_gmac.o(.text.gmac_rx_enable) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth1_init)
<li><a href="#[b9d]">gmac_rx_disable</a> from gmac_gmac.o(.text.gmac_rx_disable) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[b9e]">gmac_jumbo_frame_enable</a> from gmac_gmac.o(.text.gmac_jumbo_frame_enable) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[b9f]">gmac_jumbo_frame_disable</a> from gmac_gmac.o(.text.gmac_jumbo_frame_disable) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[ba0]">gmac_chksum_offload_set</a> from gmac_gmac.o(.text.gmac_chksum_offload_set) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth1_init)
<li><a href="#[ba2]">gmac_wol_wakeup_frame_filter_set</a> from gmac_gmac.o(.text.gmac_wol_wakeup_frame_filter_set) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[ba3]">gmac_wol_wakeup_event_set</a> from gmac_gmac.o(.text.gmac_wol_wakeup_event_set) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[ba5]">gmac_wol_mode_enter</a> from gmac_gmac.o(.text.gmac_wol_mode_enter) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[ba6]">gmac_wol_mode_exit</a> from gmac_gmac.o(.text.gmac_wol_mode_exit) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[ba7]">gmac_wol_state_poll</a> from gmac_gmac.o(.text.gmac_wol_state_poll) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[ba8]">gmac_speed_duplex_set</a> from gmac_gmac.o(.text.gmac_speed_duplex_set) referenced from Obj/drivers_drv_eth.o(.fast)
<li><a href="#[ba9]">gmac_statistics_get</a> from gmac_gmac.o(.text.gmac_statistics_get) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[baa]">gmac_tx_queue_init</a> from gmac_gmac.o(.text.gmac_tx_queue_init) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth1_init)
<li><a href="#[bab]">gmac_rx_queue_init</a> from gmac_gmac.o(.text.gmac_rx_queue_init) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth1_init)
<li><a href="#[bac]">gmac_hw_init</a> from gmac_gmac.o(.text.gmac_hw_init) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth1_init)
<li><a href="#[bad]">gmac_hw_deinit</a> from gmac_gmac.o(.text.gmac_hw_deinit) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[bae]">gmac_phy_mmd_clk_set</a> from gmac_gmac.o(.fast) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth1_init)
<li><a href="#[baf]">gmac_phy_mmd_read16</a> from gmac_gmac.o(.fast) referenced from Obj/src_tih_phy_m88e1512.o(.text.marvell_phy_init)
<li><a href="#[bb0]">gmac_phy_mmd_write16</a> from gmac_gmac.o(.fast) referenced from Obj/src_tih_phy_m88e1512.o(.text.marvell_phy_intr_enable)
<li><a href="#[bb1]">gmac_intr_enable</a> from gmac_gmac.o(.fast) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth1_init)
<li><a href="#[bb2]">gmac_intr_disable</a> from gmac_gmac.o(.fast) referenced from Obj/drivers_drv_eth.o(.fast)
<li><a href="#[bb3]">gmac_intr_status</a> from gmac_gmac.o(.fast) referenced from Obj/drivers_drv_eth.o(.fast)
<li><a href="#[bb4]">gmac_intr_clear</a> from gmac_gmac.o(.fast) referenced from Obj/drivers_drv_eth.o(.fast)
<li><a href="#[bb5]">gmac_frame_transmit</a> from gmac_gmac.o(.fast) referenced from Obj/drivers_drv_eth.o(.fast)
<li><a href="#[bb6]">gmac_frame_transmitted_buf_poll</a> from gmac_gmac.o(.fast) referenced from Obj/drivers_drv_eth.o(.fast)
<li><a href="#[bb7]">gmac_frame_recv_poll</a> from gmac_gmac.o(.fast) referenced from Obj/drivers_drv_eth.o(.fast)
<li><a href="#[bb8]">gmac_rx_buf_attach</a> from gmac_gmac.o(.fast) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth1_init)
<li><a href="#[bb9]">gmac_rx_valid_buf</a> from gmac_gmac.o(.fast) referenced from Obj/drivers_drv_eth.o(.fast)
<li><a href="#[bba]">gmac_rx_buf_processed</a> from gmac_gmac.o(.fast) referenced from Obj/drivers_drv_eth.o(.fast)
<li><a href="#[314]">malloc</a> from cklib_malloc.o(.text.malloc) referenced from Obj/iperf_iperf.o(.fast)
<li><a href="#[315]">free</a> from cklib_malloc.o(.text.free) referenced from Obj/iperf_iperf.o(.fast)
<li><a href="#[317]">calloc</a> from cklib_malloc.o(.text.calloc) referenced from Obj/iperf_iperf.o(.fast)
<li><a href="#[c4e]">print_number</a> from cklib_printf.o(.text.print_number) referenced from cklib_printf.o(.text.vsnprintf)
<li><a href="#[c4f]">vsnprintf</a> from cklib_printf.o(.text.vsnprintf) referenced from Obj/library_debug.o(.text.mbedtls_debug_print_msg)
<li><a href="#[e9]">snprintf</a> from cklib_printf.o(.text.snprintf) referenced from Obj/iperf_iperf.o(.fast)
<li><a href="#[eb]">vsprintf</a> from cklib_printf.o(.text.vsprintf) referenced from common_log.o(.fast)
<li><a href="#[ed]">sprintf</a> from cklib_printf.o(.text.sprintf) referenced from common_log.o(.fast)
<li><a href="#[f3]">printf</a> from cklib_printf.o(.text.printf) referenced from crypto_crypto.o(.fast)
<li><a href="#[c57]">csi_vic_init</a> from ck803_core_ck803.o(.fast) referenced from ck803_interrupt.o(.text.intr_hw_init)
<li><a href="#[c59]">csi_cache_set_range</a> from ck803_core_ck803.o(.text.csi_cache_set_range) referenced from Obj/drivers_system.o(.text.sys_hw_init)
<li><a href="#[c65]">csi_vic_enable_irq</a> from ck803_core_ck803.o(.fast) referenced from ck803_interrupt.o(.fast)
<li><a href="#[c66]">csi_vic_disable_irq</a> from ck803_core_ck803.o(.fast) referenced from ck803_interrupt.o(.fast)
<li><a href="#[c69]">csi_vic_clear_pending_irq</a> from ck803_core_ck803.o(.fast) referenced from Obj/drivers_drv_intr.o(.fast)
<li><a href="#[c6f]">csi_vic_set_prio</a> from ck803_core_ck803.o(.fast) referenced from Obj/drivers_drv_intr.o(.text.rt_hw_interrupt_init)
<li><a href="#[c71]">csi_vic_set_vector</a> from ck803_core_ck803.o(.fast) referenced from ck803_interrupt.o(.text.intr_hw_init)
<li><a href="#[c75]">csi_icache_enable</a> from ck803_core_ck803.o(.fast) referenced from Obj/drivers_system.o(.text.sys_hw_init)
<li><a href="#[c79]">csi_dcache_invalid</a> from ck803_core_ck803.o(.fast) referenced from ck803_core_ck803.o(.fast)
<li><a href="#[c7d]">csi_dcache_invalid_range</a> from ck803_core_ck803.o(.fast) referenced from ck803_interrupt.o(.fast)
<li><a href="#[c7f]">csi_dcache_clean_invalid_range</a> from ck803_core_ck803.o(.fast) referenced from ck803_interrupt.o(.fast)
<li><a href="#[c80]">csi_irq_save</a> from ck803_core_ck803.o(.fast) referenced from norflash_norflash.o(.text.norc_port_switch_cmd.part.0)
<li><a href="#[c81]">csi_irq_restore</a> from ck803_core_ck803.o(.fast) referenced from norflash_norflash.o(.text.norc_port_switch_xip.part.1)
<li><a href="#[c82]">irq_enable</a> from ck803_core_ck803.o(.fast) referenced from Obj/drivers_system.o(.fast)
<li><a href="#[c84]">core_timer_hw_init</a> from ck803_core_timer.o(.text.core_timer_hw_init) referenced from Obj/drivers_drv_ctimer.o(.text.core_timer_init)
<li><a href="#[c86]">core_timer_intr_enable</a> from ck803_core_timer.o(.text.core_timer_intr_enable) referenced from Obj/drivers_drv_ctimer.o(.text.core_timer_init)
<li><a href="#[c87]">core_timer_intr_disable</a> from ck803_core_timer.o(.text.core_timer_intr_disable) referenced from Obj/drivers_drv_ctimer.o(.text.core_timer_init)
<li><a href="#[c89]">core_timer_intr_clear</a> from ck803_core_timer.o(.fast) referenced from Obj/drivers_drv_ctimer.o(.fast)
<li><a href="#[c8a]">core_timer_start</a> from ck803_core_timer.o(.fast) referenced from Obj/drivers_drv_ctimer.o(.text.core_timer_init)
<li><a href="#[c8d]">intr_cache_flush.part.0</a> from ck803_interrupt.o(.fast) referenced from ck803_interrupt.o(.fast)
<li><a href="#[c8e]">intr_hw_init</a> from ck803_interrupt.o(.text.intr_hw_init) referenced from Obj/drivers_drv_intr.o(.text.rt_hw_interrupt_init)
<li><a href="#[c93]">intr_connect</a> from ck803_interrupt.o(.fast) referenced from Obj/drivers_drv_intr.o(.fast)
<li><a href="#[c94]">intr_disconnect</a> from ck803_interrupt.o(.fast) referenced from Obj/drivers_drv_intr.o(.fast)
<li><a href="#[c96]">intr_enable</a> from ck803_interrupt.o(.fast) referenced from Obj/drivers_drv_intr.o(.fast)
<li><a href="#[c97]">intr_disable</a> from ck803_interrupt.o(.fast) referenced from Obj/drivers_drv_intr.o(.fast)
<li><a href="#[c9a]">__muldi3</a> from _muldi3.o(.text) referenced from _mul_sf.o(.text)
<li><a href="#[c9b]">__fixunssfsi</a> from _fixunssfsi.o(.text) referenced from bsp_timer.o(.text.timer_hw_init)
<li><a href="#[c9d]">__floatundisf</a> from _floatundisf.o(.text) referenced from Obj/iperf_iperf.o(.fast)
<li><a href="#[c9f]">__udivdi3</a> from _udivdi3.o(.text) referenced from cklib_printf.o(.text.print_number)
<li><a href="#[ca0]">__umoddi3</a> from _umoddi3.o(.text) referenced from cklib_printf.o(.text.print_number)
<li><a href="#[ca1]">_fpadd_parts</a> from _addsub_sf.o(.text) referenced from _addsub_sf.o(.text)
<li><a href="#[ca2]">__addsf3</a> from _addsub_sf.o(.text) referenced from Obj/hwtimer_hwtimer.o(.text.rt_hwtimer_write)
<li><a href="#[ca3]">__subsf3</a> from _addsub_sf.o(.text) referenced from bsp_timer.o(.text.timer_hw_init)
<li><a href="#[ca4]">__mulsf3</a> from _mul_sf.o(.text) referenced from bsp_timer.o(.text.timer_hw_init)
<li><a href="#[ca5]">__divsf3</a> from _div_sf.o(.text) referenced from Obj/iperf_iperf.o(.fast)
<li><a href="#[ca6]">__eqsf2</a> from _eq_sf.o(.text) referenced from Obj/hwtimer_hwtimer.o(.text.rt_hwtimer_write)
<li><a href="#[ca8]">__gtsf2</a> from _gt_sf.o(.text) referenced from Obj/hwtimer_hwtimer.o(.text.rt_hwtimer_write)
<li><a href="#[ca9]">__gesf2</a> from _ge_sf.o(.text) referenced from _fixunssfsi.o(.text)
<li><a href="#[caa]">__ltsf2</a> from _lt_sf.o(.text) referenced from Obj/hwtimer_hwtimer.o(.text.rt_hwtimer_write)
<li><a href="#[cab]">__floatsisf</a> from _si_to_sf.o(.text) referenced from Obj/hwtimer_hwtimer.o(.text.rt_hwtimer_write)
<li><a href="#[cac]">__fixsfsi</a> from _sf_to_si.o(.text) referenced from _fixunssfsi.o(.text)
<li><a href="#[cad]">__extendsfdf2</a> from _sf_to_df.o(.text) referenced from Obj/iperf_iperf.o(.fast)
<li><a href="#[cae]">__floatunsisf</a> from _usi_to_sf.o(.text) referenced from bsp_timer.o(.text.timer_hw_init)
<li><a href="#[caf]">_fpadd_parts</a> from _addsub_df.o(.text) referenced from _addsub_df.o(.text)
<li><a href="#[cb0]">__adddf3</a> from _addsub_df.o(.text) referenced from _floatundisf.o(.text)
<li><a href="#[cb1]">__subdf3</a> from _addsub_df.o(.text) referenced from cklib_printf.o(.text.vsnprintf)
<li><a href="#[cb2]">__muldf3</a> from _mul_df.o(.text) referenced from cklib_printf.o(.text.vsnprintf)
<li><a href="#[cb4]">__eqdf2</a> from _eq_df.o(.text) referenced from cklib_printf.o(.text.vsnprintf)
<li><a href="#[cb5]">__floatsidf</a> from _si_to_df.o(.text) referenced from cklib_printf.o(.text.vsnprintf)
<li><a href="#[cb6]">__fixdfsi</a> from _df_to_si.o(.text) referenced from cklib_printf.o(.text.vsnprintf)
<li><a href="#[cb7]">__make_dp</a> from _make_df.o(.text) referenced from _sf_to_df.o(.text)
<li><a href="#[cb8]">__truncdfsf2</a> from _df_to_sf.o(.text) referenced from _floatundisf.o(.text)
<li><a href="#[cb9]">__floatunsidf</a> from _usi_to_df.o(.text) referenced from _floatundisf.o(.text)
<li><a href="#[cba]">__pack_f</a> from _pack_sf.o(.text) referenced from _addsub_sf.o(.text)
<li><a href="#[cbb]">__unpack_f</a> from _unpack_sf.o(.text) referenced from _addsub_sf.o(.text)
<li><a href="#[cbc]">__fpcmp_parts_f</a> from _fpcmp_parts_sf.o(.text) referenced from _eq_sf.o(.text)
<li><a href="#[cbd]">__make_fp</a> from _make_sf.o(.text) referenced from _df_to_sf.o(.text)
<li><a href="#[cbe]">__pack_d</a> from _pack_df.o(.text) referenced from _addsub_df.o(.text)
<li><a href="#[cbf]">__unpack_d</a> from _unpack_df.o(.text) referenced from _addsub_df.o(.text)
<li><a href="#[cc0]">__fpcmp_parts_d</a> from _fpcmp_parts_df.o(.text) referenced from _eq_df.o(.text)
<li><a href="#[cc2]">isxdigit</a> from isxdigit_fast.o(.text) referenced from Obj/src_wn_utils.o(.text.urldecode)
<li><a href="#[cc4]">isupper</a> from isupper.o(.text) referenced from strtoul.o(.text)
<li><a href="#[cc6]">putchar</a> from putchar.o(.text) referenced from Obj/entry_ipraw.o(.text.data_print.constprop.1)
<li><a href="#[cc8]">perror</a> from perror.o(.text) referenced from Obj/entry_ipraw.o(.text.iprawtest)
<li><a href="#[cca]">fputs</a> from fputs.o(.text) referenced from perror.o(.text)
<li><a href="#[ccc]">fflush</a> from fflush.o(.text) referenced from Obj/src_tls_server.o(.text.tls_srv_create)
<li><a href="#[cce]">rand</a> from rand.o(.text) referenced from Obj/core_dns.o(.text.dns_check_entry)
<li><a href="#[cd2]">strtoul</a> from strtoul.o(.text) referenced from Obj/entry_ipraw.o(.text.iprawtest)
<li><a href="#[cd4]">exit</a> from exit.o(.text) referenced from Obj/samples_crypto_app_test.o(.text.mbedtls_crypto_test)
<li><a href="#[cd5]">atoi</a> from atoi.o(.text) referenced from Obj/iperf_iperf.o(.text.iperf)
<li><a href="#[cd7]">strerror</a> from strerror.o(.text) referenced from perror.o(.text)
<li><a href="#[cd9]">memchr</a> from memchr.o(.text) referenced from Obj/module_wn_module_upload.o(.text._webnet_module_upload_handle.part.2)
<li><a href="#[cdb]">gmtime</a> from gmtime.o(.text) referenced from Obj/library_x509.o(.text.x509_get_current_time)
<li><a href="#[cdd]">_u__div</a> from gmtime.o(.text) referenced from gmtime.o(.text)
<li><a href="#[cdf]">isdigit</a> from isdigit.o(.text) referenced from strtoul.o(.text)
<li><a href="#[ce1]">isalpha</a> from isalpha.o(.text) referenced from strtoul.o(.text)
<li><a href="#[ce3]">isspace</a> from isspace.o(.text) referenced from strtoul.o(.text)
<li><a href="#[77]">os_critical_enter</a> from critical.o(.text) referenced from fputs.o(.text)
<li><a href="#[7d]">os_critical_exit</a> from critical.o(.text) referenced from fputs.o(.text)
<li><a href="#[cec]">putc</a> from putc.o(.text) referenced from putchar.o(.text)
</ul>
<h3>Global Symbols</h3>
<p><strong><a name="[1]"></a>main</strong>(48 bytes, Stack size 24 btyes, Obj/entry_main.o(.text.startup.main))<br>
<br>[Stack]<ul><li>Max Depth = 328 
<li>Call Chain = main &rArr; rt_thread_init &rArr; _rt_thread_init.isra.0  &rArr; rt_timer_init  &rArr; rt_object_init  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<li><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</ul>
<br>[Called By]<ul>
<li><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</ul>
<p><strong><a name="[3]"></a>iprawtest</strong>(502 bytes, Stack size 136 btyes, Obj/entry_ipraw.o(.text.iprawtest))<br>
<br>[Stack]<ul><li>Max Depth = 684 
<li>Call Chain = iprawtest &rArr; recvfrom &rArr; lwip_recvfrom  &rArr; netconn_recv  &rArr; netconn_recv_data  &rArr; netconn_close_shutdown  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[cd2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<li><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getaddrinfo
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<li><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<li><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<li><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<li><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<li><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_print.constprop.1
<li><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<li><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeaddrinfo
<li><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<li><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</ul>
<p><strong><a name="[4]"></a>drv_cputime_init</strong>(16 bytes, Stack size 4 btyes, Obj/drivers_drv_cputime.o(.text.drv_cputime_init))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = drv_cputime_init &rArr; clock_cpu_setops &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_sw_cnt_enable
<li><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_cpu_setops
</ul>
<p><strong><a name="[b]"></a>tih_aes_crypt</strong>(80 bytes, Stack size 56 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 368 
<li>Call Chain = tih_aes_crypt &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<br>[Called By]<ul>
<li><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbedtls_aes_crypt_cfb128
<li><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<li><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
</ul>
<p><strong><a name="[c]"></a>tih_aes_crypt_ctr</strong>(88 bytes, Stack size 64 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 376 
<li>Call Chain = tih_aes_crypt_ctr &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_ctr
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<br>[Called By]<ul>
<li><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbedtls_aes_crypt_ctr
</ul>
<p><strong><a name="[d]"></a>tih_aes_crypt_xts</strong>(88 bytes, Stack size 64 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 376 
<li>Call Chain = tih_aes_crypt_xts &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_xts
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<p><strong><a name="[e]"></a>tih_sm4_crypt</strong>(72 bytes, Stack size 48 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 360 
<li>Call Chain = tih_sm4_crypt &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm4_crypt
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<br>[Called By]<ul>
<li><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbedtls_sm4_crypt_cfb128
<li><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_crypt_ecb
<li><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_crypt_cbc
<li><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_crypt_ofb
</ul>
<p><strong><a name="[f]"></a>tih_sm4_crypt_ctr</strong>(80 bytes, Stack size 56 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 368 
<li>Call Chain = tih_sm4_crypt_ctr &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm4_crypt_ctr
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<br>[Called By]<ul>
<li><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbedtls_sm4_crypt_ctr
</ul>
<p><strong><a name="[10]"></a>tih_sm4_crypt_xts</strong>(80 bytes, Stack size 56 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 368 
<li>Call Chain = tih_sm4_crypt_xts &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm4_crypt_xts
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<p><strong><a name="[11]"></a>tih_rsa_keypair_gen</strong>(102 bytes, Stack size 60 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 1404 
<li>Call Chain = tih_rsa_keypair_gen &rArr; rsa_crt_keypair_gen &rArr; RSA_GetCRTKey  &rArr; RSA_CRTModExp  &rArr; pke_mod  &rArr; pke_modmul  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_crt_keypair_gen
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<p><strong><a name="[12]"></a>tih_rsa_encrypt</strong>(98 bytes, Stack size 32 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = tih_rsa_encrypt &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_encrypt
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<br>[Called By]<ul>
<li><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
</ul>
<p><strong><a name="[13]"></a>tih_rsa_decrypt</strong>(80 bytes, Stack size 56 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 796 
<li>Call Chain = tih_rsa_decrypt &rArr; rsa_crt_decrypt &rArr; RSA_CRTModExp  &rArr; pke_mod  &rArr; pke_modmul  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_crt_decrypt
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<br>[Called By]<ul>
<li><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</ul>
<p><strong><a name="[14]"></a>tih_sm2_keypair_gen</strong>(58 bytes, Stack size 20 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 332 
<li>Call Chain = tih_sm2_keypair_gen &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_keypair_gen
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<p><strong><a name="[15]"></a>tih_sm2_e_get</strong>(52 bytes, Stack size 20 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 336 
<li>Call Chain = tih_sm2_e_get &rArr; drv_crypto_lock.part.0 &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_crypto_lock.part.0
<li><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_e_get
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<p><strong><a name="[16]"></a>tih_sm2_z_get</strong>(38 bytes, Stack size 20 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 336 
<li>Call Chain = tih_sm2_z_get &rArr; drv_crypto_lock.part.0 &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_crypto_lock.part.0
<li><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_z_get
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<br>[Called By]<ul>
<li><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm2_z_get
</ul>
<p><strong><a name="[17]"></a>tih_sm2_sign</strong>(96 bytes, Stack size 24 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 492 
<li>Call Chain = tih_sm2_sign &rArr; sm2_sign &rArr; sm2_sign_osr  &rArr; sm2_sign_with_k  &rArr; sm2_pointMul_base  &rArr; pointMul_Shamir  &rArr; pke_pre_calc_mont_H  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<br>[Called By]<ul>
<li><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_sign
</ul>
<p><strong><a name="[18]"></a>tih_sm2_verify</strong>(42 bytes, Stack size 20 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 332 
<li>Call Chain = tih_sm2_verify &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_verify
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<br>[Called By]<ul>
<li><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_verify
</ul>
<p><strong><a name="[19]"></a>tih_sm2_encrypt</strong>(90 bytes, Stack size 36 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 488 
<li>Call Chain = tih_sm2_encrypt &rArr; sm2_encrypt &rArr; sm2_encrypt_osr  &rArr; sm2_encrypt_with_k  &rArr; sm2_pointMul_base  &rArr; pointMul_Shamir  &rArr; pke_pre_calc_mont_H  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_crypto_lock.part.0
<li><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<br>[Called By]<ul>
<li><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm2_encrypt
</ul>
<p><strong><a name="[1a]"></a>tih_sm2_decrypt</strong>(110 bytes, Stack size 32 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 360 
<li>Call Chain = tih_sm2_decrypt &rArr; sm2_decrypt &rArr; sm2_decrypt_osr  &rArr; sm2_kdf  &rArr; sm3_final  &rArr; hash_final  &rArr; hash_update  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_crypto_lock.part.0
<li><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<br>[Called By]<ul>
<li><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm2_decrypt
</ul>
<p><strong><a name="[1b]"></a>tih_sm2_key_exchange</strong>(124 bytes, Stack size 88 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 564 
<li>Call Chain = tih_sm2_key_exchange &rArr; sm2_key_exchange &rArr; sm2_exchangekey_osr  &rArr; sm2_kdf  &rArr; sm3_final  &rArr; hash_final  &rArr; hash_update  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_crypto_lock.part.0
<li><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_key_exchange
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<p><strong><a name="[1c]"></a>tih_sha1_init</strong>(12 bytes, Stack size 4 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 320 
<li>Call Chain = tih_sha1_init &rArr; drv_crypto_lock.part.0 &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_crypto_lock.part.0
<li><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_init
</ul>
<br>[Called By]<ul>
<li><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
</ul>
<p><strong><a name="[1d]"></a>tih_sha1_update</strong>(8 bytes, Stack size 4 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = tih_sha1_update &rArr; sha1_update &rArr; hash_update  </ul>
<br>[Calls]<ul>
<li><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update
</ul>
<br>[Called By]<ul>
<li><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
</ul>
<p><strong><a name="[1e]"></a>tih_sha1_final</strong>(18 bytes, Stack size 8 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 296 
<li>Call Chain = tih_sha1_final &rArr; rt_mutex_release &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_final
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<br>[Called By]<ul>
<li><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
</ul>
<p><strong><a name="[1f]"></a>tih_sha224_init</strong>(12 bytes, Stack size 4 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 320 
<li>Call Chain = tih_sha224_init &rArr; drv_crypto_lock.part.0 &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_crypto_lock.part.0
<li><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_init
</ul>
<br>[Called By]<ul>
<li><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
</ul>
<p><strong><a name="[20]"></a>tih_sha224_update</strong>(8 bytes, Stack size 4 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = tih_sha224_update &rArr; sha224_update &rArr; hash_update  </ul>
<br>[Calls]<ul>
<li><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_update
</ul>
<br>[Called By]<ul>
<li><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</ul>
<p><strong><a name="[21]"></a>tih_sha224_final</strong>(18 bytes, Stack size 8 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 296 
<li>Call Chain = tih_sha224_final &rArr; rt_mutex_release &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_final
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<br>[Called By]<ul>
<li><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
</ul>
<p><strong><a name="[22]"></a>tih_sha256_init</strong>(12 bytes, Stack size 4 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 320 
<li>Call Chain = tih_sha256_init &rArr; drv_crypto_lock.part.0 &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_crypto_lock.part.0
<li><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_init
</ul>
<br>[Called By]<ul>
<li><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
</ul>
<p><strong><a name="[23]"></a>tih_sha256_update</strong>(8 bytes, Stack size 4 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = tih_sha256_update &rArr; sha256_update &rArr; hash_update  </ul>
<br>[Calls]<ul>
<li><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_update
</ul>
<br>[Called By]<ul>
<li><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</ul>
<p><strong><a name="[24]"></a>tih_sha256_final</strong>(18 bytes, Stack size 8 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 296 
<li>Call Chain = tih_sha256_final &rArr; rt_mutex_release &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_final
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<br>[Called By]<ul>
<li><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
</ul>
<p><strong><a name="[25]"></a>tih_sm3_init</strong>(12 bytes, Stack size 4 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 320 
<li>Call Chain = tih_sm3_init &rArr; drv_crypto_lock.part.0 &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_crypto_lock.part.0
<li><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_init
</ul>
<br>[Called By]<ul>
<li><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_starts
<li><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3
<li><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_self_test
</ul>
<p><strong><a name="[26]"></a>tih_sm3_update</strong>(8 bytes, Stack size 4 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = tih_sm3_update &rArr; sm3_update &rArr; hash_update  </ul>
<br>[Calls]<ul>
<li><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_update
</ul>
<br>[Called By]<ul>
<li><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_update
</ul>
<p><strong><a name="[27]"></a>tih_sm3_final</strong>(18 bytes, Stack size 8 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 296 
<li>Call Chain = tih_sm3_final &rArr; rt_mutex_release &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_final
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<br>[Called By]<ul>
<li><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_finish
</ul>
<p><strong><a name="[28]"></a>tih_cmac_init</strong>(28 bytes, Stack size 12 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = tih_cmac_init &rArr; cmac_init </ul>
<br>[Calls]<ul>
<li><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_init
</ul>
<br>[Called By]<ul>
<li><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
</ul>
<p><strong><a name="[29]"></a>tih_cmac_update</strong>(42 bytes, Stack size 20 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 332 
<li>Call Chain = tih_cmac_update &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_update
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<br>[Called By]<ul>
<li><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
</ul>
<p><strong><a name="[2a]"></a>tih_cmac_final</strong>(8 bytes, Stack size 4 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = tih_cmac_final &rArr; cmac_final </ul>
<br>[Calls]<ul>
<li><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_final
</ul>
<br>[Called By]<ul>
<li><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
</ul>
<p><strong><a name="[2b]"></a>tih_rand_get</strong>(38 bytes, Stack size 16 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 328 
<li>Call Chain = tih_rand_get &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand_get
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<br>[Called By]<ul>
<li><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hardware_poll
<li><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hardware_random
</ul>
<p><strong><a name="[2c]"></a>tih_ecp_mul</strong>(60 bytes, Stack size 32 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = tih_ecp_mul &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_mul
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<br>[Called By]<ul>
<li><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
</ul>
<p><strong><a name="[2d]"></a>tih_ecp_muladd</strong>(96 bytes, Stack size 52 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 364 
<li>Call Chain = tih_ecp_muladd &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_shamir
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<br>[Called By]<ul>
<li><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
</ul>
<p><strong><a name="[2e]"></a>tih_ecp_add</strong>(64 bytes, Stack size 36 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = tih_ecp_add &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_add
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<p><strong><a name="[2f]"></a>tih_ecp_double</strong>(54 bytes, Stack size 24 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 336 
<li>Call Chain = tih_ecp_double &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_double
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<p><strong><a name="[30]"></a>tih_ecp_check</strong>(42 bytes, Stack size 16 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 328 
<li>Call Chain = tih_ecp_check &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_verify
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<br>[Called By]<ul>
<li><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</ul>
<p><strong><a name="[31]"></a>tih_mpi_add</strong>(82 bytes, Stack size 24 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 336 
<li>Call Chain = tih_mpi_add &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bn_add
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<p><strong><a name="[32]"></a>tih_mpi_sub</strong>(82 bytes, Stack size 24 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 336 
<li>Call Chain = tih_mpi_sub &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bn_sub
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<p><strong><a name="[33]"></a>tih_mpi_mul</strong>(82 bytes, Stack size 24 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 336 
<li>Call Chain = tih_mpi_mul &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bn_mul
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<p><strong><a name="[34]"></a>tih_mpi_cmp</strong>(82 bytes, Stack size 24 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 336 
<li>Call Chain = tih_mpi_cmp &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bn_cmp
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<p><strong><a name="[35]"></a>tih_mpi_mod_mpi</strong>(60 bytes, Stack size 32 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = tih_mpi_mod_mpi &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bn_mod
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<p><strong><a name="[36]"></a>tih_mpi_add_mod</strong>(100 bytes, Stack size 32 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = tih_mpi_add_mod &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bn_modadd
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<p><strong><a name="[37]"></a>tih_mpi_sub_mod</strong>(100 bytes, Stack size 32 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = tih_mpi_sub_mod &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bn_modsub
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<p><strong><a name="[38]"></a>tih_mpi_mul_mod</strong>(100 bytes, Stack size 32 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = tih_mpi_mul_mod &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bn_modmul
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<p><strong><a name="[39]"></a>tih_mpi_inv_mod</strong>(104 bytes, Stack size 32 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = tih_mpi_inv_mod &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bn_modinv
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<p><strong><a name="[3a]"></a>tih_mpi_exp_mod</strong>(66 bytes, Stack size 40 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 352 
<li>Call Chain = tih_mpi_exp_mod &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bn_modexp
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<p><strong><a name="[3c]"></a>core_timer_init</strong>(44 bytes, Stack size 4 btyes, Obj/drivers_drv_ctimer.o(.text.core_timer_init))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = core_timer_init &rArr; rt_hw_interrupt_install &rArr; intr_disconnect  &rArr; intr_cache_flush.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_hw_init
<li><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_mask
<li><a href="#[c87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_intr_disable
<li><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_install
<li><a href="#[c86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_intr_enable
<li><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_umask
<li><a href="#[c8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_start
</ul>
<br>[Called By]<ul>
<li><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</ul>
<p><strong><a name="[48]"></a>drv_pin_write</strong>(44 bytes, Stack size 4 btyes, Obj/drivers_drv_gpio.o(.text.drv_pin_write))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = drv_pin_write &rArr; gpio_set </ul>
<br>[Calls]<ul>
<li><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</ul>
<p><strong><a name="[49]"></a>drv_pin_read</strong>(48 bytes, Stack size 4 btyes, Obj/drivers_drv_gpio.o(.text.drv_pin_read))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = drv_pin_read &rArr; gpio_get </ul>
<br>[Calls]<ul>
<li><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
</ul>
<p><strong><a name="[4a]"></a>drv_pin_mode</strong>(138 bytes, Stack size 16 btyes, Obj/drivers_drv_gpio.o(.text.drv_pin_mode))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = drv_pin_mode &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_hw_init
<li><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pin_mux_set
</ul>
<p><strong><a name="[4b]"></a>drv_pin_irq_enable</strong>(46 bytes, Stack size 4 btyes, Obj/drivers_drv_gpio.o(.text.drv_pin_irq_enable))<br>
<br>[Calls]<ul>
<li><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_intr_enable
</ul>
<p><strong><a name="[4c]"></a>drv_pin_attach_irq</strong>(202 bytes, Stack size 36 btyes, Obj/drivers_drv_gpio.o(.text.drv_pin_attach_irq))<br>
<br>[Stack]<ul><li>Max Depth = 220 
<li>Call Chain = drv_pin_attach_irq &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_hw_init
<li><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pin_mux_set
<li><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_intr_enable
<li><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_install
<li><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_umask
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[4d]"></a>drv_pin_detach_irq</strong>(46 bytes, Stack size 4 btyes, Obj/drivers_drv_gpio.o(.text.drv_pin_detach_irq))<br>
<br>[Calls]<ul>
<li><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_intr_disable
</ul>
<p><strong><a name="[4f]"></a>get_pin</strong>(36 bytes, Stack size 0 btyes, Obj/drivers_drv_gpio.o(.text.get_pin))<br>
<p><strong><a name="[52]"></a>rt_hw_interrupt_init</strong>(46 bytes, Stack size 16 btyes, Obj/drivers_drv_intr.o(.text.rt_hw_interrupt_init))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = rt_hw_interrupt_init &rArr; rt_memset </ul>
<br>[Calls]<ul>
<li><a href="#[c8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_hw_init
<li><a href="#[c6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_vic_set_prio
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</ul>
<br>[Called By]<ul>
<li><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_init
</ul>
<p><strong><a name="[53]"></a>rt_hw_interrupt_mask</strong>(8 bytes, Stack size 4 btyes, Obj/drivers_drv_intr.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = rt_hw_interrupt_mask &rArr; intr_disable </ul>
<br>[Calls]<ul>
<li><a href="#[c97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_disable
</ul>
<br>[Called By]<ul>
<li><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_init
<li><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_ioctl
<li><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_init
</ul>
<p><strong><a name="[54]"></a>rt_hw_interrupt_umask</strong>(8 bytes, Stack size 4 btyes, Obj/drivers_drv_intr.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = rt_hw_interrupt_umask &rArr; intr_enable </ul>
<br>[Calls]<ul>
<li><a href="#[c96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_enable
</ul>
<br>[Called By]<ul>
<li><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_init
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_ioctl
<li><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_init
<li><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_hwtimer_start
<li><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_control
<li><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_attach_irq
</ul>
<p><strong><a name="[55]"></a>rt_hw_interrupt_clear</strong>(8 bytes, Stack size 4 btyes, Obj/drivers_drv_intr.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[c69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_vic_clear_pending_irq
</ul>
<br>[Called By]<ul>
<li><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_isr
<li><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth1_isr
<li><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_isr
<li><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_isr
<li><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_irq_handler
<li><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_irq_handler
</ul>
<p><strong><a name="[56]"></a>rt_hw_interrupt_install</strong>(62 bytes, Stack size 12 btyes, Obj/drivers_drv_intr.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = rt_hw_interrupt_install &rArr; intr_disconnect &rArr; intr_cache_flush.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[c94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_disconnect
<li><a href="#[c93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_connect
<li><a href="#[c6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_vic_set_prio
</ul>
<br>[Called By]<ul>
<li><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_init
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_init
<li><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_hwtimer_start
<li><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_hwtimer_init
<li><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_control
<li><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_attach_irq
</ul>
<p><strong><a name="[57]"></a>rt_hw_interrupt_dispatch</strong>(28 bytes, Stack size 4 btyes, Obj/drivers_drv_intr.o(.fast))<br>
<p><strong><a name="[66]"></a>hwtimer_isr</strong>(116 bytes, Stack size 8 btyes, Obj/drivers_drv_timer.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = hwtimer_isr &rArr; rt_device_hwtimer_isr &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_intr_status
<li><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_intr_clear
<li><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_clear
<li><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_hwtimer_isr
</ul>
<p><strong><a name="[67]"></a>drv_hwtimer_init</strong>(84 bytes, Stack size 24 btyes, Obj/drivers_drv_timer.o(.text.drv_hwtimer_init))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = drv_hwtimer_init &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_hw_init
<li><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_install
</ul>
<p><strong><a name="[6d]"></a>uart0_irq_handler</strong>(32 bytes, Stack size 4 btyes, Obj/drivers_drv_uart.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 340 
<li>Call Chain = uart0_irq_handler &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_intr_status
<li><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_intr_clear
<li><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_clear
<li><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</ul>
<p><strong><a name="[6f]"></a>uart1_irq_handler</strong>(32 bytes, Stack size 4 btyes, Obj/drivers_drv_uart.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 340 
<li>Call Chain = uart1_irq_handler &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_intr_status
<li><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_intr_clear
<li><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_clear
<li><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</ul>
<p><strong><a name="[77]"></a>os_critical_enter</strong>(4 bytes, Stack size 0 btyes, critical.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[cc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_fputs
</ul>
<p><strong><a name="[78]"></a>fputc</strong>(64 bytes, Stack size 16 btyes, Obj/drivers_retarget.o(.text.fputc))<br>
<br>[Stack]<ul><li>Max Depth = 36 + In Cycle
<li>Call Chain = fputc &rArr; rt_device_write &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<li><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<li><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_putc
</ul>
<br>[Called By]<ul>
<li><a href="#[cc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_perror
<li><a href="#[cc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_fputs
<li><a href="#[ceb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_putc
</ul>
<p><strong><a name="[79]"></a>fgetc</strong>(62 bytes, Stack size 0 btyes, Obj/drivers_retarget.o(.text.fgetc))<br>
<p><strong><a name="[7a]"></a>rt_hw_console_output</strong>(2 bytes, Stack size 0 btyes, Obj/src_kservice.o(.text.rt_hw_console_output))<br>
<br>[Called By]<ul>
<li><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kputs
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[7b]"></a>__stack_chk_fail</strong>(20 bytes, Stack size 0 btyes, Obj/drivers_retarget.o(.text.__stack_chk_fail))<br>
<p><strong><a name="[7c]"></a>__stack_chk_guard</strong>(16 bytes, Stack size 0 btyes, Obj/drivers_retarget.o(.text.__stack_chk_guard))<br>
<p><strong><a name="[7d]"></a>os_critical_exit</strong>(4 bytes, Stack size 0 btyes, critical.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[cc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_fputs
</ul>
<p><strong><a name="[7e]"></a>rtos_init</strong>(18 bytes, Stack size 0 btyes, Obj/drivers_system.o(.text.rtos_init))<br>
<p><strong><a name="[7f]"></a>console_init</strong>(32 bytes, Stack size 0 btyes, Obj/drivers_system.o(.text.console_init))<br>
<p><strong><a name="[80]"></a>norflash_init</strong>(8 bytes, Stack size 4 btyes, Obj/drivers_system.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = norflash_init &rArr; norflash_hw_init &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_hw_init
</ul>
<p><strong><a name="[81]"></a>sys_hw_init</strong>(222 bytes, Stack size 4 btyes, Obj/drivers_system.o(.text.sys_hw_init))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = sys_hw_init &rArr; rt_hw_interrupt_init &rArr; rt_memset  </ul>
<br>[Calls]<ul>
<li><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_reset
<li><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_source_set
<li><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_set
<li><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_enable
<li><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_enable
<li><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_init
<li><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h2x_hw_init
<li><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmem_init
<li><a href="#[c59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_cache_set_range
<li><a href="#[c75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_icache_enable
</ul>
<br>[Called By]<ul>
<li><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</ul>
<p><strong><a name="[82]"></a>rt_hw_board_init</strong>(22 bytes, Stack size 0 btyes, Obj/drivers_system.o(.text.rt_hw_board_init))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = rt_hw_board_init &rArr; rt_system_heap_init &rArr; rt_sem_init  &rArr; rt_object_init  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<li><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<li><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
</ul>
<br>[Called By]<ul>
<li><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</ul>
<p><strong><a name="[83]"></a>system_init</strong>(66 bytes, Stack size 20 btyes, Obj/drivers_system.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = system_init &rArr; sys_hw_init &rArr; rt_hw_interrupt_init  &rArr; rt_memset  </ul>
<br>[Calls]<ul>
<li><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_hw_init
<li><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_init
<li><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init
<li><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_init
<li><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_get
<li><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_sw_cnt_enable
<li><a href="#[c82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_enable
</ul>
<br>[Called By]<ul>
<li><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_handler
</ul>
<p><strong><a name="[84]"></a>rt_hw_us_delay</strong>(38 bytes, Stack size 12 btyes, Obj/drivers_system.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_sw_cnt_get
</ul>
<p><strong><a name="[85]"></a>rt_hw_hardclock_get</strong>(8 bytes, Stack size 4 btyes, Obj/drivers_system.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_sw_cnt_get
</ul>
<br>[Called By]<ul>
<li><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_timing_hardclock
<li><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_timing_get_timer
<li><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_timing_set_delay
<li><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_timing_get_delay
</ul>
<p><strong><a name="[86]"></a>rt_hw_dtcm_addr_check</strong>(38 bytes, Stack size 0 btyes, Obj/drivers_system.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbedtls_aes_crypt_cfb128
<li><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<li><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<li><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbedtls_aes_crypt_ctr
<li><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<li><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbedtls_sm4_crypt_cfb128
<li><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_crypt_ecb
<li><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_crypt_cbc
<li><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_crypt_ofb
<li><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbedtls_sm4_crypt_ctr
</ul>
<p><strong><a name="[87]"></a>marvell_phy_mmd_fre_get</strong>(4 bytes, Stack size 0 btyes, Obj/src_tih_phy_m88e1512.o(.text.marvell_phy_mmd_fre_get))<br>
<p><strong><a name="[88]"></a>marvell_phy_intr_enable</strong>(48 bytes, Stack size 8 btyes, Obj/src_tih_phy_m88e1512.o(.text.marvell_phy_intr_enable))<br>
<br>[Calls]<ul>
<li><a href="#[bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_write16
</ul>
<p><strong><a name="[89]"></a>marvell_phy_init</strong>(304 bytes, Stack size 12 btyes, Obj/src_tih_phy_m88e1512.o(.text.marvell_phy_init))<br>
<br>[Calls]<ul>
<li><a href="#[bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_write16
<li><a href="#[baf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_read16
</ul>
<br>[Called By]<ul>
<li><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvell_phy_speed_duplex_change
</ul>
<p><strong><a name="[8a]"></a>marvell_phy_intr_disable</strong>(72 bytes, Stack size 8 btyes, Obj/src_tih_phy_m88e1512.o(.text.marvell_phy_intr_disable))<br>
<br>[Calls]<ul>
<li><a href="#[bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_write16
<li><a href="#[baf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_read16
</ul>
<p><strong><a name="[8b]"></a>marvell_phy_intr_status</strong>(46 bytes, Stack size 12 btyes, Obj/src_tih_phy_m88e1512.o(.text.marvell_phy_intr_status))<br>
<br>[Calls]<ul>
<li><a href="#[bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_write16
<li><a href="#[baf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_read16
</ul>
<p><strong><a name="[8c]"></a>marvell_phy_intr_clear</strong>(40 bytes, Stack size 8 btyes, Obj/src_tih_phy_m88e1512.o(.text.marvell_phy_intr_clear))<br>
<br>[Calls]<ul>
<li><a href="#[bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_write16
<li><a href="#[baf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_read16
</ul>
<p><strong><a name="[8d]"></a>marvell_phy_link_status_get</strong>(86 bytes, Stack size 12 btyes, Obj/src_tih_phy_m88e1512.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_write16
<li><a href="#[baf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_read16
</ul>
<p><strong><a name="[8e]"></a>marvell_phy_speed_duplex_change</strong>(388 bytes, Stack size 16 btyes, Obj/src_tih_phy_m88e1512.o(.text.marvell_phy_speed_duplex_change))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = marvell_phy_speed_duplex_change &rArr; marvell_phy_init </ul>
<br>[Calls]<ul>
<li><a href="#[bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_write16
<li><a href="#[baf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_read16
<li><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvell_phy_init
</ul>
<p><strong><a name="[8f]"></a>rtl8211_phy_mmd_fre_get</strong>(4 bytes, Stack size 0 btyes, Obj/src_tih_phy_rtl8211.o(.text.rtl8211_phy_mmd_fre_get))<br>
<p><strong><a name="[90]"></a>rtl8211_phy_intr_enable</strong>(26 bytes, Stack size 0 btyes, Obj/src_tih_phy_rtl8211.o(.text.rtl8211_phy_intr_enable))<br>
<p><strong><a name="[91]"></a>rtl8211_phy_intr_disable</strong>(28 bytes, Stack size 0 btyes, Obj/src_tih_phy_rtl8211.o(.text.rtl8211_phy_intr_disable))<br>
<p><strong><a name="[92]"></a>rtl8211_phy_intr_status</strong>(10 bytes, Stack size 0 btyes, Obj/src_tih_phy_rtl8211.o(.text.rtl8211_phy_intr_status))<br>
<p><strong><a name="[93]"></a>rtl8211_phy_intr_clear</strong>(10 bytes, Stack size 0 btyes, Obj/src_tih_phy_rtl8211.o(.text.rtl8211_phy_intr_clear))<br>
<p><strong><a name="[94]"></a>rtl8211_phy_link_status_get</strong>(74 bytes, Stack size 0 btyes, Obj/src_tih_phy_rtl8211.o(.fast))<br>
<p><strong><a name="[95]"></a>rtl8211_phy_speed_duplex_change</strong>(386 bytes, Stack size 0 btyes, Obj/src_tih_phy_rtl8211.o(.text.rtl8211_phy_speed_duplex_change))<br>
<p><strong><a name="[96]"></a>rtl8211_phy_init</strong>(12 bytes, Stack size 0 btyes, Obj/src_tih_phy_rtl8211.o(.text.rtl8211_phy_init))<br>
<p><strong><a name="[97]"></a>rt_system_tick_init</strong>(2 bytes, Stack size 0 btyes, Obj/src_clock.o(.text.rt_system_tick_init))<br>
<p><strong><a name="[98]"></a>rt_tick_get</strong>(6 bytes, Stack size 0 btyes, Obj/src_clock.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<li><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<li><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<li><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<li><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock
<li><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_jiffies
<li><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<li><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<li><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
<li><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
<li><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
<li><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_rtc_init
<li><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_rtc_control
<li><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<li><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time_system_init
<li><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<li><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<li><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_asp_dofile
</ul>
<p><strong><a name="[99]"></a>rt_tick_set</strong>(18 bytes, Stack size 8 btyes, Obj/src_clock.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</ul>
<p><strong><a name="[9a]"></a>rt_tick_increase</strong>(38 bytes, Stack size 4 btyes, Obj/src_clock.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 252 
<li>Call Chain = rt_tick_increase &rArr; rt_thread_yield &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<li><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<li><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</ul>
<br>[Called By]<ul>
<li><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_isr
</ul>
<p><strong><a name="[9b]"></a>rt_tick_from_millisecond</strong>(28 bytes, Stack size 0 btyes, Obj/src_clock.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<li><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
<li><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
</ul>
<p><strong><a name="[9d]"></a>main_thread_entry</strong>(40 bytes, Stack size 16 btyes, Obj/src_components.o(.text.main_thread_entry))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = main_thread_entry &rArr; main &rArr; rt_thread_init  &rArr; _rt_thread_init.isra.0  &rArr; rt_timer_init  &rArr; rt_object_init  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</ul>
<p><strong><a name="[a1]"></a>rt_components_board_init</strong>(36 bytes, Stack size 16 btyes, Obj/src_components.o(.text.rt_components_board_init))<br>
<br>[Called By]<ul>
<li><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</ul>
<p><strong><a name="[a2]"></a>rt_components_init</strong>(36 bytes, Stack size 0 btyes, Obj/src_components.o(.text.rt_components_init))<br>
<p><strong><a name="[a3]"></a>rt_application_init</strong>(62 bytes, Stack size 16 btyes, Obj/src_components.o(.text.rt_application_init))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<li><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</ul>
<p><strong><a name="[a4]"></a>rtthread_startup</strong>(42 bytes, Stack size 4 btyes, Obj/src_components.o(.text.rtthread_startup))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<li><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<li><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<li><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<li><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<li><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<li><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</ul>
<br>[Called By]<ul>
<li><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry
</ul>
<p><strong><a name="[a5]"></a>entry</strong>(14 bytes, Stack size 4 btyes, Obj/src_components.o(.text.entry))<br>
<br>[Stack]<ul><li>Max Depth = 352 
<li>Call Chain = entry &rArr; rtthread_startup &rArr; rt_application_init  &rArr; rt_thread_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</ul>
<br>[Called By]<ul>
<li><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_handler
</ul>
<p><strong><a name="[a6]"></a>rt_device_unregister</strong>(38 bytes, Stack size 0 btyes, Obj/src_device.o(.text.rt_device_unregister))<br>
<p><strong><a name="[a7]"></a>rt_device_init_all</strong>(4 bytes, Stack size 0 btyes, Obj/src_device.o(.text.rt_device_init_all))<br>
<p><strong><a name="[a8]"></a>rt_device_find</strong>(110 bytes, Stack size 20 btyes, Obj/src_device.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 204 
<li>Call Chain = rt_device_find &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<li><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<li><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<li><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<li><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<li><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<li><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<li><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<li><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<li><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<li><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<li><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_stat
<li><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_find
<li><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<li><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<li><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_rtc_init
<li><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
<li><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp3202_init
<li><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<li><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time_system_init
</ul>
<p><strong><a name="[a9]"></a>rt_device_register</strong>(62 bytes, Stack size 20 btyes, Obj/src_device.o(.text.rt_device_register))<br>
<br>[Stack]<ul><li>Max Depth = 224 
<li>Call Chain = rt_device_register &rArr; rt_device_find &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</ul>
<br>[Called By]<ul>
<li><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ata_register
<li><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<li><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_crypto_register
<li><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_hwtimer_register
<li><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_device_init
<li><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_24aa128_init
<li><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
<li><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_rtc_init
<li><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<li><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
<li><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spidev_device_init
<li><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp3202_init
<li><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_watchdog_register
</ul>
<p><strong><a name="[aa]"></a>rt_device_create</strong>(40 bytes, Stack size 0 btyes, Obj/src_device.o(.text.rt_device_create))<br>
<p><strong><a name="[ab]"></a>rt_device_destroy</strong>(16 bytes, Stack size 0 btyes, Obj/src_device.o(.text.rt_device_destroy))<br>
<p><strong><a name="[ac]"></a>rt_device_init</strong>(76 bytes, Stack size 12 btyes, Obj/src_device.o(.text.rt_device_init))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = rt_device_init &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_device_init
<li><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</ul>
<p><strong><a name="[ad]"></a>rt_device_open</strong>(164 bytes, Stack size 16 btyes, Obj/src_device.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = rt_device_open &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<li><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<li><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<li><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<li><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<li><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<li><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_open
<li><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</ul>
<p><strong><a name="[ae]"></a>rt_device_close</strong>(80 bytes, Stack size 8 btyes, Obj/src_device.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = rt_device_close &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<li><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<li><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<li><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<li><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_close
<li><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_close
<li><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</ul>
<p><strong><a name="[af]"></a>rt_device_read</strong>(76 bytes, Stack size 20 btyes, Obj/src_device.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 204 
<li>Call Chain = rt_device_read &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<li><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_read
<li><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_read
<li><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</ul>
<p><strong><a name="[b0]"></a>rt_device_write</strong>(76 bytes, Stack size 20 btyes, Obj/src_device.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = rt_device_write &rArr; rt_set_errno </ul>
<br>[Calls]<ul>
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<li><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kputs
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<li><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_write
<li><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_write
</ul>
<p><strong><a name="[b1]"></a>rt_device_control</strong>(48 bytes, Stack size 16 btyes, Obj/src_device.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = rt_device_control &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
<li><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<li><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<li><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<li><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<li><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<li><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<li><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_ioctl
<li><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<li><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<li><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_ioctl
<li><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time_system_init
</ul>
<p><strong><a name="[b2]"></a>rt_device_set_rx_indicate</strong>(34 bytes, Stack size 12 btyes, Obj/src_device.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = rt_device_set_rx_indicate &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_close
<li><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_open
<li><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</ul>
<p><strong><a name="[b3]"></a>rt_device_set_tx_complete</strong>(34 bytes, Stack size 12 btyes, Obj/src_device.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = rt_device_set_tx_complete &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[b4]"></a>rt_thread_idle_sethook</strong>(6 bytes, Stack size 0 btyes, Obj/src_idle.o(.fast))<br>
<p><strong><a name="[b5]"></a>rt_thread_idle_init</strong>(46 bytes, Stack size 0 btyes, Obj/src_idle.o(.text.rt_thread_idle_init))<br>
<br>[Stack]<ul><li>Max Depth = 304 
<li>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init.isra.0  &rArr; rt_timer_init  &rArr; rt_object_init  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<li><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</ul>
<br>[Called By]<ul>
<li><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</ul>
<p><strong><a name="[b6]"></a>rt_thread_idle_delhook</strong>(8 bytes, Stack size 0 btyes, Obj/src_idle.o(.fast))<br>
<p><strong><a name="[b7]"></a>rt_thread_idle_excute</strong>(164 bytes, Stack size 28 btyes, Obj/src_idle.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 320 
<li>Call Chain = rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<li><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</ul>
<p><strong><a name="[b9]"></a>rt_thread_idle_gethandler</strong>(4 bytes, Stack size 0 btyes, Obj/src_idle.o(.fast))<br>
<p><strong><a name="[ba]"></a>rt_sem_init</strong>(52 bytes, Stack size 20 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 224 
<li>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<li><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_init
<li><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
<li><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<li><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</ul>
<p><strong><a name="[bb]"></a>rt_sem_detach</strong>(72 bytes, Stack size 20 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 224 
<li>Call Chain = rt_sem_detach &rArr; rt_thread_resume &rArr; rt_timer_stop  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
</ul>
<p><strong><a name="[bc]"></a>rt_sem_create</strong>(76 bytes, Stack size 20 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
</ul>
<p><strong><a name="[bd]"></a>rt_sem_delete</strong>(124 bytes, Stack size 20 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 312 
<li>Call Chain = rt_sem_delete &rArr; rt_object_delete &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
</ul>
<p><strong><a name="[be]"></a>rt_sem_take</strong>(326 bytes, Stack size 28 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 272 
<li>Call Chain = rt_sem_take &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<li><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<li><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_trytake
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<li><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<li><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<li><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<li><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<li><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
<li><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</ul>
<p><strong><a name="[bf]"></a>rt_sem_trytake</strong>(10 bytes, Stack size 4 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 276 
<li>Call Chain = rt_sem_trytake &rArr; rt_sem_take &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</ul>
<p><strong><a name="[c0]"></a>rt_sem_release</strong>(114 bytes, Stack size 12 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 256 
<li>Call Chain = rt_sem_release &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</ul>
<br>[Called By]<ul>
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<li><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<li><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<li><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<li><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<li><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<li><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_rx_ind
</ul>
<p><strong><a name="[c1]"></a>rt_sem_control</strong>(100 bytes, Stack size 28 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 272 
<li>Call Chain = rt_sem_control &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[c2]"></a>rt_mutex_init</strong>(64 bytes, Stack size 16 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 220 
<li>Call Chain = rt_mutex_init &rArr; rt_object_init &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<li><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ata_init
<li><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_crypto_init
<li><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_register
<li><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_24aa128_init
<li><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
<li><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp3202_init
<li><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threading_mutex_init_rtt
</ul>
<p><strong><a name="[c3]"></a>rt_mutex_detach</strong>(74 bytes, Stack size 20 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 224 
<li>Call Chain = rt_mutex_detach &rArr; rt_thread_resume &rArr; rt_timer_stop  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threading_mutex_free_rtt
</ul>
<p><strong><a name="[c4]"></a>rt_mutex_create</strong>(88 bytes, Stack size 16 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<li><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
</ul>
<p><strong><a name="[c5]"></a>rt_mutex_delete</strong>(124 bytes, Stack size 20 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 312 
<li>Call Chain = rt_mutex_delete &rArr; rt_object_delete &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
<li><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_free
</ul>
<p><strong><a name="[c6]"></a>rt_mutex_take</strong>(444 bytes, Stack size 40 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 312 
<li>Call Chain = rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<li><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<li><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_crypto_lock.part.0
<li><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_aes_crypt
<li><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_aes_crypt_ctr
<li><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_aes_crypt_xts
<li><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm4_crypt
<li><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm4_crypt_ctr
<li><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm4_crypt_xts
<li><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_rsa_keypair_gen
<li><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_rsa_encrypt
<li><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_rsa_decrypt
<li><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm2_keypair_gen
<li><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm2_sign
<li><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm2_verify
<li><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm2_encrypt
<li><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm2_decrypt
<li><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm2_key_exchange
<li><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_cmac_update
<li><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_rand_get
<li><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_ecp_mul
<li><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_ecp_muladd
<li><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_ecp_add
<li><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_ecp_double
<li><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_ecp_check
<li><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_mpi_add
<li><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_mpi_sub
<li><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_mpi_mul
<li><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_mpi_cmp
<li><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_mpi_mod_mpi
<li><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_mpi_add_mod
<li><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_mpi_sub_mod
<li><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_mpi_mul_mod
<li><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_mpi_inv_mod
<li><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_mpi_exp_mod
<li><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_write
<li><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_read
<li><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<li><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
<li><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ata_ioctl
<li><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ata_write
<li><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ata_read
<li><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<li><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
<li><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_eeprom_read
<li><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_eeprom_write
<li><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<li><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<li><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
<li><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp3202_adc_read
<li><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threading_mutex_lock_rtt
</ul>
<p><strong><a name="[c7]"></a>rt_mutex_release</strong>(238 bytes, Stack size 16 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 288 
<li>Call Chain = rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_aes_crypt
<li><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_aes_crypt_ctr
<li><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_aes_crypt_xts
<li><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm4_crypt
<li><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm4_crypt_ctr
<li><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm4_crypt_xts
<li><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_rsa_keypair_gen
<li><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_rsa_encrypt
<li><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_rsa_decrypt
<li><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm2_keypair_gen
<li><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm2_e_get
<li><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm2_z_get
<li><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm2_sign
<li><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm2_verify
<li><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm2_encrypt
<li><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm2_decrypt
<li><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm2_key_exchange
<li><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sha1_final
<li><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sha224_final
<li><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sha256_final
<li><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm3_final
<li><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_cmac_update
<li><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_rand_get
<li><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_ecp_mul
<li><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_ecp_muladd
<li><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_ecp_add
<li><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_ecp_double
<li><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_ecp_check
<li><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_mpi_add
<li><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_mpi_sub
<li><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_mpi_mul
<li><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_mpi_cmp
<li><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_mpi_mod_mpi
<li><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_mpi_add_mod
<li><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_mpi_sub_mod
<li><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_mpi_mul_mod
<li><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_mpi_inv_mod
<li><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_mpi_exp_mod
<li><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_write
<li><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_read
<li><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<li><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<li><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<li><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ata_ioctl
<li><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ata_write
<li><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ata_read
<li><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<li><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<li><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
<li><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_eeprom_read
<li><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_eeprom_write
<li><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<li><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<li><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
<li><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp3202_adc_read
<li><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threading_mutex_unlock_rtt
</ul>
<p><strong><a name="[c8]"></a>rt_mutex_control</strong>(6 bytes, Stack size 0 btyes, Obj/src_ipc.o(.fast))<br>
<p><strong><a name="[c9]"></a>rt_event_init</strong>(52 bytes, Stack size 16 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 220 
<li>Call Chain = rt_event_init &rArr; rt_object_init &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[ca]"></a>rt_event_detach</strong>(74 bytes, Stack size 20 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 224 
<li>Call Chain = rt_event_detach &rArr; rt_thread_resume &rArr; rt_timer_stop  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[cb]"></a>rt_event_create</strong>(76 bytes, Stack size 16 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = rt_event_create &rArr; rt_object_allocate &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[cc]"></a>rt_event_delete</strong>(114 bytes, Stack size 20 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 312 
<li>Call Chain = rt_event_delete &rArr; rt_object_delete &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</ul>
<p><strong><a name="[cd]"></a>rt_event_send</strong>(236 bytes, Stack size 24 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 268 
<li>Call Chain = rt_event_send &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[ce]"></a>rt_event_recv</strong>(436 bytes, Stack size 36 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 280 
<li>Call Chain = rt_event_recv &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<li><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<li><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</ul>
<p><strong><a name="[cf]"></a>rt_event_control</strong>(100 bytes, Stack size 24 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 268 
<li>Call Chain = rt_event_control &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[d0]"></a>rt_mb_init</strong>(76 bytes, Stack size 24 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 228 
<li>Call Chain = rt_mb_init &rArr; rt_object_init &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init_private
</ul>
<p><strong><a name="[d1]"></a>rt_mb_detach</strong>(162 bytes, Stack size 20 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 224 
<li>Call Chain = rt_mb_detach &rArr; rt_thread_resume &rArr; rt_timer_stop  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[d2]"></a>rt_mb_create</strong>(124 bytes, Stack size 20 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</ul>
<br>[Called By]<ul>
<li><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</ul>
<p><strong><a name="[d3]"></a>rt_mb_delete</strong>(172 bytes, Stack size 20 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 312 
<li>Call Chain = rt_mb_delete &rArr; rt_object_delete &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</ul>
<p><strong><a name="[d4]"></a>rt_mb_send_wait</strong>(522 bytes, Stack size 60 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 304 
<li>Call Chain = rt_mb_send_wait &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<li><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<li><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<li><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
<li><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</ul>
<p><strong><a name="[d5]"></a>rt_mb_send</strong>(10 bytes, Stack size 4 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 308 
<li>Call Chain = rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</ul>
<br>[Called By]<ul>
<li><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<li><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_ready
<li><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_linkchange
</ul>
<p><strong><a name="[d6]"></a>rt_mb_recv</strong>(526 bytes, Stack size 60 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 304 
<li>Call Chain = rt_mb_recv &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<li><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<li><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<li><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<li><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
</ul>
<p><strong><a name="[d7]"></a>rt_mb_control</strong>(180 bytes, Stack size 24 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 268 
<li>Call Chain = rt_mb_control &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[d8]"></a>rt_mq_init</strong>(130 bytes, Stack size 28 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = rt_mq_init &rArr; rt_object_init &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[d9]"></a>rt_mq_detach</strong>(74 bytes, Stack size 20 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 224 
<li>Call Chain = rt_mq_detach &rArr; rt_thread_resume &rArr; rt_timer_stop  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[da]"></a>rt_mq_delete</strong>(130 bytes, Stack size 20 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 312 
<li>Call Chain = rt_mq_delete &rArr; rt_object_delete &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
</ul>
<p><strong><a name="[db]"></a>rt_mq_create</strong>(176 bytes, Stack size 24 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 352 
<li>Call Chain = rt_mq_create &rArr; rt_object_allocate &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
</ul>
<p><strong><a name="[dc]"></a>rt_mq_send</strong>(248 bytes, Stack size 20 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 264 
<li>Call Chain = rt_mq_send &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[dd]"></a>rt_mq_urgent</strong>(190 bytes, Stack size 20 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 264 
<li>Call Chain = rt_mq_urgent &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[de]"></a>rt_mq_recv</strong>(610 bytes, Stack size 64 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 308 
<li>Call Chain = rt_mq_recv &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<li><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<li><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<li><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[df]"></a>rt_mq_control</strong>(148 bytes, Stack size 24 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 268 
<li>Call Chain = rt_mq_control &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[e0]"></a>rt_interrupt_enter_sethook</strong>(6 bytes, Stack size 0 btyes, Obj/src_irq.o(.fast))<br>
<p><strong><a name="[e1]"></a>rt_interrupt_leave_sethook</strong>(6 bytes, Stack size 0 btyes, Obj/src_irq.o(.fast))<br>
<p><strong><a name="[e2]"></a>rt_interrupt_enter</strong>(36 bytes, Stack size 8 btyes, Obj/src_irq.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</ul>
<p><strong><a name="[e3]"></a>rt_interrupt_leave</strong>(36 bytes, Stack size 8 btyes, Obj/src_irq.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</ul>
<p><strong><a name="[e4]"></a>rt_interrupt_get_nest</strong>(6 bytes, Stack size 0 btyes, Obj/src_irq.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<li><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<li><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<li><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<li><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<li><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<li><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<li><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<li><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<li><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<li><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<li><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<li><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<li><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_errno
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<li><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<li><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<li><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<li><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<li><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<li><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<li><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<li><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
<li><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<li><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<li><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<li><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<li><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<li><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_free
<li><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<li><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<li><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<li><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
</ul>
<p><strong><a name="[e6]"></a>rt_get_errno</strong>(28 bytes, Stack size 4 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</ul>
<p><strong><a name="[e7]"></a>rt_vsnprintf</strong>(1382 bytes, Stack size 0 btyes, Obj/src_kservice.o(.text.rt_vsnprintf))<br>
<br>[Stack]<ul><li>Max Depth = 144 
<li>Call Chain = rt_vsnprintf &rArr; __muldf3 &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<li><a href="#[cb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fixdfsi
<li><a href="#[cb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__floatsidf
<li><a href="#[cb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subdf3
<li><a href="#[cb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__eqdf2
<li><a href="#[cb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__muldf3
</ul>
<br>[Called By]<ul>
<li><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
<li><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_add
</ul>
<p><strong><a name="[e8]"></a>rt_snprintf</strong>(24 bytes, Stack size 12 btyes, Obj/src_kservice.o(.text.rt_snprintf))<br>
<br>[Stack]<ul><li>Max Depth = 156 
<li>Call Chain = rt_snprintf &rArr; rt_vsnprintf &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<li><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<li><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
<li><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<li><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<li><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<li><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<li><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<li><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<li><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<li><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<li><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<li><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<li><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threading_mutex_init_rtt
<li><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<li><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<li><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_get_physical_path
<li><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_set_header_status_line
<li><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_set_header
<li><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_handle_uri
<li><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_asp
<li><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_dirindex
<li><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_alias
<li><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_ssi
</ul>
<p><strong><a name="[e9]"></a>snprintf</strong>(24 bytes, Stack size 0 btyes, cklib_printf.o(.text.snprintf))<br>
<br>[Called By]<ul>
<li><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<li><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
<li><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
<li><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi.part.0
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<li><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<li><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp.part.1
<li><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
<li><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
<li><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_serial_gets
<li><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
<li><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_key_size_helper
<li><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
<li><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_info
<li><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_snprintf
</ul>
<p><strong><a name="[ea]"></a>rt_vsprintf</strong>(16 bytes, Stack size 4 btyes, Obj/src_kservice.o(.text.rt_vsprintf))<br>
<br>[Stack]<ul><li>Max Depth = 148 
<li>Call Chain = rt_vsprintf &rArr; rt_vsnprintf &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</ul>
<p><strong><a name="[eb]"></a>vsprintf</strong>(16 bytes, Stack size 0 btyes, cklib_printf.o(.text.vsprintf))<br>
<br>[Called By]<ul>
<li><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_nonvolatile
</ul>
<p><strong><a name="[ec]"></a>rt_sprintf</strong>(30 bytes, Stack size 16 btyes, Obj/src_kservice.o(.text.rt_sprintf))<br>
<br>[Stack]<ul><li>Max Depth = 160 
<li>Call Chain = rt_sprintf &rArr; rt_vsnprintf &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_thread
<li><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_dirindex
<li><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_upload_open.part.3
</ul>
<p><strong><a name="[ed]"></a>sprintf</strong>(26 bytes, Stack size 0 btyes, cklib_printf.o(.text.sprintf))<br>
<br>[Called By]<ul>
<li><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_st_data.part.0
<li><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_nonvolatile
<li><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_open
</ul>
<p><strong><a name="[ee]"></a>rt_console_get_device</strong>(6 bytes, Stack size 0 btyes, Obj/src_kservice.o(.text.rt_console_get_device))<br>
<br>[Called By]<ul>
<li><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<li><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</ul>
<p><strong><a name="[ef]"></a>rt_console_set_device</strong>(40 bytes, Stack size 16 btyes, Obj/src_kservice.o(.text.rt_console_set_device))<br>
<br>[Stack]<ul><li>Max Depth = 220 
<li>Call Chain = rt_console_set_device &rArr; rt_device_find &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<li><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
</ul>
<br>[Called By]<ul>
<li><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</ul>
<p><strong><a name="[7a]"></a>rt_hw_console_output</strong>(2 bytes, Stack size 0 btyes, Obj/src_kservice.o(.text.rt_hw_console_output))<br>
<br>[Called By]<ul>
<li><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kputs
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[f0]"></a>rt_kputs</strong>(80 bytes, Stack size 12 btyes, Obj/src_kservice.o(.text.rt_kputs))<br>
<br>[Stack]<ul><li>Max Depth = 32 + In Cycle
<li>Call Chain = rt_kputs &rArr; rt_device_write &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<li><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</ul>
<p><strong><a name="[f1]"></a>puts</strong>(80 bytes, Stack size 0 btyes, Obj/src_kservice.o(.text.rt_kputs))<br>
<br>[Called By]<ul>
<li><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_port_reset
<li><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_complete_wait
<li><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cache_flush
<li><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_data_set_trim
<li><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_error_handler
<li><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_identify_read
<li><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hba_reset
<li><a href="#[ace]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hw_init
<li><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_inout_data_lba
<li><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
<li><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<li><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_self_test
<li><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<li><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_self_test
<li><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_test_subkeys.constprop.2
<li><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_test_wth_cipher.constprop.1
<li><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cmac_self_test
<li><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_self_test
<li><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_self_test
<li><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<li><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_source_self_test
<li><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
<li><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
<li><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_self_test
<li><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_self_test
<li><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_self_test
<li><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<li><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
<li><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<li><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_self_test
<li><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_self_test
<li><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_timing_self_test
<li><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_self_test
<li><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_crypto_test
<li><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_hw_init
</ul>
<p><strong><a name="[f2]"></a>rt_kprintf</strong>(80 bytes, Stack size 28 btyes, Obj/src_kservice.o(.text.rt_kprintf))<br>
<br>[Stack]<ul><li>Max Depth = 172 
<li>Call Chain = rt_kprintf &rArr; rt_vsnprintf &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<li><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<li><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</ul>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_link_update
<li><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth1_isr
<li><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_init
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
<li><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_trim
<li><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_sync
<li><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_ioctl
<li><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_write
<li><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_read
<li><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_isr
<li><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_init
<li><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<li><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<li><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<li><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<li><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<li><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<li><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<li><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<li><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<li><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<li><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<li><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<li><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<li><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<li><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<li><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<li><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mem
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<li><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<li><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<li><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<li><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<li><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<li><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<li><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
<li><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<li><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<li><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<li><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<li><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<li><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<li><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_elm_ata
<li><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<li><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<li><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<li><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<li><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
<li><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<li><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<li><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<li><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<li><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<li><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_free
<li><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<li><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<li><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<li><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<li><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
<li><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<li><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<li><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<li><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<li><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<li><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<li><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<li><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<li><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<li><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<li><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<li><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<li><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<li><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<li><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
<li><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<li><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<li><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<li><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<li><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<li><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<li><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<li><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<li><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<li><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<li><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<li><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<li><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<li><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<li><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<li><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<li><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<li><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<li><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<li><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<li><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<li><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<li><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<li><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<li><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<li><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<li><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<li><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<li><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<li><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<li><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<li><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<li><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<li><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool.isra.0
<li><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool.isra.1
<li><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_pool
<li><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free_pool
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<li><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<li><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<li><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<li><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dechain
<li><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<li><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<li><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<li><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<li><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<li><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<li><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<li><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<li><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<li><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<li><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<li><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<li><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<li><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<li><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<li><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<li><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<li><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<li><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcbs_sane
<li><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<li><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<li><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<li><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<li><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc.isra.0
<li><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment.isra.1
<li><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header.constprop.2
<li><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<li><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<li><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<li><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<li><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<li><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<li><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<li><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<li><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
<li><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
<li><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
<li><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<li><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<li><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<li><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<li><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry.isra.0
<li><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_addr
<li><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_get_entry
<li><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<li><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<li><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<li><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<li><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<li><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output
<li><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<li><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<li><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<li><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<li><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<li><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<li><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
<li><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
<li><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_client
<li><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_usage
<li><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf
<li><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<li><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_show_memory
<li><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_memory
<li><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<li><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
<li><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_init
<li><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_24aa128_init
<li><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_eeprom_write
<li><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_date
<li><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<li><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp3202_init
<li><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_watchdog_close
<li><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<li><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<li><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<li><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<li><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hello
<li><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<li><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<li><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<li><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<li><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<li><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<li><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<li><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<li><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<li><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<li><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
<li><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<li><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<li><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<li><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<li><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_pwd
<li><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkfs
<li><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ifconfig
<li><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cp
<li><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rm
<li><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<li><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cat
<li><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cd
<li><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkdir
<li><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_df
<li><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<li><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dns
<li><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<li><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<li><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<li><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<li><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<li><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short.isra.0
<li><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option.isra.1
<li><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte.isra.2
<li><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<li><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<li><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long.isra.4
<li><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<li><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
<li><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<li><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<li><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<li><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<li><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response.isra.0
<li><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<li><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group.isra.3
<li><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
<li><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<li><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<li><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<li><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_help
<li><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_create
<li><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_init
<li><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_config
<li><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_connect
<li><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_create
<li><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_listen
<li><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_create
<li><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_close
<li><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_config
<li><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_read
<li><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_write
<li><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedlts_client_start
<li><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedlts_client_entry
<li><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync
<li><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<li><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ping
<li><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_server
<li><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_open
<li><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
<li><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read_line
<li><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_add
<li><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<li><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_session_create
<li><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
<li><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<li><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
<li><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post
<li><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_test
<li><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post_test
<li><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_thread
<li><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_init
<li><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_webnet
<li><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_test
<li><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_write
<li><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_close
<li><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_name
<li><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_open
</ul>
<p><strong><a name="[f3]"></a>printf</strong>(70 bytes, Stack size 0 btyes, cklib_printf.o(.text.printf))<br>
<br>[Called By]<ul>
<li><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symm_param_cfg
<li><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_fifo_enable
<li><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bridge_enable
<li><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_dma_start
<li><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_link_change_handler
<li><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_complete_wait
<li><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_error_handler
<li><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_passthru
<li><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_slot_is_empty
<li><a href="#[aff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_ncq_queue_mgmt
<li><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_print.constprop.1
<li><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
<li><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<li><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_self_test
<li><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<li><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_self_test
<li><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_test_subkeys.constprop.2
<li><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_test_wth_cipher.constprop.1
<li><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cmac_self_test
<li><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_self_test
<li><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_self_test
<li><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<li><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_source_self_test
<li><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
<li><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
<li><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_self_test
<li><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_self_test
<li><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_self_test
<li><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<li><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
<li><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<li><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_self_test
<li><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_self_test
<li><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_timing_self_test
<li><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_self_test
<li><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_crypto_test
<li><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<li><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
<li><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_rx_fifo
</ul>
<p><strong><a name="[f4]"></a>rt_show_version</strong>(42 bytes, Stack size 8 btyes, Obj/src_kservice.o(.text.rt_show_version))<br>
<br>[Stack]<ul><li>Max Depth = 180 
<li>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<li><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version
</ul>
<p><strong><a name="[f5]"></a>xmem_init</strong>(8 bytes, Stack size 0 btyes, Obj/src_kservice.o(.text.xmem_init))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = xmem_init &rArr; mem_hw_init &rArr; intr_disconnect  &rArr; intr_cache_flush.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[b1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_hw_init
</ul>
<br>[Called By]<ul>
<li><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_init
</ul>
<p><strong><a name="[f6]"></a>rt_set_errno</strong>(30 bytes, Stack size 8 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</ul>
<br>[Called By]<ul>
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_write
<li><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_read
<li><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<li><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<li><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<li><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<li><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<li><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<li><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<li><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<li><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<li><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<li><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<li><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
<li><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<li><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekdir
<li><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<li><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<li><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcntl
<li><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rmdir
<li><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<li><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<li><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<li><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<li><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<li><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<li><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<li><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<li><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<li><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_write
<li><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<li><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<li><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<li><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
</ul>
<p><strong><a name="[f7]"></a>_rt_errno</strong>(26 bytes, Stack size 4 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</ul>
<br>[Called By]<ul>
<li><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<li><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<li><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<li><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<li><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<li><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<li><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<li><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<li><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<li><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<li><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<li><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<li><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<li><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<li><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<li><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv
<li><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_send
<li><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
<li><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_write
</ul>
<p><strong><a name="[f8]"></a>rt_memset</strong>(176 bytes, Stack size 8 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_i2c_init
<li><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_init
<li><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemset
<li><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<li><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init.isra.0
<li><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<li><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<li><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<li><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<li><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
<li><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_testcase_run
<li><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
<li><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<li><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_request_parse_header
<li><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_request_create
<li><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_dirindex
</ul>
<p><strong><a name="[f9]"></a>rt_memcpy</strong>(176 bytes, Stack size 12 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<li><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<li><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<li><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<li><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy
<li><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<li><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<li><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_read
<li><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<li><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
</ul>
<p><strong><a name="[fa]"></a>rt_memmove</strong>(62 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<li><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_module_upload_handle.part.2
</ul>
<p><strong><a name="[fb]"></a>memmove</strong>(62 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbedtls_aes_crypt_cfb128
<li><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<li><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbedtls_aes_crypt_ctr
<li><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbedtls_sm4_crypt_cfb128
<li><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_crypt_cbc
<li><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbedtls_sm4_crypt_ctr
<li><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<li><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<li><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
<li><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<li><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_session_handle
</ul>
<p><strong><a name="[fc]"></a>rt_memcmp</strong>(54 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_run
<li><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
</ul>
<p><strong><a name="[fd]"></a>memcmp</strong>(54 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<li><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<li><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<li><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_self_test
<li><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_self_test
<li><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_test_subkeys.constprop.2
<li><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_test_wth_cipher.constprop.1
<li><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cmac_self_test
<li><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_self_test
<li><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_self_test
<li><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_source_self_test
<li><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
<li><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_self_test
<li><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_self_test
<li><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_sig_alg_from_asn1
<li><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_attr_short_name
<li><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_x509_ext_type
<li><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_extended_key_usage
<li><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_pk_alg
<li><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_ec_grp
<li><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_cipher_alg
<li><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_md_alg
<li><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_pkcs12_pbe_alg
<li><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<li><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<li><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_self_test
<li><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<li><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
<li><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<li><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<li><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<li><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
<li><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<li><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_self_test
<li><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_self_test
<li><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_cache_get
<li><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_cache_set
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_hello
<li><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
<li><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
<li><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<li><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
<li><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<li><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<li><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_extended_key_usage
<li><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_is_revoked
<li><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<li><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<li><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<li><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<li><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_snprintf
<li><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<li><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memstr
<li><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_next_possible_boundary.isra.0
<li><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt_osr
</ul>
<p><strong><a name="[fe]"></a>rt_strstr</strong>(112 bytes, Stack size 16 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
<li><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_get
<li><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
</ul>
<p><strong><a name="[ff]"></a>strstr</strong>(112 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<li><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<li><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<li><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_test
<li><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_request_parse_method
<li><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_request_parse_header
<li><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_system_dofile
<li><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_asp_dofile
<li><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_asp
<li><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_cgi
<li><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_upload_open.part.3
<li><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_ssi_dofile
<li><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_ssi
</ul>
<p><strong><a name="[100]"></a>rt_strcasecmp</strong>(60 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<p><strong><a name="[101]"></a>strcasecmp</strong>(60 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<p><strong><a name="[102]"></a>rt_strncpy</strong>(54 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<li><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<li><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<li><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<li><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<li><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_getdents
<li><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_getdents
<li><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_getdents
<li><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<li><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_testcase_run
<li><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
</ul>
<p><strong><a name="[103]"></a>strncpy</strong>(8 bytes, Stack size 4 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</ul>
<br>[Called By]<ul>
<li><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<li><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<li><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_open
<li><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_rename
<li><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<li><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname
</ul>
<p><strong><a name="[104]"></a>rt_strncmp</strong>(70 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<li><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<li><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_lookup
</ul>
<p><strong><a name="[105]"></a>strncmp</strong>(70 bytes, Stack size 0 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
<li><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_get_ipv4
<li><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<li><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
<li><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<li><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<li><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<li><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<li><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_snprintf
<li><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
<li><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_request_get_query
<li><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_asp_dofile
</ul>
<p><strong><a name="[106]"></a>rt_strcmp</strong>(34 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_lookup
<li><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_testcase_run
<li><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_open
<li><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<li><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
</ul>
<p><strong><a name="[107]"></a>rt_strnlen</strong>(38 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<p><strong><a name="[108]"></a>rt_strlen</strong>(24 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<li><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<li><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_getdents
<li><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_lookup
<li><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<li><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
<li><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<li><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<li><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<li><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
<li><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_get
<li><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<li><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<li><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post
<li><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_auth
<li><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_upload_open.part.3
<li><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_calc_handler
<li><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_hello_handler
<li><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_done
</ul>
<p><strong><a name="[109]"></a>strlen</strong>(24 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[c4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<li><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_link_update
<li><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<li><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<li><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<li><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<li><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<li><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
<li><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_strstr
<li><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
<li><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_st_data.part.0
<li><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_nonvolatile
<li><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<li><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<li><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<li><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<li><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<li><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<li><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<li><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<li><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<li><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_run
<li><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<li><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<li><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_hello
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
<li><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<li><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<li><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<li><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<li><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_wildcard.isra.6
<li><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<li><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error
<li><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_test
<li><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post_test
<li><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_request_parse_query
<li><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_request_get_query
<li><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_request_parse_method
<li><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_path_with
<li><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_begin_with
<li><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_end_with
<li><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_base64_encode
<li><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_cgi
<li><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_dirindex
<li><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_alias
<li><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_begin_with_strs
<li><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memstr
<li><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memstrs
<li><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_module_upload_handle.part.2
<li><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_upload_open.part.3
<li><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_open
</ul>
<p><strong><a name="[10a]"></a>rt_strdup</strong>(52 bytes, Stack size 16 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = rt_strdup &rArr; rt_malloc &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<li><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<li><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<li><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf
<li><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
<li><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<li><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<li><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_test
<li><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post_test
<li><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_request_parse_method
<li><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_request_parse_header
<li><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_asp_add_var
<li><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_auth_set
<li><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_alias_set
<li><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_module_upload_handle.part.2
</ul>
<p><strong><a name="[10b]"></a>strdup</strong>(52 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_create
<li><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_create
</ul>
<p><strong><a name="[10c]"></a>rt_malloc_align</strong>(56 bytes, Stack size 8 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 316 
<li>Call Chain = rt_malloc_align &rArr; rt_malloc &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</ul>
<p><strong><a name="[10d]"></a>rt_free_align</strong>(12 bytes, Stack size 4 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 288 
<li>Call Chain = rt_free_align &rArr; rt_free &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<p><strong><a name="[10e]"></a>__rt_ffs</strong>(82 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</ul>
<p><strong><a name="[10f]"></a>rt_assert_set_hook</strong>(6 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<p><strong><a name="[110]"></a>rt_assert_handler</strong>(54 bytes, Stack size 12 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 184 
<li>Call Chain = rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
<li><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_xfer
<li><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_hwtimer_control
<li><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_hwtimer_count_get
<li><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_hwtimer_stop
<li><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_hwtimer_start
<li><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_hwtimer_init
<li><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_getc
<li><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_putc
<li><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_control
<li><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_configure
<li><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<li><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<li><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<li><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<li><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<li><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<li><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_tx_complete
<li><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<li><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<li><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<li><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<li><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<li><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<li><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<li><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<li><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<li><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<li><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<li><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<li><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<li><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<li><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<li><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<li><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<li><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<li><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<li><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<li><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<li><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<li><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<li><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<li><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
<li><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_detach
<li><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<li><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<li><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<li><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<li><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<li><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<li><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<li><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_init
<li><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_detach
<li><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<li><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<li><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<li><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<li><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<li><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<li><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<li><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<li><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<li><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<li><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<li><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<li><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<li><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<li><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<li><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init.isra.0
<li><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<li><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<li><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<li><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<li><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<li><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<li><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<li><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<li><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<li><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<li><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
<li><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
<li><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_read
<li><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_write
<li><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_flush
<li><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
<li><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<li><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<li><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<li><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ata_ioctl
<li><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ata_write
<li><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ata_read
<li><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ata_init
<li><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ata_register
<li><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<li><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<li><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<li><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<li><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<li><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<li><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<li><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
<li><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<li><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<li><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<li><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<li><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<li><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_free
<li><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<li><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<li><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<li><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<li><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<li><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_linkoutput
<li><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_linkchange
<li><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init_private
<li><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cputime_getres
<li><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_mode
<li><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_attach_irq
<li><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<li><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<li><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_ioctl
<li><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_read
<li><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_write
<li><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<li><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_getdents
<li><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_close
<li><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_statfs
<li><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_read
<li><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_write
<li><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_getdents
<li><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_open
<li><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_unlink
<li><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_rename
<li><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_read
<li><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_getdents
<li><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_cpu_setops
<li><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_crypto_ioctl
<li><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_crypto_init
<li><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_crypto_register
<li><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_hwtimer_isr
<li><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_hwtimer_register
<li><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_recv
<li><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_control
<li><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_write
<li><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_read
<li><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_device_init
<li><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_eeprom_read
<li><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_eeprom_write
<li><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_control
<li><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<li><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<li><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_read
<li><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_write
<li><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_read
<li><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_rtc_init
<li><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_rtc_control
<li><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_calc_recved_len
<li><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_init
<li><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_poll
<li><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<li><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_open
<li><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<li><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<li><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<li><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<li><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<li><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<li><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<li><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<li><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
<li><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_write
<li><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_read
<li><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_write
<li><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_read
<li><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
<li><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spidev_device_init
<li><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp3202_adc_control
<li><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_watchdog_control
<li><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_watchdog_init
<li><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_watchdog_close
<li><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_watchdog_register
<li><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_rx_ind
<li><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<li><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<li><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<li><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
<li><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read_line
<li><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_add
<li><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_get
<li><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_content_length_get
<li><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<li><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
<li><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_write
<li><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<li><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
<li><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post
<li><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_close
<li><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_request_parse_method
<li><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_request_parse_header
<li><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_system_dofile
<li><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_handle_event
<li><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_handle_uri
<li><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_asp_add_var
<li><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_asp
<li><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_auth_set
<li><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_auth
<li><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_cgi_register
<li><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_cgi
<li><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_alias_set
<li><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_alias
<li><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_upload_add
<li><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_ssi
<li><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asp_var_version
<li><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_calc_handler
<li><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_hello_handler
</ul>
<p><strong><a name="[111]"></a>xmemset</strong>(48 bytes, Stack size 20 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 60 
<li>Call Chain = xmemset &rArr; memset_hw &rArr; mem_hw_internal  &rArr; dma_intr_status  </ul>
<br>[Calls]<ul>
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[b1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_hw
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</ul>
<p><strong><a name="[112]"></a>memset</strong>(48 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_tx
<li><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<li><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<li><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<li><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<li><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<li><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<li><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<li><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<li><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<li><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<li><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_new
<li><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<li><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<li><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<li><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<li><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<li><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
<li><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_port_init
<li><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;identify_revise
<li><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_identify_read
<li><a href="#[ace]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hw_init
<li><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_non_data_lba
<li><a href="#[baa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_tx_queue_init
<li><a href="#[bab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_rx_queue_init
<li><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
<li><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_create
<li><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<li><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<li><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<li><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<li><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<li><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<li><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<li><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<li><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<li><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul.isra.2
<li><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<li><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<li><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_init
<li><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_free
<li><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_auth_decrypt
<li><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_self_test
<li><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<li><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<li><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<li><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_finish
<li><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<li><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<li><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_self_test
<li><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_init
<li><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_init
<li><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_self_test
<li><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_init
<li><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<li><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
<li><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<li><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<li><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<li><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_dummy_source
<li><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<li><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<li><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_init
<li><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<li><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_auth_decrypt
<li><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
<li><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
<li><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_init
<li><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<li><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
<li><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed
<li><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_free
<li><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_self_test
<li><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<li><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<li><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<li><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5
<li><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_get_iv
<li><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<li><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<li><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
<li><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
<li><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<li><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<li><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<li><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<li><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<li><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<li><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
<li><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<li><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<li><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<li><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<li><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_init
<li><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3
<li><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_self_test
<li><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_init
<li><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_cache_init
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_hello
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
<li><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_psk_derive_premaster
<li><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
<li><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_init
<li><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_init
<li><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<li><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
<li><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_init
<li><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
<li><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<li><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<li><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<li><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_connect
<li><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedlts_client_entry
<li><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<li><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_create
</ul>
<p><strong><a name="[113]"></a>xmemcpy</strong>(48 bytes, Stack size 20 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 56 
<li>Call Chain = xmemcpy &rArr; memcpy_hw &rArr; mem_hw_internal  &rArr; dma_intr_status  </ul>
<br>[Calls]<ul>
<li><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[b1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</ul>
<p><strong><a name="[114]"></a>memcpy</strong>(48 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<li><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<li><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<li><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<li><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<li><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<li><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<li><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<li><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<li><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<li><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<li><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<li><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<li><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<li><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<li><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<li><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<li><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<li><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<li><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<li><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<li><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<li><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_update
<li><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_final
<li><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rand
<li><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;identify_revise
<li><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_read
<li><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_write
<li><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_read
<li><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<li><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<li><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<li><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<li><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<li><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<li><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<li><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<li><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response.isra.0
<li><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<li><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbedtls_aes_crypt_cfb128
<li><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<li><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<li><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<li><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<li><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbedtls_aes_crypt_ctr
<li><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_raw_buffer
<li><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<li><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<li><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul.isra.2
<li><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<li><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
<li><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_iv
<li><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<li><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_update
<li><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_finish
<li><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_cmac_prf_128
<li><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_self_test_entropy
<li><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<li><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<li><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<li><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<li><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
<li><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
<li><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_write_signature
<li><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<li><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
<li><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_drbg_self_test_entropy
<li><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
<li><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<li><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_clone
<li><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update.part.0
<li><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<li><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_wrap
<li><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt_wrap
<li><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<li><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbkdf2_hmac
<li><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<li><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<li><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<li><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<li><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<li><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<li><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<li><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<li><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<li><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<li><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
<li><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<li><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
<li><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<li><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_clone
<li><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_update
<li><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbedtls_sm4_crypt_cfb128
<li><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_setkey_dec
<li><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_crypt_ecb
<li><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_crypt_cbc
<li><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_crypt_ofb
<li><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbedtls_sm4_crypt_ctr
<li><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_self_test
<li><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_cache_get
<li><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_cache_set
<li><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_hello
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
<li><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<li><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<li><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<li><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_psk_derive_premaster
<li><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<li><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_resend
<li><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
<li><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
<li><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<li><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<li><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<li><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<li><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<li><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<li><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_create
<li><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto_ntp_server
<li><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error
<li><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
<li><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_test
<li><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_request_parse_post
<li><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memstrs
<li><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_section
<li><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_final
<li><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_kdf
<li><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_exchangekey_osr
</ul>
<p><strong><a name="[115]"></a>list_mem</strong>(34 bytes, Stack size 4 btyes, Obj/src_mem.o(.text.list_mem))<br>
<br>[Stack]<ul><li>Max Depth = 176 
<li>Call Chain = list_mem &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_free
</ul>
<p><strong><a name="[117]"></a>rt_system_heap_init</strong>(154 bytes, Stack size 20 btyes, Obj/src_mem.o(.text.rt_system_heap_init))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = rt_system_heap_init &rArr; rt_sem_init &rArr; rt_object_init  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</ul>
<br>[Called By]<ul>
<li><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</ul>
<p><strong><a name="[118]"></a>rt_malloc_sethook</strong>(6 bytes, Stack size 0 btyes, Obj/src_mem.o(.fast))<br>
<p><strong><a name="[119]"></a>rt_free_sethook</strong>(6 bytes, Stack size 0 btyes, Obj/src_mem.o(.fast))<br>
<p><strong><a name="[11a]"></a>rt_malloc</strong>(452 bytes, Stack size 36 btyes, Obj/src_mem.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 308 
<li>Call Chain = rt_malloc &rArr; rt_sem_take &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<li><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<li><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<li><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc_align
<li><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<li><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<li><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<li><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<li><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<li><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<li><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<li><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<li><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_poll_add
<li><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<li><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<li><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<li><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<li><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<li><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<li><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<li><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<li><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<li><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<li><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<li><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<li><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<li><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<li><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<li><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<li><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
<li><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_session_create
<li><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_test
<li><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post_test
<li><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_request_parse_query
<li><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_request_parse_header
<li><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_request_create
<li><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_create
<li><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_base64_encode
<li><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_handle_uri
<li><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_asp_dofile
<li><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_asp_add_var
<li><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_asp
<li><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_auth_set
<li><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_cgi_register
<li><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_dirindex
<li><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_alias_set
<li><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_alias
<li><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memstrs
<li><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_section
<li><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_module_upload_handle.part.2
<li><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_upload_open.part.3
<li><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_upload_add
<li><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_ssi_dofile
<li><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_ssi
<li><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_test
<li><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_open
</ul>
<p><strong><a name="[11b]"></a>rt_calloc</strong>(74 bytes, Stack size 16 btyes, Obj/src_mem.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = rt_calloc &rArr; rt_malloc &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<li><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<li><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_session_create
</ul>
<p><strong><a name="[11c]"></a>rt_free</strong>(356 bytes, Stack size 12 btyes, Obj/src_mem.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 284 
<li>Call Chain = rt_free &rArr; rt_sem_take &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<li><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</ul>
<br>[Called By]<ul>
<li><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<li><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<li><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<li><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_align
<li><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<li><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<li><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<li><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<li><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<li><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<li><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<li><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<li><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<li><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<li><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<li><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<li><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<li><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<li><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<li><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
<li><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<li><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<li><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<li><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<li><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<li><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
<li><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<li><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<li><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<li><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<li><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<li><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf
<li><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<li><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_close
<li><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<li><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<li><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<li><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<li><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<li><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
<li><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<li><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_session_create
<li><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<li><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_close
<li><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_test
<li><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post_test
<li><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_request_destory
<li><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_create
<li><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_close
<li><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_handle_uri
<li><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_asp_dofile
<li><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_asp
<li><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_auth_set
<li><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_dirindex
<li><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_alias
<li><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_module_upload_close
<li><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memstrs
<li><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_module_upload_handle.part.2
<li><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_ssi_dofile
<li><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_ssi
<li><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_open
</ul>
<p><strong><a name="[11d]"></a>rt_realloc</strong>(260 bytes, Stack size 20 btyes, Obj/src_mem.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 328 
<li>Call Chain = rt_realloc &rArr; rt_malloc &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<li><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<br>[Called By]<ul>
<li><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<li><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_asp_add_var
<li><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_auth_set
<li><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_cgi_register
<li><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_alias_set
<li><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_module_upload_handle.part.2
<li><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_upload_add
</ul>
<p><strong><a name="[11e]"></a>rt_memory_info</strong>(32 bytes, Stack size 0 btyes, Obj/src_mem.o(.fast))<br>
<p><strong><a name="[11f]"></a>rt_memheap_init</strong>(138 bytes, Stack size 20 btyes, Obj/src_memheap.o(.text.rt_memheap_init))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = rt_memheap_init &rArr; rt_sem_init &rArr; rt_object_init  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<li><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_create
</ul>
<p><strong><a name="[120]"></a>rt_memheap_detach</strong>(38 bytes, Stack size 8 btyes, Obj/src_memheap.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = rt_memheap_detach &rArr; rt_object_detach &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[121]"></a>rt_memheap_alloc</strong>(244 bytes, Stack size 20 btyes, Obj/src_memheap.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 292 
<li>Call Chain = rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<li><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_open
</ul>
<p><strong><a name="[122]"></a>rt_memheap_free</strong>(216 bytes, Stack size 20 btyes, Obj/src_memheap.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 292 
<li>Call Chain = rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<li><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_open
<li><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_unlink
</ul>
<p><strong><a name="[123]"></a>rt_memheap_realloc</strong>(470 bytes, Stack size 32 btyes, Obj/src_memheap.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = rt_memheap_realloc &rArr; rt_memheap_alloc &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<li><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<li><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<li><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_write
</ul>
<p><strong><a name="[124]"></a>rt_object_attach_sethook</strong>(6 bytes, Stack size 0 btyes, Obj/src_object.o(.fast))<br>
<p><strong><a name="[125]"></a>rt_object_detach_sethook</strong>(6 bytes, Stack size 0 btyes, Obj/src_object.o(.fast))<br>
<p><strong><a name="[126]"></a>rt_object_trytake_sethook</strong>(6 bytes, Stack size 0 btyes, Obj/src_object.o(.fast))<br>
<p><strong><a name="[127]"></a>rt_object_take_sethook</strong>(6 bytes, Stack size 0 btyes, Obj/src_object.o(.fast))<br>
<p><strong><a name="[128]"></a>rt_object_put_sethook</strong>(6 bytes, Stack size 0 btyes, Obj/src_object.o(.fast))<br>
<p><strong><a name="[129]"></a>rt_system_object_init</strong>(2 bytes, Stack size 0 btyes, Obj/src_object.o(.fast))<br>
<p><strong><a name="[12a]"></a>rt_object_get_information</strong>(34 bytes, Stack size 0 btyes, Obj/src_object.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<li><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<li><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<li><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<li><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<li><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<li><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<li><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<li><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<li><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<li><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<li><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
</ul>
<p><strong><a name="[12b]"></a>rt_object_init</strong>(104 bytes, Stack size 20 btyes, Obj/src_object.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 204 
<li>Call Chain = rt_object_init &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</ul>
<br>[Called By]<ul>
<li><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<li><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<li><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<li><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<li><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<li><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
<li><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_init
<li><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<li><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</ul>
<p><strong><a name="[12c]"></a>rt_object_detach</strong>(62 bytes, Stack size 8 btyes, Obj/src_object.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = rt_object_detach &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<li><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<li><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<li><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<li><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_detach
<li><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_detach
<li><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<li><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<li><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<li><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_create
</ul>
<p><strong><a name="[12d]"></a>rt_object_allocate</strong>(154 bytes, Stack size 20 btyes, Obj/src_object.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 328 
<li>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<li><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<li><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<li><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<li><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<li><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<li><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
</ul>
<p><strong><a name="[12e]"></a>rt_object_delete</strong>(90 bytes, Stack size 8 btyes, Obj/src_object.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 292 
<li>Call Chain = rt_object_delete &rArr; rt_free &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<li><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<li><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<li><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<li><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<li><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<li><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<li><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<li><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
</ul>
<p><strong><a name="[12f]"></a>rt_object_is_systemobject</strong>(30 bytes, Stack size 8 btyes, Obj/src_object.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = rt_object_is_systemobject &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<li><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</ul>
<p><strong><a name="[130]"></a>rt_object_find</strong>(158 bytes, Stack size 20 btyes, Obj/src_object.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 204 
<li>Call Chain = rt_object_find &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<li><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[131]"></a>rt_scheduler_sethook</strong>(6 bytes, Stack size 0 btyes, Obj/src_scheduler.o(.fast))<br>
<p><strong><a name="[132]"></a>rt_system_scheduler_init</strong>(46 bytes, Stack size 0 btyes, Obj/src_scheduler.o(.text.rt_system_scheduler_init))<br>
<br>[Called By]<ul>
<li><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</ul>
<p><strong><a name="[133]"></a>rt_system_scheduler_start</strong>(34 bytes, Stack size 4 btyes, Obj/src_scheduler.o(.text.rt_system_scheduler_start))<br>
<br>[Calls]<ul>
<li><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
</ul>
<br>[Called By]<ul>
<li><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</ul>
<p><strong><a name="[134]"></a>rt_schedule</strong>(212 bytes, Stack size 16 btyes, Obj/src_scheduler.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = rt_schedule &rArr; list_thread &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<li><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<li><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<li><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<li><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<li><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<li><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<li><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<li><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<li><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<li><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<li><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<li><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<li><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<li><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<li><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<li><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<li><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<li><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
<li><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<li><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<li><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<li><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<li><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<li><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<li><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
</ul>
<p><strong><a name="[135]"></a>rt_schedule_insert_thread</strong>(98 bytes, Stack size 8 btyes, Obj/src_scheduler.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = rt_schedule_insert_thread &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</ul>
<p><strong><a name="[136]"></a>rt_schedule_remove_thread</strong>(86 bytes, Stack size 8 btyes, Obj/src_scheduler.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = rt_schedule_remove_thread &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<li><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<li><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<li><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</ul>
<p><strong><a name="[137]"></a>rt_enter_critical</strong>(20 bytes, Stack size 4 btyes, Obj/src_scheduler.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</ul>
<br>[Called By]<ul>
<li><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<li><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<li><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<li><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<li><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<li><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<li><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<li><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<li><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
<li><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
<li><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<li><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_get_ipv4
<li><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<li><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<li><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<li><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
<li><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_webnet
</ul>
<p><strong><a name="[138]"></a>rt_exit_critical</strong>(40 bytes, Stack size 4 btyes, Obj/src_scheduler.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</ul>
<br>[Called By]<ul>
<li><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<li><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<li><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<li><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<li><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<li><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<li><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<li><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<li><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
<li><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
<li><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<li><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_get_ipv4
<li><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<li><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<li><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<li><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
<li><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_webnet
</ul>
<p><strong><a name="[139]"></a>rt_critical_level</strong>(6 bytes, Stack size 0 btyes, Obj/src_scheduler.o(.fast))<br>
<p><strong><a name="[13a]"></a>rt_thread_exit</strong>(84 bytes, Stack size 12 btyes, Obj/src_thread.o(.text.rt_thread_exit))<br>
<br>[Stack]<ul><li>Max Depth = 256 
<li>Call Chain = rt_thread_exit &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<li><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<li><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</ul>
<p><strong><a name="[13b]"></a>rt_thread_timeout</strong>(82 bytes, Stack size 8 btyes, Obj/src_thread.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 252 
<li>Call Chain = rt_thread_timeout &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</ul>
<p><strong><a name="[13d]"></a>rt_thread_init</strong>(96 bytes, Stack size 48 btyes, Obj/src_thread.o(.text.rt_thread_init))<br>
<br>[Stack]<ul><li>Max Depth = 304 
<li>Call Chain = rt_thread_init &rArr; _rt_thread_init.isra.0 &rArr; rt_timer_init  &rArr; rt_object_init  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<li><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init.isra.0
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<li><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init_private
<li><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</ul>
<p><strong><a name="[13e]"></a>rt_thread_create</strong>(82 bytes, Stack size 0 btyes, Obj/src_thread.o(.text.rt_thread_create))<br>
<br>[Stack]<ul><li>Max Depth = 328 
<li>Call Chain = rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init.isra.0
<li><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</ul>
<br>[Called By]<ul>
<li><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<li><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf
<li><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<li><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_ntp_sync_init
<li><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<li><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_testcase_run
<li><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedlts_client_start
<li><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_init
</ul>
<p><strong><a name="[13f]"></a>rt_thread_suspend_sethook</strong>(6 bytes, Stack size 0 btyes, Obj/src_thread.o(.fast))<br>
<p><strong><a name="[140]"></a>rt_thread_resume_sethook</strong>(6 bytes, Stack size 0 btyes, Obj/src_thread.o(.fast))<br>
<p><strong><a name="[141]"></a>rt_thread_inited_sethook</strong>(6 bytes, Stack size 0 btyes, Obj/src_thread.o(.fast))<br>
<p><strong><a name="[142]"></a>rt_thread_self</strong>(6 bytes, Stack size 0 btyes, Obj/src_thread.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<li><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<li><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<li><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<li><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_errno
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<li><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<li><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
<li><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<li><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<li><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<li><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</ul>
<p><strong><a name="[143]"></a>rt_thread_detach</strong>(96 bytes, Stack size 8 btyes, Obj/src_thread.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = rt_thread_detach &rArr; rt_timer_detach &rArr; rt_object_detach  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<li><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[144]"></a>rt_thread_delete</strong>(82 bytes, Stack size 8 btyes, Obj/src_thread.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = rt_thread_delete &rArr; rt_timer_detach &rArr; rt_object_detach  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<li><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</ul>
<p><strong><a name="[145]"></a>rt_thread_yield</strong>(108 bytes, Stack size 4 btyes, Obj/src_thread.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 248 
<li>Call Chain = rt_thread_yield &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</ul>
<br>[Called By]<ul>
<li><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</ul>
<p><strong><a name="[146]"></a>rt_thread_suspend</strong>(104 bytes, Stack size 12 btyes, Obj/src_thread.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 204 
<li>Call Chain = rt_thread_suspend &rArr; rt_schedule_remove_thread &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<li><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<li><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<li><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<li><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<li><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<li><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
<li><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<li><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<li><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<li><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
</ul>
<p><strong><a name="[147]"></a>rt_thread_sleep</strong>(90 bytes, Stack size 20 btyes, Obj/src_thread.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 264 
<li>Call Chain = rt_thread_sleep &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<li><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<li><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<li><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</ul>
<p><strong><a name="[148]"></a>rt_thread_delay</strong>(8 bytes, Stack size 4 btyes, Obj/src_thread.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 268 
<li>Call Chain = rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</ul>
<br>[Called By]<ul>
<li><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
<li><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_thread_enrty
<li><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</ul>
<p><strong><a name="[149]"></a>rt_thread_mdelay</strong>(12 bytes, Stack size 4 btyes, Obj/src_thread.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 268 
<li>Call Chain = rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<li><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</ul>
<br>[Called By]<ul>
<li><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
<li><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_eeprom_write
<li><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp3202_adc_read
<li><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_run
<li><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
</ul>
<p><strong><a name="[14a]"></a>rt_thread_resume</strong>(104 bytes, Stack size 12 btyes, Obj/src_thread.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 204 
<li>Call Chain = rt_thread_resume &rArr; rt_timer_stop &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<li><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<li><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<li><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<li><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<li><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<li><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<li><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<li><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<li><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<li><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<li><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<li><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<li><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<li><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_detach
<li><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<li><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<li><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<li><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<li><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<li><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<li><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<li><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<li><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<li><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
</ul>
<p><strong><a name="[14b]"></a>rt_thread_startup</strong>(90 bytes, Stack size 8 btyes, Obj/src_thread.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 252 
<li>Call Chain = rt_thread_startup &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<li><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<li><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init_private
<li><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf
<li><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<li><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<li><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_ntp_sync_init
<li><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<li><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_testcase_run
<li><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedlts_client_start
<li><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_init
</ul>
<p><strong><a name="[14c]"></a>rt_thread_control</strong>(122 bytes, Stack size 20 btyes, Obj/src_thread.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 272 
<li>Call Chain = rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<li><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</ul>
<br>[Called By]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<p><strong><a name="[14d]"></a>rt_thread_find</strong>(170 bytes, Stack size 24 btyes, Obj/src_thread.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = rt_thread_find &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<li><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<li><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</ul>
<p><strong><a name="[14e]"></a>rt_timer_timeout_sethook</strong>(6 bytes, Stack size 0 btyes, Obj/src_timer.o(.fast))<br>
<p><strong><a name="[14f]"></a>rt_system_timer_thread_init</strong>(2 bytes, Stack size 0 btyes, Obj/src_timer.o(.text.rt_system_timer_thread_init))<br>
<br>[Called By]<ul>
<li><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</ul>
<p><strong><a name="[150]"></a>rt_timer_init</strong>(70 bytes, Stack size 28 btyes, Obj/src_timer.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init.isra.0
</ul>
<p><strong><a name="[151]"></a>rt_timer_detach</strong>(56 bytes, Stack size 8 btyes, Obj/src_timer.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<li><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<li><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
</ul>
<p><strong><a name="[152]"></a>rt_timer_create</strong>(48 bytes, Stack size 20 btyes, Obj/src_timer.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = rt_timer_create &rArr; rt_object_allocate &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</ul>
<br>[Called By]<ul>
<li><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_set_alarm
</ul>
<p><strong><a name="[153]"></a>rt_timer_delete</strong>(58 bytes, Stack size 8 btyes, Obj/src_timer.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 300 
<li>Call Chain = rt_timer_delete &rArr; rt_object_delete &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_set_alarm
</ul>
<p><strong><a name="[154]"></a>rt_timer_start</strong>(180 bytes, Stack size 16 btyes, Obj/src_timer.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = rt_timer_start &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<li><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<li><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<li><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<li><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<li><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<li><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
<li><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<li><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<li><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<li><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
<li><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_set_alarm
</ul>
<p><strong><a name="[155]"></a>rt_timer_stop</strong>(86 bytes, Stack size 8 btyes, Obj/src_timer.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = rt_timer_stop &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</ul>
<p><strong><a name="[156]"></a>rt_timer_control</strong>(84 bytes, Stack size 16 btyes, Obj/src_timer.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = rt_timer_control &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<li><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<li><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<li><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<li><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<li><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
<li><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<li><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<li><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<li><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
</ul>
<p><strong><a name="[157]"></a>rt_timer_check</strong>(168 bytes, Stack size 28 btyes, Obj/src_timer.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 228 
<li>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</ul>
<br>[Called By]<ul>
<li><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</ul>
<p><strong><a name="[158]"></a>rt_timer_next_timeout_tick</strong>(18 bytes, Stack size 0 btyes, Obj/src_timer.o(.fast))<br>
<p><strong><a name="[159]"></a>rt_system_timer_init</strong>(8 bytes, Stack size 0 btyes, Obj/src_timer.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</ul>
<p><strong><a name="[15a]"></a>rt_hw_exception_install</strong>(6 bytes, Stack size 0 btyes, Obj/ck803_cpuport.o(.text.rt_hw_exception_install))<br>
<p><strong><a name="[15b]"></a>rt_hw_hard_fault_exception</strong>(194 bytes, Stack size 8 btyes, Obj/ck803_cpuport.o(.text.rt_hw_hard_fault_exception))<br>
<br>[Stack]<ul><li>Max Depth = 180 
<li>Call Chain = rt_hw_hard_fault_exception &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<li><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_reset
</ul>
<p><strong><a name="[15c]"></a>rt_hw_cpu_shutdown</strong>(20 bytes, Stack size 0 btyes, Obj/ck803_cpuport.o(.text.rt_hw_cpu_shutdown))<br>
<p><strong><a name="[15d]"></a>rt_hw_interrupt_leave_hook</strong>(2 bytes, Stack size 0 btyes, Obj/ck803_cpuport.o(.text.rt_hw_interrupt_leave_hook))<br>
<p><strong><a name="[15e]"></a>rt_hw_interrupt_enter_hook</strong>(2 bytes, Stack size 0 btyes, Obj/ck803_cpuport.o(.text.rt_hw_interrupt_enter_hook))<br>
<p><strong><a name="[15f]"></a>rt_hw_stack_init</strong>(152 bytes, Stack size 0 btyes, Obj/ck803_stack_ck803.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init.isra.0
</ul>
<p><strong><a name="[160]"></a>rt_hw_interrupt_disable</strong>(0 bytes, Stack size 0 btyes, Obj/ck803_contex_ck803_gcc.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_cmd_pending_check
<li><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_isr
<li><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_set
<li><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<li><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<li><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<li><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<li><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<li><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<li><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<li><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<li><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<li><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<li><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<li><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<li><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<li><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<li><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<li><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<li><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<li><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<li><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<li><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<li><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_detach
<li><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<li><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<li><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<li><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<li><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<li><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<li><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<li><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<li><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemset
<li><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<li><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<li><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<li><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<li><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<li><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<li><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<li><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<li><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<li><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<li><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<li><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<li><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<li><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<li><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<li><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<li><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<li><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<li><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<li><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
<li><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_poll
<li><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<li><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<li><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<li><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<li><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<li><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<li><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<li><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_add
<li><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
<li><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<li><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
<li><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<li><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<li><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<li><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<li><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<li><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_free
<li><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<li><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<li><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<li><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<li><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<li><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_linkchange
<li><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<li><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry
<li><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_poll
<li><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<li><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<li><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<li><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<li><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</ul>
<p><strong><a name="[161]"></a>rt_hw_interrupt_enable</strong>(0 bytes, Stack size 0 btyes, Obj/ck803_contex_ck803_gcc.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_cmd_pending_check
<li><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_isr
<li><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_set
<li><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<li><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<li><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<li><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<li><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<li><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<li><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<li><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<li><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<li><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<li><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<li><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<li><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<li><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<li><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<li><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<li><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<li><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<li><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<li><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<li><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_detach
<li><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<li><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<li><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<li><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<li><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<li><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<li><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<li><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<li><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemset
<li><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<li><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<li><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<li><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<li><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<li><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<li><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<li><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<li><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<li><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<li><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<li><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<li><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<li><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<li><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<li><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<li><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<li><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<li><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<li><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
<li><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_poll
<li><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<li><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<li><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<li><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<li><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<li><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<li><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<li><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_add
<li><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
<li><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<li><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
<li><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<li><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<li><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<li><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<li><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<li><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_free
<li><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<li><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<li><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<li><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<li><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<li><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_linkchange
<li><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_poll
<li><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<li><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<li><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<li><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<li><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</ul>
<p><strong><a name="[162]"></a>rt_hw_ffs</strong>(0 bytes, Stack size 0 btyes, Obj/ck803_contex_ck803_gcc.o(.text))<br>
<p><strong><a name="[163]"></a>rt_hw_context_switch_to</strong>(0 bytes, Stack size 0 btyes, Obj/ck803_contex_ck803_gcc.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</ul>
<p><strong><a name="[164]"></a>rt_hw_context_switch_interrupt</strong>(0 bytes, Stack size 0 btyes, Obj/ck803_contex_ck803_gcc.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</ul>
<p><strong><a name="[165]"></a>rt_hw_context_switch</strong>(0 bytes, Stack size 0 btyes, Obj/ck803_contex_ck803_gcc.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</ul>
<p><strong><a name="[166]"></a>PendSV_Handler</strong>(0 bytes, Stack size 0 btyes, Obj/ck803_contex_ck803_gcc.o(.text))<br>
<p><strong><a name="[167]"></a>exception_handler</strong>(0 bytes, Stack size 0 btyes, Obj/ck803_contex_ck803_gcc.o(.text))<br>
<p><strong><a name="[168]"></a>interrupt_handler</strong>(0 bytes, Stack size 0 btyes, Obj/ck803_contex_ck803_gcc.o(.text))<br>
<p><strong><a name="[169]"></a>reset_handler</strong>(142 bytes, Stack size 0 btyes, Obj/ck803_startup_gcc.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 352 
<li>Call Chain = reset_handler &rArr; entry &rArr; rtthread_startup  &rArr; rt_application_init  &rArr; rt_thread_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<li><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry
</ul>
<p><strong><a name="[16a]"></a>default_handler</strong>(2 bytes, Stack size 0 btyes, Obj/ck803_startup_gcc.o(.text))<br>
<p><strong><a name="[16b]"></a>timer_irq_handler</strong>(2 bytes, Stack size 0 btyes, Obj/ck803_startup_gcc.o(.text))<br>
<p><strong><a name="[16c]"></a>rt_hw_show_memory</strong>(76 bytes, Stack size 32 btyes, Obj/common_showmem.o(.text.rt_hw_show_memory))<br>
<br>[Stack]<ul><li>Max Depth = 204 
<li>Call Chain = rt_hw_show_memory &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_memory
</ul>
<p><strong><a name="[16d]"></a>rt_show_memory</strong>(54 bytes, Stack size 12 btyes, Obj/common_showmem.o(.text.rt_show_memory))<br>
<br>[Stack]<ul><li>Max Depth = 216 
<li>Call Chain = rt_show_memory &rArr; rt_hw_show_memory &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[cd2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<li><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_show_memory
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[16e]"></a>list_fd</strong>(206 bytes, Stack size 44 btyes, Obj/src_dfs.o(.text.list_fd))<br>
<br>[Stack]<ul><li>Max Depth = 216 
<li>Call Chain = list_fd &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
</ul>
<p><strong><a name="[16f]"></a>dfs_init</strong>(108 bytes, Stack size 16 btyes, Obj/src_dfs.o(.text.dfs_init))<br>
<br>[Stack]<ul><li>Max Depth = 500 
<li>Call Chain = dfs_init &rArr; dfs_mount &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<li><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devfs_init
<li><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[170]"></a>dfs_lock</strong>(40 bytes, Stack size 12 btyes, Obj/src_dfs.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<li><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<li><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<li><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<li><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<li><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<li><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
</ul>
<p><strong><a name="[171]"></a>fd_new</strong>(260 bytes, Stack size 0 btyes, Obj/src_dfs.o(.text.fd_new))<br>
<br>[Stack]<ul><li>Max Depth = 328 
<li>Call Chain = fd_new &rArr; rt_realloc &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</ul>
<br>[Called By]<ul>
<li><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<li><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<li><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<li><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<li><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</ul>
<p><strong><a name="[172]"></a>dfs_subdir</strong>(42 bytes, Stack size 0 btyes, Obj/src_dfs.o(.text.dfs_subdir))<br>
<br>[Calls]<ul>
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</ul>
<br>[Called By]<ul>
<li><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<li><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<li><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<li><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
</ul>
<p><strong><a name="[173]"></a>dfs_normalize_path</strong>(392 bytes, Stack size 24 btyes, Obj/src_dfs.o(.text.dfs_normalize_path))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<br>[Called By]<ul>
<li><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<li><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<li><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<li><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<li><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<li><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<li><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<li><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<li><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<li><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
</ul>
<p><strong><a name="[174]"></a>dfs_unlock</strong>(10 bytes, Stack size 4 btyes, Obj/src_dfs.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 292 
<li>Call Chain = dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<br>[Called By]<ul>
<li><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<li><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<li><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<li><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<li><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
</ul>
<p><strong><a name="[175]"></a>fd_get</strong>(68 bytes, Stack size 12 btyes, Obj/src_dfs.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 336 
<li>Call Chain = fd_get &rArr; dfs_lock &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<br>[Called By]<ul>
<li><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<li><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<li><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<li><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<li><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<li><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<li><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
<li><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<li><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekdir
<li><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcntl
<li><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<li><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<li><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<li><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
<li><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<li><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<li><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<li><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
</ul>
<p><strong><a name="[176]"></a>fd_put</strong>(108 bytes, Stack size 16 btyes, Obj/src_dfs.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 340 
<li>Call Chain = fd_put &rArr; dfs_lock &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<li><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<li><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<li><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<li><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<li><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<li><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
<li><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<li><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekdir
<li><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcntl
<li><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<li><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<li><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<li><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
<li><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<li><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<li><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<li><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
</ul>
<p><strong><a name="[177]"></a>fd_is_open</strong>(162 bytes, Stack size 32 btyes, Obj/src_dfs.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 392 
<li>Call Chain = fd_is_open &rArr; dfs_filesystem_lookup &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<li><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<li><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<br>[Called By]<ul>
<li><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<li><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</ul>
<p><strong><a name="[178]"></a>dfs_fdtable_get</strong>(4 bytes, Stack size 0 btyes, Obj/src_dfs.o(.fast))<br>
<p><strong><a name="[179]"></a>dfs_file_open</strong>(232 bytes, Stack size 20 btyes, Obj/src_dfs_file.o(.text.dfs_file_open))<br>
<br>[Stack]<ul><li>Max Depth = 412 
<li>Call Chain = dfs_file_open &rArr; fd_is_open &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<li><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<li><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<li><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<li><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<br>[Called By]<ul>
<li><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<li><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<li><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<li><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<li><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<li><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<li><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<li><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
</ul>
<p><strong><a name="[17a]"></a>dfs_file_close</strong>(48 bytes, Stack size 12 btyes, Obj/src_dfs_file.o(.text.dfs_file_close))<br>
<br>[Stack]<ul><li>Max Depth = 296 
<li>Call Chain = dfs_file_close &rArr; rt_free &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<br>[Called By]<ul>
<li><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<li><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<li><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<li><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<li><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<li><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<li><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<li><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<li><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
</ul>
<p><strong><a name="[17b]"></a>cat</strong>(96 bytes, Stack size 100 btyes, Obj/src_dfs_file.o(.text.cat))<br>
<br>[Stack]<ul><li>Max Depth = 512 
<li>Call Chain = cat &rArr; dfs_file_open &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cat
</ul>
<p><strong><a name="[17d]"></a>dfs_file_ioctl</strong>(62 bytes, Stack size 4 btyes, Obj/src_dfs_file.o(.text.dfs_file_ioctl))<br>
<br>[Called By]<ul>
<li><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcntl
</ul>
<p><strong><a name="[17e]"></a>dfs_file_read</strong>(44 bytes, Stack size 8 btyes, Obj/src_dfs_file.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</ul>
<p><strong><a name="[17f]"></a>dfs_file_unlink</strong>(140 bytes, Stack size 0 btyes, Obj/src_dfs_file.o(.text.dfs_file_unlink))<br>
<br>[Stack]<ul><li>Max Depth = 392 
<li>Call Chain = dfs_file_unlink &rArr; fd_is_open &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<li><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<li><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
</ul>
<br>[Called By]<ul>
<li><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
<li><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rmdir
</ul>
<p><strong><a name="[180]"></a>rm</strong>(24 bytes, Stack size 8 btyes, Obj/src_dfs_file.o(.text.rm))<br>
<br>[Stack]<ul><li>Max Depth = 400 
<li>Call Chain = rm &rArr; dfs_file_unlink &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[181]"></a>dfs_file_stat</strong>(164 bytes, Stack size 0 btyes, Obj/src_dfs_file.o(.text.dfs_file_stat))<br>
<br>[Stack]<ul><li>Max Depth = 360 
<li>Call Chain = dfs_file_stat &rArr; dfs_filesystem_lookup &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<li><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<li><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<br>[Called By]<ul>
<li><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<li><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<li><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<li><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
</ul>
<p><strong><a name="[182]"></a>ls</strong>(240 bytes, Stack size 108 btyes, Obj/src_dfs_file.o(.text.ls))<br>
<br>[Stack]<ul><li>Max Depth = 520 
<li>Call Chain = ls &rArr; dfs_file_open &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<li><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<li><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
</ul>
<br>[Called By]<ul>
<li><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ls
</ul>
<p><strong><a name="[184]"></a>copy</strong>(308 bytes, Stack size 76 btyes, Obj/src_dfs_file.o(.text.copy))<br>
<br>[Stack]<ul><li>Max Depth = 536 
<li>Call Chain = copy &rArr; copyfile &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<li><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<li><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<li><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<li><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cp
</ul>
<p><strong><a name="[185]"></a>dfs_file_rename</strong>(142 bytes, Stack size 24 btyes, Obj/src_dfs_file.o(.text.dfs_file_rename))<br>
<br>[Stack]<ul><li>Max Depth = 384 
<li>Call Chain = dfs_file_rename &rArr; dfs_filesystem_lookup &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<li><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<li><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<br>[Called By]<ul>
<li><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
</ul>
<p><strong><a name="[186]"></a>dfs_file_getdents</strong>(40 bytes, Stack size 4 btyes, Obj/src_dfs_file.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
</ul>
<p><strong><a name="[187]"></a>dfs_file_write</strong>(30 bytes, Stack size 4 btyes, Obj/src_dfs_file.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
</ul>
<p><strong><a name="[188]"></a>dfs_file_flush</strong>(30 bytes, Stack size 4 btyes, Obj/src_dfs_file.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
</ul>
<p><strong><a name="[189]"></a>dfs_file_lseek</strong>(38 bytes, Stack size 8 btyes, Obj/src_dfs_file.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<li><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekdir
<li><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
</ul>
<p><strong><a name="[18a]"></a>dfs_register</strong>(94 bytes, Stack size 20 btyes, Obj/src_dfs_fs.o(.text.dfs_register))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = dfs_register &rArr; dfs_lock &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<li><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<li><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_init
<li><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devfs_init
<li><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_init
<li><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_init
</ul>
<p><strong><a name="[18b]"></a>dfs_filesystem_lookup</strong>(136 bytes, Stack size 36 btyes, Obj/src_dfs_fs.o(.text.dfs_filesystem_lookup))<br>
<br>[Stack]<ul><li>Max Depth = 360 
<li>Call Chain = dfs_filesystem_lookup &rArr; dfs_lock &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<li><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<li><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<li><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<li><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<li><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<li><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
</ul>
<p><strong><a name="[18c]"></a>dfs_filesystem_get_mounted_path</strong>(52 bytes, Stack size 0 btyes, Obj/src_dfs_fs.o(.text.dfs_filesystem_get_mounted_path))<br>
<p><strong><a name="[18d]"></a>dfs_filesystem_get_partition</strong>(190 bytes, Stack size 0 btyes, Obj/src_dfs_fs.o(.text.dfs_filesystem_get_partition))<br>
<p><strong><a name="[18e]"></a>dfs_mount</strong>(370 bytes, Stack size 72 btyes, Obj/src_dfs_fs.o(.text.dfs_mount))<br>
<br>[Stack]<ul><li>Max Depth = 484 
<li>Call Chain = dfs_mount &rArr; dfs_file_open &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<li><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<li><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<li><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<li><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<li><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<li><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
</ul>
<br>[Called By]<ul>
<li><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<li><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_elm_ata
<li><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_init
<li><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_test
</ul>
<p><strong><a name="[18f]"></a>dfs_unmount</strong>(142 bytes, Stack size 0 btyes, Obj/src_dfs_fs.o(.text.dfs_unmount))<br>
<p><strong><a name="[190]"></a>dfs_mkfs</strong>(120 bytes, Stack size 20 btyes, Obj/src_dfs_fs.o(.text.dfs_mkfs))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = dfs_mkfs &rArr; dfs_lock &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<li><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<li><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkfs
<li><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkfs
</ul>
<p><strong><a name="[191]"></a>mkfs</strong>(8 bytes, Stack size 4 btyes, Obj/src_dfs_fs.o(.text.mkfs))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = mkfs &rArr; dfs_mkfs &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
</ul>
<p><strong><a name="[192]"></a>dfs_statfs</strong>(32 bytes, Stack size 8 btyes, Obj/src_dfs_fs.o(.text.dfs_statfs))<br>
<br>[Stack]<ul><li>Max Depth = 368 
<li>Call Chain = dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
</ul>
<br>[Called By]<ul>
<li><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
</ul>
<p><strong><a name="[193]"></a>df</strong>(172 bytes, Stack size 48 btyes, Obj/src_dfs_fs.o(.text.df))<br>
<br>[Stack]<ul><li>Max Depth = 416 
<li>Call Chain = df &rArr; dfs_statfs &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
<li><a href="#[c9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__muldi3
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_df
</ul>
<p><strong><a name="[194]"></a>mkdir</strong>(96 bytes, Stack size 16 btyes, Obj/src_dfs_posix.o(.text.mkdir))<br>
<br>[Stack]<ul><li>Max Depth = 428 
<li>Call Chain = mkdir &rArr; dfs_file_open &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<li><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<li><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<li><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<li><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkdir
</ul>
<p><strong><a name="[195]"></a>open</strong>(106 bytes, Stack size 32 btyes, Obj/src_dfs_posix.o(.text.open))<br>
<br>[Stack]<ul><li>Max Depth = 444 
<li>Call Chain = open &rArr; dfs_file_open &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<li><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<li><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<li><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<li><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_open
<li><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_system_dofile
<li><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_handle_uri
<li><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_asp
<li><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_ssi_sendfile
<li><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_ssi
<li><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_open
</ul>
<p><strong><a name="[196]"></a>close</strong>(64 bytes, Stack size 12 btyes, Obj/src_dfs_posix.o(.text.close))<br>
<br>[Stack]<ul><li>Max Depth = 352 
<li>Call Chain = close &rArr; fd_put &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<li><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<li><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<li><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<li><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_dofile_handle
<li><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_system_dofile
<li><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_handle_uri
<li><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_asp
<li><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_ssi_sendfile
<li><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_ssi_dofile
<li><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_ssi
<li><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_close
</ul>
<p><strong><a name="[197]"></a>read</strong>(70 bytes, Stack size 16 btyes, Obj/src_dfs_posix.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 356 
<li>Call Chain = read &rArr; fd_put &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<li><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<li><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_dofile_handle
<li><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_asp_dofile
<li><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_ssi_sendfile
<li><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_ssi_dofile
</ul>
<p><strong><a name="[198]"></a>rename</strong>(24 bytes, Stack size 0 btyes, Obj/src_dfs_posix.o(.text.rename))<br>
<br>[Stack]<ul><li>Max Depth = 384 
<li>Call Chain = rename &rArr; dfs_file_rename &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
</ul>
<p><strong><a name="[199]"></a>stat</strong>(26 bytes, Stack size 4 btyes, Obj/src_dfs_posix.o(.text.stat))<br>
<br>[Stack]<ul><li>Max Depth = 364 
<li>Call Chain = stat &rArr; dfs_file_stat &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_dirindex
</ul>
<p><strong><a name="[19a]"></a>fstat</strong>(66 bytes, Stack size 0 btyes, Obj/src_dfs_posix.o(.text.fstat))<br>
<p><strong><a name="[19b]"></a>fcntl</strong>(70 bytes, Stack size 0 btyes, Obj/src_dfs_posix.o(.text.fcntl))<br>
<br>[Stack]<ul><li>Max Depth = 340 
<li>Call Chain = fcntl &rArr; fd_put &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_ioctl
<li><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_accept
<li><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv
<li><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_send
</ul>
<p><strong><a name="[19c]"></a>ioctl</strong>(26 bytes, Stack size 0 btyes, Obj/src_dfs_posix.o(.text.ioctl))<br>
<p><strong><a name="[19d]"></a>statfs</strong>(26 bytes, Stack size 0 btyes, Obj/src_dfs_posix.o(.text.statfs))<br>
<p><strong><a name="[19e]"></a>rmdir</strong>(24 bytes, Stack size 4 btyes, Obj/src_dfs_posix.o(.text.rmdir))<br>
<br>[Stack]<ul><li>Max Depth = 396 
<li>Call Chain = rmdir &rArr; dfs_file_unlink &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
</ul>
<p><strong><a name="[19f]"></a>unlink</strong>(8 bytes, Stack size 4 btyes, Obj/src_dfs_posix.o(.text.unlink))<br>
<br>[Stack]<ul><li>Max Depth = 400 
<li>Call Chain = unlink &rArr; rmdir &rArr; dfs_file_unlink  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rmdir
</ul>
<br>[Called By]<ul>
<li><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rm
<li><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
</ul>
<p><strong><a name="[1a0]"></a>opendir</strong>(124 bytes, Stack size 16 btyes, Obj/src_dfs_posix.o(.text.opendir))<br>
<br>[Stack]<ul><li>Max Depth = 428 
<li>Call Chain = opendir &rArr; dfs_file_open &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<li><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<li><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_dirindex
</ul>
<p><strong><a name="[1a1]"></a>telldir</strong>(50 bytes, Stack size 0 btyes, Obj/src_dfs_posix.o(.text.telldir))<br>
<p><strong><a name="[1a2]"></a>rewinddir</strong>(54 bytes, Stack size 0 btyes, Obj/src_dfs_posix.o(.text.rewinddir))<br>
<br>[Stack]<ul><li>Max Depth = 340 
<li>Call Chain = rewinddir &rArr; fd_put &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
<li><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</ul>
<p><strong><a name="[1a3]"></a>closedir</strong>(74 bytes, Stack size 16 btyes, Obj/src_dfs_posix.o(.text.closedir))<br>
<br>[Stack]<ul><li>Max Depth = 356 
<li>Call Chain = closedir &rArr; fd_put &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<li><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<li><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<li><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_dirindex
</ul>
<p><strong><a name="[1a4]"></a>chdir</strong>(126 bytes, Stack size 12 btyes, Obj/src_dfs_posix.o(.text.chdir))<br>
<br>[Stack]<ul><li>Max Depth = 440 
<li>Call Chain = chdir &rArr; opendir &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<li><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<li><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<li><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<li><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<li><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cd
</ul>
<p><strong><a name="[1a5]"></a>access</strong>(32 bytes, Stack size 0 btyes, Obj/src_dfs_posix.o(.text.access))<br>
<p><strong><a name="[1a6]"></a>write</strong>(70 bytes, Stack size 16 btyes, Obj/src_dfs_posix.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 356 
<li>Call Chain = write &rArr; fd_put &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_write
<li><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<li><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_write
<li><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_write
</ul>
<p><strong><a name="[1a7]"></a>lseek</strong>(120 bytes, Stack size 16 btyes, Obj/src_dfs_posix.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 356 
<li>Call Chain = lseek &rArr; fd_put &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<li><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
</ul>
<br>[Called By]<ul>
<li><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_dofile_handle
<li><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_system_dofile
<li><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_asp_dofile
<li><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_ssi_sendfile
<li><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_ssi_dofile
</ul>
<p><strong><a name="[1a8]"></a>fsync</strong>(42 bytes, Stack size 12 btyes, Obj/src_dfs_posix.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 352 
<li>Call Chain = fsync &rArr; fd_put &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_flush
<li><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<p><strong><a name="[1a9]"></a>readdir</strong>(116 bytes, Stack size 20 btyes, Obj/src_dfs_posix.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 360 
<li>Call Chain = readdir &rArr; fd_put &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<li><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<li><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_dirindex
</ul>
<p><strong><a name="[1aa]"></a>seekdir</strong>(56 bytes, Stack size 16 btyes, Obj/src_dfs_posix.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 356 
<li>Call Chain = seekdir &rArr; fd_put &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
<li><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<p><strong><a name="[1ab]"></a>getcwd</strong>(28 bytes, Stack size 12 btyes, Obj/src_dfs_posix.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = getcwd &rArr; rt_enter_critical </ul>
<br>[Calls]<ul>
<li><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<li><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
</ul>
<br>[Called By]<ul>
<li><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<li><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</ul>
<p><strong><a name="[1ae]"></a>poll</strong>(334 bytes, Stack size 72 btyes, Obj/src_poll.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 412 
<li>Call Chain = poll &rArr; fd_put &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<li><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<li><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</ul>
<br>[Called By]<ul>
<li><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</ul>
<p><strong><a name="[1af]"></a>select</strong>(588 bytes, Stack size 32 btyes, Obj/src_select.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 444 
<li>Call Chain = select &rArr; poll &rArr; fd_put  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<br>[Called By]<ul>
<li><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<li><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
<li><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_thread
</ul>
<p><strong><a name="[1b0]"></a>dfs_device_fs_mount</strong>(4 bytes, Stack size 0 btyes, Obj/devfs_devfs.o(.text.dfs_device_fs_mount))<br>
<p><strong><a name="[1b2]"></a>dfs_device_fs_ioctl</strong>(54 bytes, Stack size 16 btyes, Obj/devfs_devfs.o(.text.dfs_device_fs_ioctl))<br>
<br>[Stack]<ul><li>Max Depth = 216 
<li>Call Chain = dfs_device_fs_ioctl &rArr; rt_device_control &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[1b3]"></a>dfs_device_fs_read</strong>(68 bytes, Stack size 20 btyes, Obj/devfs_devfs.o(.text.dfs_device_fs_read))<br>
<br>[Stack]<ul><li>Max Depth = 224 
<li>Call Chain = dfs_device_fs_read &rArr; rt_device_read &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[1b4]"></a>dfs_device_fs_write</strong>(68 bytes, Stack size 20 btyes, Obj/devfs_devfs.o(.text.dfs_device_fs_write))<br>
<br>[Stack]<ul><li>Max Depth = 204 
<li>Call Chain = dfs_device_fs_write &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[1b5]"></a>dfs_device_fs_open</strong>(236 bytes, Stack size 24 btyes, Obj/devfs_devfs.o(.text.dfs_device_fs_open))<br>
<br>[Stack]<ul><li>Max Depth = 332 
<li>Call Chain = dfs_device_fs_open &rArr; rt_malloc &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<li><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[1b6]"></a>dfs_device_fs_getdents</strong>(124 bytes, Stack size 32 btyes, Obj/devfs_devfs.o(.text.dfs_device_fs_getdents))<br>
<br>[Stack]<ul><li>Max Depth = 216 
<li>Call Chain = dfs_device_fs_getdents &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[1b7]"></a>dfs_device_fs_close</strong>(92 bytes, Stack size 12 btyes, Obj/devfs_devfs.o(.text.dfs_device_fs_close))<br>
<br>[Stack]<ul><li>Max Depth = 296 
<li>Call Chain = dfs_device_fs_close &rArr; rt_free &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[1b8]"></a>dfs_device_fs_stat</strong>(112 bytes, Stack size 8 btyes, Obj/devfs_devfs.o(.text.dfs_device_fs_stat))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = dfs_device_fs_stat &rArr; rt_device_find &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</ul>
<p><strong><a name="[1b9]"></a>devfs_init</strong>(12 bytes, Stack size 4 btyes, Obj/devfs_devfs.o(.text.devfs_init))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = devfs_init &rArr; dfs_register &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
</ul>
<br>[Called By]<ul>
<li><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
</ul>
<p><strong><a name="[1ba]"></a>dfs_elm_ioctl</strong>(6 bytes, Stack size 0 btyes, Obj/elmfat_dfs_elm.o(.text.dfs_elm_ioctl))<br>
<p><strong><a name="[1bb]"></a>dfs_elm_mount</strong>(244 bytes, Stack size 52 btyes, Obj/elmfat_dfs_elm.o(.text.dfs_elm_mount))<br>
<br>[Stack]<ul><li>Max Depth = 444 
<li>Call Chain = dfs_elm_mount &rArr; f_mount &rArr; ff_cre_syncobj  &rArr; rt_mutex_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<li><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[1bc]"></a>dfs_elm_unmount</strong>(132 bytes, Stack size 28 btyes, Obj/elmfat_dfs_elm.o(.text.dfs_elm_unmount))<br>
<br>[Stack]<ul><li>Max Depth = 420 
<li>Call Chain = dfs_elm_unmount &rArr; f_mount &rArr; ff_cre_syncobj  &rArr; rt_mutex_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<p><strong><a name="[1bd]"></a>dfs_elm_mkfs</strong>(282 bytes, Stack size 40 btyes, Obj/elmfat_dfs_elm.o(.text.dfs_elm_mkfs))<br>
<br>[Stack]<ul><li>Max Depth = 432 
<li>Call Chain = dfs_elm_mkfs &rArr; f_mount &rArr; ff_cre_syncobj  &rArr; rt_mutex_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<li><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<li><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<li><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
</ul>
<p><strong><a name="[1be]"></a>dfs_elm_statfs</strong>(124 bytes, Stack size 24 btyes, Obj/elmfat_dfs_elm.o(.text.dfs_elm_statfs))<br>
<br>[Stack]<ul><li>Max Depth = 448 
<li>Call Chain = dfs_elm_statfs &rArr; f_getfree &rArr; find_volume  &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[1bf]"></a>dfs_elm_open</strong>(320 bytes, Stack size 24 btyes, Obj/elmfat_dfs_elm.o(.text.dfs_elm_open))<br>
<br>[Stack]<ul><li>Max Depth = 496 
<li>Call Chain = dfs_elm_open &rArr; f_open &rArr; find_volume  &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<li><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<li><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</ul>
<p><strong><a name="[1c0]"></a>dfs_elm_close</strong>(106 bytes, Stack size 12 btyes, Obj/elmfat_dfs_elm.o(.text.dfs_elm_close))<br>
<br>[Stack]<ul><li>Max Depth = 360 
<li>Call Chain = dfs_elm_close &rArr; f_close &rArr; f_sync  &rArr; validate  &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[1c1]"></a>dfs_elm_read</strong>(88 bytes, Stack size 24 btyes, Obj/elmfat_dfs_elm.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 412 
<li>Call Chain = dfs_elm_read &rArr; f_read &rArr; validate  &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[1c2]"></a>dfs_elm_flush</strong>(46 bytes, Stack size 0 btyes, Obj/elmfat_dfs_elm.o(.text.dfs_elm_flush))<br>
<br>[Stack]<ul><li>Max Depth = 332 
<li>Call Chain = dfs_elm_flush &rArr; f_sync &rArr; validate  &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[1c3]"></a>dfs_elm_lseek</strong>(122 bytes, Stack size 16 btyes, Obj/elmfat_dfs_elm.o(.text.dfs_elm_lseek))<br>
<br>[Stack]<ul><li>Max Depth = 400 
<li>Call Chain = dfs_elm_lseek &rArr; f_lseek &rArr; validate  &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<li><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[1c4]"></a>dfs_elm_getdents</strong>(210 bytes, Stack size 320 btyes, Obj/elmfat_dfs_elm.o(.text.dfs_elm_getdents))<br>
<br>[Stack]<ul><li>Max Depth = 680 
<li>Call Chain = dfs_elm_getdents &rArr; f_readdir &rArr; validate  &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<li><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<li><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[1c5]"></a>dfs_elm_unlink</strong>(92 bytes, Stack size 20 btyes, Obj/elmfat_dfs_elm.o(.text.dfs_elm_unlink))<br>
<br>[Stack]<ul><li>Max Depth = 576 
<li>Call Chain = dfs_elm_unlink &rArr; f_unlink &rArr; find_volume  &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<p><strong><a name="[1c6]"></a>dfs_elm_rename</strong>(96 bytes, Stack size 24 btyes, Obj/elmfat_dfs_elm.o(.text.dfs_elm_rename))<br>
<br>[Stack]<ul><li>Max Depth = 616 
<li>Call Chain = dfs_elm_rename &rArr; f_rename &rArr; find_volume  &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<p><strong><a name="[1c7]"></a>dfs_elm_stat</strong>(216 bytes, Stack size 352 btyes, Obj/elmfat_dfs_elm.o(.text.dfs_elm_stat))<br>
<br>[Stack]<ul><li>Max Depth = 792 
<li>Call Chain = dfs_elm_stat &rArr; f_stat &rArr; find_volume  &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</ul>
<p><strong><a name="[1c8]"></a>elm_init</strong>(12 bytes, Stack size 4 btyes, Obj/elmfat_dfs_elm.o(.text.elm_init))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = elm_init &rArr; dfs_register &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
</ul>
<p><strong><a name="[1c9]"></a>mount_elm_ata</strong>(68 bytes, Stack size 8 btyes, Obj/elmfat_dfs_elm.o(.text.mount_elm_ata))<br>
<br>[Stack]<ul><li>Max Depth = 492 
<li>Call Chain = mount_elm_ata &rArr; dfs_mount &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
</ul>
<p><strong><a name="[1ca]"></a>disk_initialize</strong>(4 bytes, Stack size 0 btyes, Obj/elmfat_dfs_elm.o(.text.disk_initialize))<br>
<br>[Called By]<ul>
<li><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<li><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</ul>
<p><strong><a name="[1cb]"></a>disk_status</strong>(4 bytes, Stack size 0 btyes, Obj/elmfat_dfs_elm.o(.text.disk_status))<br>
<br>[Called By]<ul>
<li><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<li><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</ul>
<p><strong><a name="[1cc]"></a>get_fattime</strong>(78 bytes, Stack size 0 btyes, Obj/elmfat_dfs_elm.o(.text.get_fattime))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = get_fattime &rArr; localtime &rArr; localtime_r  &rArr; gettimeofday  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<li><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
</ul>
<br>[Called By]<ul>
<li><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<li><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<li><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<li><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</ul>
<p><strong><a name="[1cd]"></a>ff_cre_syncobj</strong>(38 bytes, Stack size 16 btyes, Obj/elmfat_dfs_elm.o(.text.ff_cre_syncobj))<br>
<br>[Stack]<ul><li>Max Depth = 360 
<li>Call Chain = ff_cre_syncobj &rArr; rt_mutex_create &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
</ul>
<br>[Called By]<ul>
<li><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</ul>
<p><strong><a name="[1ce]"></a>ff_del_syncobj</strong>(14 bytes, Stack size 4 btyes, Obj/elmfat_dfs_elm.o(.text.ff_del_syncobj))<br>
<br>[Stack]<ul><li>Max Depth = 316 
<li>Call Chain = ff_del_syncobj &rArr; rt_mutex_delete &rArr; rt_object_delete  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
</ul>
<br>[Called By]<ul>
<li><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</ul>
<p><strong><a name="[1cf]"></a>ff_memalloc</strong>(8 bytes, Stack size 0 btyes, Obj/elmfat_dfs_elm.o(.text.ff_memalloc))<br>
<br>[Stack]<ul><li>Max Depth = 308 
<li>Call Chain = ff_memalloc &rArr; rt_malloc &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</ul>
<br>[Called By]<ul>
<li><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<li><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<li><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<li><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<li><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<li><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<li><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<li><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</ul>
<p><strong><a name="[1d0]"></a>ff_memfree</strong>(8 bytes, Stack size 4 btyes, Obj/elmfat_dfs_elm.o(.text.ff_memfree))<br>
<br>[Stack]<ul><li>Max Depth = 288 
<li>Call Chain = ff_memfree &rArr; rt_free &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<br>[Called By]<ul>
<li><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<li><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<li><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<li><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<li><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<li><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<li><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<li><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</ul>
<p><strong><a name="[1d1]"></a>dfs_elm_write</strong>(92 bytes, Stack size 24 btyes, Obj/elmfat_dfs_elm.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 416 
<li>Call Chain = dfs_elm_write &rArr; f_write &rArr; validate  &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[1d2]"></a>disk_read</strong>(30 bytes, Stack size 8 btyes, Obj/elmfat_dfs_elm.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = disk_read &rArr; rt_device_read &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</ul>
<br>[Called By]<ul>
<li><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<li><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<li><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<li><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<li><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</ul>
<p><strong><a name="[1d3]"></a>disk_write</strong>(30 bytes, Stack size 8 btyes, Obj/elmfat_dfs_elm.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 28 + In Cycle
<li>Call Chain = disk_write &rArr; rt_device_write &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</ul>
<br>[Called By]<ul>
<li><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
<li><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<li><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<li><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<li><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<li><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</ul>
<p><strong><a name="[1d4]"></a>disk_ioctl</strong>(176 bytes, Stack size 28 btyes, Obj/elmfat_dfs_elm.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 228 
<li>Call Chain = disk_ioctl &rArr; rt_device_control &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</ul>
<br>[Called By]<ul>
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<li><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</ul>
<p><strong><a name="[1d5]"></a>ff_req_grant</strong>(16 bytes, Stack size 4 btyes, Obj/elmfat_dfs_elm.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 316 
<li>Call Chain = ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</ul>
<br>[Called By]<ul>
<li><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<li><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</ul>
<p><strong><a name="[1d6]"></a>ff_rel_grant</strong>(8 bytes, Stack size 4 btyes, Obj/elmfat_dfs_elm.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 292 
<li>Call Chain = ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<br>[Called By]<ul>
<li><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<li><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<li><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs.part.9
<li><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<li><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<li><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<li><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<li><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<li><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<li><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<li><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<li><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<li><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</ul>
<p><strong><a name="[1ec]"></a>f_mount</strong>(150 bytes, Stack size 32 btyes, Obj/elmfat_ff.o(.text.f_mount))<br>
<br>[Stack]<ul><li>Max Depth = 392 
<li>Call Chain = f_mount &rArr; ff_cre_syncobj &rArr; rt_mutex_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<li><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
<li><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<li><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<li><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs.part.9
</ul>
<br>[Called By]<ul>
<li><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<li><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<li><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</ul>
<p><strong><a name="[1ed]"></a>f_open</strong>(1404 bytes, Stack size 120 btyes, Obj/elmfat_ff.o(.text.f_open))<br>
<br>[Stack]<ul><li>Max Depth = 472 
<li>Call Chain = f_open &rArr; find_volume &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<li><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs.part.9
<li><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<li><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<li><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<li><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
<li><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<li><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<li><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<li><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<li><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
</ul>
<br>[Called By]<ul>
<li><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</ul>
<p><strong><a name="[1ee]"></a>f_sync</strong>(588 bytes, Stack size 0 btyes, Obj/elmfat_ff.o(.text.f_sync))<br>
<br>[Stack]<ul><li>Max Depth = 332 
<li>Call Chain = f_sync &rArr; validate &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<li><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<li><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<li><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs.part.9
<li><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<li><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<li><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<li><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<li><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<li><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_fat_chain.part.8
<li><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<li><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
</ul>
<br>[Called By]<ul>
<li><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_flush
<li><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</ul>
<p><strong><a name="[1ef]"></a>f_close</strong>(56 bytes, Stack size 16 btyes, Obj/elmfat_ff.o(.text.f_close))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = f_close &rArr; f_sync &rArr; validate  &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<li><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<li><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</ul>
<br>[Called By]<ul>
<li><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
</ul>
<p><strong><a name="[1f0]"></a>f_lseek</strong>(1132 bytes, Stack size 52 btyes, Obj/elmfat_ff.o(.text.f_lseek))<br>
<br>[Stack]<ul><li>Max Depth = 384 
<li>Call Chain = f_lseek &rArr; validate &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<li><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs.part.9
<li><a href="#[c9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivdi3
<li><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<li><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
<li><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<li><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</ul>
<br>[Called By]<ul>
<li><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<li><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
</ul>
<p><strong><a name="[1f1]"></a>f_opendir</strong>(442 bytes, Stack size 28 btyes, Obj/elmfat_ff.o(.text.f_opendir))<br>
<br>[Stack]<ul><li>Max Depth = 380 
<li>Call Chain = f_opendir &rArr; find_volume &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<li><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<li><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs.part.9
<li><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<li><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<li><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<li><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</ul>
<br>[Called By]<ul>
<li><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<li><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</ul>
<p><strong><a name="[1f2]"></a>f_closedir</strong>(38 bytes, Stack size 0 btyes, Obj/elmfat_ff.o(.text.f_closedir))<br>
<p><strong><a name="[1f3]"></a>f_readdir</strong>(152 bytes, Stack size 28 btyes, Obj/elmfat_ff.o(.text.f_readdir))<br>
<br>[Stack]<ul><li>Max Depth = 360 
<li>Call Chain = f_readdir &rArr; validate &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<li><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<li><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read.constprop.11
<li><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<li><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs.part.9
<li><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<li><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<li><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<li><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</ul>
<br>[Called By]<ul>
<li><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
</ul>
<p><strong><a name="[1f4]"></a>f_seekdir</strong>(66 bytes, Stack size 20 btyes, Obj/elmfat_ff.o(.text.f_seekdir))<br>
<br>[Stack]<ul><li>Max Depth = 120 + In Cycle
<li>Call Chain = f_seekdir &rArr; dir_read.constprop.11 &rArr; load_xdir  &rArr; sync_window.part.5  &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<li><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<li><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read.constprop.11
</ul>
<br>[Called By]<ul>
<li><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
</ul>
<p><strong><a name="[1f5]"></a>f_stat</strong>(138 bytes, Stack size 88 btyes, Obj/elmfat_ff.o(.text.f_stat))<br>
<br>[Stack]<ul><li>Max Depth = 440 
<li>Call Chain = f_stat &rArr; find_volume &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<li><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs.part.9
<li><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<li><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<li><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<li><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<li><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</ul>
<br>[Called By]<ul>
<li><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
</ul>
<p><strong><a name="[1f6]"></a>f_getfree</strong>(382 bytes, Stack size 72 btyes, Obj/elmfat_ff.o(.text.f_getfree))<br>
<br>[Stack]<ul><li>Max Depth = 424 
<li>Call Chain = f_getfree &rArr; find_volume &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<li><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs.part.9
<li><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
</ul>
<br>[Called By]<ul>
<li><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
</ul>
<p><strong><a name="[1f7]"></a>f_truncate</strong>(370 bytes, Stack size 0 btyes, Obj/elmfat_ff.o(.text.f_truncate))<br>
<p><strong><a name="[1f8]"></a>f_unlink</strong>(474 bytes, Stack size 204 btyes, Obj/elmfat_ff.o(.text.f_unlink))<br>
<br>[Stack]<ul><li>Max Depth = 556 
<li>Call Chain = f_unlink &rArr; find_volume &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<li><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs.part.9
<li><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<li><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<li><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<li><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<li><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read.constprop.11
<li><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<li><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<li><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</ul>
<br>[Called By]<ul>
<li><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
</ul>
<p><strong><a name="[1f9]"></a>f_mkdir</strong>(732 bytes, Stack size 112 btyes, Obj/elmfat_ff.o(.text.f_mkdir))<br>
<br>[Stack]<ul><li>Max Depth = 464 
<li>Call Chain = f_mkdir &rArr; find_volume &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<li><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs.part.9
<li><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<li><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<li><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<li><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
<li><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<li><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<li><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<li><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
</ul>
<br>[Called By]<ul>
<li><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</ul>
<p><strong><a name="[1fa]"></a>f_rename</strong>(558 bytes, Stack size 240 btyes, Obj/elmfat_ff.o(.text.f_rename))<br>
<br>[Stack]<ul><li>Max Depth = 592 
<li>Call Chain = f_rename &rArr; find_volume &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<li><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<li><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs.part.9
<li><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<li><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<li><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<li><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
<li><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<li><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<li><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
</ul>
<br>[Called By]<ul>
<li><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
</ul>
<p><strong><a name="[1fb]"></a>f_mkfs</strong>(4086 bytes, Stack size 144 btyes, Obj/elmfat_ff.o(.text.f_mkfs))<br>
<br>[Stack]<ul><li>Max Depth = 388 
<li>Call Chain = f_mkfs &rArr; get_fattime &rArr; localtime  &rArr; localtime_r  &rArr; gettimeofday  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<li><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<li><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<li><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</ul>
<br>[Called By]<ul>
<li><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</ul>
<p><strong><a name="[1fc]"></a>elm_get_vol</strong>(28 bytes, Stack size 0 btyes, Obj/elmfat_ff.o(.text.elm_get_vol))<br>
<br>[Called By]<ul>
<li><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<li><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<li><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<li><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
</ul>
<p><strong><a name="[202]"></a>f_read</strong>(632 bytes, Stack size 56 btyes, Obj/elmfat_ff.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 388 
<li>Call Chain = f_read &rArr; validate &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<li><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs.part.9
<li><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<li><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[c9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivdi3
<li><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<li><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
</ul>
<br>[Called By]<ul>
<li><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_read
</ul>
<p><strong><a name="[203]"></a>f_write</strong>(764 bytes, Stack size 60 btyes, Obj/elmfat_ff.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 392 
<li>Call Chain = f_write &rArr; validate &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<li><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs.part.9
<li><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<li><a href="#[c9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivdi3
<li><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<li><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
</ul>
<br>[Called By]<ul>
<li><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_write
</ul>
<p><strong><a name="[204]"></a>ff_convert</strong>(62 bytes, Stack size 0 btyes, Obj/option_ccsbcs.o(.text.ff_convert))<br>
<br>[Called By]<ul>
<li><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<li><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</ul>
<p><strong><a name="[205]"></a>ff_wtoupper</strong>(170 bytes, Stack size 0 btyes, Obj/option_ccsbcs.o(.text.ff_wtoupper))<br>
<br>[Called By]<ul>
<li><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xname_sum
<li><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<li><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</ul>
<p><strong><a name="[20a]"></a>dfs_net_get_fops</strong>(4 bytes, Stack size 0 btyes, Obj/net_dfs_net.o(.text.dfs_net_get_fops))<br>
<br>[Called By]<ul>
<li><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<li><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</ul>
<p><strong><a name="[20c]"></a>dfs_net_getsocket</strong>(38 bytes, Stack size 8 btyes, Obj/net_dfs_net.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = dfs_net_getsocket &rArr; fd_put &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
</ul>
<br>[Called By]<ul>
<li><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<li><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<li><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockname
<li><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockopt
<li><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<li><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<li><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<li><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<li><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<li><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<li><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<li><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
</ul>
<p><strong><a name="[20d]"></a>gethostbyname</strong>(8 bytes, Stack size 4 btyes, Obj/net_net_netdb.o(.text.gethostbyname))<br>
<br>[Stack]<ul><li>Max Depth = 440 
<li>Call Chain = gethostbyname &rArr; lwip_gethostbyname &rArr; netconn_gethostbyname  &rArr; sys_sem_new  &rArr; rt_sem_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname
</ul>
<br>[Called By]<ul>
<li><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto_ntp_server
</ul>
<p><strong><a name="[20e]"></a>gethostbyname_r</strong>(28 bytes, Stack size 0 btyes, Obj/net_net_netdb.o(.text.gethostbyname_r))<br>
<p><strong><a name="[20f]"></a>freeaddrinfo</strong>(8 bytes, Stack size 4 btyes, Obj/net_net_netdb.o(.text.freeaddrinfo))<br>
<br>[Stack]<ul><li>Max Depth = 224 
<li>Call Chain = freeaddrinfo &rArr; lwip_freeaddrinfo &rArr; memp_free  &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
</ul>
<br>[Called By]<ul>
<li><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
<li><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_connect
<li><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_bind
<li><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
</ul>
<p><strong><a name="[210]"></a>getaddrinfo</strong>(8 bytes, Stack size 4 btyes, Obj/net_net_netdb.o(.text.getaddrinfo))<br>
<br>[Stack]<ul><li>Max Depth = 456 
<li>Call Chain = getaddrinfo &rArr; lwip_getaddrinfo &rArr; netconn_gethostbyname  &rArr; sys_sem_new  &rArr; rt_sem_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
</ul>
<br>[Called By]<ul>
<li><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
<li><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_connect
<li><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_bind
<li><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
</ul>
<p><strong><a name="[212]"></a>accept</strong>(140 bytes, Stack size 20 btyes, Obj/net_net_sockets.o(.text.accept))<br>
<br>[Stack]<ul><li>Max Depth = 432 
<li>Call Chain = accept &rArr; lwip_close &rArr; netconn_delete  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<li><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<li><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_get_fops
<li><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tryget_socket
<li><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<li><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</ul>
<br>[Called By]<ul>
<li><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<li><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_accept
</ul>
<p><strong><a name="[213]"></a>bind</strong>(20 bytes, Stack size 12 btyes, Obj/net_net_sockets.o(.text.bind))<br>
<br>[Stack]<ul><li>Max Depth = 400 
<li>Call Chain = bind &rArr; lwip_bind &rArr; netconn_bind  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<li><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
</ul>
<br>[Called By]<ul>
<li><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<li><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
<li><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_bind
<li><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_accept
</ul>
<p><strong><a name="[214]"></a>shutdown</strong>(70 bytes, Stack size 0 btyes, Obj/net_net_sockets.o(.text.shutdown))<br>
<p><strong><a name="[215]"></a>getpeername</strong>(20 bytes, Stack size 0 btyes, Obj/net_net_sockets.o(.text.getpeername))<br>
<p><strong><a name="[216]"></a>getsockname</strong>(20 bytes, Stack size 12 btyes, Obj/net_net_sockets.o(.text.getsockname))<br>
<br>[Stack]<ul><li>Max Depth = 384 
<li>Call Chain = getsockname &rArr; lwip_getsockname &rArr; lwip_getaddrname  &rArr; netconn_getaddr  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<li><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockname
</ul>
<br>[Called By]<ul>
<li><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_accept
</ul>
<p><strong><a name="[217]"></a>getsockopt</strong>(34 bytes, Stack size 24 btyes, Obj/net_net_sockets.o(.text.getsockopt))<br>
<br>[Stack]<ul><li>Max Depth = 380 
<li>Call Chain = getsockopt &rArr; lwip_getsockopt &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<li><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
</ul>
<br>[Called By]<ul>
<li><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_accept
</ul>
<p><strong><a name="[218]"></a>setsockopt</strong>(34 bytes, Stack size 24 btyes, Obj/net_net_sockets.o(.text.setsockopt))<br>
<br>[Stack]<ul><li>Max Depth = 672 
<li>Call Chain = setsockopt &rArr; lwip_setsockopt &rArr; igmp_leavegroup  &rArr; igmp_leavegroup_netif  &rArr; igmp_send  &rArr; ip4_output_if_opt  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<li><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
</ul>
<br>[Called By]<ul>
<li><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<li><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
<li><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
<li><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_bind
<li><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_accept
<li><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
</ul>
<p><strong><a name="[219]"></a>connect</strong>(20 bytes, Stack size 12 btyes, Obj/net_net_sockets.o(.text.connect))<br>
<br>[Stack]<ul><li>Max Depth = 400 
<li>Call Chain = connect &rArr; lwip_connect &rArr; netconn_connect  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<li><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</ul>
<br>[Called By]<ul>
<li><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
<li><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_connect
<li><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_accept
<li><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
</ul>
<p><strong><a name="[21a]"></a>listen</strong>(16 bytes, Stack size 8 btyes, Obj/net_net_sockets.o(.text.listen))<br>
<br>[Stack]<ul><li>Max Depth = 388 
<li>Call Chain = listen &rArr; lwip_listen &rArr; netconn_listen_with_backlog  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<li><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
</ul>
<br>[Called By]<ul>
<li><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<li><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_bind
</ul>
<p><strong><a name="[21b]"></a>recv</strong>(24 bytes, Stack size 16 btyes, Obj/net_net_sockets.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 544 
<li>Call Chain = recv &rArr; lwip_recv &rArr; lwip_recvfrom  &rArr; netconn_recv  &rArr; netconn_recv_data  &rArr; netconn_close_shutdown  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<li><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
</ul>
<br>[Called By]<ul>
<li><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<li><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
<li><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv
<li><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_recv.isra.0.constprop.7
</ul>
<p><strong><a name="[21c]"></a>socket</strong>(146 bytes, Stack size 0 btyes, Obj/net_net_sockets.o(.text.socket))<br>
<br>[Stack]<ul><li>Max Depth = 436 
<li>Call Chain = socket &rArr; lwip_socket &rArr; netconn_new_with_proto_and_callback  &rArr; netconn_alloc  &rArr; sys_mbox_new  &rArr; rt_mb_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<li><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_get_fops
<li><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tryget_socket
<li><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<li><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
<li><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
<li><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_client
<li><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
<li><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_connect
<li><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_bind
<li><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_accept
<li><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<li><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
</ul>
<p><strong><a name="[21d]"></a>closesocket</strong>(36 bytes, Stack size 12 btyes, Obj/net_net_sockets.o(.text.closesocket))<br>
<br>[Stack]<ul><li>Max Depth = 424 
<li>Call Chain = closesocket &rArr; lwip_close &rArr; netconn_delete  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</ul>
<br>[Called By]<ul>
<li><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<li><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
<li><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
<li><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_client
<li><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
<li><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_connect
<li><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_bind
<li><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_free
<li><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<li><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
<li><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_write
<li><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_close
</ul>
<p><strong><a name="[21e]"></a>ioctlsocket</strong>(20 bytes, Stack size 0 btyes, Obj/net_net_sockets.o(.text.ioctlsocket))<br>
<p><strong><a name="[21f]"></a>recvfrom</strong>(74 bytes, Stack size 32 btyes, Obj/net_net_sockets.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 548 
<li>Call Chain = recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv  &rArr; netconn_recv_data  &rArr; netconn_close_shutdown  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<li><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</ul>
<br>[Called By]<ul>
<li><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
<li><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
<li><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_accept
<li><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
</ul>
<p><strong><a name="[220]"></a>send</strong>(24 bytes, Stack size 16 btyes, Obj/net_net_sockets.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 364 
<li>Call Chain = send &rArr; dfs_net_getsocket &rArr; fd_put  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<li><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</ul>
<br>[Called By]<ul>
<li><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
<li><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_send
<li><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_write
</ul>
<p><strong><a name="[221]"></a>sendto</strong>(74 bytes, Stack size 32 btyes, Obj/net_net_sockets.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 452 
<li>Call Chain = sendto &rArr; lwip_sendto &rArr; netbuf_alloc  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<li><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</ul>
<br>[Called By]<ul>
<li><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_client
<li><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
<li><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto_ntp_server
</ul>
<p><strong><a name="[222]"></a>dfs_ramfs_mount</strong>(16 bytes, Stack size 0 btyes, Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_mount))<br>
<p><strong><a name="[223]"></a>dfs_ramfs_unmount</strong>(8 bytes, Stack size 0 btyes, Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_unmount))<br>
<p><strong><a name="[224]"></a>dfs_ramfs_ioctl</strong>(6 bytes, Stack size 0 btyes, Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_ioctl))<br>
<p><strong><a name="[225]"></a>dfs_ramfs_lseek</strong>(18 bytes, Stack size 0 btyes, Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_lseek))<br>
<p><strong><a name="[226]"></a>dfs_ramfs_close</strong>(8 bytes, Stack size 0 btyes, Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_close))<br>
<p><strong><a name="[227]"></a>dfs_ramfs_statfs</strong>(60 bytes, Stack size 12 btyes, Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_statfs))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = dfs_ramfs_statfs &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[228]"></a>dfs_ramfs_read</strong>(64 bytes, Stack size 24 btyes, Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_read))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = dfs_ramfs_read &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[229]"></a>dfs_ramfs_write</strong>(122 bytes, Stack size 24 btyes, Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_write))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = dfs_ramfs_write &rArr; rt_memheap_realloc &rArr; rt_memheap_alloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<p><strong><a name="[22a]"></a>dfs_ramfs_getdents</strong>(158 bytes, Stack size 36 btyes, Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_getdents))<br>
<br>[Stack]<ul><li>Max Depth = 220 
<li>Call Chain = dfs_ramfs_getdents &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[22b]"></a>dfs_ramfs_init</strong>(12 bytes, Stack size 4 btyes, Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_init))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = dfs_ramfs_init &rArr; dfs_register &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
</ul>
<p><strong><a name="[22c]"></a>dfs_ramfs_lookup</strong>(84 bytes, Stack size 20 btyes, Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_lookup))<br>
<br>[Calls]<ul>
<li><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
</ul>
<br>[Called By]<ul>
<li><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_open
<li><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_stat
<li><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_unlink
<li><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_rename
</ul>
<p><strong><a name="[22d]"></a>dfs_ramfs_open</strong>(262 bytes, Stack size 24 btyes, Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_open))<br>
<br>[Stack]<ul><li>Max Depth = 316 
<li>Call Chain = dfs_ramfs_open &rArr; rt_memheap_free &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_lookup
<li><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<li><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</ul>
<p><strong><a name="[22e]"></a>dfs_ramfs_stat</strong>(48 bytes, Stack size 12 btyes, Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_stat))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = dfs_ramfs_stat &rArr; dfs_ramfs_lookup </ul>
<br>[Calls]<ul>
<li><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_lookup
</ul>
<p><strong><a name="[22f]"></a>dfs_ramfs_unlink</strong>(84 bytes, Stack size 16 btyes, Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_unlink))<br>
<br>[Stack]<ul><li>Max Depth = 308 
<li>Call Chain = dfs_ramfs_unlink &rArr; rt_memheap_free &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_lookup
<li><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[230]"></a>dfs_ramfs_rename</strong>(88 bytes, Stack size 24 btyes, Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_rename))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = dfs_ramfs_rename &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_lookup
<li><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[231]"></a>dfs_ramfs_create</strong>(84 bytes, Stack size 16 btyes, Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_create))<br>
<br>[Stack]<ul><li>Max Depth = 260 
<li>Call Chain = dfs_ramfs_create &rArr; rt_memheap_init &rArr; rt_sem_init  &rArr; rt_object_init  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_init
<li><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_test
</ul>
<p><strong><a name="[232]"></a>dfs_romfs_mount</strong>(16 bytes, Stack size 0 btyes, Obj/romfs_dfs_romfs.o(.text.dfs_romfs_mount))<br>
<p><strong><a name="[233]"></a>dfs_romfs_unmount</strong>(4 bytes, Stack size 0 btyes, Obj/romfs_dfs_romfs.o(.text.dfs_romfs_unmount))<br>
<p><strong><a name="[234]"></a>dfs_romfs_ioctl</strong>(6 bytes, Stack size 0 btyes, Obj/romfs_dfs_romfs.o(.text.dfs_romfs_ioctl))<br>
<p><strong><a name="[235]"></a>dfs_romfs_lseek</strong>(18 bytes, Stack size 0 btyes, Obj/romfs_dfs_romfs.o(.text.dfs_romfs_lseek))<br>
<p><strong><a name="[236]"></a>dfs_romfs_close</strong>(8 bytes, Stack size 0 btyes, Obj/romfs_dfs_romfs.o(.text.dfs_romfs_close))<br>
<p><strong><a name="[237]"></a>dfs_romfs_read</strong>(88 bytes, Stack size 20 btyes, Obj/romfs_dfs_romfs.o(.text.dfs_romfs_read))<br>
<br>[Stack]<ul><li>Max Depth = 204 
<li>Call Chain = dfs_romfs_read &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[238]"></a>dfs_romfs_getdents</strong>(176 bytes, Stack size 36 btyes, Obj/romfs_dfs_romfs.o(.text.dfs_romfs_getdents))<br>
<br>[Stack]<ul><li>Max Depth = 220 
<li>Call Chain = dfs_romfs_getdents &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<li><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</ul>
<p><strong><a name="[239]"></a>dfs_romfs_init</strong>(56 bytes, Stack size 12 btyes, Obj/romfs_dfs_romfs.o(.text.dfs_romfs_init))<br>
<br>[Stack]<ul><li>Max Depth = 496 
<li>Call Chain = dfs_romfs_init &rArr; dfs_mount &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<li><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[23a]"></a>dfs_romfs_lookup</strong>(246 bytes, Stack size 36 btyes, Obj/romfs_dfs_romfs.o(.text.dfs_romfs_lookup))<br>
<br>[Calls]<ul>
<li><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<li><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
</ul>
<br>[Called By]<ul>
<li><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_open
<li><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_stat
</ul>
<p><strong><a name="[23b]"></a>dfs_romfs_open</strong>(104 bytes, Stack size 12 btyes, Obj/romfs_dfs_romfs.o(.text.dfs_romfs_open))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = dfs_romfs_open &rArr; dfs_romfs_lookup </ul>
<br>[Calls]<ul>
<li><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_lookup
</ul>
<p><strong><a name="[23c]"></a>dfs_romfs_stat</strong>(62 bytes, Stack size 12 btyes, Obj/romfs_dfs_romfs.o(.text.dfs_romfs_stat))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = dfs_romfs_stat &rArr; dfs_romfs_lookup </ul>
<br>[Calls]<ul>
<li><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_lookup
</ul>
<p><strong><a name="[23d]"></a>clock_cpu_getres</strong>(28 bytes, Stack size 0 btyes, Obj/cputime_cputime.o(.text.clock_cpu_getres))<br>
<p><strong><a name="[23e]"></a>clock_cpu_gettime</strong>(28 bytes, Stack size 0 btyes, Obj/cputime_cputime.o(.text.clock_cpu_gettime))<br>
<p><strong><a name="[23f]"></a>clock_cpu_microsecond</strong>(36 bytes, Stack size 0 btyes, Obj/cputime_cputime.o(.text.clock_cpu_microsecond))<br>
<p><strong><a name="[240]"></a>clock_cpu_millisecond</strong>(34 bytes, Stack size 0 btyes, Obj/cputime_cputime.o(.text.clock_cpu_millisecond))<br>
<p><strong><a name="[241]"></a>clock_cpu_setops</strong>(52 bytes, Stack size 8 btyes, Obj/cputime_cputime.o(.text.clock_cpu_setops))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = clock_cpu_setops &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cputime_init
</ul>
<p><strong><a name="[248]"></a>rt_crypto_register</strong>(92 bytes, Stack size 20 btyes, Obj/crypto_crypto_dev.o(.text.rt_crypto_register))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = rt_crypto_register &rArr; rt_device_register &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<li><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_threading_set_alt
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_crypto_init
</ul>
<p><strong><a name="[24f]"></a>rt_device_hwtimer_isr</strong>(88 bytes, Stack size 8 btyes, Obj/hwtimer_hwtimer.o(.text.rt_device_hwtimer_isr))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = rt_device_hwtimer_isr &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_isr
</ul>
<p><strong><a name="[250]"></a>rt_device_hwtimer_register</strong>(114 bytes, Stack size 16 btyes, Obj/hwtimer_hwtimer.o(.text.rt_device_hwtimer_register))<br>
<br>[Stack]<ul><li>Max Depth = 240 
<li>Call Chain = rt_device_hwtimer_register &rArr; rt_device_register &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_timers_init
</ul>
<p><strong><a name="[251]"></a>rt_i2c_core_init</strong>(4 bytes, Stack size 0 btyes, Obj/i2c_i2c_core.o(.text.rt_i2c_core_init))<br>
<p><strong><a name="[252]"></a>rt_i2c_bus_device_register</strong>(40 bytes, Stack size 12 btyes, Obj/i2c_i2c_core.o(.text.rt_i2c_bus_device_register))<br>
<br>[Stack]<ul><li>Max Depth = 252 
<li>Call Chain = rt_i2c_bus_device_register &rArr; rt_i2c_bus_device_device_init &rArr; rt_device_register  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<li><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_device_init
</ul>
<br>[Called By]<ul>
<li><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_i2c_init
</ul>
<p><strong><a name="[253]"></a>rt_i2c_bus_device_find</strong>(24 bytes, Stack size 4 btyes, Obj/i2c_i2c_core.o(.text.rt_i2c_bus_device_find))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = rt_i2c_bus_device_find &rArr; rt_device_find &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</ul>
<br>[Called By]<ul>
<li><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_24aa128_init
</ul>
<p><strong><a name="[254]"></a>rt_i2c_transfer</strong>(60 bytes, Stack size 20 btyes, Obj/i2c_i2c_core.o(.text.rt_i2c_transfer))<br>
<br>[Stack]<ul><li>Max Depth = 332 
<li>Call Chain = rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<br>[Called By]<ul>
<li><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_send
<li><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_recv
<li><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_control
<li><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_eeprom_read
<li><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_eeprom_write
</ul>
<p><strong><a name="[255]"></a>rt_i2c_master_send</strong>(42 bytes, Stack size 20 btyes, Obj/i2c_i2c_core.o(.text.rt_i2c_master_send))<br>
<br>[Stack]<ul><li>Max Depth = 352 
<li>Call Chain = rt_i2c_master_send &rArr; rt_i2c_transfer &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
</ul>
<br>[Called By]<ul>
<li><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_write
</ul>
<p><strong><a name="[256]"></a>rt_i2c_master_recv</strong>(108 bytes, Stack size 36 btyes, Obj/i2c_i2c_core.o(.text.rt_i2c_master_recv))<br>
<br>[Stack]<ul><li>Max Depth = 368 
<li>Call Chain = rt_i2c_master_recv &rArr; rt_i2c_transfer &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_read
</ul>
<p><strong><a name="[25a]"></a>rt_i2c_bus_device_device_init</strong>(62 bytes, Stack size 16 btyes, Obj/i2c_i2c_dev.o(.text.rt_i2c_bus_device_device_init))<br>
<br>[Stack]<ul><li>Max Depth = 240 
<li>Call Chain = rt_i2c_bus_device_device_init &rArr; rt_device_register &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_register
</ul>
<p><strong><a name="[262]"></a>rt_i2c_bit_add_bus</strong>(12 bytes, Stack size 0 btyes, Obj/i2c_i2c-bit-ops.o(.text.rt_i2c_bit_add_bus))<br>
<p><strong><a name="[266]"></a>eeprom_24aa128_init</strong>(104 bytes, Stack size 12 btyes, Obj/i2c_i2c_eeprom.o(.text.eeprom_24aa128_init))<br>
<br>[Stack]<ul><li>Max Depth = 236 
<li>Call Chain = eeprom_24aa128_init &rArr; rt_device_register &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<li><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_find
<li><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[26b]"></a>rt_pin_mode</strong>(40 bytes, Stack size 16 btyes, Obj/misc_pin.o(.text.rt_pin_mode))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = rt_pin_mode &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[26c]"></a>rt_pin_write</strong>(40 bytes, Stack size 16 btyes, Obj/misc_pin.o(.text.rt_pin_write))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = rt_pin_write &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[26d]"></a>rt_pin_read</strong>(44 bytes, Stack size 12 btyes, Obj/misc_pin.o(.text.rt_pin_read))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = rt_pin_read &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[270]"></a>rt_device_pin_register</strong>(66 bytes, Stack size 8 btyes, Obj/misc_pin.o(.text.rt_device_pin_register))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = rt_device_pin_register &rArr; rt_device_register &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</ul>
<br>[Called By]<ul>
<li><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_init
</ul>
<p><strong><a name="[271]"></a>rt_pin_attach_irq</strong>(98 bytes, Stack size 0 btyes, Obj/misc_pin.o(.text.rt_pin_attach_irq))<br>
<p><strong><a name="[272]"></a>rt_pin_detach_irq</strong>(44 bytes, Stack size 0 btyes, Obj/misc_pin.o(.text.rt_pin_detach_irq))<br>
<p><strong><a name="[273]"></a>rt_pin_irq_enable</strong>(48 bytes, Stack size 0 btyes, Obj/misc_pin.o(.text.rt_pin_irq_enable))<br>
<p><strong><a name="[274]"></a>set_date</strong>(90 bytes, Stack size 64 btyes, Obj/rtc_rtc.o(.text.set_date))<br>
<br>[Stack]<ul><li>Max Depth = 308 
<li>Call Chain = set_date &rArr; localtime &rArr; localtime_r  &rArr; gettimeofday  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<li><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<li><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<li><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</ul>
<br>[Called By]<ul>
<li><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<li><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_to_rtc
</ul>
<p><strong><a name="[275]"></a>set_time</strong>(84 bytes, Stack size 64 btyes, Obj/rtc_rtc.o(.text.set_time))<br>
<br>[Stack]<ul><li>Max Depth = 308 
<li>Call Chain = set_time &rArr; localtime &rArr; localtime_r  &rArr; gettimeofday  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<li><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<li><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<li><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</ul>
<br>[Called By]<ul>
<li><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<li><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_to_rtc
</ul>
<p><strong><a name="[277]"></a>list_date</strong>(30 bytes, Stack size 8 btyes, Obj/rtc_rtc.o(.text.list_date))<br>
<br>[Stack]<ul><li>Max Depth = 252 
<li>Call Chain = list_date &rArr; ctime &rArr; localtime_r  &rArr; gettimeofday  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<li><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[278]"></a>rt_rtc_ntp_sync_init</strong>(64 bytes, Stack size 20 btyes, Obj/rtc_rtc.o(.text.rt_rtc_ntp_sync_init))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = rt_rtc_ntp_sync_init &rArr; rt_thread_create &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<li><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</ul>
<p><strong><a name="[27a]"></a>rt_soft_rtc_init</strong>(126 bytes, Stack size 52 btyes, Obj/rtc_soft_rtc.o(.text.rt_soft_rtc_init))<br>
<br>[Stack]<ul><li>Max Depth = 276 
<li>Call Chain = rt_soft_rtc_init &rArr; rt_device_register &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<li><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<li><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</ul>
<p><strong><a name="[27e]"></a>rt_ata_register</strong>(76 bytes, Stack size 20 btyes, Obj/sata_sata.o(.text.rt_ata_register))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = rt_ata_register &rArr; rt_device_register &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_register
</ul>
<p><strong><a name="[291]"></a>rt_hw_serial_register</strong>(80 bytes, Stack size 20 btyes, Obj/serial_serial.o(.text.rt_hw_serial_register))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_init
</ul>
<p><strong><a name="[292]"></a>rt_hw_serial_isr</strong>(478 bytes, Stack size 36 btyes, Obj/serial_serial.o(.text.rt_hw_serial_isr))<br>
<br>[Stack]<ul><li>Max Depth = 336 
<li>Call Chain = rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<li><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<li><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_calc_recved_len
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_irq_handler
<li><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_irq_handler
</ul>
<p><strong><a name="[293]"></a>rt_spi_bus_register</strong>(38 bytes, Stack size 20 btyes, Obj/spi_spi_core.o(.text.rt_spi_bus_register))<br>
<br>[Stack]<ul><li>Max Depth = 256 
<li>Call Chain = rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
<li><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
</ul>
<br>[Called By]<ul>
<li><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_init
</ul>
<p><strong><a name="[294]"></a>rt_spi_bus_attach_device</strong>(70 bytes, Stack size 16 btyes, Obj/spi_spi_core.o(.text.rt_spi_bus_attach_device))<br>
<br>[Stack]<ul><li>Max Depth = 252 
<li>Call Chain = rt_spi_bus_attach_device &rArr; rt_spidev_device_init &rArr; rt_device_register  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spidev_device_init
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</ul>
<br>[Called By]<ul>
<li><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp3202_init
</ul>
<p><strong><a name="[295]"></a>rt_spi_configure</strong>(96 bytes, Stack size 12 btyes, Obj/spi_spi_core.o(.text.rt_spi_configure))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = rt_spi_configure &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp3202_init
</ul>
<p><strong><a name="[296]"></a>rt_spi_send_then_send</strong>(210 bytes, Stack size 0 btyes, Obj/spi_spi_core.o(.text.rt_spi_send_then_send))<br>
<p><strong><a name="[297]"></a>rt_spi_send_then_recv</strong>(210 bytes, Stack size 0 btyes, Obj/spi_spi_core.o(.text.rt_spi_send_then_recv))<br>
<p><strong><a name="[298]"></a>rt_spi_transfer</strong>(182 bytes, Stack size 44 btyes, Obj/spi_spi_core.o(.text.rt_spi_transfer))<br>
<br>[Stack]<ul><li>Max Depth = 356 
<li>Call Chain = rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_write
<li><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_read
<li><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_write
<li><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_read
</ul>
<p><strong><a name="[299]"></a>rt_spi_transfer_message</strong>(150 bytes, Stack size 12 btyes, Obj/spi_spi_core.o(.text.rt_spi_transfer_message))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp3202_adc_read
</ul>
<p><strong><a name="[29a]"></a>rt_spi_take_bus</strong>(134 bytes, Stack size 0 btyes, Obj/spi_spi_core.o(.text.rt_spi_take_bus))<br>
<p><strong><a name="[29b]"></a>rt_spi_release_bus</strong>(74 bytes, Stack size 0 btyes, Obj/spi_spi_core.o(.text.rt_spi_release_bus))<br>
<p><strong><a name="[29c]"></a>rt_spi_take</strong>(84 bytes, Stack size 0 btyes, Obj/spi_spi_core.o(.text.rt_spi_take))<br>
<p><strong><a name="[29d]"></a>rt_spi_release</strong>(84 bytes, Stack size 0 btyes, Obj/spi_spi_core.o(.text.rt_spi_release))<br>
<p><strong><a name="[2a4]"></a>rt_spi_bus_device_init</strong>(58 bytes, Stack size 12 btyes, Obj/spi_spi_dev.o(.text.rt_spi_bus_device_init))<br>
<br>[Stack]<ul><li>Max Depth = 236 
<li>Call Chain = rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
</ul>
<p><strong><a name="[2a5]"></a>rt_spidev_device_init</strong>(58 bytes, Stack size 12 btyes, Obj/spi_spi_dev.o(.text.rt_spidev_device_init))<br>
<br>[Stack]<ul><li>Max Depth = 236 
<li>Call Chain = rt_spidev_device_init &rArr; rt_device_register &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
</ul>
<p><strong><a name="[2a9]"></a>mcp3202_init</strong>(164 bytes, Stack size 24 btyes, Obj/spi_spi_adc.o(.text.mcp3202_init))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = mcp3202_init &rArr; rt_spi_configure &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<li><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pin_mux_set
<li><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
<li><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<li><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[2b1]"></a>rt_hw_watchdog_register</strong>(72 bytes, Stack size 20 btyes, Obj/watchdog_watchdog.o(.text.rt_hw_watchdog_register))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = rt_hw_watchdog_register &rArr; rt_device_register &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_wdt_init
</ul>
<p><strong><a name="[2b2]"></a>rt_completion_init</strong>(40 bytes, Stack size 8 btyes, Obj/src_completion.o(.text.rt_completion_init))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = rt_completion_init &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</ul>
<p><strong><a name="[2b3]"></a>rt_completion_wait</strong>(212 bytes, Stack size 24 btyes, Obj/src_completion.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 268 
<li>Call Chain = rt_completion_wait &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<li><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</ul>
<p><strong><a name="[2b4]"></a>rt_completion_done</strong>(70 bytes, Stack size 12 btyes, Obj/src_completion.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 256 
<li>Call Chain = rt_completion_done &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</ul>
<p><strong><a name="[2b5]"></a>rt_data_queue_init</strong>(78 bytes, Stack size 20 btyes, Obj/src_dataqueue.o(.text.rt_data_queue_init))<br>
<br>[Stack]<ul><li>Max Depth = 328 
<li>Call Chain = rt_data_queue_init &rArr; rt_malloc &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</ul>
<p><strong><a name="[2b6]"></a>rt_data_queue_push</strong>(310 bytes, Stack size 56 btyes, Obj/src_dataqueue.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 300 
<li>Call Chain = rt_data_queue_push &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<li><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<li><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</ul>
<br>[Called By]<ul>
<li><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</ul>
<p><strong><a name="[2b7]"></a>rt_data_queue_pop</strong>(384 bytes, Stack size 56 btyes, Obj/src_dataqueue.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 300 
<li>Call Chain = rt_data_queue_pop &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<li><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<li><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</ul>
<br>[Called By]<ul>
<li><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</ul>
<p><strong><a name="[2b8]"></a>rt_data_queue_peak</strong>(116 bytes, Stack size 16 btyes, Obj/src_dataqueue.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = rt_data_queue_peak &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</ul>
<p><strong><a name="[2b9]"></a>rt_data_queue_reset</strong>(102 bytes, Stack size 20 btyes, Obj/src_dataqueue.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 264 
<li>Call Chain = rt_data_queue_reset &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</ul>
<p><strong><a name="[2ba]"></a>rt_pipe_control</strong>(4 bytes, Stack size 0 btyes, Obj/src_pipe.o(.fast))<br>
<p><strong><a name="[2bb]"></a>rt_pipe_create</strong>(148 bytes, Stack size 0 btyes, Obj/src_pipe.o(.text.rt_pipe_create))<br>
<p><strong><a name="[2bc]"></a>rt_pipe_open</strong>(56 bytes, Stack size 0 btyes, Obj/src_pipe.o(.fast))<br>
<p><strong><a name="[2be]"></a>rt_pipe_close</strong>(56 bytes, Stack size 0 btyes, Obj/src_pipe.o(.fast))<br>
<p><strong><a name="[2c4]"></a>rt_pipe_read</strong>(88 bytes, Stack size 0 btyes, Obj/src_pipe.o(.fast))<br>
<p><strong><a name="[2c5]"></a>rt_pipe_write</strong>(88 bytes, Stack size 0 btyes, Obj/src_pipe.o(.fast))<br>
<p><strong><a name="[2c6]"></a>rt_pipe_delete</strong>(70 bytes, Stack size 0 btyes, Obj/src_pipe.o(.fast))<br>
<p><strong><a name="[2c7]"></a>pipe</strong>(98 bytes, Stack size 0 btyes, Obj/src_pipe.o(.fast))<br>
<p><strong><a name="[2c8]"></a>mkfifo</strong>(20 bytes, Stack size 0 btyes, Obj/src_pipe.o(.fast))<br>
<p><strong><a name="[2c9]"></a>rt_ringbuffer_init</strong>(82 bytes, Stack size 0 btyes, Obj/src_ringbuffer.o(.text.rt_ringbuffer_init))<br>
<p><strong><a name="[2ca]"></a>rt_ringbuffer_putchar_force</strong>(160 bytes, Stack size 0 btyes, Obj/src_ringbuffer.o(.fast))<br>
<p><strong><a name="[2cb]"></a>rt_ringbuffer_create</strong>(72 bytes, Stack size 0 btyes, Obj/src_ringbuffer.o(.text.rt_ringbuffer_create))<br>
<p><strong><a name="[2cc]"></a>rt_ringbuffer_destroy</strong>(36 bytes, Stack size 0 btyes, Obj/src_ringbuffer.o(.text.rt_ringbuffer_destroy))<br>
<p><strong><a name="[2cd]"></a>rt_ringbuffer_data_len</strong>(60 bytes, Stack size 0 btyes, Obj/src_ringbuffer.o(.fast))<br>
<p><strong><a name="[2ce]"></a>rt_ringbuffer_put</strong>(156 bytes, Stack size 0 btyes, Obj/src_ringbuffer.o(.fast))<br>
<p><strong><a name="[2cf]"></a>rt_ringbuffer_put_force</strong>(212 bytes, Stack size 0 btyes, Obj/src_ringbuffer.o(.fast))<br>
<p><strong><a name="[2d0]"></a>rt_ringbuffer_get</strong>(158 bytes, Stack size 0 btyes, Obj/src_ringbuffer.o(.fast))<br>
<p><strong><a name="[2d1]"></a>rt_ringbuffer_putchar</strong>(108 bytes, Stack size 0 btyes, Obj/src_ringbuffer.o(.fast))<br>
<p><strong><a name="[2d2]"></a>rt_ringbuffer_getchar</strong>(130 bytes, Stack size 0 btyes, Obj/src_ringbuffer.o(.fast))<br>
<p><strong><a name="[2d3]"></a>rt_ringbuffer_reset</strong>(58 bytes, Stack size 0 btyes, Obj/src_ringbuffer.o(.fast))<br>
<p><strong><a name="[2d4]"></a>__wqueue_default_wake</strong>(4 bytes, Stack size 0 btyes, Obj/src_waitqueue.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wqueue_pollwake
</ul>
<p><strong><a name="[2d5]"></a>rt_wqueue_add</strong>(30 bytes, Stack size 12 btyes, Obj/src_waitqueue.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</ul>
<br>[Called By]<ul>
<li><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_poll_add
</ul>
<p><strong><a name="[2d6]"></a>rt_wqueue_remove</strong>(30 bytes, Stack size 8 btyes, Obj/src_waitqueue.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</ul>
<br>[Called By]<ul>
<li><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
<li><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<li><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
</ul>
<p><strong><a name="[2d7]"></a>rt_wqueue_wakeup</strong>(76 bytes, Stack size 24 btyes, Obj/src_waitqueue.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 268 
<li>Call Chain = rt_wqueue_wakeup &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</ul>
<br>[Called By]<ul>
<li><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_isr
<li><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<li><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_rx_ind
</ul>
<p><strong><a name="[2d8]"></a>rt_wqueue_wait</strong>(202 bytes, Stack size 48 btyes, Obj/src_waitqueue.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 292 
<li>Call Chain = rt_wqueue_wait &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<li><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<li><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<li><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_cmd_pending_check
<li><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_read
</ul>
<p><strong><a name="[2da]"></a>rt_workqueue_create</strong>(86 bytes, Stack size 0 btyes, Obj/src_workqueue.o(.fast))<br>
<p><strong><a name="[2db]"></a>rt_workqueue_destroy</strong>(36 bytes, Stack size 0 btyes, Obj/src_workqueue.o(.fast))<br>
<p><strong><a name="[2dc]"></a>rt_workqueue_dowork</strong>(114 bytes, Stack size 0 btyes, Obj/src_workqueue.o(.fast))<br>
<p><strong><a name="[2dd]"></a>rt_workqueue_critical_work</strong>(114 bytes, Stack size 0 btyes, Obj/src_workqueue.o(.fast))<br>
<p><strong><a name="[2de]"></a>rt_workqueue_cancel_work</strong>(80 bytes, Stack size 0 btyes, Obj/src_workqueue.o(.fast))<br>
<p><strong><a name="[2df]"></a>rt_workqueue_cancel_work_sync</strong>(88 bytes, Stack size 0 btyes, Obj/src_workqueue.o(.fast))<br>
<p><strong><a name="[2e0]"></a>rt_workqueue_cancel_all_work</strong>(100 bytes, Stack size 0 btyes, Obj/src_workqueue.o(.fast))<br>
<p><strong><a name="[2e2]"></a>finsh_system_init</strong>(162 bytes, Stack size 24 btyes, Obj/finsh_shell.o(.text.finsh_system_init))<br>
<br>[Stack]<ul><li>Max Depth = 352 
<li>Call Chain = finsh_system_init &rArr; rt_thread_create &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<li><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<li><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<li><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[2e3]"></a>finsh_set_prompt</strong>(52 bytes, Stack size 0 btyes, Obj/finsh_shell.o(.text.finsh_set_prompt))<br>
<p><strong><a name="[2e4]"></a>finsh_get_prompt</strong>(126 bytes, Stack size 12 btyes, Obj/finsh_shell.o(.text.finsh_get_prompt))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = finsh_get_prompt &rArr; getcwd &rArr; rt_enter_critical  </ul>
<br>[Calls]<ul>
<li><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<li><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_is_used
<li><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<li><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</ul>
<br>[Called By]<ul>
<li><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<li><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</ul>
<p><strong><a name="[2e6]"></a>finsh_get_prompt_mode</strong>(42 bytes, Stack size 0 btyes, Obj/finsh_shell.o(.text.finsh_get_prompt_mode))<br>
<p><strong><a name="[2e7]"></a>finsh_set_prompt_mode</strong>(52 bytes, Stack size 0 btyes, Obj/finsh_shell.o(.text.finsh_set_prompt_mode))<br>
<p><strong><a name="[2e8]"></a>finsh_set_device</strong>(134 bytes, Stack size 20 btyes, Obj/finsh_shell.o(.text.finsh_set_device))<br>
<br>[Stack]<ul><li>Max Depth = 224 
<li>Call Chain = finsh_set_device &rArr; rt_device_find &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<li><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<li><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</ul>
<p><strong><a name="[2e9]"></a>finsh_thread_entry</strong>(1188 bytes, Stack size 52 btyes, Obj/finsh_shell.o(.text.finsh_thread_entry))<br>
<br>[Stack]<ul><li>Max Depth = 568 
<li>Call Chain = finsh_thread_entry &rArr; msh_exec &rArr; chdir  &rArr; opendir  &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memmove
<li><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_is_used
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<li><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<li><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<li><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</ul>
<p><strong><a name="[2ea]"></a>finsh_get_device</strong>(34 bytes, Stack size 0 btyes, Obj/finsh_shell.o(.text.finsh_get_device))<br>
<p><strong><a name="[2eb]"></a>finsh_set_echo</strong>(52 bytes, Stack size 0 btyes, Obj/finsh_shell.o(.text.finsh_set_echo))<br>
<p><strong><a name="[2ec]"></a>finsh_get_echo</strong>(42 bytes, Stack size 0 btyes, Obj/finsh_shell.o(.text.finsh_get_echo))<br>
<p><strong><a name="[2ed]"></a>finsh_system_function_init</strong>(10 bytes, Stack size 0 btyes, Obj/finsh_shell.o(.text.finsh_system_function_init))<br>
<p><strong><a name="[2ee]"></a>finsh_system_var_init</strong>(10 bytes, Stack size 0 btyes, Obj/finsh_shell.o(.text.finsh_system_var_init))<br>
<p><strong><a name="[2ef]"></a>hello</strong>(12 bytes, Stack size 4 btyes, Obj/finsh_cmd.o(.text.hello))<br>
<br>[Stack]<ul><li>Max Depth = 176 
<li>Call Chain = hello &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[2f1]"></a>version</strong>(10 bytes, Stack size 4 btyes, Obj/finsh_cmd.o(.text.version))<br>
<br>[Stack]<ul><li>Max Depth = 184 
<li>Call Chain = version &rArr; rt_show_version &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
</ul>
<p><strong><a name="[2f3]"></a>list_thread</strong>(260 bytes, Stack size 56 btyes, Obj/finsh_cmd.o(.text.list_thread))<br>
<br>[Stack]<ul><li>Max Depth = 228 
<li>Call Chain = list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</ul>
<br>[Called By]<ul>
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ps
</ul>
<p><strong><a name="[2f4]"></a>list_sem</strong>(166 bytes, Stack size 40 btyes, Obj/finsh_cmd.o(.text.list_sem))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = list_sem &rArr; show_wait_queue &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<li><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
</ul>
<p><strong><a name="[2f5]"></a>list_event</strong>(162 bytes, Stack size 40 btyes, Obj/finsh_cmd.o(.text.list_event))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = list_event &rArr; show_wait_queue &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<li><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
</ul>
<p><strong><a name="[2f6]"></a>list_mutex</strong>(140 bytes, Stack size 40 btyes, Obj/finsh_cmd.o(.text.list_mutex))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = list_mutex &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<li><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[2f7]"></a>list_mailbox</strong>(178 bytes, Stack size 44 btyes, Obj/finsh_cmd.o(.text.list_mailbox))<br>
<br>[Stack]<ul><li>Max Depth = 236 
<li>Call Chain = list_mailbox &rArr; show_wait_queue &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<li><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
</ul>
<p><strong><a name="[2f8]"></a>list_msgqueue</strong>(166 bytes, Stack size 40 btyes, Obj/finsh_cmd.o(.text.list_msgqueue))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = list_msgqueue &rArr; show_wait_queue &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<li><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
</ul>
<p><strong><a name="[2f9]"></a>list_memheap</strong>(108 bytes, Stack size 36 btyes, Obj/finsh_cmd.o(.text.list_memheap))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = list_memheap &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<li><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[2fa]"></a>list_device</strong>(136 bytes, Stack size 116 btyes, Obj/finsh_cmd.o(.text.list_device))<br>
<br>[Stack]<ul><li>Max Depth = 288 
<li>Call Chain = list_device &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[2fb]"></a>list_timer</strong>(158 bytes, Stack size 40 btyes, Obj/finsh_cmd.o(.text.list_timer))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = list_timer &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<li><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</ul>
<p><strong><a name="[2fc]"></a>list</strong>(74 bytes, Stack size 24 btyes, Obj/finsh_cmd.o(.text.list))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = list &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</ul>
<p><strong><a name="[2fd]"></a>msh_help</strong>(80 bytes, Stack size 24 btyes, Obj/finsh_msh.o(.text.msh_help))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = msh_help &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</ul>
<br>[Called By]<ul>
<li><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</ul>
<p><strong><a name="[2fe]"></a>msh_is_used</strong>(4 bytes, Stack size 0 btyes, Obj/finsh_msh.o(.text.msh_is_used))<br>
<br>[Called By]<ul>
<li><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<li><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</ul>
<p><strong><a name="[2ff]"></a>msh_exec</strong>(498 bytes, Stack size 76 btyes, Obj/finsh_msh.o(.text.msh_exec))<br>
<br>[Stack]<ul><li>Max Depth = 516 
<li>Call Chain = msh_exec &rArr; chdir &rArr; opendir  &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<li><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<li><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<li><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
</ul>
<p><strong><a name="[300]"></a>msh_auto_complete_path</strong>(436 bytes, Stack size 28 btyes, Obj/finsh_msh.o(.text.msh_auto_complete_path))<br>
<br>[Stack]<ul><li>Max Depth = 456 
<li>Call Chain = msh_auto_complete_path &rArr; opendir &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<li><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<li><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<li><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
</ul>
<br>[Called By]<ul>
<li><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</ul>
<p><strong><a name="[301]"></a>msh_auto_complete</strong>(236 bytes, Stack size 44 btyes, Obj/finsh_msh.o(.text.msh_auto_complete))<br>
<br>[Stack]<ul><li>Max Depth = 500 
<li>Call Chain = msh_auto_complete &rArr; msh_auto_complete_path &rArr; opendir  &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<li><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<li><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<li><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
</ul>
<br>[Called By]<ul>
<li><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</ul>
<p><strong><a name="[302]"></a>cmd_time</strong>(4 bytes, Stack size 0 btyes, Obj/finsh_msh_cmd.o(.text.cmd_time))<br>
<p><strong><a name="[303]"></a>cmd_ls</strong>(26 bytes, Stack size 4 btyes, Obj/finsh_msh_cmd.o(.text.cmd_ls))<br>
<br>[Stack]<ul><li>Max Depth = 524 
<li>Call Chain = cmd_ls &rArr; ls &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
</ul>
<p><strong><a name="[304]"></a>cmd_pwd</strong>(14 bytes, Stack size 4 btyes, Obj/finsh_msh_cmd.o(.text.cmd_pwd))<br>
<br>[Stack]<ul><li>Max Depth = 176 
<li>Call Chain = cmd_pwd &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[305]"></a>cmd_mkfs</strong>(72 bytes, Stack size 8 btyes, Obj/finsh_msh_cmd.o(.text.cmd_mkfs))<br>
<br>[Stack]<ul><li>Max Depth = 352 
<li>Call Chain = cmd_mkfs &rArr; dfs_mkfs &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
</ul>
<p><strong><a name="[306]"></a>cmd_ifconfig</strong>(136 bytes, Stack size 8 btyes, Obj/finsh_msh_cmd.o(.text.cmd_ifconfig))<br>
<br>[Stack]<ul><li>Max Depth = 384 
<li>Call Chain = cmd_ifconfig &rArr; set_if &rArr; netifapi_netif_set_addr  &rArr; tcpip_api_call  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
<li><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
</ul>
<p><strong><a name="[307]"></a>cmd_netstat</strong>(14 bytes, Stack size 4 btyes, Obj/finsh_msh_cmd.o(.text.cmd_netstat))<br>
<br>[Stack]<ul><li>Max Depth = 256 
<li>Call Chain = cmd_netstat &rArr; list_tcps &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<li><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
</ul>
<p><strong><a name="[308]"></a>cmd_ps</strong>(10 bytes, Stack size 4 btyes, Obj/finsh_msh_cmd.o(.text.cmd_ps))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = cmd_ps &rArr; list_thread &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</ul>
<p><strong><a name="[309]"></a>cmd_free</strong>(10 bytes, Stack size 4 btyes, Obj/finsh_msh_cmd.o(.text.cmd_free))<br>
<br>[Stack]<ul><li>Max Depth = 180 
<li>Call Chain = cmd_free &rArr; list_mem &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mem
</ul>
<p><strong><a name="[30a]"></a>cmd_cp</strong>(36 bytes, Stack size 4 btyes, Obj/finsh_msh_cmd.o(.text.cmd_cp))<br>
<br>[Stack]<ul><li>Max Depth = 540 
<li>Call Chain = cmd_cp &rArr; copy &rArr; copyfile  &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</ul>
<p><strong><a name="[30b]"></a>cmd_rm</strong>(48 bytes, Stack size 16 btyes, Obj/finsh_msh_cmd.o(.text.cmd_rm))<br>
<br>[Stack]<ul><li>Max Depth = 416 
<li>Call Chain = cmd_rm &rArr; unlink &rArr; rmdir  &rArr; dfs_file_unlink  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[30c]"></a>cmd_mv</strong>(198 bytes, Stack size 20 btyes, Obj/finsh_msh_cmd.o(.text.cmd_mv))<br>
<br>[Stack]<ul><li>Max Depth = 464 
<li>Call Chain = cmd_mv &rArr; open &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<li><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<li><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
</ul>
<p><strong><a name="[30d]"></a>cmd_cat</strong>(48 bytes, Stack size 16 btyes, Obj/finsh_msh_cmd.o(.text.cmd_cat))<br>
<br>[Stack]<ul><li>Max Depth = 528 
<li>Call Chain = cmd_cat &rArr; cat &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[30e]"></a>cmd_cd</strong>(46 bytes, Stack size 8 btyes, Obj/finsh_msh_cmd.o(.text.cmd_cd))<br>
<br>[Stack]<ul><li>Max Depth = 448 
<li>Call Chain = cmd_cd &rArr; chdir &rArr; opendir  &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[30f]"></a>cmd_mkdir</strong>(36 bytes, Stack size 4 btyes, Obj/finsh_msh_cmd.o(.text.cmd_mkdir))<br>
<br>[Stack]<ul><li>Max Depth = 432 
<li>Call Chain = cmd_mkdir &rArr; mkdir &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[310]"></a>cmd_df</strong>(62 bytes, Stack size 8 btyes, Obj/finsh_msh_cmd.o(.text.cmd_df))<br>
<br>[Stack]<ul><li>Max Depth = 424 
<li>Call Chain = cmd_df &rArr; df &rArr; dfs_statfs  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
</ul>
<p><strong><a name="[311]"></a>cmd_echo</strong>(88 bytes, Stack size 12 btyes, Obj/finsh_msh_cmd.o(.text.cmd_echo))<br>
<br>[Stack]<ul><li>Max Depth = 456 
<li>Call Chain = cmd_echo &rArr; open &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<li><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</ul>
<p><strong><a name="[312]"></a>cmd_dns</strong>(86 bytes, Stack size 12 btyes, Obj/finsh_msh_cmd.o(.text.cmd_dns))<br>
<br>[Stack]<ul><li>Max Depth = 272 
<li>Call Chain = cmd_dns &rArr; set_dns &rArr; ip4addr_aton  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_getserver
<li><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<li><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dns
</ul>
<p><strong><a name="[313]"></a>msh_exec_script</strong>(348 bytes, Stack size 32 btyes, Obj/finsh_msh_file.o(.text.msh_exec_script))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = msh_exec_script &rArr; open &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<li><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<li><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<li><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<li><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
</ul>
<p><strong><a name="[314]"></a>malloc</strong>(14 bytes, Stack size 0 btyes, cklib_malloc.o(.text.malloc))<br>
<br>[Called By]<ul>
<li><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<li><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
<li><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
<li><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_wrap
<li><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt_wrap
<li><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_create
<li><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_create
<li><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_create
</ul>
<p><strong><a name="[315]"></a>free</strong>(14 bytes, Stack size 0 btyes, cklib_malloc.o(.text.free))<br>
<br>[Called By]<ul>
<li><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<li><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
<li><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
<li><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_client
<li><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hba_reset
<li><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<li><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<li><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<li><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<li><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_ctx_free
<li><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_ctx_free
<li><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm4_ctx_free
<li><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_ctx_free
<li><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_free
<li><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_free
<li><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<li><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<li><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_ctx_free
<li><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_free
<li><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_free
<li><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_ctx_free
<li><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<li><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<li><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_free_wrap
<li><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_free_wrap
<li><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_free_wrap
<li><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sm2_free_wrap
<li><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_wrap
<li><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt_wrap
<li><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<li><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<li><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_cache_get
<li><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_cache_set
<li><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_cache_free
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_flight_free
<li><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<li><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
<li><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<li><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
<li><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<li><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<li><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<li><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<li><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
<li><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<li><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
<li><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<li><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
<li><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<li><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<li><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_destroy
<li><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_destroy
<li><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_destroy
</ul>
<p><strong><a name="[316]"></a>realloc</strong>(44 bytes, Stack size 0 btyes, cklib_malloc.o(.text.realloc))<br>
<p><strong><a name="[317]"></a>calloc</strong>(34 bytes, Stack size 0 btyes, cklib_malloc.o(.text.calloc))<br>
<br>[Called By]<ul>
<li><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_client
<li><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hba_reset
<li><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_sequence_of
<li><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<li><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<li><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_ctx_alloc
<li><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_ctx_alloc
<li><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm4_ctx_alloc
<li><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_ctx_alloc
<li><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_alloc
<li><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_alloc
<li><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_starts
<li><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<li><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_ctx_alloc
<li><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_alloc
<li><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_alloc
<li><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_ctx_alloc
<li><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<li><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alloc_wrap
<li><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_alloc_wrap
<li><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_alloc_wrap
<li><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sm2_alloc_wrap
<li><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<li><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<li><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_cache_get
<li><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_cache_set
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_hello
<li><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_append_key_cert
<li><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<li><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
<li><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<li><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<li><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<li><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<li><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
<li><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
<li><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</ul>
<p><strong><a name="[318]"></a>strcpy</strong>(24 bytes, Stack size 12 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<li><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</ul>
<br>[Called By]<ul>
<li><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
<li><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<li><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<li><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_test
<li><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_webnet
</ul>
<p><strong><a name="[103]"></a>strncpy</strong>(8 bytes, Stack size 4 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</ul>
<br>[Called By]<ul>
<li><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<li><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<li><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_open
<li><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_rename
<li><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<li><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname
</ul>
<p><strong><a name="[319]"></a>strlcpy</strong>(92 bytes, Stack size 0 btyes, Obj/minilibc_string.o(.fast))<br>
<p><strong><a name="[31a]"></a>strcmp</strong>(34 bytes, Stack size 0 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<li><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<li><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf
<li><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
<li><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<li><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<li><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<li><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkfs
<li><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_df
<li><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_crypto_test
<li><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_auth_set
<li><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_auth
</ul>
<p><strong><a name="[105]"></a>strncmp</strong>(70 bytes, Stack size 0 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
<li><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_get_ipv4
<li><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<li><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
<li><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<li><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<li><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<li><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<li><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_snprintf
<li><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
<li><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_request_get_query
<li><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_asp_dofile
</ul>
<p><strong><a name="[31b]"></a>strcat</strong>(34 bytes, Stack size 0 btyes, Obj/minilibc_string.o(.fast))<br>
<p><strong><a name="[31c]"></a>strncat</strong>(64 bytes, Stack size 0 btyes, Obj/minilibc_string.o(.fast))<br>
<p><strong><a name="[31d]"></a>strrchr</strong>(24 bytes, Stack size 0 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<li><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_dirindex
<li><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_name
</ul>
<p><strong><a name="[31e]"></a>strncasecmp</strong>(90 bytes, Stack size 8 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_path_with
<li><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_begin_with
<li><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_end_with
<li><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_cgi
<li><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_begin_with_strs
</ul>
<p><strong><a name="[31f]"></a>tolower</strong>(28 bytes, Stack size 0 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urldecode
</ul>
<p><strong><a name="[320]"></a>toupper</strong>(28 bytes, Stack size 0 btyes, Obj/minilibc_string.o(.fast))<br>
<p><strong><a name="[321]"></a>simple_strtoul</strong>(256 bytes, Stack size 16 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtol
<li><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsscanf
</ul>
<p><strong><a name="[322]"></a>simple_strtol</strong>(30 bytes, Stack size 4 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = simple_strtol &rArr; simple_strtoul </ul>
<br>[Calls]<ul>
<li><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoul
</ul>
<br>[Called By]<ul>
<li><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsscanf
<li><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</ul>
<p><strong><a name="[323]"></a>simple_strtoull</strong>(226 bytes, Stack size 36 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = simple_strtoull &rArr; __muldi3 </ul>
<br>[Calls]<ul>
<li><a href="#[c9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__muldi3
</ul>
<br>[Called By]<ul>
<li><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoll
<li><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsscanf
</ul>
<p><strong><a name="[324]"></a>simple_strtoll</strong>(40 bytes, Stack size 4 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 52 
<li>Call Chain = simple_strtoll &rArr; simple_strtoull &rArr; __muldi3  </ul>
<br>[Calls]<ul>
<li><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoull
</ul>
<br>[Called By]<ul>
<li><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsscanf
<li><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoll
</ul>
<p><strong><a name="[325]"></a>vsscanf</strong>(824 bytes, Stack size 44 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 96 
<li>Call Chain = vsscanf &rArr; simple_strtoll &rArr; simple_strtoull  &rArr; __muldi3  </ul>
<br>[Calls]<ul>
<li><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtol
<li><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoul
<li><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoll
<li><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoull
</ul>
<br>[Called By]<ul>
<li><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
</ul>
<p><strong><a name="[326]"></a>sscanf</strong>(28 bytes, Stack size 16 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 112 
<li>Call Chain = sscanf &rArr; vsscanf &rArr; simple_strtoll  &rArr; simple_strtoull  &rArr; __muldi3  </ul>
<br>[Calls]<ul>
<li><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsscanf
</ul>
<p><strong><a name="[327]"></a>strspn</strong>(70 bytes, Stack size 16 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</ul>
<br>[Called By]<ul>
<li><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
</ul>
<p><strong><a name="[328]"></a>strcspn</strong>(78 bytes, Stack size 12 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</ul>
<br>[Called By]<ul>
<li><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
</ul>
<p><strong><a name="[329]"></a>strtok_r</strong>(70 bytes, Stack size 16 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = strtok_r &rArr; strspn </ul>
<br>[Calls]<ul>
<li><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<li><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
</ul>
<br>[Called By]<ul>
<li><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</ul>
<p><strong><a name="[32a]"></a>strtok</strong>(10 bytes, Stack size 4 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = strtok &rArr; strtok_r &rArr; strspn  </ul>
<br>[Calls]<ul>
<li><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
</ul>
<p><strong><a name="[32b]"></a>strchr</strong>(34 bytes, Stack size 0 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
<li><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ifconfig
<li><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_test
<li><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_request_parse_method
<li><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_system_dofile
<li><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_ssi_dofile
</ul>
<p><strong><a name="[32c]"></a>strtol</strong>(8 bytes, Stack size 4 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = strtol &rArr; simple_strtol &rArr; simple_strtoul  </ul>
<br>[Calls]<ul>
<li><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtol
</ul>
<br>[Called By]<ul>
<li><a href="#[cd5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<li><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<li><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
</ul>
<p><strong><a name="[32d]"></a>strtoll</strong>(8 bytes, Stack size 4 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 56 
<li>Call Chain = strtoll &rArr; simple_strtoll &rArr; simple_strtoull  &rArr; __muldi3  </ul>
<br>[Calls]<ul>
<li><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoll
</ul>
<p><strong><a name="[32e]"></a>__isleap</strong>(46 bytes, Stack size 0 btyes, Obj/minilibc_time.o(.fast))<br>
<p><strong><a name="[32f]"></a>gmtime_r</strong>(270 bytes, Stack size 4 btyes, Obj/minilibc_time.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
</ul>
<p><strong><a name="[330]"></a>mktime</strong>(464 bytes, Stack size 40 btyes, Obj/minilibc_time.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<li><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<li><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<li><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_rtc_init
</ul>
<p><strong><a name="[331]"></a>asctime_r</strong>(222 bytes, Stack size 8 btyes, Obj/minilibc_time.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
<li><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</ul>
<p><strong><a name="[332]"></a>asctime</strong>(10 bytes, Stack size 4 btyes, Obj/minilibc_time.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = asctime &rArr; asctime_r </ul>
<br>[Calls]<ul>
<li><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime_r
</ul>
<p><strong><a name="[333]"></a>gettimeofday</strong>(64 bytes, Stack size 12 btyes, Obj/minilibc_time.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 216 
<li>Call Chain = gettimeofday &rArr; rt_device_find &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</ul>
<br>[Called By]<ul>
<li><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
</ul>
<p><strong><a name="[334]"></a>localtime_r</strong>(48 bytes, Stack size 24 btyes, Obj/minilibc_time.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 240 
<li>Call Chain = localtime_r &rArr; gettimeofday &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<li><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
</ul>
<br>[Called By]<ul>
<li><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<li><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</ul>
<p><strong><a name="[335]"></a>localtime</strong>(10 bytes, Stack size 4 btyes, Obj/minilibc_time.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = localtime &rArr; localtime_r &rArr; gettimeofday  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
</ul>
<br>[Called By]<ul>
<li><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<li><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<li><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<li><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_to_rtc
</ul>
<p><strong><a name="[336]"></a>ctime</strong>(16 bytes, Stack size 4 btyes, Obj/minilibc_time.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = ctime &rArr; localtime_r &rArr; gettimeofday  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
<li><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime_r
</ul>
<br>[Called By]<ul>
<li><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_date
<li><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<li><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync
</ul>
<p><strong><a name="[337]"></a>_gettimeofday</strong>(10 bytes, Stack size 0 btyes, Obj/minilibc_time.o(.fast))<br>
<p><strong><a name="[338]"></a>time</strong>(72 bytes, Stack size 16 btyes, Obj/minilibc_time.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 220 
<li>Call Chain = time &rArr; rt_device_find &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<li><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<li><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<li><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</ul>
<br>[Called By]<ul>
<li><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<li><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<li><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<li><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_date
<li><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<li><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_cache_get
<li><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_cache_set
<li><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
<li><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_current_time
</ul>
<p><strong><a name="[339]"></a>clock</strong>(8 bytes, Stack size 4 btyes, Obj/minilibc_time.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</ul>
<p><strong><a name="[33a]"></a>clock_time_system_init</strong>(64 bytes, Stack size 8 btyes, Obj/time_clock_time.o(.text.clock_time_system_init))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = clock_time_system_init &rArr; rt_device_find &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<li><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</ul>
<p><strong><a name="[33c]"></a>clock_time_to_tick</strong>(94 bytes, Stack size 0 btyes, Obj/time_clock_time.o(.fast))<br>
<p><strong><a name="[33d]"></a>clock_getres</strong>(56 bytes, Stack size 0 btyes, Obj/time_clock_time.o(.fast))<br>
<p><strong><a name="[33e]"></a>clock_gettime</strong>(80 bytes, Stack size 0 btyes, Obj/time_clock_time.o(.fast))<br>
<p><strong><a name="[33f]"></a>clock_settime</strong>(100 bytes, Stack size 0 btyes, Obj/time_clock_time.o(.fast))<br>
<p><strong><a name="[340]"></a>sleep</strong>(34 bytes, Stack size 0 btyes, Obj/time_posix_sleep.o(.fast))<br>
<p><strong><a name="[342]"></a>sys_init</strong>(2 bytes, Stack size 0 btyes, Obj/arch_sys_arch.o(.text.sys_init))<br>
<br>[Called By]<ul>
<li><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</ul>
<p><strong><a name="[343]"></a>sys_sem_new</strong>(100 bytes, Stack size 28 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 376 
<li>Call Chain = sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<li><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</ul>
<p><strong><a name="[344]"></a>sys_thread_new</strong>(108 bytes, Stack size 0 btyes, Obj/arch_sys_arch.o(.text.sys_thread_new))<br>
<br>[Stack]<ul><li>Max Depth = 328 
<li>Call Chain = sys_thread_new &rArr; rt_thread_create &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<li><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</ul>
<p><strong><a name="[345]"></a>lwip_system_init</strong>(132 bytes, Stack size 0 btyes, Obj/arch_sys_arch.o(.text.lwip_system_init))<br>
<br>[Stack]<ul><li>Max Depth = 392 
<li>Call Chain = lwip_system_init &rArr; tcpip_init &rArr; sys_mbox_new  &rArr; rt_mb_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init_private
<li><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<li><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<li><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<p><strong><a name="[346]"></a>lwip_sys_init</strong>(8 bytes, Stack size 0 btyes, Obj/arch_sys_arch.o(.text.lwip_sys_init))<br>
<p><strong><a name="[348]"></a>mem_init</strong>(2 bytes, Stack size 0 btyes, Obj/arch_sys_arch.o(.text.mem_init))<br>
<br>[Called By]<ul>
<li><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</ul>
<p><strong><a name="[349]"></a>mem_calloc</strong>(8 bytes, Stack size 0 btyes, Obj/arch_sys_arch.o(.text.mem_calloc))<br>
<p><strong><a name="[34a]"></a>mem_trim</strong>(2 bytes, Stack size 0 btyes, Obj/arch_sys_arch.o(.text.mem_trim))<br>
<br>[Called By]<ul>
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</ul>
<p><strong><a name="[34b]"></a>sys_sem_free</strong>(50 bytes, Stack size 12 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = sys_sem_free &rArr; rt_sem_delete &rArr; rt_object_delete  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
</ul>
<br>[Called By]<ul>
<li><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<li><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<li><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</ul>
<p><strong><a name="[34c]"></a>sys_sem_signal</strong>(10 bytes, Stack size 4 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 260 
<li>Call Chain = sys_sem_signal &rArr; rt_sem_release &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</ul>
<br>[Called By]<ul>
<li><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<li><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<li><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<li><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_dns_found
<li><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<li><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_gethostbyname
<li><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</ul>
<p><strong><a name="[34d]"></a>sys_arch_sem_wait</strong>(120 bytes, Stack size 16 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 288 
<li>Call Chain = sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<li><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<li><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<li><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<li><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<li><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
</ul>
<p><strong><a name="[34e]"></a>sys_sem_valid</strong>(4 bytes, Stack size 0 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<li><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<li><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
</ul>
<p><strong><a name="[34f]"></a>sys_sem_set_invalid</strong>(6 bytes, Stack size 0 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</ul>
<p><strong><a name="[350]"></a>sys_mutex_new</strong>(98 bytes, Stack size 24 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 368 
<li>Call Chain = sys_mutex_new &rArr; rt_mutex_create &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</ul>
<p><strong><a name="[351]"></a>sys_mutex_lock</strong>(56 bytes, Stack size 12 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</ul>
<br>[Called By]<ul>
<li><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<li><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<li><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<li><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<li><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<li><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<li><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<li><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<li><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<li><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<li><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
<li><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</ul>
<p><strong><a name="[352]"></a>sys_mutex_unlock</strong>(10 bytes, Stack size 4 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 292 
<li>Call Chain = sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<br>[Called By]<ul>
<li><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<li><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<li><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<li><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<li><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<li><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<li><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<li><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<li><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<li><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
<li><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</ul>
<p><strong><a name="[353]"></a>sys_mutex_free</strong>(52 bytes, Stack size 12 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = sys_mutex_free &rArr; rt_mutex_delete &rArr; rt_object_delete  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
</ul>
<p><strong><a name="[354]"></a>sys_mutex_valid</strong>(4 bytes, Stack size 0 btyes, Obj/arch_sys_arch.o(.fast))<br>
<p><strong><a name="[355]"></a>sys_mutex_set_invalid</strong>(6 bytes, Stack size 0 btyes, Obj/arch_sys_arch.o(.fast))<br>
<p><strong><a name="[356]"></a>sys_mbox_new</strong>(102 bytes, Stack size 28 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 376 
<li>Call Chain = sys_mbox_new &rArr; rt_mb_create &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<li><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<li><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</ul>
<p><strong><a name="[357]"></a>sys_mbox_free</strong>(52 bytes, Stack size 12 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = sys_mbox_free &rArr; rt_mb_delete &rArr; rt_object_delete  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
</ul>
<br>[Called By]<ul>
<li><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<li><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<li><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<li><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<li><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
</ul>
<p><strong><a name="[358]"></a>sys_mbox_post</strong>(132 bytes, Stack size 16 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 320 
<li>Call Chain = sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</ul>
<br>[Called By]<ul>
<li><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</ul>
<p><strong><a name="[359]"></a>sys_mbox_trypost</strong>(22 bytes, Stack size 4 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 312 
<li>Call Chain = sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</ul>
<br>[Called By]<ul>
<li><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<li><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<li><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<li><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<li><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<li><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</ul>
<p><strong><a name="[35a]"></a>sys_arch_mbox_tryfetch</strong>(34 bytes, Stack size 4 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 308 
<li>Call Chain = sys_arch_mbox_tryfetch &rArr; rt_mb_recv &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</ul>
<br>[Called By]<ul>
<li><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</ul>
<p><strong><a name="[35b]"></a>sys_mbox_valid</strong>(4 bytes, Stack size 0 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<li><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<li><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<li><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<li><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<li><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<li><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<li><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<li><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<li><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<li><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<li><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</ul>
<p><strong><a name="[35c]"></a>sys_mbox_set_invalid</strong>(6 bytes, Stack size 0 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<li><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<li><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<li><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
</ul>
<p><strong><a name="[35d]"></a>sys_arch_protect</strong>(8 bytes, Stack size 4 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</ul>
<br>[Called By]<ul>
<li><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_tx
<li><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<li><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<li><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<li><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<li><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<li><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<li><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<li><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<li><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<li><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
<li><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<li><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<li><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<li><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<li><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<li><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
<li><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<li><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_disconnect
<li><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<li><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<li><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<li><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_join_leave_group
<li><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<li><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<li><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<li><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<li><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<li><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<li><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool.isra.0
<li><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool.isra.1
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</ul>
<p><strong><a name="[35e]"></a>sys_arch_unprotect</strong>(8 bytes, Stack size 4 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</ul>
<br>[Called By]<ul>
<li><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_tx
<li><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<li><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<li><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<li><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<li><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<li><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<li><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<li><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<li><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<li><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
<li><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<li><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<li><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<li><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<li><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<li><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
<li><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<li><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_disconnect
<li><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<li><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<li><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<li><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_join_leave_group
<li><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<li><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<li><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<li><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<li><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<li><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<li><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool.isra.0
<li><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool.isra.1
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</ul>
<p><strong><a name="[35f]"></a>sys_arch_assert</strong>(36 bytes, Stack size 12 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = sys_arch_assert &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_init
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
<li><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<li><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
<li><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<li><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<li><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<li><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<li><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<li><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<li><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<li><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<li><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<li><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<li><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<li><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<li><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<li><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<li><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
<li><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<li><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<li><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<li><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<li><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<li><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<li><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<li><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<li><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<li><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<li><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<li><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<li><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<li><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<li><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<li><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<li><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<li><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<li><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<li><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<li><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<li><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<li><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<li><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<li><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<li><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<li><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<li><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<li><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<li><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<li><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<li><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<li><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool.isra.0
<li><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool.isra.1
<li><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_pool
<li><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free_pool
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<li><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<li><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<li><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<li><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dechain
<li><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<li><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<li><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<li><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<li><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<li><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<li><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<li><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<li><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<li><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<li><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<li><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<li><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<li><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<li><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<li><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<li><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<li><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<li><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcbs_sane
<li><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<li><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<li><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<li><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<li><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc.isra.0
<li><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment.isra.1
<li><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header.constprop.2
<li><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<li><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<li><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<li><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<li><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<li><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<li><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<li><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<li><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<li><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<li><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry.isra.0
<li><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_addr
<li><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_get_entry
<li><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<li><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<li><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<li><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<li><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<li><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output
<li><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<li><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<li><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<li><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<li><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<li><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<li><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<li><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<li><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<li><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<li><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short.isra.0
<li><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option.isra.1
<li><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte.isra.2
<li><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<li><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<li><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long.isra.4
<li><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<li><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
<li><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<li><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<li><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<li><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<li><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response.isra.0
<li><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<li><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group.isra.3
<li><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
<li><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<li><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<li><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<li><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</ul>
<p><strong><a name="[360]"></a>sys_arch_mbox_fetch</strong>(146 bytes, Stack size 20 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = sys_arch_mbox_fetch &rArr; rt_mb_recv &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<li><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<li><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<li><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</ul>
<p><strong><a name="[361]"></a>sys_jiffies</strong>(8 bytes, Stack size 4 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</ul>
<p><strong><a name="[362]"></a>sys_now</strong>(12 bytes, Stack size 4 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</ul>
<br>[Called By]<ul>
<li><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<li><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<li><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<li><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<li><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<li><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<li><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_restart_timeouts
<li><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<li><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
</ul>
<p><strong><a name="[363]"></a>mem_malloc</strong>(8 bytes, Stack size 4 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 312 
<li>Call Chain = mem_malloc &rArr; rt_malloc &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</ul>
<br>[Called By]<ul>
<li><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</ul>
<p><strong><a name="[364]"></a>mem_free</strong>(12 bytes, Stack size 4 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 288 
<li>Call Chain = mem_free &rArr; rt_free &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<br>[Called By]<ul>
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</ul>
<p><strong><a name="[367]"></a>netconn_new_with_proto_and_callback</strong>(188 bytes, Stack size 40 btyes, Obj/api_api_lib.o(.text.netconn_new_with_proto_and_callback))<br>
<br>[Stack]<ul><li>Max Depth = 436 
<li>Call Chain = netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_mbox_new  &rArr; rt_mb_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<li><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<li><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<li><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<li><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</ul>
<br>[Called By]<ul>
<li><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</ul>
<p><strong><a name="[368]"></a>netconn_delete</strong>(64 bytes, Stack size 36 btyes, Obj/api_api_lib.o(.text.netconn_delete))<br>
<br>[Stack]<ul><li>Max Depth = 376 
<li>Call Chain = netconn_delete &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<li><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<li><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</ul>
<br>[Called By]<ul>
<li><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<li><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<li><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</ul>
<p><strong><a name="[369]"></a>netconn_getaddr</strong>(110 bytes, Stack size 28 btyes, Obj/api_api_lib.o(.text.netconn_getaddr))<br>
<br>[Stack]<ul><li>Max Depth = 368 
<li>Call Chain = netconn_getaddr &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<li><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<li><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</ul>
<p><strong><a name="[36a]"></a>netconn_bind</strong>(68 bytes, Stack size 28 btyes, Obj/api_api_lib.o(.text.netconn_bind))<br>
<br>[Stack]<ul><li>Max Depth = 368 
<li>Call Chain = netconn_bind &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
</ul>
<p><strong><a name="[36b]"></a>netconn_connect</strong>(70 bytes, Stack size 28 btyes, Obj/api_api_lib.o(.text.netconn_connect))<br>
<br>[Stack]<ul><li>Max Depth = 368 
<li>Call Chain = netconn_connect &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</ul>
<p><strong><a name="[36c]"></a>netconn_disconnect</strong>(56 bytes, Stack size 28 btyes, Obj/api_api_lib.o(.text.netconn_disconnect))<br>
<br>[Stack]<ul><li>Max Depth = 368 
<li>Call Chain = netconn_disconnect &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</ul>
<p><strong><a name="[36d]"></a>netconn_listen_with_backlog</strong>(56 bytes, Stack size 28 btyes, Obj/api_api_lib.o(.text.netconn_listen_with_backlog))<br>
<br>[Stack]<ul><li>Max Depth = 368 
<li>Call Chain = netconn_listen_with_backlog &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
</ul>
<p><strong><a name="[36e]"></a>netconn_accept</strong>(202 bytes, Stack size 24 btyes, Obj/api_api_lib.o(.text.netconn_accept))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = netconn_accept &rArr; sys_arch_mbox_fetch &rArr; rt_mb_recv  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</ul>
<br>[Called By]<ul>
<li><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</ul>
<p><strong><a name="[36f]"></a>netconn_close</strong>(10 bytes, Stack size 0 btyes, Obj/api_api_lib.o(.text.netconn_close))<br>
<p><strong><a name="[370]"></a>netconn_shutdown</strong>(28 bytes, Stack size 0 btyes, Obj/api_api_lib.o(.text.netconn_shutdown))<br>
<p><strong><a name="[371]"></a>netconn_join_leave_group</strong>(78 bytes, Stack size 28 btyes, Obj/api_api_lib.o(.text.netconn_join_leave_group))<br>
<br>[Stack]<ul><li>Max Depth = 368 
<li>Call Chain = netconn_join_leave_group &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</ul>
<p><strong><a name="[372]"></a>netconn_gethostbyname</strong>(144 bytes, Stack size 36 btyes, Obj/api_api_lib.o(.text.netconn_gethostbyname))<br>
<br>[Stack]<ul><li>Max Depth = 412 
<li>Call Chain = netconn_gethostbyname &rArr; sys_sem_new &rArr; rt_sem_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<li><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<li><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<li><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname
<li><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
</ul>
<p><strong><a name="[373]"></a>netconn_recv_tcp_pbuf</strong>(44 bytes, Stack size 4 btyes, Obj/api_api_lib.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 416 
<li>Call Chain = netconn_recv_tcp_pbuf &rArr; netconn_recv_data &rArr; netconn_close_shutdown  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</ul>
<p><strong><a name="[374]"></a>netconn_recv</strong>(174 bytes, Stack size 20 btyes, Obj/api_api_lib.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 432 
<li>Call Chain = netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<li><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</ul>
<p><strong><a name="[375]"></a>netconn_send</strong>(58 bytes, Stack size 28 btyes, Obj/api_api_lib.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 368 
<li>Call Chain = netconn_send &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_sendto
<li><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<li><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</ul>
<p><strong><a name="[376]"></a>netconn_sendto</strong>(28 bytes, Stack size 4 btyes, Obj/api_api_lib.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 372 
<li>Call Chain = netconn_sendto &rArr; netconn_send &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
</ul>
<p><strong><a name="[377]"></a>netconn_write_partly</strong>(232 bytes, Stack size 44 btyes, Obj/api_api_lib.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 384 
<li>Call Chain = netconn_write_partly &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<li><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<li><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</ul>
<p><strong><a name="[37d]"></a>lwip_netconn_do_newconn</strong>(168 bytes, Stack size 0 btyes, Obj/api_api_msg.o(.text.lwip_netconn_do_newconn))<br>
<br>[Stack]<ul><li>Max Depth = 672 
<li>Call Chain = lwip_netconn_do_newconn &rArr; tcp_new_ip_type &rArr; tcp_alloc  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new_ip_type
<li><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_recv
<li><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
<li><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<li><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_ip_type
<li><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
</ul>
<p><strong><a name="[37e]"></a>netconn_alloc</strong>(160 bytes, Stack size 20 btyes, Obj/api_api_msg.o(.text.netconn_alloc))<br>
<br>[Stack]<ul><li>Max Depth = 396 
<li>Call Chain = netconn_alloc &rArr; sys_mbox_new &rArr; rt_mb_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<li><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<li><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<li><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<li><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</ul>
<br>[Called By]<ul>
<li><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<li><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</ul>
<p><strong><a name="[37f]"></a>netconn_free</strong>(110 bytes, Stack size 12 btyes, Obj/api_api_msg.o(.text.netconn_free))<br>
<br>[Stack]<ul><li>Max Depth = 336 
<li>Call Chain = netconn_free &rArr; sys_sem_free &rArr; rt_sem_delete  &rArr; rt_object_delete  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<li><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<li><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_set_invalid
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</ul>
<br>[Called By]<ul>
<li><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<li><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<li><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</ul>
<p><strong><a name="[382]"></a>lwip_netconn_do_delconn</strong>(338 bytes, Stack size 12 btyes, Obj/api_api_msg.o(.text.lwip_netconn_do_delconn))<br>
<br>[Stack]<ul><li>Max Depth = 696 
<li>Call Chain = lwip_netconn_do_delconn &rArr; netconn_drain &rArr; tcp_abort  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<li><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<li><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<li><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<li><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<li><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<li><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
</ul>
<p><strong><a name="[383]"></a>lwip_netconn_do_bind</strong>(126 bytes, Stack size 8 btyes, Obj/api_api_msg.o(.text.lwip_netconn_do_bind))<br>
<br>[Stack]<ul><li>Max Depth = 264 
<li>Call Chain = lwip_netconn_do_bind &rArr; tcp_bind &rArr; tcp_timer_needed  &rArr; sys_timeout  &rArr; memp_malloc  &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<li><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_bind
<li><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</ul>
<p><strong><a name="[384]"></a>lwip_netconn_do_connect</strong>(266 bytes, Stack size 12 btyes, Obj/api_api_msg.o(.text.lwip_netconn_do_connect))<br>
<br>[Stack]<ul><li>Max Depth = 612 
<li>Call Chain = lwip_netconn_do_connect &rArr; tcp_connect &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_connect
<li><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<li><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<li><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<li><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<li><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<li><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
</ul>
<p><strong><a name="[385]"></a>lwip_netconn_do_disconnect</strong>(70 bytes, Stack size 8 btyes, Obj/api_api_msg.o(.text.lwip_netconn_do_disconnect))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = lwip_netconn_do_disconnect &rArr; sys_arch_protect </ul>
<br>[Calls]<ul>
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
</ul>
<p><strong><a name="[386]"></a>lwip_netconn_do_listen</strong>(254 bytes, Stack size 16 btyes, Obj/api_api_msg.o(.text.lwip_netconn_do_listen))<br>
<br>[Stack]<ul><li>Max Depth = 648 
<li>Call Chain = lwip_netconn_do_listen &rArr; tcp_close &rArr; tcp_close_shutdown  &rArr; tcp_close_shutdown_fin  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<li><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<li><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<li><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<li><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<li><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<li><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<li><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
</ul>
<p><strong><a name="[387]"></a>lwip_netconn_do_getaddr</strong>(204 bytes, Stack size 0 btyes, Obj/api_api_msg.o(.text.lwip_netconn_do_getaddr))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = lwip_netconn_do_getaddr &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</ul>
<p><strong><a name="[388]"></a>lwip_netconn_do_close</strong>(220 bytes, Stack size 8 btyes, Obj/api_api_msg.o(.text.lwip_netconn_do_close))<br>
<br>[Stack]<ul><li>Max Depth = 692 
<li>Call Chain = lwip_netconn_do_close &rArr; netconn_drain &rArr; tcp_abort  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<li><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<li><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<li><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<li><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</ul>
<p><strong><a name="[389]"></a>lwip_netconn_do_join_leave_group</strong>(116 bytes, Stack size 8 btyes, Obj/api_api_msg.o(.text.lwip_netconn_do_join_leave_group))<br>
<br>[Stack]<ul><li>Max Depth = 620 
<li>Call Chain = lwip_netconn_do_join_leave_group &rArr; igmp_leavegroup &rArr; igmp_leavegroup_netif  &rArr; igmp_send  &rArr; ip4_output_if_opt  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<li><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
</ul>
<p><strong><a name="[38a]"></a>lwip_netconn_do_gethostbyname</strong>(46 bytes, Stack size 16 btyes, Obj/api_api_msg.o(.text.lwip_netconn_do_gethostbyname))<br>
<br>[Stack]<ul><li>Max Depth = 744 
<li>Call Chain = lwip_netconn_do_gethostbyname &rArr; dns_gethostbyname_addrtype &rArr; dns_check_entry  &rArr; dns_send  &rArr; udp_sendto  &rArr; udp_sendto_if  &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<li><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</ul>
<p><strong><a name="[391]"></a>lwip_netconn_do_send</strong>(156 bytes, Stack size 8 btyes, Obj/api_api_msg.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 616 
<li>Call Chain = lwip_netconn_do_send &rArr; udp_send &rArr; udp_sendto  &rArr; udp_sendto_if  &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
<li><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<li><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<li><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</ul>
<p><strong><a name="[392]"></a>lwip_netconn_do_recv</strong>(92 bytes, Stack size 20 btyes, Obj/api_api_msg.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 632 
<li>Call Chain = lwip_netconn_do_recv &rArr; tcp_recved &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
</ul>
<p><strong><a name="[393]"></a>lwip_netconn_do_write</strong>(240 bytes, Stack size 8 btyes, Obj/api_api_msg.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 360 
<li>Call Chain = lwip_netconn_do_write &rArr; recv_udp &rArr; netbuf_delete  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<li><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<li><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<li><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
</ul>
<p><strong><a name="[394]"></a>err_to_errno</strong>(26 bytes, Stack size 0 btyes, Obj/api_err.o(.text.err_to_errno))<br>
<br>[Called By]<ul>
<li><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<li><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<li><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<li><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<li><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<li><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<li><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<li><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<li><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<li><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<li><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
</ul>
<p><strong><a name="[395]"></a>netbuf_new</strong>(26 bytes, Stack size 8 btyes, Obj/api_netbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 220 
<li>Call Chain = netbuf_new &rArr; memp_malloc &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
</ul>
<p><strong><a name="[396]"></a>netbuf_data</strong>(100 bytes, Stack size 0 btyes, Obj/api_netbuf.o(.text.netbuf_data))<br>
<p><strong><a name="[397]"></a>netbuf_next</strong>(52 bytes, Stack size 0 btyes, Obj/api_netbuf.o(.text.netbuf_next))<br>
<p><strong><a name="[398]"></a>netbuf_first</strong>(28 bytes, Stack size 0 btyes, Obj/api_netbuf.o(.text.netbuf_first))<br>
<p><strong><a name="[399]"></a>netbuf_delete</strong>(34 bytes, Stack size 8 btyes, Obj/api_netbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = netbuf_delete &rArr; pbuf_free &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</ul>
<br>[Called By]<ul>
<li><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<li><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<li><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<li><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<li><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<li><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</ul>
<p><strong><a name="[39a]"></a>netbuf_alloc</strong>(84 bytes, Stack size 12 btyes, Obj/api_netbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 372 
<li>Call Chain = netbuf_alloc &rArr; pbuf_alloc &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<li><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</ul>
<p><strong><a name="[39b]"></a>netbuf_free</strong>(42 bytes, Stack size 8 btyes, Obj/api_netbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = netbuf_free &rArr; pbuf_free &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</ul>
<p><strong><a name="[39c]"></a>netbuf_ref</strong>(76 bytes, Stack size 16 btyes, Obj/api_netbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 376 
<li>Call Chain = netbuf_ref &rArr; pbuf_alloc &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<p><strong><a name="[39d]"></a>netbuf_chain</strong>(68 bytes, Stack size 12 btyes, Obj/api_netbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 224 
<li>Call Chain = netbuf_chain &rArr; memp_free &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<p><strong><a name="[39e]"></a>lwip_gethostbyname</strong>(84 bytes, Stack size 24 btyes, Obj/api_netdb.o(.text.lwip_gethostbyname))<br>
<br>[Stack]<ul><li>Max Depth = 436 
<li>Call Chain = lwip_gethostbyname &rArr; netconn_gethostbyname &rArr; sys_sem_new  &rArr; rt_sem_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<li><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</ul>
<br>[Called By]<ul>
<li><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
</ul>
<p><strong><a name="[39f]"></a>lwip_gethostbyname_r</strong>(186 bytes, Stack size 0 btyes, Obj/api_netdb.o(.text.lwip_gethostbyname_r))<br>
<p><strong><a name="[3a0]"></a>lwip_freeaddrinfo</strong>(24 bytes, Stack size 8 btyes, Obj/api_netdb.o(.text.lwip_freeaddrinfo))<br>
<br>[Stack]<ul><li>Max Depth = 220 
<li>Call Chain = lwip_freeaddrinfo &rArr; memp_free &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</ul>
<br>[Called By]<ul>
<li><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeaddrinfo
<li><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</ul>
<p><strong><a name="[3a1]"></a>lwip_getaddrinfo</strong>(354 bytes, Stack size 40 btyes, Obj/api_netdb.o(.text.lwip_getaddrinfo))<br>
<br>[Stack]<ul><li>Max Depth = 452 
<li>Call Chain = lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; sys_sem_new  &rArr; rt_sem_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[cd5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<li><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<li><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getaddrinfo
<li><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</ul>
<p><strong><a name="[3a5]"></a>netifapi_netif_add</strong>(70 bytes, Stack size 44 btyes, Obj/api_netifapi.o(.text.netifapi_netif_add))<br>
<br>[Stack]<ul><li>Max Depth = 384 
<li>Call Chain = netifapi_netif_add &rArr; tcpip_api_call &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
</ul>
<br>[Called By]<ul>
<li><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</ul>
<p><strong><a name="[3a6]"></a>netifapi_netif_set_addr</strong>(46 bytes, Stack size 36 btyes, Obj/api_netifapi.o(.text.netifapi_netif_set_addr))<br>
<br>[Stack]<ul><li>Max Depth = 376 
<li>Call Chain = netifapi_netif_set_addr &rArr; tcpip_api_call &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
</ul>
<br>[Called By]<ul>
<li><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
</ul>
<p><strong><a name="[3a7]"></a>netifapi_netif_common</strong>(22 bytes, Stack size 36 btyes, Obj/api_netifapi.o(.text.netifapi_netif_common))<br>
<br>[Stack]<ul><li>Max Depth = 376 
<li>Call Chain = netifapi_netif_common &rArr; tcpip_api_call &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
</ul>
<br>[Called By]<ul>
<li><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
</ul>
<p><strong><a name="[3ab]"></a>lwip_socket_thread_init</strong>(2 bytes, Stack size 0 btyes, Obj/api_sockets.o(.text.lwip_socket_thread_init))<br>
<p><strong><a name="[3ac]"></a>lwip_socket_thread_cleanup</strong>(2 bytes, Stack size 0 btyes, Obj/api_sockets.o(.text.lwip_socket_thread_cleanup))<br>
<p><strong><a name="[3ad]"></a>lwip_tryget_socket</strong>(28 bytes, Stack size 0 btyes, Obj/api_sockets.o(.text.lwip_tryget_socket))<br>
<br>[Called By]<ul>
<li><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_poll
<li><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<li><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<li><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</ul>
<p><strong><a name="[3ae]"></a>lwip_accept</strong>(464 bytes, Stack size 0 btyes, Obj/api_sockets.o(.text.lwip_accept))<br>
<br>[Stack]<ul><li>Max Depth = 376 
<li>Call Chain = lwip_accept &rArr; netconn_delete &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<li><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<li><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<li><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</ul>
<br>[Called By]<ul>
<li><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
</ul>
<p><strong><a name="[3af]"></a>lwip_bind</strong>(124 bytes, Stack size 20 btyes, Obj/api_sockets.o(.text.lwip_bind))<br>
<br>[Stack]<ul><li>Max Depth = 388 
<li>Call Chain = lwip_bind &rArr; netconn_bind &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<li><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
</ul>
<p><strong><a name="[3b0]"></a>lwip_close</strong>(230 bytes, Stack size 36 btyes, Obj/api_sockets.o(.text.lwip_close))<br>
<br>[Stack]<ul><li>Max Depth = 412 
<li>Call Chain = lwip_close &rArr; netconn_delete &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<li><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<li><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<li><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<li><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_close
<li><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<li><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<li><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</ul>
<p><strong><a name="[3b1]"></a>lwip_connect</strong>(124 bytes, Stack size 20 btyes, Obj/api_sockets.o(.text.lwip_connect))<br>
<br>[Stack]<ul><li>Max Depth = 388 
<li>Call Chain = lwip_connect &rArr; netconn_connect &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<li><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<li><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
</ul>
<br>[Called By]<ul>
<li><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</ul>
<p><strong><a name="[3b2]"></a>lwip_listen</strong>(104 bytes, Stack size 12 btyes, Obj/api_sockets.o(.text.lwip_listen))<br>
<br>[Stack]<ul><li>Max Depth = 380 
<li>Call Chain = lwip_listen &rArr; netconn_listen_with_backlog &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<li><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<li><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<li><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
</ul>
<p><strong><a name="[3b3]"></a>lwip_socket</strong>(136 bytes, Stack size 0 btyes, Obj/api_sockets.o(.text.lwip_socket))<br>
<br>[Stack]<ul><li>Max Depth = 436 
<li>Call Chain = lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc  &rArr; sys_mbox_new  &rArr; rt_mb_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<li><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<li><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<li><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</ul>
<br>[Called By]<ul>
<li><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<li><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</ul>
<p><strong><a name="[3b4]"></a>lwip_select</strong>(868 bytes, Stack size 0 btyes, Obj/api_sockets.o(.text.lwip_select))<br>
<p><strong><a name="[3b5]"></a>lwip_shutdown</strong>(156 bytes, Stack size 0 btyes, Obj/api_sockets.o(.text.lwip_shutdown))<br>
<p><strong><a name="[3b6]"></a>lwip_getpeername</strong>(10 bytes, Stack size 0 btyes, Obj/api_sockets.o(.text.lwip_getpeername))<br>
<p><strong><a name="[3b7]"></a>lwip_getsockname</strong>(10 bytes, Stack size 4 btyes, Obj/api_sockets.o(.text.lwip_getsockname))<br>
<br>[Stack]<ul><li>Max Depth = 372 
<li>Call Chain = lwip_getsockname &rArr; lwip_getaddrname &rArr; netconn_getaddr  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</ul>
<br>[Called By]<ul>
<li><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockname
</ul>
<p><strong><a name="[3b8]"></a>lwip_getsockopt</strong>(820 bytes, Stack size 32 btyes, Obj/api_sockets.o(.text.lwip_getsockopt))<br>
<br>[Stack]<ul><li>Max Depth = 356 
<li>Call Chain = lwip_getsockopt &rArr; sys_mutex_lock &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<li><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<li><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<li><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<li><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockopt
</ul>
<p><strong><a name="[3b9]"></a>lwip_setsockopt</strong>(854 bytes, Stack size 36 btyes, Obj/api_sockets.o(.text.lwip_setsockopt))<br>
<br>[Stack]<ul><li>Max Depth = 648 
<li>Call Chain = lwip_setsockopt &rArr; igmp_leavegroup &rArr; igmp_leavegroup_netif  &rArr; igmp_send  &rArr; ip4_output_if_opt  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<li><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<li><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<li><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<li><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<li><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
</ul>
<br>[Called By]<ul>
<li><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<li><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</ul>
<p><strong><a name="[3ba]"></a>lwip_ioctl</strong>(304 bytes, Stack size 16 btyes, Obj/api_sockets.o(.text.lwip_ioctl))<br>
<br>[Stack]<ul><li>Max Depth = 220 
<li>Call Chain = lwip_ioctl &rArr; rt_device_find &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<li><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_get_ipv4
<li><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<li><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</ul>
<br>[Called By]<ul>
<li><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_ioctl
</ul>
<p><strong><a name="[3bb]"></a>lwip_fcntl</strong>(120 bytes, Stack size 0 btyes, Obj/api_sockets.o(.text.lwip_fcntl))<br>
<p><strong><a name="[3be]"></a>lwip_recvfrom</strong>(600 bytes, Stack size 84 btyes, Obj/api_sockets.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 516 
<li>Call Chain = lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data  &rArr; netconn_close_shutdown  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<li><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<li><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<li><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<li><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<li><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_read
<li><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
<li><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</ul>
<p><strong><a name="[3bf]"></a>lwip_read</strong>(18 bytes, Stack size 12 btyes, Obj/api_sockets.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 528 
<li>Call Chain = lwip_read &rArr; lwip_recvfrom &rArr; netconn_recv  &rArr; netconn_recv_data  &rArr; netconn_close_shutdown  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</ul>
<br>[Called By]<ul>
<li><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_read
</ul>
<p><strong><a name="[3c0]"></a>lwip_recv</strong>(24 bytes, Stack size 12 btyes, Obj/api_sockets.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 528 
<li>Call Chain = lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv  &rArr; netconn_recv_data  &rArr; netconn_close_shutdown  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</ul>
<br>[Called By]<ul>
<li><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</ul>
<p><strong><a name="[3c1]"></a>lwip_sendmsg</strong>(522 bytes, Stack size 44 btyes, Obj/api_sockets.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 428 
<li>Call Chain = lwip_sendmsg &rArr; netconn_write_partly &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<li><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_new
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<li><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<li><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
</ul>
<br>[Called By]<ul>
<li><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_writev
</ul>
<p><strong><a name="[3c2]"></a>lwip_sendto</strong>(288 bytes, Stack size 48 btyes, Obj/api_sockets.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 420 
<li>Call Chain = lwip_sendto &rArr; netbuf_alloc &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<li><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<li><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<li><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</ul>
<br>[Called By]<ul>
<li><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<li><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<li><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</ul>
<p><strong><a name="[3c3]"></a>lwip_send</strong>(164 bytes, Stack size 36 btyes, Obj/api_sockets.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = lwip_send &rArr; netconn_write_partly &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<li><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<li><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<li><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<li><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<li><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<li><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_write
</ul>
<p><strong><a name="[3c4]"></a>lwip_write</strong>(10 bytes, Stack size 4 btyes, Obj/api_sockets.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 40 + In Cycle
<li>Call Chain = lwip_write &rArr; lwip_send &rArr; netconn_write_partly  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</ul>
<br>[Called By]<ul>
<li><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_write
</ul>
<p><strong><a name="[3c5]"></a>lwip_writev</strong>(32 bytes, Stack size 32 btyes, Obj/api_sockets.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 460 
<li>Call Chain = lwip_writev &rArr; lwip_sendmsg &rArr; netconn_write_partly  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
</ul>
<p><strong><a name="[3c8]"></a>tcpip_callbackmsg_new</strong>(26 bytes, Stack size 0 btyes, Obj/api_tcpip.o(.text.tcpip_callbackmsg_new))<br>
<p><strong><a name="[3c9]"></a>tcpip_callbackmsg_delete</strong>(12 bytes, Stack size 0 btyes, Obj/api_tcpip.o(.text.tcpip_callbackmsg_delete))<br>
<p><strong><a name="[3ca]"></a>tcpip_trycallback</strong>(40 bytes, Stack size 0 btyes, Obj/api_tcpip.o(.text.tcpip_trycallback))<br>
<p><strong><a name="[3cb]"></a>tcpip_init</strong>(98 bytes, Stack size 16 btyes, Obj/api_tcpip.o(.text.tcpip_init))<br>
<br>[Stack]<ul><li>Max Depth = 392 
<li>Call Chain = tcpip_init &rArr; sys_mbox_new &rArr; rt_mb_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<li><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<li><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
</ul>
<br>[Called By]<ul>
<li><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
</ul>
<p><strong><a name="[3cc]"></a>pbuf_free_callback</strong>(14 bytes, Stack size 0 btyes, Obj/api_tcpip.o(.text.pbuf_free_callback))<br>
<p><strong><a name="[3cd]"></a>mem_free_callback</strong>(14 bytes, Stack size 0 btyes, Obj/api_tcpip.o(.text.mem_free_callback))<br>
<p><strong><a name="[3ce]"></a>tcpip_inpkt</strong>(34 bytes, Stack size 20 btyes, Obj/api_tcpip.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = tcpip_inpkt &rArr; sys_mutex_lock &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<li><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
</ul>
<br>[Called By]<ul>
<li><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
</ul>
<p><strong><a name="[3cf]"></a>tcpip_input</strong>(30 bytes, Stack size 4 btyes, Obj/api_tcpip.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = tcpip_input &rArr; tcpip_inpkt &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
</ul>
<p><strong><a name="[3d0]"></a>tcpip_callback_with_block</strong>(100 bytes, Stack size 20 btyes, Obj/api_tcpip.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 340 
<li>Call Chain = tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<li><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<li><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</ul>
<br>[Called By]<ul>
<li><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
</ul>
<p><strong><a name="[3d1]"></a>tcpip_send_msg_wait_sem</strong>(28 bytes, Stack size 16 btyes, Obj/api_tcpip.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 340 
<li>Call Chain = tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<li><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
</ul>
<br>[Called By]<ul>
<li><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<li><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<li><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<li><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<li><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<li><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<li><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<li><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<li><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<li><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<li><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<li><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
</ul>
<p><strong><a name="[3d2]"></a>tcpip_api_call</strong>(30 bytes, Stack size 16 btyes, Obj/api_tcpip.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 340 
<li>Call Chain = tcpip_api_call &rArr; sys_mutex_lock &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<li><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
</ul>
<br>[Called By]<ul>
<li><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_add
<li><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_set_addr
<li><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
</ul>
<p><strong><a name="[3d3]"></a>lwip_htons</strong>(10 bytes, Stack size 0 btyes, Obj/core_def.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<li><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<li><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<li><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<li><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<li><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<li><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<li><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<li><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<li><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<li><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<li><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment.isra.1
<li><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header.constprop.2
<li><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<li><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<li><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<li><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<li><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<li><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<li><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<li><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<li><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<li><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<li><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<li><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<li><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<li><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<li><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
<li><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
<li><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_client
<li><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<li><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<li><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<li><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto_ntp_server
<li><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<li><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack
<li><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error
<li><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<li><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<li><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_webnet
<li><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_asp_dofile
</ul>
<p><strong><a name="[3d4]"></a>lwip_strnstr</strong>(80 bytes, Stack size 0 btyes, Obj/core_def.o(.text.lwip_strnstr))<br>
<p><strong><a name="[3d5]"></a>lwip_stricmp</strong>(48 bytes, Stack size 0 btyes, Obj/core_def.o(.text.lwip_stricmp))<br>
<p><strong><a name="[3d6]"></a>lwip_strnicmp</strong>(60 bytes, Stack size 4 btyes, Obj/core_def.o(.text.lwip_strnicmp))<br>
<br>[Called By]<ul>
<li><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</ul>
<p><strong><a name="[3d7]"></a>lwip_itoa</strong>(98 bytes, Stack size 0 btyes, Obj/core_def.o(.text.lwip_itoa))<br>
<p><strong><a name="[3d8]"></a>lwip_htonl</strong>(4 bytes, Stack size 0 btyes, Obj/core_def.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<li><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<li><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment.isra.1
<li><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header.constprop.2
<li><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<li><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<li><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<li><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<li><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<li><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<li><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<li><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_netmask_valid
<li><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<li><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
<li><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<li><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<li><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<li><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<li><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack.isra.8
<li><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<li><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<li><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<li><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
</ul>
<p><strong><a name="[3dd]"></a>dns_init</strong>(2 bytes, Stack size 0 btyes, Obj/core_dns.o(.text.dns_init))<br>
<br>[Called By]<ul>
<li><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</ul>
<p><strong><a name="[3de]"></a>dns_setserver</strong>(32 bytes, Stack size 0 btyes, Obj/core_dns.o(.text.dns_setserver))<br>
<br>[Called By]<ul>
<li><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dns
<li><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack.isra.8
</ul>
<p><strong><a name="[3df]"></a>dns_getserver</strong>(16 bytes, Stack size 0 btyes, Obj/core_dns.o(.text.dns_getserver))<br>
<br>[Called By]<ul>
<li><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
<li><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dns
</ul>
<p><strong><a name="[3e0]"></a>dns_tmr</strong>(28 bytes, Stack size 4 btyes, Obj/core_dns.o(.text.dns_tmr))<br>
<br>[Stack]<ul><li>Max Depth = 680 
<li>Call Chain = dns_tmr &rArr; dns_check_entry &rArr; dns_send  &rArr; udp_sendto  &rArr; udp_sendto_if  &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</ul>
<p><strong><a name="[3e1]"></a>dns_gethostbyname_addrtype</strong>(604 bytes, Stack size 52 btyes, Obj/core_dns.o(.text.dns_gethostbyname_addrtype))<br>
<br>[Stack]<ul><li>Max Depth = 728 
<li>Call Chain = dns_gethostbyname_addrtype &rArr; dns_check_entry &rArr; dns_send  &rArr; udp_sendto  &rArr; udp_sendto_if  &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<li><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_strnicmp
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
<li><a href="#[cce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<li><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<li><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<li><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<li><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
</ul>
<br>[Called By]<ul>
<li><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_gethostbyname
</ul>
<p><strong><a name="[3e2]"></a>dns_gethostbyname</strong>(20 bytes, Stack size 0 btyes, Obj/core_dns.o(.text.dns_gethostbyname))<br>
<p><strong><a name="[3e3]"></a>lwip_standard_chksum</strong>(132 bytes, Stack size 4 btyes, Obj/core_inet_chksum.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<li><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<li><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<li><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
</ul>
<p><strong><a name="[3e4]"></a>inet_chksum_pseudo</strong>(164 bytes, Stack size 28 btyes, Obj/core_inet_chksum.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = inet_chksum_pseudo &rArr; lwip_standard_chksum </ul>
<br>[Calls]<ul>
<li><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</ul>
<br>[Called By]<ul>
<li><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
</ul>
<p><strong><a name="[3e5]"></a>ip_chksum_pseudo</strong>(20 bytes, Stack size 8 btyes, Obj/core_inet_chksum.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 40 
<li>Call Chain = ip_chksum_pseudo &rArr; inet_chksum_pseudo &rArr; lwip_standard_chksum  </ul>
<br>[Calls]<ul>
<li><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</ul>
<br>[Called By]<ul>
<li><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</ul>
<p><strong><a name="[3e6]"></a>inet_chksum_pseudo_partial</strong>(252 bytes, Stack size 44 btyes, Obj/core_inet_chksum.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 240 
<li>Call Chain = inet_chksum_pseudo_partial &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</ul>
<br>[Called By]<ul>
<li><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo_partial
</ul>
<p><strong><a name="[3e7]"></a>ip_chksum_pseudo_partial</strong>(28 bytes, Stack size 12 btyes, Obj/core_inet_chksum.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 252 
<li>Call Chain = ip_chksum_pseudo_partial &rArr; inet_chksum_pseudo_partial &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
</ul>
<p><strong><a name="[3e8]"></a>inet_chksum</strong>(12 bytes, Stack size 4 btyes, Obj/core_inet_chksum.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = inet_chksum &rArr; lwip_standard_chksum </ul>
<br>[Calls]<ul>
<li><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</ul>
<br>[Called By]<ul>
<li><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response.isra.0
<li><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<li><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<li><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</ul>
<p><strong><a name="[3e9]"></a>inet_chksum_pbuf</strong>(92 bytes, Stack size 20 btyes, Obj/core_inet_chksum.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum </ul>
<br>[Calls]<ul>
<li><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</ul>
<br>[Called By]<ul>
<li><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</ul>
<p><strong><a name="[3ea]"></a>lwip_init</strong>(40 bytes, Stack size 4 btyes, Obj/core_init.o(.text.lwip_init))<br>
<br>[Stack]<ul><li>Max Depth = 236 
<li>Call Chain = lwip_init &rArr; sys_timeouts_init &rArr; sys_timeout  &rArr; memp_malloc  &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<li><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<li><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<li><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<li><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<li><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<li><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_init
<li><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<li><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
</ul>
<br>[Called By]<ul>
<li><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</ul>
<p><strong><a name="[3eb]"></a>if_nametoindex</strong>(24 bytes, Stack size 0 btyes, Obj/core_if.o(.text.if_nametoindex))<br>
<p><strong><a name="[3ec]"></a>if_indextoname</strong>(38 bytes, Stack size 0 btyes, Obj/core_if.o(.text.if_indextoname))<br>
<p><strong><a name="[3ee]"></a>memp_init_pool</strong>(56 bytes, Stack size 0 btyes, Obj/core_memp.o(.text.memp_init_pool))<br>
<p><strong><a name="[3ef]"></a>memp_init</strong>(86 bytes, Stack size 16 btyes, Obj/core_memp.o(.text.memp_init))<br>
<br>[Called By]<ul>
<li><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</ul>
<p><strong><a name="[3f1]"></a>memp_malloc_pool</strong>(36 bytes, Stack size 8 btyes, Obj/core_memp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 216 
<li>Call Chain = memp_malloc_pool &rArr; do_memp_malloc_pool.isra.0 &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool.isra.0
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<p><strong><a name="[3f2]"></a>memp_malloc</strong>(42 bytes, Stack size 4 btyes, Obj/core_memp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = memp_malloc &rArr; do_memp_malloc_pool.isra.0 &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool.isra.0
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<li><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<li><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<li><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<li><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_new
<li><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<li><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<li><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<li><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<li><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment.isra.1
<li><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<li><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<li><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<li><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<li><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<li><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group.isra.3
</ul>
<p><strong><a name="[3f3]"></a>memp_free_pool</strong>(36 bytes, Stack size 4 btyes, Obj/core_memp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = memp_free_pool &rArr; do_memp_malloc_pool.isra.0 &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool.isra.0
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<p><strong><a name="[3f4]"></a>memp_free</strong>(44 bytes, Stack size 4 btyes, Obj/core_memp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = memp_free &rArr; do_memp_malloc_pool.isra.0 &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool.isra.0
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<li><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<li><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<li><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<li><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<li><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<li><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<li><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<li><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<li><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<li><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<li><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<li><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<li><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close.part.3
<li><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<li><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<li><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<li><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<li><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<li><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<li><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<li><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<li><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<li><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
</ul>
<p><strong><a name="[3f6]"></a>netif_init</strong>(2 bytes, Stack size 0 btyes, Obj/core_netif.o(.text.netif_init))<br>
<br>[Called By]<ul>
<li><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</ul>
<p><strong><a name="[3f7]"></a>netif_input</strong>(26 bytes, Stack size 0 btyes, Obj/core_netif.o(.fast))<br>
<p><strong><a name="[3f8]"></a>netif_find</strong>(58 bytes, Stack size 0 btyes, Obj/core_netif.o(.text.netif_find))<br>
<p><strong><a name="[3f9]"></a>netif_find_nonum</strong>(50 bytes, Stack size 0 btyes, Obj/core_netif.o(.text.netif_find_nonum))<br>
<p><strong><a name="[3fa]"></a>netif_find_byindex</strong>(46 bytes, Stack size 0 btyes, Obj/core_netif.o(.text.netif_find_byindex))<br>
<p><strong><a name="[3fb]"></a>netif_get_index</strong>(32 bytes, Stack size 0 btyes, Obj/core_netif.o(.text.netif_get_index))<br>
<p><strong><a name="[3fc]"></a>netif_set_ipaddr</strong>(126 bytes, Stack size 20 btyes, Obj/core_netif.o(.text.netif_set_ipaddr))<br>
<br>[Stack]<ul><li>Max Depth = 696 
<li>Call Chain = netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
<li><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_netif_ip_addr_changed
<li><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_netif_ip_addr_changed
<li><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports.part.0
</ul>
<br>[Called By]<ul>
<li><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</ul>
<p><strong><a name="[3fd]"></a>netif_set_addr</strong>(66 bytes, Stack size 16 btyes, Obj/core_netif.o(.text.netif_set_addr))<br>
<br>[Stack]<ul><li>Max Depth = 712 
<li>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed  &rArr; tcp_netif_ip_addr_changed_pcblist  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</ul>
<br>[Called By]<ul>
<li><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_do_netif_set_addr
<li><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<li><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<li><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<li><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</ul>
<p><strong><a name="[3fe]"></a>netif_add</strong>(174 bytes, Stack size 32 btyes, Obj/core_netif.o(.text.netif_add))<br>
<br>[Stack]<ul><li>Max Depth = 744 
<li>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr  &rArr; tcp_netif_ip_addr_changed  &rArr; tcp_netif_ip_addr_changed_pcblist  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<li><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<li><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_do_netif_add
</ul>
<p><strong><a name="[3ff]"></a>netif_set_gw</strong>(10 bytes, Stack size 0 btyes, Obj/core_netif.o(.text.netif_set_gw))<br>
<p><strong><a name="[400]"></a>netif_set_netmask</strong>(10 bytes, Stack size 0 btyes, Obj/core_netif.o(.text.netif_set_netmask))<br>
<p><strong><a name="[401]"></a>netif_set_default</strong>(6 bytes, Stack size 0 btyes, Obj/core_netif.o(.text.netif_set_default))<br>
<br>[Called By]<ul>
<li><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<li><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</ul>
<p><strong><a name="[402]"></a>netif_set_up</strong>(60 bytes, Stack size 8 btyes, Obj/core_netif.o(.text.netif_set_up))<br>
<br>[Stack]<ul><li>Max Depth = 424 
<li>Call Chain = netif_set_up &rArr; netif_issue_reports.part.0 &rArr; etharp_request  &rArr; etharp_raw  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports.part.0
</ul>
<br>[Called By]<ul>
<li><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<li><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</ul>
<p><strong><a name="[403]"></a>netif_set_down</strong>(56 bytes, Stack size 0 btyes, Obj/core_netif.o(.text.netif_set_down))<br>
<p><strong><a name="[404]"></a>netif_remove</strong>(144 bytes, Stack size 0 btyes, Obj/core_netif.o(.text.netif_remove))<br>
<p><strong><a name="[405]"></a>netif_set_status_callback</strong>(8 bytes, Stack size 0 btyes, Obj/core_netif.o(.text.netif_set_status_callback))<br>
<p><strong><a name="[406]"></a>netif_set_link_up</strong>(56 bytes, Stack size 8 btyes, Obj/core_netif.o(.text.netif_set_link_up))<br>
<br>[Stack]<ul><li>Max Depth = 628 
<li>Call Chain = netif_set_link_up &rArr; dhcp_network_changed &rArr; dhcp_reboot  &rArr; udp_sendto_if  &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<li><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports.part.0
</ul>
<br>[Called By]<ul>
<li><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<li><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</ul>
<p><strong><a name="[407]"></a>netif_set_link_down</strong>(20 bytes, Stack size 0 btyes, Obj/core_netif.o(.text.netif_set_link_down))<br>
<p><strong><a name="[40a]"></a>pbuf_header</strong>(10 bytes, Stack size 4 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = pbuf_header &rArr; pbuf_header_impl &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</ul>
<br>[Called By]<ul>
<li><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<li><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<li><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<li><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment.isra.1
<li><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<li><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<li><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<li><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<li><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<li><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<li><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<li><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<li><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<li><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</ul>
<p><strong><a name="[40b]"></a>pbuf_header_force</strong>(10 bytes, Stack size 4 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = pbuf_header_force &rArr; pbuf_header_impl &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</ul>
<br>[Called By]<ul>
<li><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<li><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</ul>
<p><strong><a name="[40c]"></a>pbuf_free</strong>(166 bytes, Stack size 28 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 316 
<li>Call Chain = pbuf_free &rArr; mem_free &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</ul>
<br>[Called By]<ul>
<li><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_tx
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
<li><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<li><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<li><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<li><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<li><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<li><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<li><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<li><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<li><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<li><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<li><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<li><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<li><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dechain
<li><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<li><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<li><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<li><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge.part.1
<li><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<li><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<li><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<li><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment.isra.1
<li><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<li><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<li><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<li><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<li><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<li><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<li><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<li><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<li><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<li><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<li><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<li><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<li><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<li><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<li><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<li><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<li><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<li><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<li><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<li><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<li><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<li><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response.isra.0
<li><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<li><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<li><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<li><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resend_data
<li><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack
<li><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_handle
<li><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error
<li><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<li><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</ul>
<p><strong><a name="[40d]"></a>pbuf_alloc</strong>(506 bytes, Stack size 44 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 360 
<li>Call Chain = pbuf_alloc &rArr; pbuf_free &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<li><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</ul>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_tx
<li><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_rx
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
<li><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<li><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<li><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<li><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<li><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc.isra.0
<li><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header.constprop.2
<li><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<li><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<li><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<li><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<li><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<li><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<li><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<li><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<li><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response.isra.0
<li><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<li><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resend_data
<li><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack
<li><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error
<li><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</ul>
<p><strong><a name="[40e]"></a>pbuf_realloc</strong>(208 bytes, Stack size 28 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</ul>
<br>[Called By]<ul>
<li><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<li><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<li><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<li><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<li><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<li><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<li><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<li><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<li><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<li><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</ul>
<p><strong><a name="[40f]"></a>pbuf_clen</strong>(24 bytes, Stack size 0 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<li><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<li><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<li><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<li><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</ul>
<p><strong><a name="[410]"></a>pbuf_ref</strong>(48 bytes, Stack size 8 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 204 
<li>Call Chain = pbuf_ref &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_tx
<li><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<li><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</ul>
<p><strong><a name="[411]"></a>pbuf_cat</strong>(174 bytes, Stack size 12 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = pbuf_cat &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<li><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<li><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<li><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</ul>
<p><strong><a name="[412]"></a>pbuf_chain</strong>(16 bytes, Stack size 8 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 216 
<li>Call Chain = pbuf_chain &rArr; pbuf_cat &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<li><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</ul>
<br>[Called By]<ul>
<li><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<li><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</ul>
<p><strong><a name="[413]"></a>pbuf_dechain</strong>(110 bytes, Stack size 16 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 332 
<li>Call Chain = pbuf_dechain &rArr; pbuf_free &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</ul>
<p><strong><a name="[414]"></a>pbuf_copy</strong>(340 bytes, Stack size 36 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = pbuf_copy &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_tx
<li><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<li><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<li><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<li><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resend_data
</ul>
<p><strong><a name="[415]"></a>pbuf_copy_partial</strong>(136 bytes, Stack size 24 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 220 
<li>Call Chain = pbuf_copy_partial &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<li><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<li><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<li><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<li><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<li><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</ul>
<p><strong><a name="[416]"></a>pbuf_skip</strong>(80 bytes, Stack size 0 btyes, Obj/core_pbuf.o(.fast))<br>
<p><strong><a name="[417]"></a>pbuf_take</strong>(192 bytes, Stack size 36 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = pbuf_take &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<li><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</ul>
<p><strong><a name="[418]"></a>pbuf_take_at</strong>(100 bytes, Stack size 24 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 256 
<li>Call Chain = pbuf_take_at &rArr; pbuf_take &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
</ul>
<br>[Called By]<ul>
<li><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</ul>
<p><strong><a name="[419]"></a>pbuf_coalesce</strong>(70 bytes, Stack size 12 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 372 
<li>Call Chain = pbuf_coalesce &rArr; pbuf_alloc &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<p><strong><a name="[41a]"></a>pbuf_get_at</strong>(38 bytes, Stack size 0 btyes, Obj/core_pbuf.o(.fast))<br>
<p><strong><a name="[41b]"></a>pbuf_try_get_at</strong>(42 bytes, Stack size 0 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</ul>
<p><strong><a name="[41c]"></a>pbuf_put_at</strong>(38 bytes, Stack size 0 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</ul>
<p><strong><a name="[41d]"></a>pbuf_memcmp</strong>(26 bytes, Stack size 4 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = pbuf_memcmp &rArr; pbuf_header_impl &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</ul>
<p><strong><a name="[41e]"></a>pbuf_memfind</strong>(68 bytes, Stack size 28 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = pbuf_memfind &rArr; pbuf_header_impl &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</ul>
<br>[Called By]<ul>
<li><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_strstr
<li><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</ul>
<p><strong><a name="[41f]"></a>pbuf_strstr</strong>(56 bytes, Stack size 12 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = pbuf_strstr &rArr; pbuf_memfind &rArr; pbuf_header_impl  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memfind
</ul>
<p><strong><a name="[420]"></a>raw_input</strong>(192 bytes, Stack size 48 btyes, Obj/core_raw.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = raw_input &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</ul>
<p><strong><a name="[421]"></a>raw_bind</strong>(22 bytes, Stack size 0 btyes, Obj/core_raw.o(.text.raw_bind))<br>
<br>[Called By]<ul>
<li><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
</ul>
<p><strong><a name="[422]"></a>raw_connect</strong>(22 bytes, Stack size 0 btyes, Obj/core_raw.o(.text.raw_connect))<br>
<br>[Called By]<ul>
<li><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
</ul>
<p><strong><a name="[423]"></a>raw_recv</strong>(6 bytes, Stack size 0 btyes, Obj/core_raw.o(.text.raw_recv))<br>
<br>[Called By]<ul>
<li><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
</ul>
<p><strong><a name="[424]"></a>raw_remove</strong>(74 bytes, Stack size 0 btyes, Obj/core_raw.o(.text.raw_remove))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = raw_remove &rArr; memp_free &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</ul>
<br>[Called By]<ul>
<li><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
</ul>
<p><strong><a name="[425]"></a>raw_new</strong>(44 bytes, Stack size 12 btyes, Obj/core_raw.o(.text.raw_new))<br>
<br>[Stack]<ul><li>Max Depth = 224 
<li>Call Chain = raw_new &rArr; memp_malloc &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new_ip_type
</ul>
<p><strong><a name="[426]"></a>raw_netif_ip_addr_changed</strong>(58 bytes, Stack size 0 btyes, Obj/core_raw.o(.text.raw_netif_ip_addr_changed))<br>
<br>[Called By]<ul>
<li><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</ul>
<p><strong><a name="[427]"></a>raw_sendto</strong>(244 bytes, Stack size 36 btyes, Obj/core_raw.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 548 
<li>Call Chain = raw_sendto &rArr; ip4_output_if &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<li><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<li><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<li><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<li><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
</ul>
<p><strong><a name="[428]"></a>raw_send</strong>(10 bytes, Stack size 4 btyes, Obj/core_raw.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 552 
<li>Call Chain = raw_send &rArr; raw_sendto &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</ul>
<br>[Called By]<ul>
<li><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
</ul>
<p><strong><a name="[429]"></a>raw_new_ip_type</strong>(10 bytes, Stack size 4 btyes, Obj/core_raw.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 228 
<li>Call Chain = raw_new_ip_type &rArr; raw_new &rArr; memp_malloc  &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
</ul>
<br>[Called By]<ul>
<li><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
</ul>
<p><strong><a name="[42a]"></a>sys_msleep</strong>(44 bytes, Stack size 0 btyes, Obj/core_sys.o(.fast))<br>
<p><strong><a name="[42b]"></a>tcp_pcbs_sane</strong>(152 bytes, Stack size 24 btyes, Obj/core_tcp.o(.text.tcp_pcbs_sane))<br>
<br>[Stack]<ul><li>Max Depth = 220 
<li>Call Chain = tcp_pcbs_sane &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<li><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</ul>
<p><strong><a name="[42c]"></a>tcp_pcb_remove</strong>(192 bytes, Stack size 8 btyes, Obj/core_tcp.o(.text.tcp_pcb_remove))<br>
<br>[Stack]<ul><li>Max Depth = 608 
<li>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcbs_sane
<li><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<li><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</ul>
<br>[Called By]<ul>
<li><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<li><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<li><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close.part.3
<li><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</ul>
<p><strong><a name="[42e]"></a>tcp_close</strong>(24 bytes, Stack size 4 btyes, Obj/core_tcp.o(.text.tcp_close))<br>
<br>[Stack]<ul><li>Max Depth = 632 
<li>Call Chain = tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</ul>
<br>[Called By]<ul>
<li><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<li><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
</ul>
<p><strong><a name="[42f]"></a>tcp_shutdown</strong>(94 bytes, Stack size 0 btyes, Obj/core_tcp.o(.text.tcp_shutdown))<br>
<br>[Stack]<ul><li>Max Depth = 628 
<li>Call Chain = tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</ul>
<br>[Called By]<ul>
<li><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</ul>
<p><strong><a name="[430]"></a>tcp_abandon</strong>(254 bytes, Stack size 44 btyes, Obj/core_tcp.o(.text.tcp_abandon))<br>
<br>[Stack]<ul><li>Max Depth = 652 
<li>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<li><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<li><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<li><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<li><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<li><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept_null
<li><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed_pcblist
<li><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</ul>
<p><strong><a name="[431]"></a>tcp_abort</strong>(10 bytes, Stack size 4 btyes, Obj/core_tcp.o(.text.tcp_abort))<br>
<br>[Stack]<ul><li>Max Depth = 656 
<li>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</ul>
<br>[Called By]<ul>
<li><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<li><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<li><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</ul>
<p><strong><a name="[434]"></a>tcp_netif_ip_addr_changed</strong>(78 bytes, Stack size 12 btyes, Obj/core_tcp.o(.text.tcp_netif_ip_addr_changed))<br>
<br>[Stack]<ul><li>Max Depth = 676 
<li>Call Chain = tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed_pcblist
</ul>
<br>[Called By]<ul>
<li><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</ul>
<p><strong><a name="[435]"></a>tcp_new</strong>(10 bytes, Stack size 0 btyes, Obj/core_tcp.o(.text.tcp_new))<br>
<p><strong><a name="[438]"></a>tcp_init</strong>(2 bytes, Stack size 0 btyes, Obj/core_tcp.o(.text.tcp_init))<br>
<br>[Called By]<ul>
<li><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</ul>
<p><strong><a name="[439]"></a>tcp_bind</strong>(188 bytes, Stack size 20 btyes, Obj/core_tcp.o(.text.tcp_bind))<br>
<br>[Stack]<ul><li>Max Depth = 256 
<li>Call Chain = tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout  &rArr; memp_malloc  &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<li><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
</ul>
<p><strong><a name="[43a]"></a>tcp_listen_with_backlog_and_err</strong>(226 bytes, Stack size 16 btyes, Obj/core_tcp.o(.text.tcp_listen_with_backlog_and_err))<br>
<br>[Stack]<ul><li>Max Depth = 252 
<li>Call Chain = tcp_listen_with_backlog_and_err &rArr; tcp_timer_needed &rArr; sys_timeout  &rArr; memp_malloc  &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<li><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
</ul>
<p><strong><a name="[43b]"></a>tcp_listen_with_backlog</strong>(10 bytes, Stack size 0 btyes, Obj/core_tcp.o(.text.tcp_listen_with_backlog))<br>
<p><strong><a name="[43c]"></a>tcp_connect</strong>(384 bytes, Stack size 0 btyes, Obj/core_tcp.o(.text.tcp_connect))<br>
<br>[Stack]<ul><li>Max Depth = 600 
<li>Call Chain = tcp_connect &rArr; tcp_output &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<li><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<li><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<li><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<li><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
</ul>
<p><strong><a name="[43d]"></a>tcp_arg</strong>(8 bytes, Stack size 0 btyes, Obj/core_tcp.o(.text.tcp_arg))<br>
<br>[Called By]<ul>
<li><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<li><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<li><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<li><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
</ul>
<p><strong><a name="[43e]"></a>tcp_recv</strong>(40 bytes, Stack size 0 btyes, Obj/core_tcp.o(.text.tcp_recv))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = tcp_recv &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<li><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<li><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</ul>
<p><strong><a name="[43f]"></a>tcp_sent</strong>(38 bytes, Stack size 12 btyes, Obj/core_tcp.o(.text.tcp_sent))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = tcp_sent &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<li><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<li><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</ul>
<p><strong><a name="[440]"></a>tcp_err</strong>(40 bytes, Stack size 12 btyes, Obj/core_tcp.o(.text.tcp_err))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = tcp_err &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<li><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<li><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</ul>
<p><strong><a name="[441]"></a>tcp_accept</strong>(14 bytes, Stack size 0 btyes, Obj/core_tcp.o(.text.tcp_accept))<br>
<br>[Called By]<ul>
<li><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<li><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
</ul>
<p><strong><a name="[442]"></a>tcp_poll</strong>(52 bytes, Stack size 16 btyes, Obj/core_tcp.o(.text.tcp_poll))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = tcp_poll &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<li><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<li><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</ul>
<p><strong><a name="[443]"></a>tcp_debug_state_str</strong>(8 bytes, Stack size 0 btyes, Obj/core_tcp.o(.text.tcp_debug_state_str))<br>
<br>[Called By]<ul>
<li><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
</ul>
<p><strong><a name="[444]"></a>tcp_debug_print</strong>(18 bytes, Stack size 0 btyes, Obj/core_tcp.o(.text.tcp_debug_print))<br>
<p><strong><a name="[445]"></a>tcp_debug_print_state</strong>(2 bytes, Stack size 0 btyes, Obj/core_tcp.o(.text.tcp_debug_print_state))<br>
<p><strong><a name="[446]"></a>tcp_debug_print_flags</strong>(2 bytes, Stack size 0 btyes, Obj/core_tcp.o(.text.tcp_debug_print_flags))<br>
<p><strong><a name="[447]"></a>tcp_debug_print_pcbs</strong>(44 bytes, Stack size 0 btyes, Obj/core_tcp.o(.text.tcp_debug_print_pcbs))<br>
<p><strong><a name="[448]"></a>tcp_update_rcv_ann_wnd</strong>(90 bytes, Stack size 12 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = tcp_update_rcv_ann_wnd &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<li><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</ul>
<p><strong><a name="[449]"></a>tcp_recved</strong>(124 bytes, Stack size 12 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 612 
<li>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<li><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</ul>
<br>[Called By]<ul>
<li><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<li><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
<li><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<li><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</ul>
<p><strong><a name="[44a]"></a>tcp_txnow</strong>(40 bytes, Stack size 8 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 608 
<li>Call Chain = tcp_txnow &rArr; tcp_output &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</ul>
<p><strong><a name="[44b]"></a>tcp_seg_free</strong>(32 bytes, Stack size 8 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</ul>
<br>[Called By]<ul>
<li><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<li><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge.part.1
<li><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<li><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<li><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<li><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment.isra.1
<li><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</ul>
<p><strong><a name="[44c]"></a>tcp_segs_free</strong>(20 bytes, Stack size 8 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 332 
<li>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</ul>
<br>[Called By]<ul>
<li><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</ul>
<p><strong><a name="[44e]"></a>tcp_slowtmr</strong>(1130 bytes, Stack size 68 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 672 
<li>Call Chain = tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<li><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<li><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<li><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<li><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</ul>
<br>[Called By]<ul>
<li><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</ul>
<p><strong><a name="[44f]"></a>tcp_setprio</strong>(4 bytes, Stack size 0 btyes, Obj/core_tcp.o(.fast))<br>
<p><strong><a name="[450]"></a>tcp_pcb_purge</strong>(20 bytes, Stack size 4 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = tcp_pcb_purge &rArr; tcp_new_port </ul>
<br>[Calls]<ul>
<li><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
</ul>
<br>[Called By]<ul>
<li><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</ul>
<p><strong><a name="[451]"></a>tcp_next_iss</strong>(14 bytes, Stack size 0 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</ul>
<p><strong><a name="[452]"></a>tcp_eff_send_mss_impl</strong>(44 bytes, Stack size 8 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</ul>
<br>[Called By]<ul>
<li><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<li><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</ul>
<p><strong><a name="[453]"></a>tcp_recv_null</strong>(56 bytes, Stack size 8 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 636 
<li>Call Chain = tcp_recv_null &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</ul>
<br>[Called By]<ul>
<li><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<li><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</ul>
<p><strong><a name="[454]"></a>tcp_process_refused_data</strong>(126 bytes, Stack size 20 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 656 
<li>Call Chain = tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close_shutdown  &rArr; tcp_close_shutdown_fin  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</ul>
<br>[Called By]<ul>
<li><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<li><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</ul>
<p><strong><a name="[455]"></a>tcp_fasttmr</strong>(128 bytes, Stack size 28 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 684 
<li>Call Chain = tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null  &rArr; tcp_close_shutdown  &rArr; tcp_close_shutdown_fin  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<li><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<li><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</ul>
<br>[Called By]<ul>
<li><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</ul>
<p><strong><a name="[456]"></a>tcp_tmr</strong>(32 bytes, Stack size 4 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 688 
<li>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data  &rArr; tcp_recv_null  &rArr; tcp_close_shutdown  &rArr; tcp_close_shutdown_fin  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<li><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</ul>
<br>[Called By]<ul>
<li><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</ul>
<p><strong><a name="[458]"></a>tcp_alloc</strong>(304 bytes, Stack size 16 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 668 
<li>Call Chain = tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<li><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
</ul>
<br>[Called By]<ul>
<li><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_ip_type
<li><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</ul>
<p><strong><a name="[459]"></a>tcp_new_ip_type</strong>(10 bytes, Stack size 4 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 672 
<li>Call Chain = tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</ul>
<br>[Called By]<ul>
<li><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
</ul>
<p><strong><a name="[45e]"></a>tcp_input</strong>(3354 bytes, Stack size 72 btyes, Obj/core_tcp_in.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 740 
<li>Call Chain = tcp_input &rArr; tcp_alloc &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<li><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<li><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcbs_sane
<li><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<li><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<li><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<li><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<li><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<li><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<li><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<li><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<li><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<li><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<li><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<li><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<li><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<li><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<li><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<li><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</ul>
<br>[Called By]<ul>
<li><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</ul>
<p><strong><a name="[45f]"></a>tcp_trigger_input_pcb_close</strong>(12 bytes, Stack size 0 btyes, Obj/core_tcp_in.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</ul>
<p><strong><a name="[461]"></a>tcp_send_fin</strong>(90 bytes, Stack size 0 btyes, Obj/core_tcp_out.o(.text.tcp_send_fin))<br>
<br>[Stack]<ul><li>Max Depth = 408 
<li>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; tcp_pbuf_prealloc.isra.0  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</ul>
<br>[Called By]<ul>
<li><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</ul>
<p><strong><a name="[462]"></a>tcp_rst</strong>(224 bytes, Stack size 0 btyes, Obj/core_tcp_out.o(.text.tcp_rst))<br>
<br>[Stack]<ul><li>Max Depth = 512 
<li>Call Chain = tcp_rst &rArr; ip4_output_if &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<li><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<li><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<li><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<li><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</ul>
<p><strong><a name="[463]"></a>tcp_keepalive</strong>(90 bytes, Stack size 0 btyes, Obj/core_tcp_out.o(.text.tcp_keepalive))<br>
<br>[Stack]<ul><li>Max Depth = 512 
<li>Call Chain = tcp_keepalive &rArr; ip4_output_if &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc.isra.0
<li><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<li><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</ul>
<br>[Called By]<ul>
<li><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</ul>
<p><strong><a name="[466]"></a>tcp_write</strong>(1284 bytes, Stack size 100 btyes, Obj/core_tcp_out.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 476 
<li>Call Chain = tcp_write &rArr; tcp_pbuf_prealloc.isra.0 &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<li><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc.isra.0
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</ul>
<br>[Called By]<ul>
<li><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
</ul>
<p><strong><a name="[467]"></a>tcp_enqueue_flags</strong>(372 bytes, Stack size 32 btyes, Obj/core_tcp_out.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 408 
<li>Call Chain = tcp_enqueue_flags &rArr; tcp_pbuf_prealloc.isra.0 &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc.isra.0
<li><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<li><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<li><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</ul>
<p><strong><a name="[468]"></a>tcp_send_empty_ack</strong>(126 bytes, Stack size 28 btyes, Obj/core_tcp_out.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 540 
<li>Call Chain = tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc.isra.0
<li><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<li><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</ul>
<br>[Called By]<ul>
<li><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<li><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<li><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</ul>
<p><strong><a name="[469]"></a>tcp_output</strong>(1198 bytes, Stack size 60 btyes, Obj/core_tcp_out.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 600 
<li>Call Chain = tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<li><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<li><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<li><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
</ul>
<br>[Called By]<ul>
<li><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<li><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<li><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_txnow
<li><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<li><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<li><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<li><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<li><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<li><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<li><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
</ul>
<p><strong><a name="[46a]"></a>tcp_rexmit_rto</strong>(58 bytes, Stack size 4 btyes, Obj/core_tcp_out.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 604 
<li>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</ul>
<br>[Called By]<ul>
<li><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<li><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</ul>
<p><strong><a name="[46b]"></a>tcp_rexmit</strong>(134 bytes, Stack size 20 btyes, Obj/core_tcp_out.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</ul>
<br>[Called By]<ul>
<li><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<li><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
</ul>
<p><strong><a name="[46c]"></a>tcp_rexmit_fast</strong>(86 bytes, Stack size 8 btyes, Obj/core_tcp_out.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit </ul>
<br>[Calls]<ul>
<li><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</ul>
<br>[Called By]<ul>
<li><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</ul>
<p><strong><a name="[46d]"></a>tcp_zero_window_probe</strong>(290 bytes, Stack size 36 btyes, Obj/core_tcp_out.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 548 
<li>Call Chain = tcp_zero_window_probe &rArr; ip4_output_if &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc.isra.0
<li><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<li><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<li><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</ul>
<br>[Called By]<ul>
<li><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</ul>
<p><strong><a name="[46e]"></a>sys_timeout</strong>(152 bytes, Stack size 20 btyes, Obj/core_timeouts.o(.text.sys_timeout))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = sys_timeout &rArr; memp_malloc &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<li><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
<li><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclic_timer
<li><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<li><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<li><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_tmr
</ul>
<p><strong><a name="[46f]"></a>tcp_timer_needed</strong>(44 bytes, Stack size 4 btyes, Obj/core_timeouts.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 236 
<li>Call Chain = tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc  &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</ul>
<br>[Called By]<ul>
<li><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<li><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<li><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<li><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<li><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</ul>
<p><strong><a name="[470]"></a>sys_timeouts_init</strong>(42 bytes, Stack size 0 btyes, Obj/core_timeouts.o(.text.sys_timeouts_init))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = sys_timeouts_init &rArr; sys_timeout &rArr; memp_malloc  &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<li><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</ul>
<br>[Called By]<ul>
<li><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</ul>
<p><strong><a name="[473]"></a>sys_untimeout</strong>(82 bytes, Stack size 4 btyes, Obj/core_timeouts.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 216 
<li>Call Chain = sys_untimeout &rArr; memp_free &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</ul>
<br>[Called By]<ul>
<li><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_handle
</ul>
<p><strong><a name="[474]"></a>sys_restart_timeouts</strong>(12 bytes, Stack size 4 btyes, Obj/core_timeouts.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = sys_restart_timeouts &rArr; sys_now </ul>
<br>[Calls]<ul>
<li><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</ul>
<p><strong><a name="[475]"></a>sys_timeouts_mbox_fetch</strong>(156 bytes, Stack size 40 btyes, Obj/core_timeouts.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 364 
<li>Call Chain = sys_timeouts_mbox_fetch &rArr; sys_arch_mbox_fetch &rArr; rt_mb_recv  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<li><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<li><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
</ul>
<br>[Called By]<ul>
<li><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</ul>
<p><strong><a name="[476]"></a>udp_init</strong>(2 bytes, Stack size 0 btyes, Obj/core_udp.o(.text.udp_init))<br>
<br>[Called By]<ul>
<li><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</ul>
<p><strong><a name="[477]"></a>udp_input</strong>(394 bytes, Stack size 52 btyes, Obj/core_udp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 608 
<li>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response.isra.0  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<li><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</ul>
<br>[Called By]<ul>
<li><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</ul>
<p><strong><a name="[478]"></a>udp_bind</strong>(220 bytes, Stack size 16 btyes, Obj/core_udp.o(.text.udp_bind))<br>
<br>[Called By]<ul>
<li><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
<li><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<li><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<li><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<li><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<li><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_init
</ul>
<p><strong><a name="[479]"></a>udp_connect</strong>(92 bytes, Stack size 0 btyes, Obj/core_udp.o(.text.udp_connect))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = udp_connect &rArr; udp_bind </ul>
<br>[Calls]<ul>
<li><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</ul>
<br>[Called By]<ul>
<li><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<li><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
</ul>
<p><strong><a name="[47a]"></a>udp_disconnect</strong>(14 bytes, Stack size 0 btyes, Obj/core_udp.o(.text.udp_disconnect))<br>
<br>[Called By]<ul>
<li><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_disconnect
</ul>
<p><strong><a name="[47b]"></a>udp_remove</strong>(74 bytes, Stack size 4 btyes, Obj/core_udp.o(.text.udp_remove))<br>
<br>[Stack]<ul><li>Max Depth = 216 
<li>Call Chain = udp_remove &rArr; memp_free &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</ul>
<br>[Called By]<ul>
<li><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<li><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<li><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<li><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
<li><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_init
</ul>
<p><strong><a name="[47c]"></a>udp_new</strong>(34 bytes, Stack size 8 btyes, Obj/core_udp.o(.text.udp_new))<br>
<br>[Stack]<ul><li>Max Depth = 220 
<li>Call Chain = udp_new &rArr; memp_malloc &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
<li><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
</ul>
<p><strong><a name="[47d]"></a>udp_new_ip_type</strong>(8 bytes, Stack size 4 btyes, Obj/core_udp.o(.text.udp_new_ip_type))<br>
<br>[Stack]<ul><li>Max Depth = 224 
<li>Call Chain = udp_new_ip_type &rArr; udp_new &rArr; memp_malloc  &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
</ul>
<br>[Called By]<ul>
<li><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<li><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<li><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_init
</ul>
<p><strong><a name="[47e]"></a>udp_netif_ip_addr_changed</strong>(58 bytes, Stack size 0 btyes, Obj/core_udp.o(.text.udp_netif_ip_addr_changed))<br>
<br>[Called By]<ul>
<li><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</ul>
<p><strong><a name="[47f]"></a>udp_sendto_if_src</strong>(370 bytes, Stack size 52 btyes, Obj/core_udp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 564 
<li>Call Chain = udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<li><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<li><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<li><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<li><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<li><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<li><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
</ul>
<p><strong><a name="[480]"></a>udp_sendto_if</strong>(78 bytes, Stack size 16 btyes, Obj/core_udp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 580 
<li>Call Chain = udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</ul>
<br>[Called By]<ul>
<li><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<li><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<li><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<li><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<li><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</ul>
<p><strong><a name="[481]"></a>udp_sendto</strong>(90 bytes, Stack size 24 btyes, Obj/core_udp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 604 
<li>Call Chain = udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<li><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</ul>
<br>[Called By]<ul>
<li><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<li><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<li><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<li><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resend_data
<li><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack
<li><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error
</ul>
<p><strong><a name="[482]"></a>udp_send</strong>(24 bytes, Stack size 4 btyes, Obj/core_udp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 608 
<li>Call Chain = udp_send &rArr; udp_sendto &rArr; udp_sendto_if  &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</ul>
<br>[Called By]<ul>
<li><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
</ul>
<p><strong><a name="[483]"></a>udp_recv</strong>(6 bytes, Stack size 0 btyes, Obj/core_udp.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<li><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<li><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<li><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_init
</ul>
<p><strong><a name="[484]"></a>ethernet_input</strong>(174 bytes, Stack size 16 btyes, Obj/netif_ethernet.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 792 
<li>Call Chain = ethernet_input &rArr; ip4_input &rArr; tcp_input  &rArr; tcp_alloc  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<li><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<li><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
</ul>
<p><strong><a name="[485]"></a>ethernet_output</strong>(132 bytes, Stack size 24 btyes, Obj/netif_ethernet.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = ethernet_output &rArr; pbuf_header &rArr; pbuf_header_impl  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<li><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<li><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<li><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<li><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</ul>
<p><strong><a name="[488]"></a>set_if</strong>(134 bytes, Stack size 0 btyes, Obj/netif_ethernetif.o(.text.set_if))<br>
<br>[Stack]<ul><li>Max Depth = 376 
<li>Call Chain = set_if &rArr; netifapi_netif_set_addr &rArr; tcpip_api_call  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<li><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<li><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_set_addr
</ul>
<br>[Called By]<ul>
<li><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ifconfig
</ul>
<p><strong><a name="[489]"></a>set_dns</strong>(34 bytes, Stack size 8 btyes, Obj/netif_ethernetif.o(.text.set_dns))<br>
<br>[Stack]<ul><li>Max Depth = 260 
<li>Call Chain = set_dns &rArr; ip4addr_aton &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<li><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
</ul>
<br>[Called By]<ul>
<li><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dns
</ul>
<p><strong><a name="[48a]"></a>list_if</strong>(356 bytes, Stack size 40 btyes, Obj/netif_ethernetif.o(.text.list_if))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = list_if &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<li><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_getserver
<li><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
</ul>
<br>[Called By]<ul>
<li><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ifconfig
</ul>
<p><strong><a name="[48b]"></a>list_udps</strong>(94 bytes, Stack size 64 btyes, Obj/netif_ethernetif.o(.text.list_udps))<br>
<br>[Stack]<ul><li>Max Depth = 236 
<li>Call Chain = list_udps &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<li><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<li><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
</ul>
<br>[Called By]<ul>
<li><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_netstat
</ul>
<p><strong><a name="[48c]"></a>list_tcps</strong>(284 bytes, Stack size 80 btyes, Obj/netif_ethernetif.o(.text.list_tcps))<br>
<br>[Stack]<ul><li>Max Depth = 252 
<li>Call Chain = list_tcps &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<li><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<li><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_debug_state_str
<li><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
</ul>
<br>[Called By]<ul>
<li><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_netstat
</ul>
<p><strong><a name="[48d]"></a>eth_device_init_with_flag</strong>(172 bytes, Stack size 44 btyes, Obj/netif_ethernetif.o(.text.eth_device_init_with_flag))<br>
<br>[Stack]<ul><li>Max Depth = 428 
<li>Call Chain = eth_device_init_with_flag &rArr; netifapi_netif_add &rArr; tcpip_api_call  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<li><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<li><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<li><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<li><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<li><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_add
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init
</ul>
<p><strong><a name="[48e]"></a>eth_device_init</strong>(10 bytes, Stack size 4 btyes, Obj/netif_ethernetif.o(.text.eth_device_init))<br>
<br>[Stack]<ul><li>Max Depth = 432 
<li>Call Chain = eth_device_init &rArr; eth_device_init_with_flag &rArr; netifapi_netif_add  &rArr; tcpip_api_call  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</ul>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
</ul>
<p><strong><a name="[48f]"></a>eth_device_linkchange</strong>(64 bytes, Stack size 0 btyes, Obj/netif_ethernetif.o(.text.eth_device_linkchange))<br>
<br>[Stack]<ul><li>Max Depth = 308 
<li>Call Chain = eth_device_linkchange &rArr; rt_mb_send &rArr; rt_mb_send_wait  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_link_update
</ul>
<p><strong><a name="[490]"></a>eth_system_device_init</strong>(4 bytes, Stack size 0 btyes, Obj/netif_ethernetif.o(.text.eth_system_device_init))<br>
<p><strong><a name="[491]"></a>eth_system_device_init_private</strong>(120 bytes, Stack size 24 btyes, Obj/netif_ethernetif.o(.text.eth_system_device_init_private))<br>
<br>[Stack]<ul><li>Max Depth = 328 
<li>Call Chain = eth_system_device_init_private &rArr; rt_thread_init &rArr; _rt_thread_init.isra.0  &rArr; rt_timer_init  &rArr; rt_object_init  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h2x_hw_init
<li><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<li><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<li><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
</ul>
<p><strong><a name="[492]"></a>eth_get_ipv4</strong>(66 bytes, Stack size 16 btyes, Obj/netif_ethernetif.o(.text.eth_get_ipv4))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = eth_get_ipv4 &rArr; rt_enter_critical </ul>
<br>[Calls]<ul>
<li><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<li><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
</ul>
<br>[Called By]<ul>
<li><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
</ul>
<p><strong><a name="[494]"></a>eth_device_ready</strong>(22 bytes, Stack size 4 btyes, Obj/netif_ethernetif.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 312 
<li>Call Chain = eth_device_ready &rArr; rt_mb_send &rArr; rt_mb_send_wait  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</ul>
<br>[Called By]<ul>
<li><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth1_isr
</ul>
<p><strong><a name="[495]"></a>dhcp_cleanup</strong>(42 bytes, Stack size 0 btyes, Obj/ipv4_dhcp.o(.text.dhcp_cleanup))<br>
<p><strong><a name="[496]"></a>dhcp_inform</strong>(150 bytes, Stack size 0 btyes, Obj/ipv4_dhcp.o(.text.dhcp_inform))<br>
<p><strong><a name="[497]"></a>dhcp_network_changed</strong>(48 bytes, Stack size 4 btyes, Obj/ipv4_dhcp.o(.text.dhcp_network_changed))<br>
<br>[Stack]<ul><li>Max Depth = 620 
<li>Call Chain = dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if  &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<li><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
</ul>
<br>[Called By]<ul>
<li><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
</ul>
<p><strong><a name="[498]"></a>dhcp_arp_reply</strong>(176 bytes, Stack size 28 btyes, Obj/ipv4_dhcp.o(.text.dhcp_arp_reply))<br>
<br>[Stack]<ul><li>Max Depth = 592 
<li>Call Chain = dhcp_arp_reply &rArr; udp_sendto_if_src &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<li><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option.isra.1
<li><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long.isra.4
<li><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<li><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<li><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
</ul>
<p><strong><a name="[499]"></a>dhcp_renew</strong>(222 bytes, Stack size 36 btyes, Obj/ipv4_dhcp.o(.text.dhcp_renew))<br>
<br>[Stack]<ul><li>Max Depth = 616 
<li>Call Chain = dhcp_renew &rArr; udp_sendto_if &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<li><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option.isra.1
<li><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short.isra.0
<li><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte.isra.2
<li><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<li><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<li><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
</ul>
<br>[Called By]<ul>
<li><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</ul>
<p><strong><a name="[49a]"></a>dhcp_release</strong>(204 bytes, Stack size 32 btyes, Obj/ipv4_dhcp.o(.text.dhcp_release))<br>
<br>[Stack]<ul><li>Max Depth = 744 
<li>Call Chain = dhcp_release &rArr; netif_set_addr &rArr; netif_set_ipaddr  &rArr; tcp_netif_ip_addr_changed  &rArr; tcp_netif_ip_addr_changed_pcblist  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<li><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<li><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option.isra.1
<li><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long.isra.4
<li><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<li><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<li><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
</ul>
<br>[Called By]<ul>
<li><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<li><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</ul>
<p><strong><a name="[49b]"></a>dhcp_coarse_tmr</strong>(362 bytes, Stack size 40 btyes, Obj/ipv4_dhcp.o(.text.dhcp_coarse_tmr))<br>
<br>[Stack]<ul><li>Max Depth = 784 
<li>Call Chain = dhcp_coarse_tmr &rArr; dhcp_release &rArr; netif_set_addr  &rArr; netif_set_ipaddr  &rArr; tcp_netif_ip_addr_changed  &rArr; tcp_netif_ip_addr_changed_pcblist  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<li><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<li><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<li><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<li><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option.isra.1
<li><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short.isra.0
<li><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte.isra.2
<li><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<li><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<li><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
</ul>
<p><strong><a name="[49c]"></a>dhcp_fine_tmr</strong>(134 bytes, Stack size 16 btyes, Obj/ipv4_dhcp.o(.text.dhcp_fine_tmr))<br>
<br>[Stack]<ul><li>Max Depth = 760 
<li>Call Chain = dhcp_fine_tmr &rArr; dhcp_release &rArr; netif_set_addr  &rArr; netif_set_ipaddr  &rArr; tcp_netif_ip_addr_changed  &rArr; tcp_netif_ip_addr_changed_pcblist  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<li><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<li><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<li><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<li><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<li><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
</ul>
<p><strong><a name="[49d]"></a>dhcp_stop</strong>(86 bytes, Stack size 8 btyes, Obj/ipv4_dhcp.o(.text.dhcp_stop))<br>
<br>[Stack]<ul><li>Max Depth = 236 
<li>Call Chain = dhcp_stop &rArr; dhcp_dec_pcb_refcount &rArr; udp_remove  &rArr; memp_free  &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
</ul>
<br>[Called By]<ul>
<li><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</ul>
<p><strong><a name="[49e]"></a>dhcp_start</strong>(196 bytes, Stack size 12 btyes, Obj/ipv4_dhcp.o(.text.dhcp_start))<br>
<br>[Stack]<ul><li>Max Depth = 616 
<li>Call Chain = dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<li><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<li><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
<li><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<li><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</ul>
<br>[Called By]<ul>
<li><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<li><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</ul>
<p><strong><a name="[49f]"></a>dhcp_supplied_address</strong>(36 bytes, Stack size 0 btyes, Obj/ipv4_dhcp.o(.text.dhcp_supplied_address))<br>
<p><strong><a name="[4b0]"></a>dhcp_set_struct</strong>(86 bytes, Stack size 0 btyes, Obj/ipv4_dhcp.o(.text.dhcp_set_struct))<br>
<p><strong><a name="[4b4]"></a>etharp_cleanup_netif</strong>(54 bytes, Stack size 0 btyes, Obj/ipv4_etharp.o(.text.etharp_cleanup_netif))<br>
<p><strong><a name="[4b5]"></a>etharp_query</strong>(448 bytes, Stack size 0 btyes, Obj/ipv4_etharp.o(.text.etharp_query))<br>
<br>[Stack]<ul><li>Max Depth = 408 
<li>Call Chain = etharp_query &rArr; etharp_raw &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<li><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<li><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<li><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<li><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</ul>
<br>[Called By]<ul>
<li><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<li><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
</ul>
<p><strong><a name="[4b6]"></a>etharp_request</strong>(40 bytes, Stack size 0 btyes, Obj/ipv4_etharp.o(.text.etharp_request))<br>
<br>[Stack]<ul><li>Max Depth = 408 
<li>Call Chain = etharp_request &rArr; etharp_raw &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</ul>
<br>[Called By]<ul>
<li><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports.part.0
</ul>
<p><strong><a name="[4b8]"></a>etharp_tmr</strong>(138 bytes, Stack size 40 btyes, Obj/ipv4_etharp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 448 
<li>Call Chain = etharp_tmr &rArr; etharp_raw &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<li><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</ul>
<p><strong><a name="[4b9]"></a>etharp_find_addr</strong>(100 bytes, Stack size 16 btyes, Obj/ipv4_etharp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 424 
<li>Call Chain = etharp_find_addr &rArr; etharp_raw &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<p><strong><a name="[4ba]"></a>etharp_get_entry</strong>(154 bytes, Stack size 20 btyes, Obj/ipv4_etharp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 216 
<li>Call Chain = etharp_get_entry &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<p><strong><a name="[4bb]"></a>etharp_input</strong>(436 bytes, Stack size 64 btyes, Obj/ipv4_etharp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 656 
<li>Call Chain = etharp_input &rArr; dhcp_arp_reply &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<li><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<li><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<li><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
</ul>
<br>[Called By]<ul>
<li><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</ul>
<p><strong><a name="[4bc]"></a>etharp_output</strong>(302 bytes, Stack size 28 btyes, Obj/ipv4_etharp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 480 
<li>Call Chain = etharp_output &rArr; etharp_output_to_arp_index &rArr; etharp_raw  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<li><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<li><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<li><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<p><strong><a name="[4be]"></a>icmp_input</strong>(226 bytes, Stack size 36 btyes, Obj/ipv4_icmp.o(.text.icmp_input))<br>
<br>[Stack]<ul><li>Max Depth = 548 
<li>Call Chain = icmp_input &rArr; ip4_output_if &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<li><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<li><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<li><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</ul>
<br>[Called By]<ul>
<li><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</ul>
<p><strong><a name="[4bf]"></a>icmp_dest_unreach</strong>(14 bytes, Stack size 4 btyes, Obj/ipv4_icmp.o(.text.icmp_dest_unreach))<br>
<br>[Stack]<ul><li>Max Depth = 556 
<li>Call Chain = icmp_dest_unreach &rArr; icmp_send_response.isra.0 &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response.isra.0
</ul>
<br>[Called By]<ul>
<li><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<li><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</ul>
<p><strong><a name="[4c0]"></a>icmp_time_exceeded</strong>(14 bytes, Stack size 4 btyes, Obj/ipv4_icmp.o(.text.icmp_time_exceeded))<br>
<br>[Stack]<ul><li>Max Depth = 556 
<li>Call Chain = icmp_time_exceeded &rArr; icmp_send_response.isra.0 &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response.isra.0
</ul>
<br>[Called By]<ul>
<li><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<li><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</ul>
<p><strong><a name="[4c4]"></a>igmp_init</strong>(22 bytes, Stack size 0 btyes, Obj/ipv4_igmp.o(.text.igmp_init))<br>
<br>[Called By]<ul>
<li><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</ul>
<p><strong><a name="[4c5]"></a>igmp_start</strong>(54 bytes, Stack size 8 btyes, Obj/ipv4_igmp.o(.text.igmp_start))<br>
<br>[Stack]<ul><li>Max Depth = 240 
<li>Call Chain = igmp_start &rArr; igmp_lookup_group.isra.3 &rArr; memp_malloc  &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group.isra.3
</ul>
<br>[Called By]<ul>
<li><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</ul>
<p><strong><a name="[4c6]"></a>igmp_stop</strong>(48 bytes, Stack size 0 btyes, Obj/ipv4_igmp.o(.text.igmp_stop))<br>
<p><strong><a name="[4c7]"></a>igmp_report_groups</strong>(30 bytes, Stack size 8 btyes, Obj/ipv4_igmp.o(.text.igmp_report_groups))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = igmp_report_groups &rArr; igmp_delaying_member </ul>
<br>[Calls]<ul>
<li><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
</ul>
<br>[Called By]<ul>
<li><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports.part.0
</ul>
<p><strong><a name="[4c8]"></a>igmp_lookfor_group</strong>(30 bytes, Stack size 0 btyes, Obj/ipv4_igmp.o(.text.igmp_lookfor_group))<br>
<br>[Called By]<ul>
<li><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</ul>
<p><strong><a name="[4c9]"></a>igmp_input</strong>(194 bytes, Stack size 20 btyes, Obj/ipv4_igmp.o(.text.igmp_input))<br>
<br>[Stack]<ul><li>Max Depth = 336 
<li>Call Chain = igmp_input &rArr; pbuf_free &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
</ul>
<br>[Called By]<ul>
<li><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</ul>
<p><strong><a name="[4ca]"></a>igmp_joingroup_netif</strong>(196 bytes, Stack size 16 btyes, Obj/ipv4_igmp.o(.text.igmp_joingroup_netif))<br>
<br>[Stack]<ul><li>Max Depth = 592 
<li>Call Chain = igmp_joingroup_netif &rArr; igmp_send &rArr; ip4_output_if_opt  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group.isra.3
<li><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<li><a href="#[cce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
</ul>
<p><strong><a name="[4cb]"></a>igmp_joingroup</strong>(132 bytes, Stack size 16 btyes, Obj/ipv4_igmp.o(.text.igmp_joingroup))<br>
<br>[Stack]<ul><li>Max Depth = 608 
<li>Call Chain = igmp_joingroup &rArr; igmp_joingroup_netif &rArr; igmp_send  &rArr; ip4_output_if_opt  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_join_leave_group
<li><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
</ul>
<p><strong><a name="[4cc]"></a>igmp_leavegroup_netif</strong>(232 bytes, Stack size 16 btyes, Obj/ipv4_igmp.o(.text.igmp_leavegroup_netif))<br>
<br>[Stack]<ul><li>Max Depth = 592 
<li>Call Chain = igmp_leavegroup_netif &rArr; igmp_send &rArr; ip4_output_if_opt  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<li><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
</ul>
<p><strong><a name="[4cd]"></a>igmp_leavegroup</strong>(142 bytes, Stack size 20 btyes, Obj/ipv4_igmp.o(.text.igmp_leavegroup))<br>
<br>[Stack]<ul><li>Max Depth = 612 
<li>Call Chain = igmp_leavegroup &rArr; igmp_leavegroup_netif &rArr; igmp_send  &rArr; ip4_output_if_opt  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_join_leave_group
<li><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
</ul>
<p><strong><a name="[4ce]"></a>igmp_tmr</strong>(84 bytes, Stack size 20 btyes, Obj/ipv4_igmp.o(.text.igmp_tmr))<br>
<br>[Stack]<ul><li>Max Depth = 596 
<li>Call Chain = igmp_tmr &rArr; igmp_send &rArr; ip4_output_if_opt  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
</ul>
<p><strong><a name="[4cf]"></a>ip4_set_default_multicast_netif</strong>(6 bytes, Stack size 0 btyes, Obj/ipv4_ip4.o(.text.ip4_set_default_multicast_netif))<br>
<p><strong><a name="[4d0]"></a>ip4_route</strong>(200 bytes, Stack size 0 btyes, Obj/ipv4_ip4.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<li><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<li><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<li><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<li><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<li><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<li><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<li><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<li><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<li><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<li><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output
<li><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response.isra.0
</ul>
<p><strong><a name="[4d1]"></a>ip4_input</strong>(796 bytes, Stack size 36 btyes, Obj/ipv4_ip4.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 776 
<li>Call Chain = ip4_input &rArr; tcp_input &rArr; tcp_alloc  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<li><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<li><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<li><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<li><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<li><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<li><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<li><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<li><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<li><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<li><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<li><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<li><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<li><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</ul>
<br>[Called By]<ul>
<li><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</ul>
<p><strong><a name="[4d2]"></a>ip4_output_if_opt_src</strong>(390 bytes, Stack size 56 btyes, Obj/ipv4_ip4.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 480 
<li>Call Chain = ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</ul>
<br>[Called By]<ul>
<li><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt
<li><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<li><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
</ul>
<p><strong><a name="[4d3]"></a>ip4_output_if_opt</strong>(68 bytes, Stack size 40 btyes, Obj/ipv4_ip4.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 520 
<li>Call Chain = ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
</ul>
<br>[Called By]<ul>
<li><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
</ul>
<p><strong><a name="[4d4]"></a>ip4_output_if</strong>(88 bytes, Stack size 32 btyes, Obj/ipv4_ip4.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 512 
<li>Call Chain = ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
</ul>
<br>[Called By]<ul>
<li><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<li><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<li><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<li><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<li><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<li><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<li><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output
<li><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response.isra.0
<li><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</ul>
<p><strong><a name="[4d5]"></a>ip4_output_if_src</strong>(46 bytes, Stack size 32 btyes, Obj/ipv4_ip4.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 512 
<li>Call Chain = ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
</ul>
<br>[Called By]<ul>
<li><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</ul>
<p><strong><a name="[4d6]"></a>ip4_output</strong>(84 bytes, Stack size 40 btyes, Obj/ipv4_ip4.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 552 
<li>Call Chain = ip4_output &rArr; ip4_output_if &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<li><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
</ul>
<p><strong><a name="[4d7]"></a>ip4_addr_isbroadcast_u32</strong>(58 bytes, Stack size 0 btyes, Obj/ipv4_ip4_addr.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<li><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<li><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<li><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<li><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<li><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<li><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<li><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<li><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<li><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</ul>
<p><strong><a name="[4d8]"></a>ip4_addr_netmask_valid</strong>(56 bytes, Stack size 4 btyes, Obj/ipv4_ip4_addr.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</ul>
<p><strong><a name="[4d9]"></a>ip4addr_aton</strong>(400 bytes, Stack size 56 btyes, Obj/ipv4_ip4_addr.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 252 
<li>Call Chain = ip4addr_aton &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dns
<li><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<li><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<li><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<li><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</ul>
<p><strong><a name="[4da]"></a>ipaddr_addr</strong>(28 bytes, Stack size 8 btyes, Obj/ipv4_ip4_addr.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 260 
<li>Call Chain = ipaddr_addr &rArr; ip4addr_aton &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
</ul>
<br>[Called By]<ul>
<li><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
<li><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
<li><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
<li><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_client
</ul>
<p><strong><a name="[4db]"></a>ip4addr_ntoa_r</strong>(166 bytes, Stack size 32 btyes, Obj/ipv4_ip4_addr.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
</ul>
<p><strong><a name="[4dc]"></a>ip4addr_ntoa</strong>(12 bytes, Stack size 4 btyes, Obj/ipv4_ip4_addr.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = ip4addr_ntoa &rArr; ip4addr_ntoa_r </ul>
<br>[Calls]<ul>
<li><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa_r
</ul>
<br>[Called By]<ul>
<li><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
<li><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
<li><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<li><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<li><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dns
<li><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<li><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_webnet
<li><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_asp_dofile
</ul>
<p><strong><a name="[4e0]"></a>ip_reass_tmr</strong>(48 bytes, Stack size 12 btyes, Obj/ipv4_ip4_frag.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 236 
<li>Call Chain = ip_reass_tmr &rArr; ip_reass_dequeue_datagram &rArr; memp_free  &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
</ul>
<p><strong><a name="[4e1]"></a>ip4_reass</strong>(1354 bytes, Stack size 52 btyes, Obj/ipv4_ip4_frag.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 368 
<li>Call Chain = ip4_reass &rArr; pbuf_free &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<li><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<li><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
</ul>
<br>[Called By]<ul>
<li><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</ul>
<p><strong><a name="[4e2]"></a>ip4_frag</strong>(392 bytes, Stack size 64 btyes, Obj/ipv4_ip4_frag.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 424 
<li>Call Chain = ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<li><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</ul>
<br>[Called By]<ul>
<li><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<li><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
</ul>
<p><strong><a name="[4e3]"></a>utest_init</strong>(22 bytes, Stack size 0 btyes, Obj/utest_utest.o(.text.utest_init))<br>
<p><strong><a name="[4e9]"></a>utest_log_lv_set</strong>(2 bytes, Stack size 0 btyes, Obj/utest_utest.o(.text.utest_log_lv_set))<br>
<p><strong><a name="[4ea]"></a>utest_handle_get</strong>(4 bytes, Stack size 0 btyes, Obj/utest_utest.o(.text.utest_handle_get))<br>
<p><strong><a name="[4eb]"></a>utest_unit_run</strong>(20 bytes, Stack size 0 btyes, Obj/utest_utest.o(.text.utest_unit_run))<br>
<p><strong><a name="[4ec]"></a>utest_assert</strong>(26 bytes, Stack size 0 btyes, Obj/utest_utest.o(.text.utest_assert))<br>
<p><strong><a name="[4ed]"></a>utest_assert_string</strong>(76 bytes, Stack size 0 btyes, Obj/utest_utest.o(.text.utest_assert_string))<br>
<p><strong><a name="[4ee]"></a>utest_assert_buf</strong>(80 bytes, Stack size 0 btyes, Obj/utest_utest.o(.text.utest_assert_buf))<br>
<p><strong><a name="[4ef]"></a>mbedtls_aes_self_test</strong>(1368 bytes, Stack size 316 btyes, Obj/library_aes.o(.text.mbedtls_aes_self_test))<br>
<br>[Stack]<ul><li>Max Depth = 900 
<li>Call Chain = mbedtls_aes_self_test &rArr; mbedtls_aes_crypt_cfb128 &rArr; _mbedtls_aes_crypt_cfb128  &rArr; tih_aes_crypt  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<li><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<li><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cfb128
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ctr
<li><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<li><a href="#[cc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</ul>
<br>[Called By]<ul>
<li><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_crypto_test
</ul>
<p><strong><a name="[4f1]"></a>mbedtls_aes_init</strong>(12 bytes, Stack size 4 btyes, Obj/library_aes_alt.o(.text.mbedtls_aes_init))<br>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<li><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_alloc
<li><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<li><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<li><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
</ul>
<p><strong><a name="[4f2]"></a>mbedtls_aes_free</strong>(16 bytes, Stack size 4 btyes, Obj/library_aes_alt.o(.text.mbedtls_aes_free))<br>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<li><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_free
<li><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<li><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_free
<li><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
</ul>
<p><strong><a name="[4f3]"></a>mbedtls_aes_setkey_enc</strong>(34 bytes, Stack size 4 btyes, Obj/library_aes_alt.o(.text.mbedtls_aes_setkey_enc))<br>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<li><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_enc_wrap
<li><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<li><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<li><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
</ul>
<p><strong><a name="[4f4]"></a>mbedtls_aes_setkey_dec</strong>(34 bytes, Stack size 4 btyes, Obj/library_aes_alt.o(.text.mbedtls_aes_setkey_dec))<br>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<li><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_dec_wrap
<li><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
</ul>
<p><strong><a name="[4f5]"></a>mbedtls_aes_encrypt</strong>(8 bytes, Stack size 0 btyes, Obj/library_aes_alt.o(.text.mbedtls_aes_encrypt))<br>
<p><strong><a name="[4f6]"></a>mbedtls_aes_decrypt</strong>(8 bytes, Stack size 0 btyes, Obj/library_aes_alt.o(.text.mbedtls_aes_decrypt))<br>
<p><strong><a name="[4f7]"></a>mbedtls_aes_crypt_ecb</strong>(132 bytes, Stack size 68 btyes, Obj/library_aes_alt.o(.text.mbedtls_aes_crypt_ecb))<br>
<br>[Stack]<ul><li>Max Depth = 436 
<li>Call Chain = mbedtls_aes_crypt_ecb &rArr; tih_aes_crypt &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_aes_crypt
<li><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_dtcm_addr_check
</ul>
<br>[Called By]<ul>
<li><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<li><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cfb128
<li><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ctr
<li><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_ecb_wrap
<li><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<li><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<li><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
</ul>
<p><strong><a name="[4f8]"></a>mbedtls_aes_crypt_cbc</strong>(470 bytes, Stack size 160 btyes, Obj/library_aes_alt.o(.text.mbedtls_aes_crypt_cbc))<br>
<br>[Stack]<ul><li>Max Depth = 528 
<li>Call Chain = mbedtls_aes_crypt_cbc &rArr; tih_aes_crypt &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_aes_crypt
<li><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmove
<li><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_dtcm_addr_check
</ul>
<br>[Called By]<ul>
<li><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<li><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_cbc_wrap
<li><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
</ul>
<p><strong><a name="[4f9]"></a>mbedtls_aes_crypt_cfb128</strong>(292 bytes, Stack size 60 btyes, Obj/library_aes_alt.o(.text.mbedtls_aes_crypt_cfb128))<br>
<br>[Stack]<ul><li>Max Depth = 584 
<li>Call Chain = mbedtls_aes_crypt_cfb128 &rArr; _mbedtls_aes_crypt_cfb128 &rArr; tih_aes_crypt  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbedtls_aes_crypt_cfb128
<li><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</ul>
<br>[Called By]<ul>
<li><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<li><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_cfb128_wrap
</ul>
<p><strong><a name="[4fa]"></a>mbedtls_aes_crypt_cfb8</strong>(118 bytes, Stack size 0 btyes, Obj/library_aes_alt.o(.text.mbedtls_aes_crypt_cfb8))<br>
<p><strong><a name="[4fb]"></a>_mbedtls_aes_crypt_ctr</strong>(368 bytes, Stack size 96 btyes, Obj/library_aes_alt.o(.text._mbedtls_aes_crypt_ctr))<br>
<br>[Stack]<ul><li>Max Depth = 472 
<li>Call Chain = _mbedtls_aes_crypt_ctr &rArr; tih_aes_crypt_ctr &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_aes_crypt_ctr
<li><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmove
<li><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_dtcm_addr_check
</ul>
<br>[Called By]<ul>
<li><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ctr
</ul>
<p><strong><a name="[4fc]"></a>mbedtls_aes_crypt_ctr</strong>(150 bytes, Stack size 48 btyes, Obj/library_aes_alt.o(.text.mbedtls_aes_crypt_ctr))<br>
<br>[Stack]<ul><li>Max Depth = 520 
<li>Call Chain = mbedtls_aes_crypt_ctr &rArr; _mbedtls_aes_crypt_ctr &rArr; tih_aes_crypt_ctr  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbedtls_aes_crypt_ctr
<li><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</ul>
<br>[Called By]<ul>
<li><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<li><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_update_mac.isra.0
<li><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_ctr_wrap
</ul>
<p><strong><a name="[4fd]"></a>mbedtls_asn1_get_len</strong>(250 bytes, Stack size 4 btyes, Obj/library_asn1parse.o(.text.mbedtls_asn1_get_len))<br>
<br>[Called By]<ul>
<li><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<li><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bool
<li><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<li><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<li><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring
<li><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<li><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_sequence_of
<li><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<li><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_serial
<li><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
<li><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
<li><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</ul>
<p><strong><a name="[4fe]"></a>mbedtls_asn1_get_tag</strong>(48 bytes, Stack size 8 btyes, Obj/library_asn1parse.o(.text.mbedtls_asn1_get_tag))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len </ul>
<br>[Calls]<ul>
<li><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</ul>
<br>[Called By]<ul>
<li><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
<li><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_read_signature
<li><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt_wrap
<li><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<li><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<li><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<li><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<li><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<li><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<li><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<li><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
<li><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gm_pk_parse_subpubkey
<li><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<li><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<li><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
<li><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
<li><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_ext
<li><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_uid
<li><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</ul>
<p><strong><a name="[4ff]"></a>mbedtls_asn1_get_bool</strong>(84 bytes, Stack size 16 btyes, Obj/library_asn1parse.o(.text.mbedtls_asn1_get_bool))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = mbedtls_asn1_get_bool &rArr; mbedtls_asn1_get_len </ul>
<br>[Calls]<ul>
<li><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</ul>
<br>[Called By]<ul>
<li><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</ul>
<p><strong><a name="[500]"></a>mbedtls_asn1_get_int</strong>(116 bytes, Stack size 16 btyes, Obj/library_asn1parse.o(.text.mbedtls_asn1_get_int))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_len </ul>
<br>[Calls]<ul>
<li><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</ul>
<br>[Called By]<ul>
<li><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<li><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<li><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<li><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<li><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<li><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<li><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
<li><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</ul>
<p><strong><a name="[501]"></a>mbedtls_asn1_get_mpi</strong>(74 bytes, Stack size 16 btyes, Obj/library_asn1parse.o(.text.mbedtls_asn1_get_mpi))<br>
<br>[Stack]<ul><li>Max Depth = 80 
<li>Call Chain = mbedtls_asn1_get_mpi &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset  &rArr; mbedtls_mpi_grow  </ul>
<br>[Calls]<ul>
<li><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
<li><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</ul>
<br>[Called By]<ul>
<li><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
<li><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_read_signature
<li><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt_wrap
<li><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<li><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<li><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
</ul>
<p><strong><a name="[502]"></a>mbedtls_asn1_get_bitstring</strong>(104 bytes, Stack size 16 btyes, Obj/library_asn1parse.o(.text.mbedtls_asn1_get_bitstring))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = mbedtls_asn1_get_bitstring &rArr; mbedtls_asn1_get_len </ul>
<br>[Calls]<ul>
<li><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</ul>
<br>[Called By]<ul>
<li><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</ul>
<p><strong><a name="[503]"></a>mbedtls_asn1_get_bitstring_null</strong>(80 bytes, Stack size 12 btyes, Obj/library_asn1parse.o(.text.mbedtls_asn1_get_bitstring_null))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = mbedtls_asn1_get_bitstring_null &rArr; mbedtls_asn1_get_len </ul>
<br>[Calls]<ul>
<li><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</ul>
<br>[Called By]<ul>
<li><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<li><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gm_pk_parse_subpubkey
<li><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<li><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig
</ul>
<p><strong><a name="[504]"></a>mbedtls_asn1_get_sequence_of</strong>(170 bytes, Stack size 32 btyes, Obj/library_asn1parse.o(.text.mbedtls_asn1_get_sequence_of))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = mbedtls_asn1_get_sequence_of &rArr; mbedtls_asn1_get_len </ul>
<br>[Calls]<ul>
<li><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</ul>
<br>[Called By]<ul>
<li><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</ul>
<p><strong><a name="[505]"></a>mbedtls_asn1_get_alg</strong>(234 bytes, Stack size 28 btyes, Obj/library_asn1parse.o(.text.mbedtls_asn1_get_alg))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_len </ul>
<br>[Calls]<ul>
<li><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</ul>
<br>[Called By]<ul>
<li><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg_null
<li><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<li><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
<li><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
<li><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg
<li><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
</ul>
<p><strong><a name="[506]"></a>mbedtls_asn1_get_alg_null</strong>(54 bytes, Stack size 16 btyes, Obj/library_asn1parse.o(.text.mbedtls_asn1_get_alg_null))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = mbedtls_asn1_get_alg_null &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_len  </ul>
<br>[Calls]<ul>
<li><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
</ul>
<br>[Called By]<ul>
<li><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<li><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
</ul>
<p><strong><a name="[507]"></a>mbedtls_asn1_free_named_data</strong>(38 bytes, Stack size 0 btyes, Obj/library_asn1parse.o(.text.mbedtls_asn1_free_named_data))<br>
<p><strong><a name="[508]"></a>mbedtls_asn1_free_named_data_list</strong>(34 bytes, Stack size 0 btyes, Obj/library_asn1parse.o(.text.mbedtls_asn1_free_named_data_list))<br>
<p><strong><a name="[509]"></a>mbedtls_asn1_find_named_data</strong>(44 bytes, Stack size 0 btyes, Obj/library_asn1parse.o(.text.mbedtls_asn1_find_named_data))<br>
<p><strong><a name="[50a]"></a>mbedtls_asn1_write_len</strong>(226 bytes, Stack size 0 btyes, Obj/library_asn1write.o(.text.mbedtls_asn1_write_len))<br>
<br>[Called By]<ul>
<li><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<li><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
<li><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_write_signature
<li><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_wrap
</ul>
<p><strong><a name="[50b]"></a>mbedtls_asn1_write_tag</strong>(24 bytes, Stack size 0 btyes, Obj/library_asn1write.o(.text.mbedtls_asn1_write_tag))<br>
<br>[Called By]<ul>
<li><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
<li><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_write_signature
<li><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_wrap
</ul>
<p><strong><a name="[50c]"></a>mbedtls_asn1_write_raw_buffer</strong>(42 bytes, Stack size 8 btyes, Obj/library_asn1write.o(.text.mbedtls_asn1_write_raw_buffer))<br>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_wrap
</ul>
<p><strong><a name="[50d]"></a>mbedtls_asn1_write_mpi</strong>(118 bytes, Stack size 20 btyes, Obj/library_asn1write.o(.text.mbedtls_asn1_write_mpi))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = mbedtls_asn1_write_mpi &rArr; mbedtls_mpi_size </ul>
<br>[Calls]<ul>
<li><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<li><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<li><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</ul>
<br>[Called By]<ul>
<li><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
<li><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_write_signature
<li><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_wrap
</ul>
<p><strong><a name="[50e]"></a>mbedtls_asn1_write_null</strong>(42 bytes, Stack size 0 btyes, Obj/library_asn1write.o(.text.mbedtls_asn1_write_null))<br>
<p><strong><a name="[50f]"></a>mbedtls_asn1_write_oid</strong>(80 bytes, Stack size 0 btyes, Obj/library_asn1write.o(.text.mbedtls_asn1_write_oid))<br>
<p><strong><a name="[510]"></a>mbedtls_asn1_write_algorithm_identifier</strong>(100 bytes, Stack size 0 btyes, Obj/library_asn1write.o(.text.mbedtls_asn1_write_algorithm_identifier))<br>
<p><strong><a name="[511]"></a>mbedtls_asn1_write_bool</strong>(68 bytes, Stack size 0 btyes, Obj/library_asn1write.o(.text.mbedtls_asn1_write_bool))<br>
<p><strong><a name="[512]"></a>mbedtls_asn1_write_int</strong>(96 bytes, Stack size 0 btyes, Obj/library_asn1write.o(.text.mbedtls_asn1_write_int))<br>
<p><strong><a name="[513]"></a>mbedtls_asn1_write_printable_string</strong>(80 bytes, Stack size 0 btyes, Obj/library_asn1write.o(.text.mbedtls_asn1_write_printable_string))<br>
<p><strong><a name="[514]"></a>mbedtls_asn1_write_ia5_string</strong>(80 bytes, Stack size 0 btyes, Obj/library_asn1write.o(.text.mbedtls_asn1_write_ia5_string))<br>
<p><strong><a name="[515]"></a>mbedtls_asn1_write_bitstring</strong>(104 bytes, Stack size 0 btyes, Obj/library_asn1write.o(.text.mbedtls_asn1_write_bitstring))<br>
<p><strong><a name="[516]"></a>mbedtls_asn1_write_octet_string</strong>(80 bytes, Stack size 0 btyes, Obj/library_asn1write.o(.text.mbedtls_asn1_write_octet_string))<br>
<p><strong><a name="[517]"></a>mbedtls_asn1_store_named_data</strong>(170 bytes, Stack size 0 btyes, Obj/library_asn1write.o(.text.mbedtls_asn1_store_named_data))<br>
<p><strong><a name="[519]"></a>mbedtls_base64_encode</strong>(34 bytes, Stack size 0 btyes, Obj/library_base64.o(.text.mbedtls_base64_encode))<br>
<p><strong><a name="[51a]"></a>mbedtls_base64_decode</strong>(442 bytes, Stack size 24 btyes, Obj/library_base64.o(.text.mbedtls_base64_decode))<br>
<br>[Called By]<ul>
<li><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_self_test
<li><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</ul>
<p><strong><a name="[51b]"></a>mbedtls_base64_self_test</strong>(192 bytes, Stack size 144 btyes, Obj/library_base64.o(.text.mbedtls_base64_self_test))<br>
<br>[Stack]<ul><li>Max Depth = 168 
<li>Call Chain = mbedtls_base64_self_test &rArr; mbedtls_base64_encode.part.0 </ul>
<br>[Calls]<ul>
<li><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_encode.part.0
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_decode
</ul>
<br>[Called By]<ul>
<li><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_crypto_test
</ul>
<p><strong><a name="[51c]"></a>mbedtls_mpi_write_binary</strong>(88 bytes, Stack size 0 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_write_binary))<br>
<br>[Calls]<ul>
<li><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<li><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<li><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
<li><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_sign
<li><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_sign_det
<li><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_verify
<li><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<li><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt_wrap
<li><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<li><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<li><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm2_z_get
<li><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm2_encrypt
<li><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm2_decrypt
</ul>
<p><strong><a name="[51d]"></a>mbedtls_mpi_shift_l</strong>(186 bytes, Stack size 20 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_shift_l))<br>
<br>[Stack]<ul><li>Max Depth = 44 
<li>Call Chain = mbedtls_mpi_shift_l &rArr; mbedtls_mpi_grow </ul>
<br>[Calls]<ul>
<li><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<li><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</ul>
<br>[Called By]<ul>
<li><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<li><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<li><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
</ul>
<p><strong><a name="[51e]"></a>mbedtls_mpi_shift_r</strong>(158 bytes, Stack size 12 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_shift_r))<br>
<br>[Stack]<ul><li>Max Depth = 52 
<li>Call Chain = mbedtls_mpi_shift_r &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow  </ul>
<br>[Calls]<ul>
<li><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</ul>
<br>[Called By]<ul>
<li><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<li><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<li><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<li><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<li><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<li><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_sign_det
<li><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
</ul>
<p><strong><a name="[51f]"></a>mbedtls_mpi_cmp_abs</strong>(230 bytes, Stack size 0 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_cmp_abs))<br>
<br>[Called By]<ul>
<li><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul.isra.2
<li><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<li><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<li><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<li><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</ul>
<p><strong><a name="[521]"></a>mbedtls_mpi_cmp_mpi</strong>(276 bytes, Stack size 4 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_cmp_mpi))<br>
<br>[Called By]<ul>
<li><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<li><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<li><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<li><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<li><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<li><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<li><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<li><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<li><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<li><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<li><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_sign_det
<li><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_verify
<li><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<li><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<li><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<li><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<li><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<li><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<li><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<li><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</ul>
<p><strong><a name="[522]"></a>mbedtls_mpi_cmp_int</strong>(40 bytes, Stack size 20 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_cmp_int))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi </ul>
<br>[Calls]<ul>
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</ul>
<br>[Called By]<ul>
<li><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<li><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<li><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_verify
<li><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_is_zero
<li><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<li><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<li><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<li><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<li><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</ul>
<p><strong><a name="[523]"></a>mbedtls_mpi_add_abs</strong>(220 bytes, Stack size 24 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_add_abs))<br>
<br>[Stack]<ul><li>Max Depth = 68 
<li>Call Chain = mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow  </ul>
<br>[Calls]<ul>
<li><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<li><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</ul>
<br>[Called By]<ul>
<li><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<li><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</ul>
<p><strong><a name="[524]"></a>mbedtls_mpi_sub_abs</strong>(150 bytes, Stack size 32 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_sub_abs))<br>
<br>[Stack]<ul><li>Max Depth = 76 
<li>Call Chain = mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow  </ul>
<br>[Calls]<ul>
<li><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<li><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<li><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
<li><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</ul>
<br>[Called By]<ul>
<li><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<li><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<li><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
</ul>
<p><strong><a name="[525]"></a>mbedtls_mpi_add_mpi</strong>(78 bytes, Stack size 20 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_add_mpi))<br>
<br>[Stack]<ul><li>Max Depth = 96 
<li>Call Chain = mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy  &rArr; mbedtls_mpi_grow  </ul>
<br>[Calls]<ul>
<li><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<li><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<li><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
</ul>
<br>[Called By]<ul>
<li><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<li><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<li><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<li><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<li><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<li><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
</ul>
<p><strong><a name="[526]"></a>mbedtls_mpi_sub_mpi</strong>(78 bytes, Stack size 20 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_sub_mpi))<br>
<br>[Stack]<ul><li>Max Depth = 96 
<li>Call Chain = mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy  &rArr; mbedtls_mpi_grow  </ul>
<br>[Calls]<ul>
<li><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<li><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<li><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
</ul>
<br>[Called By]<ul>
<li><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<li><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<li><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<li><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<li><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<li><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<li><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_sign_det
</ul>
<p><strong><a name="[527]"></a>mbedtls_mpi_add_int</strong>(44 bytes, Stack size 0 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_add_int))<br>
<p><strong><a name="[528]"></a>mbedtls_mpi_sub_int</strong>(44 bytes, Stack size 20 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_sub_int))<br>
<br>[Stack]<ul><li>Max Depth = 116 
<li>Call Chain = mbedtls_mpi_sub_int &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs  &rArr; mbedtls_mpi_copy  &rArr; mbedtls_mpi_grow  </ul>
<br>[Calls]<ul>
<li><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</ul>
<br>[Called By]<ul>
<li><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</ul>
<p><strong><a name="[529]"></a>mbedtls_mpi_mul_mpi</strong>(266 bytes, Stack size 56 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_mul_mpi))<br>
<br>[Stack]<ul><li>Max Depth = 108 
<li>Call Chain = mbedtls_mpi_mul_mpi &rArr; mpi_mul_hlp &rArr; __muldi3  </ul>
<br>[Calls]<ul>
<li><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<li><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<li><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<li><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
<li><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
</ul>
<br>[Called By]<ul>
<li><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<li><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<li><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<li><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<li><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<li><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</ul>
<p><strong><a name="[52a]"></a>mbedtls_mpi_read_string</strong>(448 bytes, Stack size 64 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_read_string))<br>
<br>[Stack]<ul><li>Max Depth = 172 
<li>Call Chain = mbedtls_mpi_read_string &rArr; mbedtls_mpi_mul_mpi &rArr; mpi_mul_hlp  &rArr; __muldi3  </ul>
<br>[Calls]<ul>
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<li><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<li><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<li><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<li><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<li><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</ul>
<br>[Called By]<ul>
<li><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<li><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<li><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
</ul>
<p><strong><a name="[52b]"></a>mbedtls_mpi_mul_int</strong>(26 bytes, Stack size 0 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_mul_int))<br>
<p><strong><a name="[52c]"></a>mbedtls_mpi_div_mpi</strong>(1044 bytes, Stack size 168 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_div_mpi))<br>
<br>[Stack]<ul><li>Max Depth = 276 
<li>Call Chain = mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_mpi &rArr; mpi_mul_hlp  &rArr; __muldi3  </ul>
<br>[Calls]<ul>
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<li><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<li><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<li><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<li><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<li><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<li><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<li><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<li><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<li><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<li><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<li><a href="#[c9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivdi3
<li><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</ul>
<br>[Called By]<ul>
<li><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<li><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<li><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</ul>
<p><strong><a name="[52d]"></a>mbedtls_mpi_div_int</strong>(52 bytes, Stack size 0 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_div_int))<br>
<p><strong><a name="[52e]"></a>mbedtls_mpi_mod_mpi</strong>(146 bytes, Stack size 40 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_mod_mpi))<br>
<br>[Stack]<ul><li>Max Depth = 316 
<li>Call Chain = mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_mpi  &rArr; mpi_mul_hlp  &rArr; __muldi3  </ul>
<br>[Calls]<ul>
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<li><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<li><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<li><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</ul>
<br>[Called By]<ul>
<li><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<li><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<li><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<li><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
</ul>
<p><strong><a name="[52f]"></a>mbedtls_mpi_mod_int</strong>(60 bytes, Stack size 0 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_mod_int))<br>
<p><strong><a name="[533]"></a>mbedtls_mpi_init</strong>(16 bytes, Stack size 0 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_init))<br>
<br>[Called By]<ul>
<li><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<li><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
<li><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<li><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
<li><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
<li><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_sign
<li><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_sign_det
<li><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_write_signature
<li><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_read_signature
<li><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<li><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
<li><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<li><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_wrap
<li><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt_wrap
<li><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</ul>
<p><strong><a name="[534]"></a>mbedtls_mpi_free</strong>(60 bytes, Stack size 8 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_free))<br>
<br>[Calls]<ul>
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<br>[Called By]<ul>
<li><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<li><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<li><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<li><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<li><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<li><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<li><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<li><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<li><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<li><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<li><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<li><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
<li><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<li><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
<li><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
<li><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_sign
<li><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_sign_det
<li><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_write_signature
<li><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_read_signature
<li><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<li><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<li><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<li><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<li><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_wrap
<li><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt_wrap
<li><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<li><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</ul>
<p><strong><a name="[535]"></a>mbedtls_mpi_grow</strong>(98 bytes, Stack size 24 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_grow))<br>
<br>[Calls]<ul>
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<br>[Called By]<ul>
<li><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<li><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<li><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<li><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<li><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<li><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<li><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<li><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<li><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<li><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_sign
<li><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<li><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<li><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
</ul>
<p><strong><a name="[536]"></a>mbedtls_mpi_shrink</strong>(142 bytes, Stack size 0 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_shrink))<br>
<p><strong><a name="[537]"></a>mbedtls_mpi_copy</strong>(112 bytes, Stack size 20 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_copy))<br>
<br>[Stack]<ul><li>Max Depth = 44 
<li>Call Chain = mbedtls_mpi_copy &rArr; mbedtls_mpi_grow </ul>
<br>[Calls]<ul>
<li><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</ul>
<br>[Called By]<ul>
<li><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<li><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<li><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<li><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<li><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<li><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<li><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<li><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
<li><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_get_params
<li><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<li><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</ul>
<p><strong><a name="[538]"></a>mbedtls_mpi_swap</strong>(136 bytes, Stack size 0 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_swap))<br>
<p><strong><a name="[539]"></a>mbedtls_mpi_safe_cond_assign</strong>(110 bytes, Stack size 0 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_safe_cond_assign))<br>
<p><strong><a name="[53a]"></a>mbedtls_mpi_safe_cond_swap</strong>(130 bytes, Stack size 0 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_safe_cond_swap))<br>
<p><strong><a name="[53b]"></a>mbedtls_mpi_lset</strong>(56 bytes, Stack size 16 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_lset))<br>
<br>[Stack]<ul><li>Max Depth = 40 
<li>Call Chain = mbedtls_mpi_lset &rArr; mbedtls_mpi_grow </ul>
<br>[Calls]<ul>
<li><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<li><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<li><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<li><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<li><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<li><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<li><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<li><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<li><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
<li><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<li><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<li><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
</ul>
<p><strong><a name="[53c]"></a>mbedtls_mpi_get_bit</strong>(32 bytes, Stack size 0 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_get_bit))<br>
<br>[Called By]<ul>
<li><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<li><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
</ul>
<p><strong><a name="[53d]"></a>mbedtls_mpi_set_bit</strong>(80 bytes, Stack size 0 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_set_bit))<br>
<p><strong><a name="[53e]"></a>mbedtls_mpi_lsb</strong>(66 bytes, Stack size 0 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_lsb))<br>
<p><strong><a name="[53f]"></a>mbedtls_mpi_bitlen</strong>(90 bytes, Stack size 0 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_bitlen))<br>
<br>[Called By]<ul>
<li><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<li><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<li><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<li><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<li><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<li><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<li><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<li><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<li><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<li><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<li><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<li><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</ul>
<p><strong><a name="[540]"></a>mbedtls_mpi_size</strong>(12 bytes, Stack size 4 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_size))<br>
<br>[Calls]<ul>
<li><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</ul>
<br>[Called By]<ul>
<li><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<li><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<li><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<li><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<li><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<li><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<li><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
</ul>
<p><strong><a name="[541]"></a>mbedtls_mpi_read_binary</strong>(142 bytes, Stack size 24 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_read_binary))<br>
<br>[Stack]<ul><li>Max Depth = 64 
<li>Call Chain = mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow  </ul>
<br>[Calls]<ul>
<li><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<li><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</ul>
<br>[Called By]<ul>
<li><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<li><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<li><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<li><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_sign
<li><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_sign_det
<li><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<li><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<li><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_wrap
<li><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<li><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</ul>
<p><strong><a name="[543]"></a>mbedtls_mpi_write_string</strong>(312 bytes, Stack size 0 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_write_string))<br>
<p><strong><a name="[545]"></a>mbedtls_mpi_exp_mod</strong>(1486 bytes, Stack size 1680 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_exp_mod))<br>
<br>[Stack]<ul><li>Max Depth = 1996 
<li>Call Chain = mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi  &rArr; mbedtls_mpi_mul_mpi  &rArr; mpi_mul_hlp  &rArr; __muldi3  </ul>
<br>[Calls]<ul>
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<li><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<li><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<li><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<li><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul.isra.2
<li><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<li><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<li><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<li><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</ul>
<br>[Called By]<ul>
<li><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
</ul>
<p><strong><a name="[546]"></a>mbedtls_mpi_gcd</strong>(512 bytes, Stack size 76 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_gcd))<br>
<br>[Stack]<ul><li>Max Depth = 152 
<li>Call Chain = mbedtls_mpi_gcd &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy  &rArr; mbedtls_mpi_grow  </ul>
<br>[Calls]<ul>
<li><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<li><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<li><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<li><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<li><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
</ul>
<br>[Called By]<ul>
<li><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<li><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<li><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</ul>
<p><strong><a name="[547]"></a>mbedtls_mpi_fill_random</strong>(48 bytes, Stack size 268 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_fill_random))<br>
<br>[Stack]<ul><li>Max Depth = 332 
<li>Call Chain = mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset  &rArr; mbedtls_mpi_grow  </ul>
<br>[Calls]<ul>
<li><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</ul>
<br>[Called By]<ul>
<li><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
</ul>
<p><strong><a name="[549]"></a>mbedtls_mpi_inv_mod</strong>(766 bytes, Stack size 152 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_inv_mod))<br>
<br>[Stack]<ul><li>Max Depth = 468 
<li>Call Chain = mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi  &rArr; mbedtls_mpi_mul_mpi  &rArr; mpi_mul_hlp  &rArr; __muldi3  </ul>
<br>[Calls]<ul>
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<li><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<li><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<li><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<li><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<li><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<li><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<li><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<li><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</ul>
<br>[Called By]<ul>
<li><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<li><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<li><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<li><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</ul>
<p><strong><a name="[54a]"></a>mbedtls_mpi_is_prime</strong>(134 bytes, Stack size 0 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_is_prime))<br>
<p><strong><a name="[54b]"></a>mbedtls_mpi_gen_prime</strong>(420 bytes, Stack size 0 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_gen_prime))<br>
<p><strong><a name="[54c]"></a>mbedtls_mpi_self_test</strong>(870 bytes, Stack size 132 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_self_test))<br>
<br>[Stack]<ul><li>Max Depth = 2128 
<li>Call Chain = mbedtls_mpi_self_test &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi  &rArr; mbedtls_mpi_div_mpi  &rArr; mbedtls_mpi_mul_mpi  &rArr; mpi_mul_hlp  &rArr; __muldi3  </ul>
<br>[Calls]<ul>
<li><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<li><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<li><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[cc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
<li><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<li><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<li><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<li><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<li><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
</ul>
<br>[Called By]<ul>
<li><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_crypto_test
</ul>
<p><strong><a name="[54f]"></a>mbedtls_ccm_init</strong>(12 bytes, Stack size 4 btyes, Obj/library_ccm.o(.text.mbedtls_ccm_init))<br>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_ctx_alloc
</ul>
<p><strong><a name="[550]"></a>mbedtls_ccm_setkey</strong>(86 bytes, Stack size 20 btyes, Obj/library_ccm.o(.text.mbedtls_ccm_setkey))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = mbedtls_ccm_setkey &rArr; mbedtls_cipher_setup </ul>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_values
<li><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<li><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<li><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
</ul>
<br>[Called By]<ul>
<li><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_self_test
<li><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_aes_setkey_wrap
</ul>
<p><strong><a name="[551]"></a>mbedtls_ccm_free</strong>(20 bytes, Stack size 8 btyes, Obj/library_ccm.o(.text.mbedtls_ccm_free))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = mbedtls_ccm_free &rArr; mbedtls_cipher_free </ul>
<br>[Calls]<ul>
<li><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_ctx_free
</ul>
<p><strong><a name="[552]"></a>mbedtls_ccm_encrypt_and_tag</strong>(52 bytes, Stack size 48 btyes, Obj/library_ccm.o(.text.mbedtls_ccm_encrypt_and_tag))<br>
<br>[Stack]<ul><li>Max Depth = 756 
<li>Call Chain = mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; ccm_update_mac.isra.0  &rArr; mbedtls_aes_crypt_ctr  &rArr; _mbedtls_aes_crypt_ctr  &rArr; tih_aes_crypt_ctr  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
</ul>
<br>[Called By]<ul>
<li><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_encrypt
</ul>
<p><strong><a name="[553]"></a>mbedtls_ccm_auth_decrypt</strong>(114 bytes, Stack size 68 btyes, Obj/library_ccm.o(.text.mbedtls_ccm_auth_decrypt))<br>
<br>[Stack]<ul><li>Max Depth = 776 
<li>Call Chain = mbedtls_ccm_auth_decrypt &rArr; ccm_auth_crypt &rArr; ccm_update_mac.isra.0  &rArr; mbedtls_aes_crypt_ctr  &rArr; _mbedtls_aes_crypt_ctr  &rArr; tih_aes_crypt_ctr  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_self_test
<li><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_decrypt
</ul>
<p><strong><a name="[554]"></a>mbedtls_ccm_self_test</strong>(336 bytes, Stack size 236 btyes, Obj/library_ccm.o(.text.mbedtls_ccm_self_test))<br>
<br>[Stack]<ul><li>Max Depth = 1012 
<li>Call Chain = mbedtls_ccm_self_test &rArr; mbedtls_ccm_auth_decrypt &rArr; ccm_auth_crypt  &rArr; ccm_update_mac.isra.0  &rArr; mbedtls_aes_crypt_ctr  &rArr; _mbedtls_aes_crypt_ctr  &rArr; tih_aes_crypt_ctr  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
<li><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_auth_decrypt
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[cc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</ul>
<br>[Called By]<ul>
<li><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_crypto_test
</ul>
<p><strong><a name="[555]"></a>mbedtls_cipher_reset</strong>(26 bytes, Stack size 0 btyes, Obj/library_cipher.o(.text.mbedtls_cipher_reset))<br>
<br>[Called By]<ul>
<li><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
</ul>
<p><strong><a name="[556]"></a>mbedtls_cipher_update_ad</strong>(64 bytes, Stack size 0 btyes, Obj/library_cipher.o(.text.mbedtls_cipher_update_ad))<br>
<p><strong><a name="[557]"></a>mbedtls_cipher_update</strong>(448 bytes, Stack size 44 btyes, Obj/library_cipher.o(.text.mbedtls_cipher_update))<br>
<br>[Stack]<ul><li>Max Depth = 220 
<li>Call Chain = mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr; gcm_mult  </ul>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
</ul>
<br>[Called By]<ul>
<li><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<li><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_generate_subkeys
<li><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_update
<li><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_finish
<li><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<li><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<li><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<li><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
</ul>
<p><strong><a name="[558]"></a>mbedtls_cipher_finish</strong>(244 bytes, Stack size 28 btyes, Obj/library_cipher.o(.text.mbedtls_cipher_finish))<br>
<br>[Called By]<ul>
<li><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<li><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
</ul>
<p><strong><a name="[559]"></a>mbedtls_cipher_set_padding_mode</strong>(104 bytes, Stack size 0 btyes, Obj/library_cipher.o(.text.mbedtls_cipher_set_padding_mode))<br>
<br>[Called By]<ul>
<li><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</ul>
<p><strong><a name="[55a]"></a>mbedtls_cipher_write_tag</strong>(52 bytes, Stack size 0 btyes, Obj/library_cipher.o(.text.mbedtls_cipher_write_tag))<br>
<p><strong><a name="[55b]"></a>mbedtls_cipher_check_tag</strong>(106 bytes, Stack size 0 btyes, Obj/library_cipher.o(.text.mbedtls_cipher_check_tag))<br>
<p><strong><a name="[55c]"></a>mbedtls_cipher_crypt</strong>(134 bytes, Stack size 32 btyes, Obj/library_cipher.o(.text.mbedtls_cipher_crypt))<br>
<br>[Stack]<ul><li>Max Depth = 252 
<li>Call Chain = mbedtls_cipher_crypt &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update  &rArr; gcm_mult  </ul>
<br>[Calls]<ul>
<li><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_iv
<li><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<li><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_finish
</ul>
<br>[Called By]<ul>
<li><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<li><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<li><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
</ul>
<p><strong><a name="[55d]"></a>mbedtls_cipher_auth_encrypt</strong>(186 bytes, Stack size 56 btyes, Obj/library_cipher.o(.text.mbedtls_cipher_auth_encrypt))<br>
<br>[Stack]<ul><li>Max Depth = 812 
<li>Call Chain = mbedtls_cipher_auth_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt  &rArr; ccm_update_mac.isra.0  &rArr; mbedtls_aes_crypt_ctr  &rArr; _mbedtls_aes_crypt_ctr  &rArr; tih_aes_crypt_ctr  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_encrypt_and_tag
<li><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
</ul>
<br>[Called By]<ul>
<li><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</ul>
<p><strong><a name="[55e]"></a>mbedtls_cipher_auth_decrypt</strong>(206 bytes, Stack size 52 btyes, Obj/library_cipher.o(.text.mbedtls_cipher_auth_decrypt))<br>
<br>[Stack]<ul><li>Max Depth = 828 
<li>Call Chain = mbedtls_cipher_auth_decrypt &rArr; mbedtls_ccm_auth_decrypt &rArr; ccm_auth_crypt  &rArr; ccm_update_mac.isra.0  &rArr; mbedtls_aes_crypt_ctr  &rArr; _mbedtls_aes_crypt_ctr  &rArr; tih_aes_crypt_ctr  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_auth_decrypt
<li><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_auth_decrypt
</ul>
<br>[Called By]<ul>
<li><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
</ul>
<p><strong><a name="[568]"></a>mbedtls_cipher_list</strong>(54 bytes, Stack size 0 btyes, Obj/library_cipher.o(.text.mbedtls_cipher_list))<br>
<p><strong><a name="[569]"></a>mbedtls_cipher_info_from_type</strong>(28 bytes, Stack size 0 btyes, Obj/library_cipher.o(.text.mbedtls_cipher_info_from_type))<br>
<br>[Called By]<ul>
<li><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_test_subkeys.constprop.2
<li><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_test_wth_cipher.constprop.1
<li><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_cmac_prf_128
<li><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<li><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
<li><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</ul>
<p><strong><a name="[56a]"></a>mbedtls_cipher_info_from_string</strong>(46 bytes, Stack size 0 btyes, Obj/library_cipher.o(.text.mbedtls_cipher_info_from_string))<br>
<p><strong><a name="[56b]"></a>mbedtls_cipher_info_from_values</strong>(58 bytes, Stack size 0 btyes, Obj/library_cipher.o(.text.mbedtls_cipher_info_from_values))<br>
<br>[Called By]<ul>
<li><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
<li><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</ul>
<p><strong><a name="[56c]"></a>mbedtls_cipher_init</strong>(12 bytes, Stack size 4 btyes, Obj/library_cipher.o(.text.mbedtls_cipher_init))<br>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_test_subkeys.constprop.2
<li><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac
<li><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<li><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<li><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</ul>
<p><strong><a name="[56d]"></a>mbedtls_cipher_free</strong>(54 bytes, Stack size 8 btyes, Obj/library_cipher.o(.text.mbedtls_cipher_free))<br>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<br>[Called By]<ul>
<li><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
<li><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_free
<li><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_self_test
<li><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_test_subkeys.constprop.2
<li><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac
<li><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<li><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
<li><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
<li><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<li><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<li><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
</ul>
<p><strong><a name="[56e]"></a>mbedtls_cipher_setup</strong>(74 bytes, Stack size 12 btyes, Obj/library_cipher.o(.text.mbedtls_cipher_setup))<br>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
<li><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_test_subkeys.constprop.2
<li><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac
<li><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<li><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<li><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<li><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</ul>
<p><strong><a name="[56f]"></a>mbedtls_cipher_setkey</strong>(94 bytes, Stack size 4 btyes, Obj/library_cipher.o(.text.mbedtls_cipher_setkey))<br>
<br>[Called By]<ul>
<li><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
<li><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_test_subkeys.constprop.2
<li><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_starts
<li><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<li><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<li><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<li><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</ul>
<p><strong><a name="[570]"></a>mbedtls_cipher_set_iv</strong>(74 bytes, Stack size 12 btyes, Obj/library_cipher.o(.text.mbedtls_cipher_set_iv))<br>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<li><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
</ul>
<p><strong><a name="[598]"></a>mbedtls_cipher_cmac_starts</strong>(104 bytes, Stack size 12 btyes, Obj/library_cmac.o(.text.mbedtls_cipher_cmac_starts))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = mbedtls_cipher_cmac_starts &rArr; mbedtls_cipher_setkey </ul>
<br>[Calls]<ul>
<li><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</ul>
<br>[Called By]<ul>
<li><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac
</ul>
<p><strong><a name="[599]"></a>mbedtls_cipher_cmac_update</strong>(250 bytes, Stack size 48 btyes, Obj/library_cmac.o(.text.mbedtls_cipher_cmac_update))<br>
<br>[Stack]<ul><li>Max Depth = 268 
<li>Call Chain = mbedtls_cipher_cmac_update &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update  &rArr; gcm_mult  </ul>
<br>[Calls]<ul>
<li><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac
</ul>
<p><strong><a name="[59a]"></a>mbedtls_cipher_cmac_finish</strong>(320 bytes, Stack size 92 btyes, Obj/library_cmac.o(.text.mbedtls_cipher_cmac_finish))<br>
<br>[Stack]<ul><li>Max Depth = 352 
<li>Call Chain = mbedtls_cipher_cmac_finish &rArr; cmac_generate_subkeys &rArr; mbedtls_cipher_update  &rArr; mbedtls_gcm_update  &rArr; gcm_mult  </ul>
<br>[Calls]<ul>
<li><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_generate_subkeys
<li><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac
</ul>
<p><strong><a name="[59b]"></a>mbedtls_cipher_cmac_reset</strong>(54 bytes, Stack size 0 btyes, Obj/library_cmac.o(.text.mbedtls_cipher_cmac_reset))<br>
<p><strong><a name="[59c]"></a>mbedtls_cipher_cmac</strong>(162 bytes, Stack size 96 btyes, Obj/library_cmac.o(.text.mbedtls_cipher_cmac))<br>
<br>[Stack]<ul><li>Max Depth = 448 
<li>Call Chain = mbedtls_cipher_cmac &rArr; mbedtls_cipher_cmac_finish &rArr; cmac_generate_subkeys  &rArr; mbedtls_cipher_update  &rArr; mbedtls_gcm_update  &rArr; gcm_mult  </ul>
<br>[Calls]<ul>
<li><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<li><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<li><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<li><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_starts
<li><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_update
<li><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_finish
</ul>
<br>[Called By]<ul>
<li><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_test_wth_cipher.constprop.1
<li><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_cmac_prf_128
</ul>
<p><strong><a name="[59e]"></a>mbedtls_aes_cmac_prf_128</strong>(132 bytes, Stack size 72 btyes, Obj/library_cmac.o(.text.mbedtls_aes_cmac_prf_128))<br>
<br>[Stack]<ul><li>Max Depth = 520 
<li>Call Chain = mbedtls_aes_cmac_prf_128 &rArr; mbedtls_cipher_cmac &rArr; mbedtls_cipher_cmac_finish  &rArr; cmac_generate_subkeys  &rArr; mbedtls_cipher_update  &rArr; mbedtls_gcm_update  &rArr; gcm_mult  </ul>
<br>[Calls]<ul>
<li><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_type
<li><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cmac_self_test
</ul>
<p><strong><a name="[59f]"></a>mbedtls_cmac_self_test</strong>(372 bytes, Stack size 76 btyes, Obj/library_cmac.o(.text.mbedtls_cmac_self_test))<br>
<br>[Stack]<ul><li>Max Depth = 608 
<li>Call Chain = mbedtls_cmac_self_test &rArr; cmac_test_wth_cipher.constprop.1 &rArr; mbedtls_cipher_cmac  &rArr; mbedtls_cipher_cmac_finish  &rArr; cmac_generate_subkeys  &rArr; mbedtls_cipher_update  &rArr; mbedtls_gcm_update  &rArr; gcm_mult  </ul>
<br>[Calls]<ul>
<li><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_test_subkeys.constprop.2
<li><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_test_wth_cipher.constprop.1
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_cmac_prf_128
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[cc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</ul>
<br>[Called By]<ul>
<li><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_crypto_test
</ul>
<p><strong><a name="[5a3]"></a>mbedtls_ctr_drbg_init</strong>(24 bytes, Stack size 0 btyes, Obj/library_ctr_drbg.o(.text.mbedtls_ctr_drbg_init))<br>
<p><strong><a name="[5a4]"></a>mbedtls_ctr_drbg_free</strong>(42 bytes, Stack size 8 btyes, Obj/library_ctr_drbg.o(.text.mbedtls_ctr_drbg_free))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = mbedtls_ctr_drbg_free &rArr; mbedtls_aes_free </ul>
<br>[Calls]<ul>
<li><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</ul>
<br>[Called By]<ul>
<li><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_self_test
</ul>
<p><strong><a name="[5a5]"></a>mbedtls_ctr_drbg_set_prediction_resistance</strong>(4 bytes, Stack size 0 btyes, Obj/library_ctr_drbg.o(.text.mbedtls_ctr_drbg_set_prediction_resistance))<br>
<p><strong><a name="[5a6]"></a>mbedtls_ctr_drbg_set_entropy_len</strong>(4 bytes, Stack size 0 btyes, Obj/library_ctr_drbg.o(.text.mbedtls_ctr_drbg_set_entropy_len))<br>
<p><strong><a name="[5a7]"></a>mbedtls_ctr_drbg_set_reseed_interval</strong>(4 bytes, Stack size 0 btyes, Obj/library_ctr_drbg.o(.text.mbedtls_ctr_drbg_set_reseed_interval))<br>
<p><strong><a name="[5a8]"></a>mbedtls_ctr_drbg_update</strong>(38 bytes, Stack size 0 btyes, Obj/library_ctr_drbg.o(.text.mbedtls_ctr_drbg_update))<br>
<p><strong><a name="[5a9]"></a>mbedtls_ctr_drbg_reseed</strong>(122 bytes, Stack size 408 btyes, Obj/library_ctr_drbg.o(.text.mbedtls_ctr_drbg_reseed))<br>
<br>[Stack]<ul><li>Max Depth = 1436 
<li>Call Chain = mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb  &rArr; tih_aes_crypt  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<li><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<li><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<li><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_self_test
</ul>
<p><strong><a name="[5aa]"></a>mbedtls_ctr_drbg_seed_entropy_len</strong>(90 bytes, Stack size 64 btyes, Obj/library_ctr_drbg.o(.text.mbedtls_ctr_drbg_seed_entropy_len))<br>
<br>[Stack]<ul><li>Max Depth = 1500 
<li>Call Chain = mbedtls_ctr_drbg_seed_entropy_len &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df  &rArr; mbedtls_aes_crypt_ecb  &rArr; tih_aes_crypt  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<li><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<li><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
</ul>
<br>[Called By]<ul>
<li><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_self_test
</ul>
<p><strong><a name="[5ab]"></a>mbedtls_ctr_drbg_seed</strong>(28 bytes, Stack size 0 btyes, Obj/library_ctr_drbg.o(.text.mbedtls_ctr_drbg_seed))<br>
<p><strong><a name="[5ac]"></a>mbedtls_ctr_drbg_random_with_add</strong>(212 bytes, Stack size 100 btyes, Obj/library_ctr_drbg.o(.text.mbedtls_ctr_drbg_random_with_add))<br>
<br>[Stack]<ul><li>Max Depth = 1536 
<li>Call Chain = mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df  &rArr; mbedtls_aes_crypt_ecb  &rArr; tih_aes_crypt  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<li><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<li><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
</ul>
<br>[Called By]<ul>
<li><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random
</ul>
<p><strong><a name="[5ad]"></a>mbedtls_ctr_drbg_random</strong>(68 bytes, Stack size 28 btyes, Obj/library_ctr_drbg.o(.text.mbedtls_ctr_drbg_random))<br>
<br>[Stack]<ul><li>Max Depth = 1564 
<li>Call Chain = mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed  &rArr; block_cipher_df  &rArr; mbedtls_aes_crypt_ecb  &rArr; tih_aes_crypt  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
</ul>
<br>[Called By]<ul>
<li><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_self_test
</ul>
<p><strong><a name="[5ae]"></a>mbedtls_ctr_drbg_self_test</strong>(400 bytes, Stack size 164 btyes, Obj/library_ctr_drbg.o(.text.mbedtls_ctr_drbg_self_test))<br>
<br>[Stack]<ul><li>Max Depth = 1728 
<li>Call Chain = mbedtls_ctr_drbg_self_test &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add  &rArr; mbedtls_ctr_drbg_reseed  &rArr; block_cipher_df  &rArr; mbedtls_aes_crypt_ecb  &rArr; tih_aes_crypt  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_free
<li><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<li><a href="#[cc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</ul>
<br>[Called By]<ul>
<li><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_crypto_test
</ul>
<p><strong><a name="[5b0]"></a>mbedtls_debug_set_threshold</strong>(6 bytes, Stack size 0 btyes, Obj/library_debug.o(.text.mbedtls_debug_set_threshold))<br>
<br>[Called By]<ul>
<li><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_init
<li><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_create
</ul>
<p><strong><a name="[5b1]"></a>mbedtls_debug_print_msg</strong>(134 bytes, Stack size 1076 btyes, Obj/library_debug.o(.text.mbedtls_debug_print_msg))<br>
<br>[Stack]<ul><li>Max Depth = 1304 
<li>Call Chain = mbedtls_debug_print_msg &rArr; vsnprintf &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<li><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<li><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
<li><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
<li><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_psk_identity
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_server_key_exchange
<li><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_encrypted_pms
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_hello
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
<li><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<li><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_swap_epochs
<li><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
<li><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<li><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
<li><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls
<li><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sm3
<li><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sm3
<li><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_timer
<li><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<li><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_psk_derive_premaster
<li><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<li><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_flight_completed
<li><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<li><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_hello_request
<li><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_resend_hello_request
<li><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_resend
<li><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<li><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
<li><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
<li><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handle_message_type
<li><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<li><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<li><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<li><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_optimize_checksum
<li><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<li><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<li><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<li><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
<li><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<li><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<li><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<li><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
<li><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
<li><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<li><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<li><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<li><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<li><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<li><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<li><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<li><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</ul>
<p><strong><a name="[5b2]"></a>mbedtls_debug_print_ret</strong>(138 bytes, Stack size 1080 btyes, Obj/library_debug.o(.text.mbedtls_debug_print_ret))<br>
<br>[Calls]<ul>
<li><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<li><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
<li><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_server_key_exchange
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_hello
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
<li><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<li><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_psk_derive_premaster
<li><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<li><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<li><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_hello_request
<li><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_resend
<li><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<li><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
<li><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
<li><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<li><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<li><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<li><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<li><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<li><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
<li><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_renegotiate
<li><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<li><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<li><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<li><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<li><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<li><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<li><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</ul>
<p><strong><a name="[5b3]"></a>mbedtls_debug_print_buf</strong>(424 bytes, Stack size 1136 btyes, Obj/library_debug.o(.text.mbedtls_debug_print_buf))<br>
<br>[Calls]<ul>
<li><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<li><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_psk_identity
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_server_key_exchange
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_hello
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
<li><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
<li><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<li><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
<li><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls
<li><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sm3
<li><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sm3
<li><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<li><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<li><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_resend
<li><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
<li><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
</ul>
<p><strong><a name="[5b4]"></a>mbedtls_debug_print_mpi</strong>(64 bytes, Stack size 20 btyes, Obj/library_debug.o(.text.mbedtls_debug_print_mpi))<br>
<br>[Stack]<ul><li>Max Depth = 1144 
<li>Call Chain = mbedtls_debug_print_mpi &rArr; mbedtls_debug_print_mpi.part.0 </ul>
<br>[Calls]<ul>
<li><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi.part.0
</ul>
<br>[Called By]<ul>
<li><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp.part.1
<li><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
<li><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_psk_derive_premaster
</ul>
<p><strong><a name="[5b6]"></a>mbedtls_debug_print_ecp</strong>(60 bytes, Stack size 20 btyes, Obj/library_debug.o(.text.mbedtls_debug_print_ecp))<br>
<br>[Stack]<ul><li>Max Depth = 1716 
<li>Call Chain = mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_ecp.part.1 &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp.part.1
</ul>
<br>[Called By]<ul>
<li><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
<li><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_server_key_exchange
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
</ul>
<p><strong><a name="[5b7]"></a>mbedtls_debug_print_crt</strong>(532 bytes, Stack size 2680 btyes, Obj/library_debug.o(.text.mbedtls_debug_print_crt))<br>
<br>[Stack]<ul><li>Max Depth = 4396 
<li>Call Chain = mbedtls_debug_print_crt &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
<li><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_debug
<li><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp
<li><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi
</ul>
<br>[Called By]<ul>
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_hello
<li><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<li><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</ul>
<p><strong><a name="[5b8]"></a>mbedtls_des3_crypt_ecb</strong>(1008 bytes, Stack size 0 btyes, Obj/library_des.o(.text.mbedtls_des3_crypt_ecb))<br>
<br>[Called By]<ul>
<li><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_crypt_ecb_wrap
<li><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_crypt_cbc
<li><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_self_test
</ul>
<p><strong><a name="[5b9]"></a>mbedtls_des3_crypt_cbc</strong>(254 bytes, Stack size 56 btyes, Obj/library_des.o(.text.mbedtls_des3_crypt_cbc))<br>
<br>[Calls]<ul>
<li><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_crypt_ecb
</ul>
<br>[Called By]<ul>
<li><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_crypt_cbc_wrap
<li><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_self_test
<li><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_des3_decrypt
</ul>
<p><strong><a name="[5ba]"></a>mbedtls_des_self_test</strong>(1068 bytes, Stack size 1016 btyes, Obj/library_des.o(.text.mbedtls_des_self_test))<br>
<br>[Stack]<ul><li>Max Depth = 1116 
<li>Call Chain = mbedtls_des_self_test &rArr; mbedtls_des_crypt_cbc &rArr; mbedtls_des_crypt_ecb  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set3key
<li><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set2key
<li><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_setkey
<li><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_crypt_ecb
<li><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_crypt_ecb
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_setkey_dec
<li><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_crypt_cbc
<li><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_crypt_cbc
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[cc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</ul>
<br>[Called By]<ul>
<li><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_crypto_test
</ul>
<p><strong><a name="[5bb]"></a>mbedtls_des_init</strong>(12 bytes, Stack size 4 btyes, Obj/library_des.o(.text.mbedtls_des_init))<br>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_ctx_alloc
<li><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</ul>
<p><strong><a name="[5bc]"></a>mbedtls_des_free</strong>(20 bytes, Stack size 0 btyes, Obj/library_des.o(.text.mbedtls_des_free))<br>
<br>[Called By]<ul>
<li><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_ctx_free
<li><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</ul>
<p><strong><a name="[5bd]"></a>mbedtls_des3_init</strong>(14 bytes, Stack size 4 btyes, Obj/library_des.o(.text.mbedtls_des3_init))<br>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_ctx_alloc
<li><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_des3_decrypt
</ul>
<p><strong><a name="[5be]"></a>mbedtls_des3_free</strong>(20 bytes, Stack size 0 btyes, Obj/library_des.o(.text.mbedtls_des3_free))<br>
<br>[Called By]<ul>
<li><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_ctx_free
<li><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_des3_decrypt
</ul>
<p><strong><a name="[5bf]"></a>mbedtls_des_key_set_parity</strong>(22 bytes, Stack size 0 btyes, Obj/library_des.o(.text.mbedtls_des_key_set_parity))<br>
<p><strong><a name="[5c0]"></a>mbedtls_des_key_check_key_parity</strong>(32 bytes, Stack size 0 btyes, Obj/library_des.o(.text.mbedtls_des_key_check_key_parity))<br>
<p><strong><a name="[5c1]"></a>mbedtls_des_key_check_weak</strong>(38 bytes, Stack size 0 btyes, Obj/library_des.o(.text.mbedtls_des_key_check_weak))<br>
<p><strong><a name="[5c2]"></a>mbedtls_des_setkey</strong>(832 bytes, Stack size 32 btyes, Obj/library_des.o(.text.mbedtls_des_setkey))<br>
<br>[Called By]<ul>
<li><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set2key
<li><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set3key
<li><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_setkey_enc
<li><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_setkey_dec
<li><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_self_test
</ul>
<p><strong><a name="[5c5]"></a>mbedtls_des_setkey_enc</strong>(10 bytes, Stack size 4 btyes, Obj/library_des.o(.text.mbedtls_des_setkey_enc))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = mbedtls_des_setkey_enc &rArr; mbedtls_des_setkey </ul>
<br>[Calls]<ul>
<li><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_setkey
</ul>
<br>[Called By]<ul>
<li><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_setkey_enc_wrap
</ul>
<p><strong><a name="[5c6]"></a>mbedtls_des_setkey_dec</strong>(54 bytes, Stack size 8 btyes, Obj/library_des.o(.text.mbedtls_des_setkey_dec))<br>
<br>[Stack]<ul><li>Max Depth = 40 
<li>Call Chain = mbedtls_des_setkey_dec &rArr; mbedtls_des_setkey </ul>
<br>[Calls]<ul>
<li><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_setkey
</ul>
<br>[Called By]<ul>
<li><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_setkey_dec_wrap
<li><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_self_test
<li><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</ul>
<p><strong><a name="[5c7]"></a>mbedtls_des3_set2key_enc</strong>(32 bytes, Stack size 388 btyes, Obj/library_des.o(.text.mbedtls_des3_set2key_enc))<br>
<br>[Stack]<ul><li>Max Depth = 440 
<li>Call Chain = mbedtls_des3_set2key_enc &rArr; des3_set2key &rArr; mbedtls_des_setkey  </ul>
<br>[Calls]<ul>
<li><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set2key
</ul>
<br>[Called By]<ul>
<li><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set2key_enc_wrap
</ul>
<p><strong><a name="[5c8]"></a>mbedtls_des3_set2key_dec</strong>(34 bytes, Stack size 388 btyes, Obj/library_des.o(.text.mbedtls_des3_set2key_dec))<br>
<br>[Stack]<ul><li>Max Depth = 440 
<li>Call Chain = mbedtls_des3_set2key_dec &rArr; des3_set2key &rArr; mbedtls_des_setkey  </ul>
<br>[Calls]<ul>
<li><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set2key
</ul>
<br>[Called By]<ul>
<li><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set2key_dec_wrap
</ul>
<p><strong><a name="[5c9]"></a>mbedtls_des3_set3key_enc</strong>(32 bytes, Stack size 388 btyes, Obj/library_des.o(.text.mbedtls_des3_set3key_enc))<br>
<br>[Stack]<ul><li>Max Depth = 436 
<li>Call Chain = mbedtls_des3_set3key_enc &rArr; des3_set3key &rArr; mbedtls_des_setkey  </ul>
<br>[Calls]<ul>
<li><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set3key
</ul>
<br>[Called By]<ul>
<li><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set3key_enc_wrap
</ul>
<p><strong><a name="[5ca]"></a>mbedtls_des3_set3key_dec</strong>(34 bytes, Stack size 388 btyes, Obj/library_des.o(.text.mbedtls_des3_set3key_dec))<br>
<br>[Stack]<ul><li>Max Depth = 436 
<li>Call Chain = mbedtls_des3_set3key_dec &rArr; des3_set3key &rArr; mbedtls_des_setkey  </ul>
<br>[Calls]<ul>
<li><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set3key
</ul>
<br>[Called By]<ul>
<li><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set3key_dec_wrap
<li><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_des3_decrypt
</ul>
<p><strong><a name="[5cb]"></a>mbedtls_des_crypt_ecb</strong>(484 bytes, Stack size 44 btyes, Obj/library_des.o(.text.mbedtls_des_crypt_ecb))<br>
<br>[Called By]<ul>
<li><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_crypt_ecb_wrap
<li><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_crypt_cbc
<li><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_self_test
</ul>
<p><strong><a name="[5cc]"></a>mbedtls_des_crypt_cbc</strong>(254 bytes, Stack size 56 btyes, Obj/library_des.o(.text.mbedtls_des_crypt_cbc))<br>
<br>[Stack]<ul><li>Max Depth = 100 
<li>Call Chain = mbedtls_des_crypt_cbc &rArr; mbedtls_des_crypt_ecb </ul>
<br>[Calls]<ul>
<li><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_crypt_ecb
</ul>
<br>[Called By]<ul>
<li><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_crypt_cbc_wrap
<li><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_self_test
<li><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</ul>
<p><strong><a name="[5cd]"></a>mbedtls_ecdh_gen_public</strong>(20 bytes, Stack size 0 btyes, Obj/library_ecdh.o(.text.mbedtls_ecdh_gen_public))<br>
<p><strong><a name="[5ce]"></a>mbedtls_ecdh_compute_shared</strong>(108 bytes, Stack size 76 btyes, Obj/library_ecdh.o(.text.mbedtls_ecdh_compute_shared))<br>
<br>[Stack]<ul><li>Max Depth = 536 
<li>Call Chain = mbedtls_ecdh_compute_shared &rArr; mbedtls_ecp_mul &rArr; mbedtls_ecp_check_pubkey  &rArr; tih_ecp_check  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<li><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<li><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<li><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<li><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_is_zero
<li><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
</ul>
<br>[Called By]<ul>
<li><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
</ul>
<p><strong><a name="[5cf]"></a>mbedtls_ecdh_init</strong>(14 bytes, Stack size 4 btyes, Obj/library_ecdh.o(.text.mbedtls_ecdh_init))<br>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</ul>
<p><strong><a name="[5d0]"></a>mbedtls_ecdh_free</strong>(70 bytes, Stack size 8 btyes, Obj/library_ecdh.o(.text.mbedtls_ecdh_free))<br>
<br>[Stack]<ul><li>Max Depth = 40 
<li>Call Chain = mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free  &rArr; mbedtls_mpi_free  </ul>
<br>[Calls]<ul>
<li><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<li><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<li><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</ul>
<br>[Called By]<ul>
<li><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</ul>
<p><strong><a name="[5d1]"></a>mbedtls_ecdh_make_params</strong>(122 bytes, Stack size 40 btyes, Obj/library_ecdh.o(.text.mbedtls_ecdh_make_params))<br>
<br>[Stack]<ul><li>Max Depth = 612 
<li>Call Chain = mbedtls_ecdh_make_params &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base  &rArr; mbedtls_ecp_mul  &rArr; mbedtls_ecp_check_pubkey  &rArr; tih_ecp_check  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
<li><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_group
<li><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_point
</ul>
<br>[Called By]<ul>
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_server_key_exchange
</ul>
<p><strong><a name="[5d2]"></a>mbedtls_ecdh_read_params</strong>(40 bytes, Stack size 16 btyes, Obj/library_ecdh.o(.text.mbedtls_ecdh_read_params))<br>
<br>[Stack]<ul><li>Max Depth = 108 
<li>Call Chain = mbedtls_ecdh_read_params &rArr; mbedtls_ecp_tls_read_point &rArr; mbedtls_ecp_point_read_binary  &rArr; mbedtls_mpi_read_binary  &rArr; mbedtls_mpi_lset  &rArr; mbedtls_mpi_grow  </ul>
<br>[Calls]<ul>
<li><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_group
<li><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_point
</ul>
<br>[Called By]<ul>
<li><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</ul>
<p><strong><a name="[5d3]"></a>mbedtls_ecdh_get_params</strong>(78 bytes, Stack size 16 btyes, Obj/library_ecdh.o(.text.mbedtls_ecdh_get_params))<br>
<br>[Stack]<ul><li>Max Depth = 72 
<li>Call Chain = mbedtls_ecdh_get_params &rArr; mbedtls_ecp_copy &rArr; mbedtls_mpi_copy  &rArr; mbedtls_mpi_grow  </ul>
<br>[Calls]<ul>
<li><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
<li><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
<li><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
</ul>
<br>[Called By]<ul>
<li><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_server_key_exchange
</ul>
<p><strong><a name="[5d4]"></a>mbedtls_ecdh_make_public</strong>(86 bytes, Stack size 32 btyes, Obj/library_ecdh.o(.text.mbedtls_ecdh_make_public))<br>
<br>[Stack]<ul><li>Max Depth = 604 
<li>Call Chain = mbedtls_ecdh_make_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base  &rArr; mbedtls_ecp_mul  &rArr; mbedtls_ecp_check_pubkey  &rArr; tih_ecp_check  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
<li><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_point
</ul>
<br>[Called By]<ul>
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</ul>
<p><strong><a name="[5d5]"></a>mbedtls_ecdh_read_public</strong>(50 bytes, Stack size 16 btyes, Obj/library_ecdh.o(.text.mbedtls_ecdh_read_public))<br>
<br>[Stack]<ul><li>Max Depth = 108 
<li>Call Chain = mbedtls_ecdh_read_public &rArr; mbedtls_ecp_tls_read_point &rArr; mbedtls_ecp_point_read_binary  &rArr; mbedtls_mpi_read_binary  &rArr; mbedtls_mpi_lset  &rArr; mbedtls_mpi_grow  </ul>
<br>[Calls]<ul>
<li><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_point
</ul>
<br>[Called By]<ul>
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
</ul>
<p><strong><a name="[5d6]"></a>mbedtls_ecdh_calc_secret</strong>(100 bytes, Stack size 32 btyes, Obj/library_ecdh.o(.text.mbedtls_ecdh_calc_secret))<br>
<br>[Stack]<ul><li>Max Depth = 568 
<li>Call Chain = mbedtls_ecdh_calc_secret &rArr; mbedtls_ecdh_compute_shared &rArr; mbedtls_ecp_mul  &rArr; mbedtls_ecp_check_pubkey  &rArr; tih_ecp_check  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
<li><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<li><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
</ul>
<br>[Called By]<ul>
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
<li><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_psk_derive_premaster
</ul>
<p><strong><a name="[5d8]"></a>mbedtls_ecdh_sm2_gen_public</strong>(20 bytes, Stack size 0 btyes, Obj/library_ecdh_sm2.o(.text.mbedtls_ecdh_sm2_gen_public))<br>
<p><strong><a name="[5d9]"></a>mbedtls_ecdh_sm2_init</strong>(14 bytes, Stack size 0 btyes, Obj/library_ecdh_sm2.o(.text.mbedtls_ecdh_sm2_init))<br>
<p><strong><a name="[5da]"></a>mbedtls_ecdh_sm2_free</strong>(118 bytes, Stack size 0 btyes, Obj/library_ecdh_sm2.o(.text.mbedtls_ecdh_sm2_free))<br>
<p><strong><a name="[5db]"></a>mbedtls_ecdh_sm2_make_params</strong>(122 bytes, Stack size 0 btyes, Obj/library_ecdh_sm2.o(.text.mbedtls_ecdh_sm2_make_params))<br>
<p><strong><a name="[5dc]"></a>mbedtls_ecdh_sm2_make_params2</strong>(56 bytes, Stack size 0 btyes, Obj/library_ecdh_sm2.o(.text.mbedtls_ecdh_sm2_make_params2))<br>
<p><strong><a name="[5dd]"></a>mbedtls_ecdh_sm2_read_params</strong>(40 bytes, Stack size 0 btyes, Obj/library_ecdh_sm2.o(.text.mbedtls_ecdh_sm2_read_params))<br>
<p><strong><a name="[5de]"></a>mbedtls_ecdh_sm2_get_params</strong>(78 bytes, Stack size 0 btyes, Obj/library_ecdh_sm2.o(.text.mbedtls_ecdh_sm2_get_params))<br>
<p><strong><a name="[5df]"></a>mbedtls_ecdh_sm2_get_params2</strong>(42 bytes, Stack size 0 btyes, Obj/library_ecdh_sm2.o(.text.mbedtls_ecdh_sm2_get_params2))<br>
<p><strong><a name="[5e0]"></a>mbedtls_ecdh_sm2_get_params3</strong>(130 bytes, Stack size 0 btyes, Obj/library_ecdh_sm2.o(.text.mbedtls_ecdh_sm2_get_params3))<br>
<p><strong><a name="[5e1]"></a>mbedtls_ecdh_sm2_get_params4</strong>(44 bytes, Stack size 0 btyes, Obj/library_ecdh_sm2.o(.text.mbedtls_ecdh_sm2_get_params4))<br>
<p><strong><a name="[5e2]"></a>mbedtls_ecdh_sm2_make_public</strong>(86 bytes, Stack size 0 btyes, Obj/library_ecdh_sm2.o(.text.mbedtls_ecdh_sm2_make_public))<br>
<p><strong><a name="[5e3]"></a>mbedtls_ecdh_sm2_read_public</strong>(50 bytes, Stack size 0 btyes, Obj/library_ecdh_sm2.o(.text.mbedtls_ecdh_sm2_read_public))<br>
<p><strong><a name="[5e4]"></a>mbedtls_ecdh_sm2_calc_secret</strong>(842 bytes, Stack size 0 btyes, Obj/library_ecdh_sm2.o(.text.mbedtls_ecdh_sm2_calc_secret))<br>
<p><strong><a name="[5e5]"></a>mbedtls_ecdh_sm2_self_test</strong>(606 bytes, Stack size 0 btyes, Obj/library_ecdh_sm2.o(.text.mbedtls_ecdh_sm2_self_test))<br>
<p><strong><a name="[5e7]"></a>mbedtls_ecdsa_sign</strong>(418 bytes, Stack size 132 btyes, Obj/library_ecdsa.o(.text.mbedtls_ecdsa_sign))<br>
<br>[Stack]<ul><li>Max Depth = 704 
<li>Call Chain = mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base  &rArr; mbedtls_ecp_mul  &rArr; mbedtls_ecp_check_pubkey  &rArr; tih_ecp_check  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<li><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<li><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<li><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
<li><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<li><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<li><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<li><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<li><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<li><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<li><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<li><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<li><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
</ul>
<br>[Called By]<ul>
<li><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
</ul>
<p><strong><a name="[5e8]"></a>mbedtls_ecdsa_sign_det</strong>(172 bytes, Stack size 272 btyes, Obj/library_ecdsa.o(.text.mbedtls_ecdsa_sign_det))<br>
<br>[Stack]<ul><li>Max Depth = 976 
<li>Call Chain = mbedtls_ecdsa_sign_det &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair  &rArr; mbedtls_ecp_gen_keypair_base  &rArr; mbedtls_ecp_mul  &rArr; mbedtls_ecp_check_pubkey  &rArr; tih_ecp_check  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<li><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<li><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_init
<li><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<li><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_free
<li><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<li><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<li><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<li><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
</ul>
<br>[Called By]<ul>
<li><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
</ul>
<p><strong><a name="[5e9]"></a>mbedtls_ecdsa_verify</strong>(338 bytes, Stack size 128 btyes, Obj/library_ecdsa.o(.text.mbedtls_ecdsa_verify))<br>
<br>[Stack]<ul><li>Max Depth = 596 
<li>Call Chain = mbedtls_ecdsa_verify &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi  &rArr; mbedtls_mpi_div_mpi  &rArr; mbedtls_mpi_mul_mpi  &rArr; mpi_mul_hlp  &rArr; __muldi3  </ul>
<br>[Calls]<ul>
<li><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<li><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<li><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<li><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<li><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<li><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<li><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<li><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<li><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<li><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<li><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<li><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_is_zero
</ul>
<br>[Called By]<ul>
<li><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
</ul>
<p><strong><a name="[5ea]"></a>mbedtls_ecdsa_write_signature</strong>(218 bytes, Stack size 176 btyes, Obj/library_ecdsa.o(.text.mbedtls_ecdsa_write_signature))<br>
<br>[Stack]<ul><li>Max Depth = 1152 
<li>Call Chain = mbedtls_ecdsa_write_signature &rArr; mbedtls_ecdsa_sign_det &rArr; mbedtls_ecdsa_sign  &rArr; mbedtls_ecp_gen_keypair  &rArr; mbedtls_ecp_gen_keypair_base  &rArr; mbedtls_ecp_mul  &rArr; mbedtls_ecp_check_pubkey  &rArr; tih_ecp_check  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<li><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
<li><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<li><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<li><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
<li><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_wrap
<li><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
</ul>
<p><strong><a name="[5eb]"></a>mbedtls_ecdsa_write_signature_det</strong>(46 bytes, Stack size 0 btyes, Obj/library_ecdsa.o(.text.mbedtls_ecdsa_write_signature_det))<br>
<p><strong><a name="[5ec]"></a>mbedtls_ecdsa_read_signature</strong>(160 bytes, Stack size 60 btyes, Obj/library_ecdsa.o(.text.mbedtls_ecdsa_read_signature))<br>
<br>[Stack]<ul><li>Max Depth = 656 
<li>Call Chain = mbedtls_ecdsa_read_signature &rArr; mbedtls_ecdsa_verify &rArr; mbedtls_mpi_inv_mod  &rArr; mbedtls_mpi_mod_mpi  &rArr; mbedtls_mpi_div_mpi  &rArr; mbedtls_mpi_mul_mpi  &rArr; mpi_mul_hlp  &rArr; __muldi3  </ul>
<br>[Calls]<ul>
<li><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<li><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<li><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<li><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<li><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
</ul>
<br>[Called By]<ul>
<li><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_verify_wrap
<li><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
</ul>
<p><strong><a name="[5ed]"></a>mbedtls_ecdsa_genkey</strong>(52 bytes, Stack size 0 btyes, Obj/library_ecdsa.o(.text.mbedtls_ecdsa_genkey))<br>
<p><strong><a name="[5ee]"></a>mbedtls_ecdsa_from_keypair</strong>(64 bytes, Stack size 16 btyes, Obj/library_ecdsa.o(.text.mbedtls_ecdsa_from_keypair))<br>
<br>[Stack]<ul><li>Max Depth = 72 
<li>Call Chain = mbedtls_ecdsa_from_keypair &rArr; mbedtls_ecp_copy &rArr; mbedtls_mpi_copy  &rArr; mbedtls_mpi_grow  </ul>
<br>[Calls]<ul>
<li><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
<li><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<li><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<li><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</ul>
<br>[Called By]<ul>
<li><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
<li><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
</ul>
<p><strong><a name="[5ef]"></a>mbedtls_ecdsa_init</strong>(8 bytes, Stack size 4 btyes, Obj/library_ecdsa.o(.text.mbedtls_ecdsa_init))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = mbedtls_ecdsa_init &rArr; mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_point_init  </ul>
<br>[Calls]<ul>
<li><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
</ul>
<br>[Called By]<ul>
<li><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_alloc_wrap
<li><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
<li><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
</ul>
<p><strong><a name="[5f0]"></a>mbedtls_ecdsa_free</strong>(8 bytes, Stack size 4 btyes, Obj/library_ecdsa.o(.text.mbedtls_ecdsa_free))<br>
<br>[Stack]<ul><li>Max Depth = 44 
<li>Call Chain = mbedtls_ecdsa_free &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free  &rArr; mbedtls_ecp_point_free  &rArr; mbedtls_mpi_free  </ul>
<br>[Calls]<ul>
<li><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
</ul>
<br>[Called By]<ul>
<li><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_free_wrap
<li><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
<li><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
</ul>
<p><strong><a name="[5f1]"></a>mbedtls_ecdsa_sm2_sign</strong>(154 bytes, Stack size 52 btyes, Obj/library_ecdsa_sm2.o(.text.mbedtls_ecdsa_sm2_sign))<br>
<br>[Stack]<ul><li>Max Depth = 544 
<li>Call Chain = mbedtls_ecdsa_sm2_sign &rArr; tih_sm2_sign &rArr; sm2_sign  &rArr; sm2_sign_osr  &rArr; sm2_sign_with_k  &rArr; sm2_pointMul_base  &rArr; pointMul_Shamir  &rArr; pke_pre_calc_mont_H  </ul>
<br>[Calls]<ul>
<li><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<li><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<li><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<li><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<li><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm2_sign
<li><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</ul>
<br>[Called By]<ul>
<li><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_sign_det
</ul>
<p><strong><a name="[5f2]"></a>mbedtls_ecdsa_sm2_sign_det</strong>(244 bytes, Stack size 276 btyes, Obj/library_ecdsa_sm2.o(.text.mbedtls_ecdsa_sm2_sign_det))<br>
<br>[Stack]<ul><li>Max Depth = 820 
<li>Call Chain = mbedtls_ecdsa_sm2_sign_det &rArr; mbedtls_ecdsa_sm2_sign &rArr; tih_sm2_sign  &rArr; sm2_sign  &rArr; sm2_sign_osr  &rArr; sm2_sign_with_k  &rArr; sm2_pointMul_base  &rArr; pointMul_Shamir  &rArr; pke_pre_calc_mont_H  </ul>
<br>[Calls]<ul>
<li><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<li><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<li><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_init
<li><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<li><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_free
<li><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<li><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<li><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<li><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<li><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<li><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_sign
</ul>
<br>[Called By]<ul>
<li><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_write_signature
</ul>
<p><strong><a name="[5f3]"></a>mbedtls_ecdsa_sm2_verify</strong>(288 bytes, Stack size 36 btyes, Obj/library_ecdsa_sm2.o(.text.mbedtls_ecdsa_sm2_verify))<br>
<br>[Stack]<ul><li>Max Depth = 424 
<li>Call Chain = mbedtls_ecdsa_sm2_verify &rArr; mbedtls_ecp_check_pubkey &rArr; tih_ecp_check  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<li><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<li><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<li><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm2_verify
</ul>
<br>[Called By]<ul>
<li><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_read_signature
</ul>
<p><strong><a name="[5f4]"></a>mbedtls_ecdsa_sm2_write_signature</strong>(218 bytes, Stack size 176 btyes, Obj/library_ecdsa_sm2.o(.text.mbedtls_ecdsa_sm2_write_signature))<br>
<br>[Stack]<ul><li>Max Depth = 996 
<li>Call Chain = mbedtls_ecdsa_sm2_write_signature &rArr; mbedtls_ecdsa_sm2_sign_det &rArr; mbedtls_ecdsa_sm2_sign  &rArr; tih_sm2_sign  &rArr; sm2_sign  &rArr; sm2_sign_osr  &rArr; sm2_sign_with_k  &rArr; sm2_pointMul_base  &rArr; pointMul_Shamir  &rArr; pke_pre_calc_mont_H  </ul>
<br>[Calls]<ul>
<li><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<li><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_sign_det
<li><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<li><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<li><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
<li><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sm2_sign_wrap
</ul>
<p><strong><a name="[5f5]"></a>mbedtls_ecdsa_sm2_write_signature_det</strong>(46 bytes, Stack size 0 btyes, Obj/library_ecdsa_sm2.o(.text.mbedtls_ecdsa_sm2_write_signature_det))<br>
<p><strong><a name="[5f6]"></a>mbedtls_ecdsa_sm2_read_signature</strong>(160 bytes, Stack size 60 btyes, Obj/library_ecdsa_sm2.o(.text.mbedtls_ecdsa_sm2_read_signature))<br>
<br>[Stack]<ul><li>Max Depth = 484 
<li>Call Chain = mbedtls_ecdsa_sm2_read_signature &rArr; mbedtls_ecdsa_sm2_verify &rArr; mbedtls_ecp_check_pubkey  &rArr; tih_ecp_check  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<li><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<li><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<li><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<li><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_verify
</ul>
<br>[Called By]<ul>
<li><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sm2_verify_wrap
</ul>
<p><strong><a name="[5f7]"></a>mbedtls_ecdsa_sm2_genkey</strong>(52 bytes, Stack size 0 btyes, Obj/library_ecdsa_sm2.o(.text.mbedtls_ecdsa_sm2_genkey))<br>
<p><strong><a name="[5f8]"></a>mbedtls_ecdsa_sm2_from_keypair</strong>(64 bytes, Stack size 0 btyes, Obj/library_ecdsa_sm2.o(.text.mbedtls_ecdsa_sm2_from_keypair))<br>
<p><strong><a name="[5f9]"></a>mbedtls_ecdsa_sm2_init</strong>(8 bytes, Stack size 4 btyes, Obj/library_ecdsa_sm2.o(.text.mbedtls_ecdsa_sm2_init))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = mbedtls_ecdsa_sm2_init &rArr; mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_point_init  </ul>
<br>[Calls]<ul>
<li><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
</ul>
<br>[Called By]<ul>
<li><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sm2_alloc_wrap
</ul>
<p><strong><a name="[5fa]"></a>mbedtls_ecdsa_sm2_free</strong>(8 bytes, Stack size 4 btyes, Obj/library_ecdsa_sm2.o(.text.mbedtls_ecdsa_sm2_free))<br>
<br>[Stack]<ul><li>Max Depth = 44 
<li>Call Chain = mbedtls_ecdsa_sm2_free &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free  &rArr; mbedtls_ecp_point_free  &rArr; mbedtls_mpi_free  </ul>
<br>[Calls]<ul>
<li><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
</ul>
<br>[Called By]<ul>
<li><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sm2_free_wrap
</ul>
<p><strong><a name="[5fb]"></a>mbedtls_sm2_dsa_self_test</strong>(630 bytes, Stack size 0 btyes, Obj/library_ecdsa_sm2.o(.text.mbedtls_sm2_dsa_self_test))<br>
<p><strong><a name="[5fc]"></a>mbedtls_ecp_curve_list</strong>(4 bytes, Stack size 0 btyes, Obj/library_ecp_alt.o(.text.mbedtls_ecp_curve_list))<br>
<p><strong><a name="[5fd]"></a>mbedtls_ecp_grp_id_list</strong>(56 bytes, Stack size 4 btyes, Obj/library_ecp_alt.o(.text.mbedtls_ecp_grp_id_list))<br>
<br>[Called By]<ul>
<li><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<li><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</ul>
<p><strong><a name="[5fe]"></a>mbedtls_ecp_curve_info_from_grp_id</strong>(32 bytes, Stack size 0 btyes, Obj/library_ecp_alt.o(.text.mbedtls_ecp_curve_info_from_grp_id))<br>
<br>[Called By]<ul>
<li><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<li><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
</ul>
<p><strong><a name="[5ff]"></a>mbedtls_ecp_curve_info_from_tls_id</strong>(34 bytes, Stack size 0 btyes, Obj/library_ecp_alt.o(.text.mbedtls_ecp_curve_info_from_tls_id))<br>
<br>[Called By]<ul>
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_hello
</ul>
<p><strong><a name="[600]"></a>mbedtls_ecp_curve_info_from_name</strong>(40 bytes, Stack size 0 btyes, Obj/library_ecp_alt.o(.text.mbedtls_ecp_curve_info_from_name))<br>
<p><strong><a name="[601]"></a>mbedtls_ecp_point_init</strong>(30 bytes, Stack size 8 btyes, Obj/library_ecp_alt.o(.text.mbedtls_ecp_point_init))<br>
<br>[Calls]<ul>
<li><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</ul>
<br>[Called By]<ul>
<li><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
<li><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<li><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<li><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
<li><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<li><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
</ul>
<p><strong><a name="[602]"></a>mbedtls_ecp_group_init</strong>(16 bytes, Stack size 4 btyes, Obj/library_ecp_alt.o(.text.mbedtls_ecp_group_init))<br>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
</ul>
<p><strong><a name="[603]"></a>mbedtls_ecp_keypair_init</strong>(34 bytes, Stack size 8 btyes, Obj/library_ecp_alt.o(.text.mbedtls_ecp_keypair_init))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_point_init </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<li><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
</ul>
<br>[Called By]<ul>
<li><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
<li><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_init
<li><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_alloc_wrap
</ul>
<p><strong><a name="[604]"></a>mbedtls_ecp_point_free</strong>(30 bytes, Stack size 8 btyes, Obj/library_ecp_alt.o(.text.mbedtls_ecp_point_free))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = mbedtls_ecp_point_free &rArr; mbedtls_mpi_free </ul>
<br>[Calls]<ul>
<li><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</ul>
<br>[Called By]<ul>
<li><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
<li><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<li><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<li><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<li><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<li><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<li><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<li><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
</ul>
<p><strong><a name="[605]"></a>mbedtls_ecp_group_free</strong>(102 bytes, Stack size 16 btyes, Obj/library_ecp_alt.o(.text.mbedtls_ecp_group_free))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free  </ul>
<br>[Calls]<ul>
<li><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<li><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<li><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<li><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<li><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<li><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<li><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
</ul>
<p><strong><a name="[606]"></a>mbedtls_ecp_keypair_free</strong>(30 bytes, Stack size 8 btyes, Obj/library_ecp_alt.o(.text.mbedtls_ecp_keypair_free))<br>
<br>[Stack]<ul><li>Max Depth = 40 
<li>Call Chain = mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free  &rArr; mbedtls_mpi_free  </ul>
<br>[Calls]<ul>
<li><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<li><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<li><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
</ul>
<br>[Called By]<ul>
<li><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<li><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
<li><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_free
<li><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_free_wrap
<li><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</ul>
<p><strong><a name="[607]"></a>mbedtls_ecp_copy</strong>(46 bytes, Stack size 12 btyes, Obj/library_ecp_alt.o(.text.mbedtls_ecp_copy))<br>
<br>[Stack]<ul><li>Max Depth = 56 
<li>Call Chain = mbedtls_ecp_copy &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow  </ul>
<br>[Calls]<ul>
<li><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
</ul>
<br>[Called By]<ul>
<li><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_get_params
<li><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<li><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<li><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
</ul>
<p><strong><a name="[608]"></a>mbedtls_ecp_group_copy</strong>(10 bytes, Stack size 4 btyes, Obj/library_ecp_alt.o(.text.mbedtls_ecp_group_copy))<br>
<br>[Stack]<ul><li>Max Depth = 52 
<li>Call Chain = mbedtls_ecp_group_copy &rArr; mbedtls_ecp_group_load &rArr; mbedtls_ecp_group_free  &rArr; mbedtls_ecp_point_free  &rArr; mbedtls_mpi_free  </ul>
<br>[Calls]<ul>
<li><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</ul>
<br>[Called By]<ul>
<li><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_get_params
<li><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
</ul>
<p><strong><a name="[609]"></a>mbedtls_ecp_set_zero</strong>(42 bytes, Stack size 8 btyes, Obj/library_ecp_alt.o(.text.mbedtls_ecp_set_zero))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = mbedtls_ecp_set_zero &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow  </ul>
<br>[Calls]<ul>
<li><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</ul>
<br>[Called By]<ul>
<li><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
</ul>
<p><strong><a name="[60a]"></a>mbedtls_ecp_is_zero</strong>(16 bytes, Stack size 4 btyes, Obj/library_ecp_alt.o(.text.mbedtls_ecp_is_zero))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = mbedtls_ecp_is_zero &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi  </ul>
<br>[Calls]<ul>
<li><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</ul>
<br>[Called By]<ul>
<li><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
<li><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
</ul>
<p><strong><a name="[60b]"></a>mbedtls_ecp_point_cmp</strong>(56 bytes, Stack size 0 btyes, Obj/library_ecp_alt.o(.text.mbedtls_ecp_point_cmp))<br>
<p><strong><a name="[60c]"></a>mbedtls_ecp_point_read_string</strong>(46 bytes, Stack size 0 btyes, Obj/library_ecp_alt.o(.text.mbedtls_ecp_point_read_string))<br>
<p><strong><a name="[60d]"></a>mbedtls_ecp_point_write_binary</strong>(210 bytes, Stack size 28 btyes, Obj/library_ecp_alt.o(.text.mbedtls_ecp_point_write_binary))<br>
<br>[Stack]<ul><li>Max Depth = 52 
<li>Call Chain = mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi  </ul>
<br>[Calls]<ul>
<li><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<li><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<li><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<li><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
</ul>
<br>[Called By]<ul>
<li><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_point
</ul>
<p><strong><a name="[60e]"></a>mbedtls_ecp_point_read_binary</strong>(112 bytes, Stack size 20 btyes, Obj/library_ecp_alt.o(.text.mbedtls_ecp_point_read_binary))<br>
<br>[Stack]<ul><li>Max Depth = 84 
<li>Call Chain = mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset  &rArr; mbedtls_mpi_grow  </ul>
<br>[Calls]<ul>
<li><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
<li><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<li><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<li><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</ul>
<br>[Called By]<ul>
<li><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_point
<li><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
<li><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
</ul>
<p><strong><a name="[60f]"></a>mbedtls_ecp_tls_read_point</strong>(56 bytes, Stack size 8 btyes, Obj/library_ecp_alt.o(.text.mbedtls_ecp_tls_read_point))<br>
<br>[Stack]<ul><li>Max Depth = 92 
<li>Call Chain = mbedtls_ecp_tls_read_point &rArr; mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary  &rArr; mbedtls_mpi_lset  &rArr; mbedtls_mpi_grow  </ul>
<br>[Calls]<ul>
<li><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
</ul>
<br>[Called By]<ul>
<li><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_params
<li><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_public
</ul>
<p><strong><a name="[610]"></a>mbedtls_ecp_tls_write_point</strong>(62 bytes, Stack size 20 btyes, Obj/library_ecp_alt.o(.text.mbedtls_ecp_tls_write_point))<br>
<br>[Stack]<ul><li>Max Depth = 72 
<li>Call Chain = mbedtls_ecp_tls_write_point &rArr; mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_cmp_int  &rArr; mbedtls_mpi_cmp_mpi  </ul>
<br>[Calls]<ul>
<li><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
</ul>
<br>[Called By]<ul>
<li><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_params
<li><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_public
</ul>
<p><strong><a name="[611]"></a>mbedtls_ecp_tls_read_group</strong>(88 bytes, Stack size 4 btyes, Obj/library_ecp_alt.o(.text.mbedtls_ecp_tls_read_group))<br>
<br>[Stack]<ul><li>Max Depth = 52 
<li>Call Chain = mbedtls_ecp_tls_read_group &rArr; mbedtls_ecp_group_load &rArr; mbedtls_ecp_group_free  &rArr; mbedtls_ecp_point_free  &rArr; mbedtls_mpi_free  </ul>
<br>[Calls]<ul>
<li><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</ul>
<br>[Called By]<ul>
<li><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_params
</ul>
<p><strong><a name="[612]"></a>mbedtls_ecp_tls_write_group</strong>(82 bytes, Stack size 0 btyes, Obj/library_ecp_alt.o(.text.mbedtls_ecp_tls_write_group))<br>
<br>[Called By]<ul>
<li><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_params
</ul>
<p><strong><a name="[613]"></a>tih_curve_convert</strong>(50 bytes, Stack size 0 btyes, Obj/library_ecp_alt.o(.text.tih_curve_convert))<br>
<p><strong><a name="[614]"></a>mbedtls_ecp_muladd</strong>(270 bytes, Stack size 96 btyes, Obj/library_ecp_alt.o(.text.mbedtls_ecp_muladd))<br>
<br>[Stack]<ul><li>Max Depth = 460 
<li>Call Chain = mbedtls_ecp_muladd &rArr; tih_ecp_muladd &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<li><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
<li><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_ecp_muladd
</ul>
<br>[Called By]<ul>
<li><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
</ul>
<p><strong><a name="[615]"></a>mbedtls_ecp_check_pubkey</strong>(182 bytes, Stack size 60 btyes, Obj/library_ecp_alt.o(.text.mbedtls_ecp_check_pubkey))<br>
<br>[Stack]<ul><li>Max Depth = 388 
<li>Call Chain = mbedtls_ecp_check_pubkey &rArr; tih_ecp_check &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<li><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<li><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_ecp_check
</ul>
<br>[Called By]<ul>
<li><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
<li><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<li><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_verify
<li><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<li><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
<li><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm2_z_get
<li><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm2_encrypt
</ul>
<p><strong><a name="[616]"></a>mbedtls_ecp_check_privkey</strong>(64 bytes, Stack size 12 btyes, Obj/library_ecp_alt.o(.text.mbedtls_ecp_check_privkey))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = mbedtls_ecp_check_privkey &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi  </ul>
<br>[Calls]<ul>
<li><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</ul>
<br>[Called By]<ul>
<li><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<li><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<li><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm2_decrypt
</ul>
<p><strong><a name="[617]"></a>mbedtls_ecp_mul</strong>(202 bytes, Stack size 72 btyes, Obj/library_ecp_alt.o(.text.mbedtls_ecp_mul))<br>
<br>[Stack]<ul><li>Max Depth = 460 
<li>Call Chain = mbedtls_ecp_mul &rArr; mbedtls_ecp_check_pubkey &rArr; tih_ecp_check  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<li><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<li><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<li><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
<li><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_ecp_mul
</ul>
<br>[Called By]<ul>
<li><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
<li><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<li><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<li><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<li><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</ul>
<p><strong><a name="[618]"></a>mbedtls_ecp_gen_keypair_base</strong>(172 bytes, Stack size 100 btyes, Obj/library_ecp_alt.o(.text.mbedtls_ecp_gen_keypair_base))<br>
<br>[Stack]<ul><li>Max Depth = 560 
<li>Call Chain = mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; mbedtls_ecp_check_pubkey  &rArr; tih_ecp_check  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<li><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<li><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<li><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
</ul>
<br>[Called By]<ul>
<li><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
</ul>
<p><strong><a name="[619]"></a>mbedtls_ecp_gen_keypair</strong>(30 bytes, Stack size 12 btyes, Obj/library_ecp_alt.o(.text.mbedtls_ecp_gen_keypair))<br>
<br>[Stack]<ul><li>Max Depth = 572 
<li>Call Chain = mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul  &rArr; mbedtls_ecp_check_pubkey  &rArr; tih_ecp_check  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
</ul>
<br>[Called By]<ul>
<li><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_params
<li><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_public
<li><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
</ul>
<p><strong><a name="[61a]"></a>mbedtls_ecp_gen_key</strong>(48 bytes, Stack size 0 btyes, Obj/library_ecp_alt.o(.text.mbedtls_ecp_gen_key))<br>
<p><strong><a name="[61b]"></a>mbedtls_ecp_check_pub_priv</strong>(186 bytes, Stack size 188 btyes, Obj/library_ecp_alt.o(.text.mbedtls_ecp_check_pub_priv))<br>
<br>[Stack]<ul><li>Max Depth = 648 
<li>Call Chain = mbedtls_ecp_check_pub_priv &rArr; mbedtls_ecp_mul &rArr; mbedtls_ecp_check_pubkey  &rArr; tih_ecp_check  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<li><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<li><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<li><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<li><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</ul>
<br>[Called By]<ul>
<li><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_check_pair
</ul>
<p><strong><a name="[61c]"></a>mbedtls_ecp_self_test</strong>(606 bytes, Stack size 284 btyes, Obj/library_ecp_alt.o(.text.mbedtls_ecp_self_test))<br>
<br>[Stack]<ul><li>Max Depth = 744 
<li>Call Chain = mbedtls_ecp_self_test &rArr; mbedtls_ecp_mul &rArr; mbedtls_ecp_check_pubkey  &rArr; tih_ecp_check  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<li><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<li><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<li><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<li><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<li><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<li><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[cc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
<li><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<li><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</ul>
<br>[Called By]<ul>
<li><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_crypto_test
</ul>
<p><strong><a name="[61d]"></a>mbedtls_ecp_group_load</strong>(654 bytes, Stack size 16 btyes, Obj/library_ecp_curves_alt.o(.text.mbedtls_ecp_group_load))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = mbedtls_ecp_group_load &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free  &rArr; mbedtls_mpi_free  </ul>
<br>[Calls]<ul>
<li><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<li><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</ul>
<br>[Called By]<ul>
<li><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
<li><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_group
<li><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<li><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<li><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_server_key_exchange
</ul>
<p><strong><a name="[622]"></a>mbedtls_entropy_free</strong>(30 bytes, Stack size 0 btyes, Obj/library_entropy.o(.text.mbedtls_entropy_free))<br>
<p><strong><a name="[623]"></a>mbedtls_entropy_add_source</strong>(92 bytes, Stack size 32 btyes, Obj/library_entropy.o(.text.mbedtls_entropy_add_source))<br>
<br>[Called By]<ul>
<li><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<li><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
</ul>
<p><strong><a name="[624]"></a>mbedtls_entropy_init</strong>(68 bytes, Stack size 16 btyes, Obj/library_entropy.o(.text.mbedtls_entropy_init))<br>
<br>[Stack]<ul><li>Max Depth = 340 
<li>Call Chain = mbedtls_entropy_init &rArr; mbedtls_sha256_starts &rArr; tih_sha256_init  &rArr; drv_crypto_lock.part.0  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
<li><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_add_source
</ul>
<br>[Called By]<ul>
<li><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
</ul>
<p><strong><a name="[625]"></a>mbedtls_entropy_update_manual</strong>(62 bytes, Stack size 24 btyes, Obj/library_entropy.o(.text.mbedtls_entropy_update_manual))<br>
<br>[Stack]<ul><li>Max Depth = 624 
<li>Call Chain = mbedtls_entropy_update_manual &rArr; entropy_update &rArr; mbedtls_sha256  &rArr; mbedtls_sha256_finish  &rArr; mbedtls_sha256_update  &rArr; mbedtls_sha256_process  </ul>
<br>[Calls]<ul>
<li><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
</ul>
<br>[Called By]<ul>
<li><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
</ul>
<p><strong><a name="[626]"></a>mbedtls_entropy_gather</strong>(52 bytes, Stack size 16 btyes, Obj/library_entropy.o(.text.mbedtls_entropy_gather))<br>
<br>[Stack]<ul><li>Max Depth = 780 
<li>Call Chain = mbedtls_entropy_gather &rArr; entropy_gather_internal &rArr; entropy_update  &rArr; mbedtls_sha256  &rArr; mbedtls_sha256_finish  &rArr; mbedtls_sha256_update  &rArr; mbedtls_sha256_process  </ul>
<br>[Calls]<ul>
<li><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_gather_internal
</ul>
<br>[Called By]<ul>
<li><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
</ul>
<p><strong><a name="[627]"></a>mbedtls_entropy_func</strong>(252 bytes, Stack size 68 btyes, Obj/library_entropy.o(.text.mbedtls_entropy_func))<br>
<br>[Stack]<ul><li>Max Depth = 832 
<li>Call Chain = mbedtls_entropy_func &rArr; entropy_gather_internal &rArr; entropy_update  &rArr; mbedtls_sha256  &rArr; mbedtls_sha256_finish  &rArr; mbedtls_sha256_update  &rArr; mbedtls_sha256_process  </ul>
<br>[Calls]<ul>
<li><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_gather_internal
<li><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
<li><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<li><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
</ul>
<p><strong><a name="[628]"></a>mbedtls_entropy_source_self_test</strong>(212 bytes, Stack size 52 btyes, Obj/library_entropy.o(.text.mbedtls_entropy_source_self_test))<br>
<br>[Stack]<ul><li>Max Depth = 420 
<li>Call Chain = mbedtls_entropy_source_self_test &rArr; mbedtls_entropy_source_self_test_gather.constprop.0 &rArr; mbedtls_hardware_poll  &rArr; tih_rand_get  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_source_self_test_gather.constprop.0
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[cc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</ul>
<br>[Called By]<ul>
<li><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
</ul>
<p><strong><a name="[629]"></a>mbedtls_entropy_self_test</strong>(254 bytes, Stack size 304 btyes, Obj/library_entropy.o(.text.mbedtls_entropy_self_test))<br>
<br>[Stack]<ul><li>Max Depth = 1136 
<li>Call Chain = mbedtls_entropy_self_test &rArr; mbedtls_entropy_func &rArr; entropy_gather_internal  &rArr; entropy_update  &rArr; mbedtls_sha256  &rArr; mbedtls_sha256_finish  &rArr; mbedtls_sha256_update  &rArr; mbedtls_sha256_process  </ul>
<br>[Calls]<ul>
<li><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<li><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_gather
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[cc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
<li><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_add_source
<li><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_update_manual
<li><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_source_self_test
</ul>
<br>[Called By]<ul>
<li><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_crypto_test
</ul>
<p><strong><a name="[62a]"></a>mbedtls_hardclock_poll</strong>(60 bytes, Stack size 20 btyes, Obj/library_entropy_poll.o(.text.mbedtls_hardclock_poll))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = mbedtls_hardclock_poll &rArr; mbedtls_timing_hardclock &rArr; rt_hw_hardclock_get  </ul>
<br>[Calls]<ul>
<li><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_timing_hardclock
</ul>
<p><strong><a name="[62b]"></a>mbedtls_strerror</strong>(4370 bytes, Stack size 0 btyes, Obj/library_error.o(.text.mbedtls_strerror))<br>
<p><strong><a name="[62d]"></a>mbedtls_gcm_init</strong>(14 bytes, Stack size 4 btyes, Obj/library_gcm.o(.text.mbedtls_gcm_init))<br>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_alloc
</ul>
<p><strong><a name="[62e]"></a>mbedtls_gcm_setkey</strong>(424 bytes, Stack size 88 btyes, Obj/library_gcm.o(.text.mbedtls_gcm_setkey))<br>
<br>[Stack]<ul><li>Max Depth = 308 
<li>Call Chain = mbedtls_gcm_setkey &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update  &rArr; gcm_mult  </ul>
<br>[Calls]<ul>
<li><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_values
<li><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<li><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<li><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<li><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
</ul>
<br>[Called By]<ul>
<li><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_aes_setkey_wrap
<li><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
</ul>
<p><strong><a name="[62f]"></a>mbedtls_gcm_starts</strong>(432 bytes, Stack size 64 btyes, Obj/library_gcm.o(.text.mbedtls_gcm_starts))<br>
<br>[Stack]<ul><li>Max Depth = 284 
<li>Call Chain = mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update  &rArr; gcm_mult  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_mult
<li><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
</ul>
<br>[Called By]<ul>
<li><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<li><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
</ul>
<p><strong><a name="[630]"></a>mbedtls_gcm_update</strong>(276 bytes, Stack size 68 btyes, Obj/library_gcm.o(.text.mbedtls_gcm_update))<br>
<br>[Stack]<ul><li>Max Depth = 176 
<li>Call Chain = mbedtls_gcm_update &rArr; gcm_mult </ul>
<br>[Calls]<ul>
<li><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<li><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_mult
</ul>
<br>[Called By]<ul>
<li><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<li><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<li><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
</ul>
<p><strong><a name="[631]"></a>mbedtls_gcm_finish</strong>(266 bytes, Stack size 48 btyes, Obj/library_gcm.o(.text.mbedtls_gcm_finish))<br>
<br>[Stack]<ul><li>Max Depth = 156 
<li>Call Chain = mbedtls_gcm_finish &rArr; gcm_mult </ul>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_mult
</ul>
<br>[Called By]<ul>
<li><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<li><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
</ul>
<p><strong><a name="[632]"></a>mbedtls_gcm_crypt_and_tag</strong>(134 bytes, Stack size 36 btyes, Obj/library_gcm.o(.text.mbedtls_gcm_crypt_and_tag))<br>
<br>[Stack]<ul><li>Max Depth = 320 
<li>Call Chain = mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update  &rArr; mbedtls_gcm_update  &rArr; gcm_mult  </ul>
<br>[Calls]<ul>
<li><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<li><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<li><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
</ul>
<br>[Called By]<ul>
<li><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_encrypt
<li><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_auth_decrypt
<li><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
</ul>
<p><strong><a name="[633]"></a>mbedtls_gcm_auth_decrypt</strong>(148 bytes, Stack size 68 btyes, Obj/library_gcm.o(.text.mbedtls_gcm_auth_decrypt))<br>
<br>[Stack]<ul><li>Max Depth = 388 
<li>Call Chain = mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts  &rArr; mbedtls_cipher_update  &rArr; mbedtls_gcm_update  &rArr; gcm_mult  </ul>
<br>[Calls]<ul>
<li><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_decrypt
</ul>
<p><strong><a name="[634]"></a>mbedtls_gcm_free</strong>(22 bytes, Stack size 8 btyes, Obj/library_gcm.o(.text.mbedtls_gcm_free))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = mbedtls_gcm_free &rArr; mbedtls_cipher_free </ul>
<br>[Calls]<ul>
<li><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_free
</ul>
<p><strong><a name="[635]"></a>mbedtls_gcm_self_test</strong>(1074 bytes, Stack size 620 btyes, Obj/library_gcm.o(.text.mbedtls_gcm_self_test))<br>
<br>[Stack]<ul><li>Max Depth = 940 
<li>Call Chain = mbedtls_gcm_self_test &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts  &rArr; mbedtls_cipher_update  &rArr; mbedtls_gcm_update  &rArr; gcm_mult  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<li><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<li><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<li><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<li><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[cc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</ul>
<br>[Called By]<ul>
<li><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_crypto_test
</ul>
<p><strong><a name="[637]"></a>mbedtls_hmac_drbg_init</strong>(24 bytes, Stack size 8 btyes, Obj/library_hmac_drbg.o(.text.mbedtls_hmac_drbg_init))<br>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
<li><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_sign_det
</ul>
<p><strong><a name="[638]"></a>mbedtls_hmac_drbg_update</strong>(162 bytes, Stack size 68 btyes, Obj/library_hmac_drbg.o(.text.mbedtls_hmac_drbg_update))<br>
<br>[Stack]<ul><li>Max Depth = 124 
<li>Call Chain = mbedtls_hmac_drbg_update &rArr; mbedtls_md_hmac_starts </ul>
<br>[Calls]<ul>
<li><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<li><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<li><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<li><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<li><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
</ul>
<br>[Called By]<ul>
<li><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<li><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
<li><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
</ul>
<p><strong><a name="[639]"></a>mbedtls_hmac_drbg_seed_buf</strong>(76 bytes, Stack size 28 btyes, Obj/library_hmac_drbg.o(.text.mbedtls_hmac_drbg_seed_buf))<br>
<br>[Stack]<ul><li>Max Depth = 152 
<li>Call Chain = mbedtls_hmac_drbg_seed_buf &rArr; mbedtls_hmac_drbg_update &rArr; mbedtls_md_hmac_starts  </ul>
<br>[Calls]<ul>
<li><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<li><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<li><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
</ul>
<br>[Called By]<ul>
<li><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
<li><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_sign_det
</ul>
<p><strong><a name="[63a]"></a>mbedtls_hmac_drbg_reseed</strong>(116 bytes, Stack size 408 btyes, Obj/library_hmac_drbg.o(.text.mbedtls_hmac_drbg_reseed))<br>
<br>[Stack]<ul><li>Max Depth = 532 
<li>Call Chain = mbedtls_hmac_drbg_reseed &rArr; mbedtls_hmac_drbg_update &rArr; mbedtls_md_hmac_starts  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed
<li><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<li><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_self_test
</ul>
<p><strong><a name="[63b]"></a>mbedtls_hmac_drbg_seed</strong>(130 bytes, Stack size 32 btyes, Obj/library_hmac_drbg.o(.text.mbedtls_hmac_drbg_seed))<br>
<br>[Stack]<ul><li>Max Depth = 564 
<li>Call Chain = mbedtls_hmac_drbg_seed &rArr; mbedtls_hmac_drbg_reseed &rArr; mbedtls_hmac_drbg_update  &rArr; mbedtls_md_hmac_starts  </ul>
<br>[Calls]<ul>
<li><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<li><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<li><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
</ul>
<br>[Called By]<ul>
<li><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_self_test
</ul>
<p><strong><a name="[63c]"></a>mbedtls_hmac_drbg_set_prediction_resistance</strong>(4 bytes, Stack size 0 btyes, Obj/library_hmac_drbg.o(.text.mbedtls_hmac_drbg_set_prediction_resistance))<br>
<p><strong><a name="[63d]"></a>mbedtls_hmac_drbg_set_entropy_len</strong>(4 bytes, Stack size 0 btyes, Obj/library_hmac_drbg.o(.text.mbedtls_hmac_drbg_set_entropy_len))<br>
<p><strong><a name="[63e]"></a>mbedtls_hmac_drbg_set_reseed_interval</strong>(4 bytes, Stack size 0 btyes, Obj/library_hmac_drbg.o(.text.mbedtls_hmac_drbg_set_reseed_interval))<br>
<p><strong><a name="[63f]"></a>mbedtls_hmac_drbg_random_with_add</strong>(180 bytes, Stack size 36 btyes, Obj/library_hmac_drbg.o(.text.mbedtls_hmac_drbg_random_with_add))<br>
<br>[Stack]<ul><li>Max Depth = 568 
<li>Call Chain = mbedtls_hmac_drbg_random_with_add &rArr; mbedtls_hmac_drbg_reseed &rArr; mbedtls_hmac_drbg_update  &rArr; mbedtls_md_hmac_starts  </ul>
<br>[Calls]<ul>
<li><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<li><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<li><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<li><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<li><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
</ul>
<br>[Called By]<ul>
<li><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random
</ul>
<p><strong><a name="[640]"></a>mbedtls_hmac_drbg_random</strong>(68 bytes, Stack size 28 btyes, Obj/library_hmac_drbg.o(.text.mbedtls_hmac_drbg_random))<br>
<br>[Stack]<ul><li>Max Depth = 596 
<li>Call Chain = mbedtls_hmac_drbg_random &rArr; mbedtls_hmac_drbg_random_with_add &rArr; mbedtls_hmac_drbg_reseed  &rArr; mbedtls_hmac_drbg_update  &rArr; mbedtls_md_hmac_starts  </ul>
<br>[Calls]<ul>
<li><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
</ul>
<br>[Called By]<ul>
<li><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_self_test
</ul>
<p><strong><a name="[641]"></a>mbedtls_hmac_drbg_free</strong>(34 bytes, Stack size 8 btyes, Obj/library_hmac_drbg.o(.text.mbedtls_hmac_drbg_free))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = mbedtls_hmac_drbg_free &rArr; mbedtls_md_free </ul>
<br>[Calls]<ul>
<li><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
<li><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_sign_det
<li><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_self_test
</ul>
<p><strong><a name="[642]"></a>mbedtls_hmac_drbg_self_test</strong>(410 bytes, Stack size 224 btyes, Obj/library_hmac_drbg.o(.text.mbedtls_hmac_drbg_self_test))<br>
<br>[Stack]<ul><li>Max Depth = 820 
<li>Call Chain = mbedtls_hmac_drbg_self_test &rArr; mbedtls_hmac_drbg_random &rArr; mbedtls_hmac_drbg_random_with_add  &rArr; mbedtls_hmac_drbg_reseed  &rArr; mbedtls_hmac_drbg_update  &rArr; mbedtls_md_hmac_starts  </ul>
<br>[Calls]<ul>
<li><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_free
<li><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
<li><a href="#[cc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</ul>
<br>[Called By]<ul>
<li><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_crypto_test
</ul>
<p><strong><a name="[643]"></a>mbedtls_md_list</strong>(4 bytes, Stack size 0 btyes, Obj/library_md.o(.text.mbedtls_md_list))<br>
<p><strong><a name="[644]"></a>mbedtls_md_info_from_string</strong>(106 bytes, Stack size 0 btyes, Obj/library_md.o(.text.mbedtls_md_info_from_string))<br>
<p><strong><a name="[645]"></a>mbedtls_md_info_from_type</strong>(18 bytes, Stack size 0 btyes, Obj/library_md.o(.text.mbedtls_md_info_from_type))<br>
<br>[Called By]<ul>
<li><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
<li><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_sign_det
<li><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_self_test
<li><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
<li><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_sign
<li><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<li><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<li><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_self_test
<li><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<li><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<li><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<li><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<li><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<li><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<li><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_server_key_exchange
<li><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<li><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<li><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<li><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
<li><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<li><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<li><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</ul>
<p><strong><a name="[646]"></a>mbedtls_md_init</strong>(28 bytes, Stack size 0 btyes, Obj/library_md.o(.text.mbedtls_md_init))<br>
<br>[Called By]<ul>
<li><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<li><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<li><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_self_test
<li><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<li><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<li><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<li><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<li><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_server_key_exchange
<li><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<li><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<li><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</ul>
<p><strong><a name="[647]"></a>mbedtls_md_free</strong>(76 bytes, Stack size 8 btyes, Obj/library_md.o(.text.mbedtls_md_free))<br>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<br>[Called By]<ul>
<li><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_free
<li><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<li><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<li><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_self_test
<li><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<li><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<li><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<li><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<li><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_server_key_exchange
<li><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<li><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<li><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
</ul>
<p><strong><a name="[648]"></a>mbedtls_md_clone</strong>(46 bytes, Stack size 0 btyes, Obj/library_md.o(.text.mbedtls_md_clone))<br>
<p><strong><a name="[649]"></a>mbedtls_md_setup</strong>(104 bytes, Stack size 20 btyes, Obj/library_md.o(.text.mbedtls_md_setup))<br>
<br>[Calls]<ul>
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</ul>
<br>[Called By]<ul>
<li><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<li><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed
<li><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<li><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<li><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_self_test
<li><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<li><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<li><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<li><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<li><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_server_key_exchange
<li><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<li><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<li><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</ul>
<p><strong><a name="[64a]"></a>mbedtls_md_init_ctx</strong>(10 bytes, Stack size 0 btyes, Obj/library_md.o(.text.mbedtls_md_init_ctx))<br>
<p><strong><a name="[64b]"></a>mbedtls_md_starts</strong>(30 bytes, Stack size 4 btyes, Obj/library_md.o(.text.mbedtls_md_starts))<br>
<br>[Called By]<ul>
<li><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<li><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<li><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<li><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<li><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_server_key_exchange
</ul>
<p><strong><a name="[64c]"></a>mbedtls_md_update</strong>(30 bytes, Stack size 4 btyes, Obj/library_md.o(.text.mbedtls_md_update))<br>
<br>[Called By]<ul>
<li><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<li><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<li><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<li><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<li><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_server_key_exchange
</ul>
<p><strong><a name="[64d]"></a>mbedtls_md_finish</strong>(30 bytes, Stack size 4 btyes, Obj/library_md.o(.text.mbedtls_md_finish))<br>
<br>[Called By]<ul>
<li><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<li><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<li><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<li><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<li><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_server_key_exchange
</ul>
<p><strong><a name="[64e]"></a>mbedtls_md</strong>(32 bytes, Stack size 4 btyes, Obj/library_md.o(.text.mbedtls_md))<br>
<br>[Called By]<ul>
<li><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<li><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<li><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<li><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<li><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<li><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</ul>
<p><strong><a name="[64f]"></a>mbedtls_md_hmac_starts</strong>(172 bytes, Stack size 56 btyes, Obj/library_md.o(.text.mbedtls_md_hmac_starts))<br>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<li><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<li><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed
<li><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbkdf2_hmac
<li><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<li><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<li><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</ul>
<p><strong><a name="[650]"></a>mbedtls_md_hmac_update</strong>(38 bytes, Stack size 4 btyes, Obj/library_md.o(.text.mbedtls_md_hmac_update))<br>
<br>[Called By]<ul>
<li><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<li><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<li><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbkdf2_hmac
<li><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<li><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<li><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<li><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
</ul>
<p><strong><a name="[651]"></a>mbedtls_md_hmac_finish</strong>(96 bytes, Stack size 48 btyes, Obj/library_md.o(.text.mbedtls_md_hmac_finish))<br>
<br>[Called By]<ul>
<li><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<li><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<li><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbkdf2_hmac
<li><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<li><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<li><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<li><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
</ul>
<p><strong><a name="[652]"></a>mbedtls_md_hmac_reset</strong>(52 bytes, Stack size 12 btyes, Obj/library_md.o(.text.mbedtls_md_hmac_reset))<br>
<br>[Called By]<ul>
<li><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<li><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<li><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbkdf2_hmac
<li><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<li><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<li><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<li><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
</ul>
<p><strong><a name="[653]"></a>mbedtls_md_hmac</strong>(160 bytes, Stack size 0 btyes, Obj/library_md.o(.text.mbedtls_md_hmac))<br>
<p><strong><a name="[654]"></a>mbedtls_md_process</strong>(30 bytes, Stack size 0 btyes, Obj/library_md.o(.text.mbedtls_md_process))<br>
<p><strong><a name="[655]"></a>mbedtls_md_get_size</strong>(10 bytes, Stack size 0 btyes, Obj/library_md.o(.text.mbedtls_md_get_size))<br>
<br>[Called By]<ul>
<li><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<li><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<li><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed
<li><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<li><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
<li><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_sign
<li><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<li><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbkdf2_hmac
<li><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<li><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<li><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<li><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<li><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<li><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<li><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<li><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_server_key_exchange
<li><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<li><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<li><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<li><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<li><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</ul>
<p><strong><a name="[656]"></a>mbedtls_md_get_type</strong>(8 bytes, Stack size 0 btyes, Obj/library_md.o(.text.mbedtls_md_get_type))<br>
<p><strong><a name="[657]"></a>mbedtls_md_get_name</strong>(8 bytes, Stack size 0 btyes, Obj/library_md.o(.text.mbedtls_md_get_name))<br>
<br>[Called By]<ul>
<li><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
</ul>
<p><strong><a name="[658]"></a>mbedtls_md5_init</strong>(12 bytes, Stack size 4 btyes, Obj/library_md5.o(.text.mbedtls_md5_init))<br>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_ctx_alloc
<li><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<li><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_server_key_exchange
<li><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
<li><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls
<li><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</ul>
<p><strong><a name="[659]"></a>mbedtls_md5_free</strong>(20 bytes, Stack size 0 btyes, Obj/library_md5.o(.text.mbedtls_md5_free))<br>
<br>[Called By]<ul>
<li><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_ctx_free
<li><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<li><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_server_key_exchange
<li><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
<li><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls
<li><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</ul>
<p><strong><a name="[65a]"></a>mbedtls_md5_clone</strong>(10 bytes, Stack size 4 btyes, Obj/library_md5.o(.text.mbedtls_md5_clone))<br>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_clone_wrap
<li><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
<li><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls
</ul>
<p><strong><a name="[65b]"></a>mbedtls_md5_starts</strong>(24 bytes, Stack size 0 btyes, Obj/library_md5.o(.text.mbedtls_md5_starts))<br>
<br>[Called By]<ul>
<li><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_starts_wrap
<li><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<li><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_server_key_exchange
<li><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_reset_checksum
<li><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</ul>
<p><strong><a name="[65c]"></a>mbedtls_md5_process</strong>(2372 bytes, Stack size 76 btyes, Obj/library_md5.o(.text.mbedtls_md5_process))<br>
<br>[Called By]<ul>
<li><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update.part.0
<li><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_process_wrap
</ul>
<p><strong><a name="[65e]"></a>mbedtls_md5_update</strong>(12 bytes, Stack size 4 btyes, Obj/library_md5.o(.text.mbedtls_md5_update))<br>
<br>[Stack]<ul><li>Max Depth = 108 
<li>Call Chain = mbedtls_md5_update &rArr; mbedtls_md5_update.part.0 &rArr; mbedtls_md5_process  </ul>
<br>[Calls]<ul>
<li><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update.part.0
</ul>
<br>[Called By]<ul>
<li><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update_wrap
<li><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<li><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_server_key_exchange
<li><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_md5sha1
<li><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_start
</ul>
<p><strong><a name="[65f]"></a>mbedtls_md5_finish</strong>(170 bytes, Stack size 20 btyes, Obj/library_md5.o(.text.mbedtls_md5_finish))<br>
<br>[Stack]<ul><li>Max Depth = 124 
<li>Call Chain = mbedtls_md5_finish &rArr; mbedtls_md5_update.part.0 &rArr; mbedtls_md5_process  </ul>
<br>[Calls]<ul>
<li><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update.part.0
</ul>
<br>[Called By]<ul>
<li><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5
<li><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_finish_wrap
<li><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<li><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_server_key_exchange
<li><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
<li><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls
</ul>
<p><strong><a name="[660]"></a>mbedtls_md5</strong>(78 bytes, Stack size 104 btyes, Obj/library_md5.o(.text.mbedtls_md5))<br>
<br>[Stack]<ul><li>Max Depth = 228 
<li>Call Chain = mbedtls_md5 &rArr; mbedtls_md5_finish &rArr; mbedtls_md5_update.part.0  &rArr; mbedtls_md5_process  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
<li><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update.part.0
</ul>
<br>[Called By]<ul>
<li><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_self_test
</ul>
<p><strong><a name="[661]"></a>mbedtls_md5_self_test</strong>(158 bytes, Stack size 52 btyes, Obj/library_md5.o(.text.mbedtls_md5_self_test))<br>
<br>[Stack]<ul><li>Max Depth = 280 
<li>Call Chain = mbedtls_md5_self_test &rArr; mbedtls_md5 &rArr; mbedtls_md5_finish  &rArr; mbedtls_md5_update.part.0  &rArr; mbedtls_md5_process  </ul>
<br>[Calls]<ul>
<li><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[cc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</ul>
<br>[Called By]<ul>
<li><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_crypto_test
</ul>
<p><strong><a name="[685]"></a>mbedtls_oid_get_attr_short_name</strong>(56 bytes, Stack size 20 btyes, Obj/library_oid.o(.text.mbedtls_oid_get_attr_short_name))<br>
<br>[Calls]<ul>
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</ul>
<br>[Called By]<ul>
<li><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
</ul>
<p><strong><a name="[686]"></a>mbedtls_oid_get_x509_ext_type</strong>(56 bytes, Stack size 20 btyes, Obj/library_oid.o(.text.mbedtls_oid_get_x509_ext_type))<br>
<br>[Calls]<ul>
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</ul>
<br>[Called By]<ul>
<li><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</ul>
<p><strong><a name="[687]"></a>mbedtls_oid_get_extended_key_usage</strong>(56 bytes, Stack size 20 btyes, Obj/library_oid.o(.text.mbedtls_oid_get_extended_key_usage))<br>
<br>[Calls]<ul>
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</ul>
<br>[Called By]<ul>
<li><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</ul>
<p><strong><a name="[688]"></a>mbedtls_oid_get_sig_alg_desc</strong>(26 bytes, Stack size 8 btyes, Obj/library_oid.o(.text.mbedtls_oid_get_sig_alg_desc))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = mbedtls_oid_get_sig_alg_desc &rArr; oid_sig_alg_from_asn1 </ul>
<br>[Calls]<ul>
<li><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_sig_alg_from_asn1
</ul>
<br>[Called By]<ul>
<li><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
</ul>
<p><strong><a name="[689]"></a>mbedtls_oid_get_sig_alg</strong>(32 bytes, Stack size 12 btyes, Obj/library_oid.o(.text.mbedtls_oid_get_sig_alg))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = mbedtls_oid_get_sig_alg &rArr; oid_sig_alg_from_asn1 </ul>
<br>[Calls]<ul>
<li><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_sig_alg_from_asn1
</ul>
<br>[Called By]<ul>
<li><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
</ul>
<p><strong><a name="[68a]"></a>mbedtls_oid_get_oid_by_sig_alg</strong>(62 bytes, Stack size 0 btyes, Obj/library_oid.o(.text.mbedtls_oid_get_oid_by_sig_alg))<br>
<p><strong><a name="[68b]"></a>mbedtls_oid_get_pk_alg</strong>(56 bytes, Stack size 20 btyes, Obj/library_oid.o(.text.mbedtls_oid_get_pk_alg))<br>
<br>[Calls]<ul>
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</ul>
<br>[Called By]<ul>
<li><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
</ul>
<p><strong><a name="[68c]"></a>mbedtls_oid_get_oid_by_pk_alg</strong>(56 bytes, Stack size 0 btyes, Obj/library_oid.o(.text.mbedtls_oid_get_oid_by_pk_alg))<br>
<p><strong><a name="[68d]"></a>mbedtls_oid_get_ec_grp</strong>(56 bytes, Stack size 20 btyes, Obj/library_oid.o(.text.mbedtls_oid_get_ec_grp))<br>
<br>[Calls]<ul>
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</ul>
<br>[Called By]<ul>
<li><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
</ul>
<p><strong><a name="[68e]"></a>mbedtls_oid_get_oid_by_ec_grp</strong>(56 bytes, Stack size 0 btyes, Obj/library_oid.o(.text.mbedtls_oid_get_oid_by_ec_grp))<br>
<p><strong><a name="[68f]"></a>mbedtls_oid_get_cipher_alg</strong>(56 bytes, Stack size 20 btyes, Obj/library_oid.o(.text.mbedtls_oid_get_cipher_alg))<br>
<br>[Calls]<ul>
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</ul>
<br>[Called By]<ul>
<li><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
</ul>
<p><strong><a name="[690]"></a>mbedtls_oid_get_md_alg</strong>(56 bytes, Stack size 20 btyes, Obj/library_oid.o(.text.mbedtls_oid_get_md_alg))<br>
<br>[Calls]<ul>
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</ul>
<br>[Called By]<ul>
<li><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<li><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
</ul>
<p><strong><a name="[691]"></a>mbedtls_oid_get_oid_by_md</strong>(56 bytes, Stack size 0 btyes, Obj/library_oid.o(.text.mbedtls_oid_get_oid_by_md))<br>
<br>[Called By]<ul>
<li><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
</ul>
<p><strong><a name="[692]"></a>mbedtls_oid_get_pkcs12_pbe_alg</strong>(64 bytes, Stack size 24 btyes, Obj/library_oid.o(.text.mbedtls_oid_get_pkcs12_pbe_alg))<br>
<br>[Calls]<ul>
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</ul>
<br>[Called By]<ul>
<li><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
</ul>
<p><strong><a name="[693]"></a>mbedtls_oid_get_numeric_string</strong>(166 bytes, Stack size 0 btyes, Obj/library_oid.o(.text.mbedtls_oid_get_numeric_string))<br>
<p><strong><a name="[698]"></a>mbedtls_pem_init</strong>(28 bytes, Stack size 0 btyes, Obj/library_pem.o(.text.mbedtls_pem_init))<br>
<br>[Called By]<ul>
<li><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gm_pk_parse_key
<li><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<li><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
</ul>
<p><strong><a name="[699]"></a>mbedtls_pem_read_buffer</strong>(876 bytes, Stack size 204 btyes, Obj/library_pem.o(.text.mbedtls_pem_read_buffer))<br>
<br>[Stack]<ul><li>Max Depth = 1084 
<li>Call Chain = mbedtls_pem_read_buffer &rArr; pem_des3_decrypt &rArr; mbedtls_des3_set3key_dec  &rArr; des3_set3key  &rArr; mbedtls_des_setkey  </ul>
<br>[Calls]<ul>
<li><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_decode
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_get_iv
<li><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
<li><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_des3_decrypt
<li><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_init
<li><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<li><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_setkey_dec
<li><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_crypt_cbc
<li><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_free
</ul>
<br>[Called By]<ul>
<li><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gm_pk_parse_key
<li><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<li><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
</ul>
<p><strong><a name="[69a]"></a>mbedtls_pem_free</strong>(34 bytes, Stack size 8 btyes, Obj/library_pem.o(.text.mbedtls_pem_free))<br>
<br>[Calls]<ul>
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<br>[Called By]<ul>
<li><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gm_pk_parse_key
<li><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<li><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
</ul>
<p><strong><a name="[69b]"></a>mbedtls_pem_write_buffer</strong>(254 bytes, Stack size 0 btyes, Obj/library_pem.o(.text.mbedtls_pem_write_buffer))<br>
<p><strong><a name="[69c]"></a>mbedtls_pk_init</strong>(12 bytes, Stack size 0 btyes, Obj/library_pk.o(.text.mbedtls_pk_init))<br>
<br>[Called By]<ul>
<li><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_init
<li><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_create
</ul>
<p><strong><a name="[69d]"></a>mbedtls_pk_free</strong>(36 bytes, Stack size 8 btyes, Obj/library_pk.o(.text.mbedtls_pk_free))<br>
<br>[Called By]<ul>
<li><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<li><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gm_pk_parse_subpubkey
<li><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<li><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gm_pk_parse_key
<li><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<li><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<li><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_close
<li><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_destroy
</ul>
<p><strong><a name="[69e]"></a>mbedtls_pk_info_from_type</strong>(18 bytes, Stack size 0 btyes, Obj/library_pk.o(.text.mbedtls_pk_info_from_type))<br>
<br>[Called By]<ul>
<li><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<li><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gm_pk_parse_subpubkey
<li><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<li><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gm_pk_parse_key
<li><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</ul>
<p><strong><a name="[69f]"></a>mbedtls_pk_setup</strong>(52 bytes, Stack size 16 btyes, Obj/library_pk.o(.text.mbedtls_pk_setup))<br>
<br>[Called By]<ul>
<li><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<li><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gm_pk_parse_subpubkey
<li><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<li><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gm_pk_parse_key
<li><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</ul>
<p><strong><a name="[6a0]"></a>mbedtls_pk_setup_rsa_alt</strong>(72 bytes, Stack size 0 btyes, Obj/library_pk.o(.text.mbedtls_pk_setup_rsa_alt))<br>
<p><strong><a name="[6a1]"></a>mbedtls_pk_can_do</strong>(24 bytes, Stack size 4 btyes, Obj/library_pk.o(.text.mbedtls_pk_can_do))<br>
<br>[Called By]<ul>
<li><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
<li><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_server_key_exchange
<li><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_encrypted_pms
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_hello
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
<li><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_sig_from_pk
<li><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</ul>
<p><strong><a name="[6a2]"></a>mbedtls_pk_verify</strong>(130 bytes, Stack size 32 btyes, Obj/library_pk.o(.text.mbedtls_pk_verify))<br>
<br>[Calls]<ul>
<li><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<li><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
</ul>
<br>[Called By]<ul>
<li><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<li><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
</ul>
<p><strong><a name="[6a3]"></a>mbedtls_pk_verify_ext</strong>(252 bytes, Stack size 60 btyes, Obj/library_pk.o(.text.mbedtls_pk_verify_ext))<br>
<br>[Stack]<ul><li>Max Depth = 1296 
<li>Call Chain = mbedtls_pk_verify_ext &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private  &rArr; tih_rsa_decrypt  &rArr; rsa_crt_decrypt  &rArr; RSA_CRTModExp  &rArr; pke_mod  &rArr; pke_modmul  </ul>
<br>[Calls]<ul>
<li><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
<li><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</ul>
<br>[Called By]<ul>
<li><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<li><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<li><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</ul>
<p><strong><a name="[6a4]"></a>mbedtls_pk_sign</strong>(160 bytes, Stack size 48 btyes, Obj/library_pk.o(.text.mbedtls_pk_sign))<br>
<br>[Calls]<ul>
<li><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<li><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
</ul>
<br>[Called By]<ul>
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_server_key_exchange
</ul>
<p><strong><a name="[6a5]"></a>mbedtls_pk_z_get</strong>(48 bytes, Stack size 4 btyes, Obj/library_pk.o(.text.mbedtls_pk_z_get))<br>
<br>[Called By]<ul>
<li><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_server_key_exchange
<li><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
</ul>
<p><strong><a name="[6a6]"></a>mbedtls_pk_decrypt</strong>(82 bytes, Stack size 32 btyes, Obj/library_pk.o(.text.mbedtls_pk_decrypt))<br>
<br>[Called By]<ul>
<li><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_encrypted_pms
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
</ul>
<p><strong><a name="[6a7]"></a>mbedtls_pk_encrypt</strong>(82 bytes, Stack size 32 btyes, Obj/library_pk.o(.text.mbedtls_pk_encrypt))<br>
<br>[Called By]<ul>
<li><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</ul>
<p><strong><a name="[6a8]"></a>mbedtls_pk_check_pair</strong>(74 bytes, Stack size 0 btyes, Obj/library_pk.o(.text.mbedtls_pk_check_pair))<br>
<p><strong><a name="[6a9]"></a>mbedtls_pk_get_bitlen</strong>(24 bytes, Stack size 4 btyes, Obj/library_pk.o(.text.mbedtls_pk_get_bitlen))<br>
<br>[Called By]<ul>
<li><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_encrypted_pms
<li><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key.isra.4
<li><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</ul>
<p><strong><a name="[6aa]"></a>mbedtls_pk_debug</strong>(42 bytes, Stack size 4 btyes, Obj/library_pk.o(.text.mbedtls_pk_debug))<br>
<br>[Called By]<ul>
<li><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
</ul>
<p><strong><a name="[6ab]"></a>mbedtls_pk_get_name</strong>(18 bytes, Stack size 0 btyes, Obj/library_pk.o(.text.mbedtls_pk_get_name))<br>
<br>[Called By]<ul>
<li><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</ul>
<p><strong><a name="[6ac]"></a>mbedtls_pk_get_type</strong>(14 bytes, Stack size 0 btyes, Obj/library_pk.o(.text.mbedtls_pk_get_type))<br>
<br>[Called By]<ul>
<li><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</ul>
<p><strong><a name="[6d4]"></a>mbedtls_pkcs12_pbe_sha1_rc4_128</strong>(8 bytes, Stack size 0 btyes, Obj/library_pkcs12.o(.text.mbedtls_pkcs12_pbe_sha1_rc4_128))<br>
<br>[Called By]<ul>
<li><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
</ul>
<p><strong><a name="[6d5]"></a>mbedtls_pkcs12_derivation</strong>(594 bytes, Stack size 620 btyes, Obj/library_pkcs12.o(.text.mbedtls_pkcs12_derivation))<br>
<br>[Stack]<ul><li>Max Depth = 640 
<li>Call Chain = mbedtls_pkcs12_derivation &rArr; mbedtls_md_setup </ul>
<br>[Calls]<ul>
<li><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<li><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<li><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<li><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<li><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<li><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<li><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<li><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
</ul>
<br>[Called By]<ul>
<li><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
</ul>
<p><strong><a name="[6d6]"></a>mbedtls_pkcs12_pbe</strong>(498 bytes, Stack size 408 btyes, Obj/library_pkcs12.o(.text.mbedtls_pkcs12_pbe))<br>
<br>[Stack]<ul><li>Max Depth = 1048 
<li>Call Chain = mbedtls_pkcs12_pbe &rArr; mbedtls_pkcs12_derivation &rArr; mbedtls_md_setup  </ul>
<br>[Calls]<ul>
<li><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_type
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<li><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_derivation
<li><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<li><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<li><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<li><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<li><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<li><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_iv
<li><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_reset
<li><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<li><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_finish
</ul>
<br>[Called By]<ul>
<li><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
</ul>
<p><strong><a name="[6d7]"></a>mbedtls_pkcs5_pbkdf2_hmac</strong>(262 bytes, Stack size 120 btyes, Obj/library_pkcs5.o(.text.mbedtls_pkcs5_pbkdf2_hmac))<br>
<br>[Stack]<ul><li>Max Depth = 176 
<li>Call Chain = mbedtls_pkcs5_pbkdf2_hmac &rArr; mbedtls_md_hmac_starts </ul>
<br>[Calls]<ul>
<li><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<li><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<li><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<li><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<li><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
<li><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_self_test
</ul>
<p><strong><a name="[6d8]"></a>mbedtls_pkcs5_pbes2</strong>(518 bytes, Stack size 280 btyes, Obj/library_pkcs5.o(.text.mbedtls_pkcs5_pbes2))<br>
<br>[Stack]<ul><li>Max Depth = 532 
<li>Call Chain = mbedtls_pkcs5_pbes2 &rArr; mbedtls_cipher_crypt &rArr; mbedtls_cipher_update  &rArr; mbedtls_gcm_update  &rArr; gcm_mult  </ul>
<br>[Calls]<ul>
<li><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<li><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<li><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_cipher_alg
<li><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_type
<li><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<li><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<li><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<li><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<li><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<li><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg_null
<li><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbkdf2_hmac
<li><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<li><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<li><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
</ul>
<br>[Called By]<ul>
<li><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
</ul>
<p><strong><a name="[6d9]"></a>mbedtls_pkcs5_self_test</strong>(266 bytes, Stack size 160 btyes, Obj/library_pkcs5.o(.text.mbedtls_pkcs5_self_test))<br>
<br>[Stack]<ul><li>Max Depth = 336 
<li>Call Chain = mbedtls_pkcs5_self_test &rArr; mbedtls_pkcs5_pbkdf2_hmac &rArr; mbedtls_md_hmac_starts  </ul>
<br>[Calls]<ul>
<li><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<li><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<li><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<li><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbkdf2_hmac
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<li><a href="#[cc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</ul>
<br>[Called By]<ul>
<li><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_crypto_test
</ul>
<p><strong><a name="[6e2]"></a>mbedtls_gm_pk_parse_subpubkey</strong>(220 bytes, Stack size 40 btyes, Obj/library_pkparse.o(.text.mbedtls_gm_pk_parse_subpubkey))<br>
<br>[Stack]<ul><li>Max Depth = 448 
<li>Call Chain = mbedtls_gm_pk_parse_subpubkey &rArr; pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey  &rArr; tih_ecp_check  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<li><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
<li><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<li><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<li><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<li><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<li><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<li><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<li><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
</ul>
<br>[Called By]<ul>
<li><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</ul>
<p><strong><a name="[6e3]"></a>mbedtls_pk_parse_subpubkey</strong>(220 bytes, Stack size 40 btyes, Obj/library_pkparse.o(.text.mbedtls_pk_parse_subpubkey))<br>
<br>[Stack]<ul><li>Max Depth = 448 
<li>Call Chain = mbedtls_pk_parse_subpubkey &rArr; pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey  &rArr; tih_ecp_check  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<li><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
<li><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<li><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<li><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<li><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<li><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<li><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<li><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
</ul>
<br>[Called By]<ul>
<li><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</ul>
<p><strong><a name="[6e4]"></a>mbedtls_gm_pk_parse_key</strong>(576 bytes, Stack size 68 btyes, Obj/library_pkparse.o(.text.mbedtls_gm_pk_parse_key))<br>
<br>[Stack]<ul><li>Max Depth = 3248 
<li>Call Chain = mbedtls_gm_pk_parse_key &rArr; pk_parse_key_pkcs8_encrypted_der &rArr; mbedtls_pkcs12_pbe  &rArr; mbedtls_pkcs12_derivation  &rArr; mbedtls_md_setup  </ul>
<br>[Calls]<ul>
<li><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_init
<li><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
<li><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<li><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<li><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<li><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<li><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<li><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<li><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<li><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</ul>
<br>[Called By]<ul>
<li><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_config
<li><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_create
</ul>
<p><strong><a name="[6e5]"></a>mbedtls_pk_parse_key</strong>(576 bytes, Stack size 68 btyes, Obj/library_pkparse.o(.text.mbedtls_pk_parse_key))<br>
<br>[Stack]<ul><li>Max Depth = 3248 
<li>Call Chain = mbedtls_pk_parse_key &rArr; pk_parse_key_pkcs8_encrypted_der &rArr; mbedtls_pkcs12_pbe  &rArr; mbedtls_pkcs12_derivation  &rArr; mbedtls_md_setup  </ul>
<br>[Calls]<ul>
<li><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_init
<li><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
<li><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<li><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<li><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<li><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<li><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<li><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<li><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<li><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</ul>
<br>[Called By]<ul>
<li><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_config
<li><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_create
</ul>
<p><strong><a name="[6e6]"></a>mbedtls_pk_parse_public_key</strong>(104 bytes, Stack size 0 btyes, Obj/library_pkparse.o(.text.mbedtls_pk_parse_public_key))<br>
<p><strong><a name="[6e9]"></a>mbedtls_pk_write_pubkey</strong>(134 bytes, Stack size 0 btyes, Obj/library_pkwrite.o(.text.mbedtls_pk_write_pubkey))<br>
<p><strong><a name="[6ea]"></a>mbedtls_pk_write_pubkey_der</strong>(218 bytes, Stack size 0 btyes, Obj/library_pkwrite.o(.text.mbedtls_pk_write_pubkey_der))<br>
<p><strong><a name="[6eb]"></a>mbedtls_pk_write_key_der</strong>(502 bytes, Stack size 0 btyes, Obj/library_pkwrite.o(.text.mbedtls_pk_write_key_der))<br>
<p><strong><a name="[6ec]"></a>mbedtls_pk_write_pubkey_pem</strong>(60 bytes, Stack size 0 btyes, Obj/library_pkwrite.o(.text.mbedtls_pk_write_pubkey_pem))<br>
<p><strong><a name="[6ed]"></a>mbedtls_pk_write_key_pem</strong>(104 bytes, Stack size 0 btyes, Obj/library_pkwrite.o(.text.mbedtls_pk_write_key_pem))<br>
<p><strong><a name="[6f0]"></a>mbedtls_rsa_init</strong>(36 bytes, Stack size 16 btyes, Obj/library_rsa.o(.text.mbedtls_rsa_init))<br>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alloc_wrap
</ul>
<p><strong><a name="[6f1]"></a>mbedtls_rsa_set_padding</strong>(10 bytes, Stack size 0 btyes, Obj/library_rsa.o(.text.mbedtls_rsa_set_padding))<br>
<p><strong><a name="[6f2]"></a>mbedtls_rsa_gen_key</strong>(510 bytes, Stack size 0 btyes, Obj/library_rsa.o(.text.mbedtls_rsa_gen_key))<br>
<p><strong><a name="[6f3]"></a>mbedtls_rsa_check_pubkey</strong>(100 bytes, Stack size 12 btyes, Obj/library_rsa.o(.text.mbedtls_rsa_check_pubkey))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = mbedtls_rsa_check_pubkey &rArr; mbedtls_mpi_cmp_mpi </ul>
<br>[Calls]<ul>
<li><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</ul>
<br>[Called By]<ul>
<li><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<li><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<li><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
<li><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
</ul>
<p><strong><a name="[6f4]"></a>mbedtls_rsa_check_privkey</strong>(578 bytes, Stack size 176 btyes, Obj/library_rsa.o(.text.mbedtls_rsa_check_privkey))<br>
<br>[Stack]<ul><li>Max Depth = 644 
<li>Call Chain = mbedtls_rsa_check_privkey &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi  &rArr; mbedtls_mpi_div_mpi  &rArr; mbedtls_mpi_mul_mpi  &rArr; mpi_mul_hlp  &rArr; __muldi3  </ul>
<br>[Calls]<ul>
<li><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<li><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<li><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<li><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<li><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<li><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<li><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<li><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<li><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</ul>
<br>[Called By]<ul>
<li><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<li><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
<li><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
</ul>
<p><strong><a name="[6f5]"></a>mbedtls_rsa_check_pub_priv</strong>(62 bytes, Stack size 12 btyes, Obj/library_rsa.o(.text.mbedtls_rsa_check_pub_priv))<br>
<br>[Stack]<ul><li>Max Depth = 656 
<li>Call Chain = mbedtls_rsa_check_pub_priv &rArr; mbedtls_rsa_check_privkey &rArr; mbedtls_mpi_inv_mod  &rArr; mbedtls_mpi_mod_mpi  &rArr; mbedtls_mpi_div_mpi  &rArr; mbedtls_mpi_mul_mpi  &rArr; mpi_mul_hlp  &rArr; __muldi3  </ul>
<br>[Calls]<ul>
<li><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<li><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</ul>
<br>[Called By]<ul>
<li><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_pair_wrap
</ul>
<p><strong><a name="[6f6]"></a>mbedtls_rsa_public</strong>(226 bytes, Stack size 40 btyes, Obj/library_rsa.o(.text.mbedtls_rsa_public))<br>
<br>[Stack]<ul><li>Max Depth = 384 
<li>Call Chain = mbedtls_rsa_public &rArr; tih_rsa_encrypt &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<li><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<li><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_rsa_encrypt
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<li><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<li><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<li><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<li><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<li><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<li><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<li><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
</ul>
<p><strong><a name="[6f7]"></a>mbedtls_rsa_private</strong>(502 bytes, Stack size 80 btyes, Obj/library_rsa.o(.text.mbedtls_rsa_private))<br>
<br>[Stack]<ul><li>Max Depth = 876 
<li>Call Chain = mbedtls_rsa_private &rArr; tih_rsa_decrypt &rArr; rsa_crt_decrypt  &rArr; RSA_CRTModExp  &rArr; pke_mod  &rArr; pke_modmul  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<li><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<li><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_rsa_decrypt
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<li><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<li><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<li><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<li><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<li><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<li><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<li><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
</ul>
<p><strong><a name="[6f8]"></a>mbedtls_rsa_rsaes_oaep_encrypt</strong>(342 bytes, Stack size 80 btyes, Obj/library_rsa.o(.text.mbedtls_rsa_rsaes_oaep_encrypt))<br>
<br>[Stack]<ul><li>Max Depth = 956 
<li>Call Chain = mbedtls_rsa_rsaes_oaep_encrypt &rArr; mbedtls_rsa_private &rArr; tih_rsa_decrypt  &rArr; rsa_crt_decrypt  &rArr; RSA_CRTModExp  &rArr; pke_mod  &rArr; pke_modmul  </ul>
<br>[Calls]<ul>
<li><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<li><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<li><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<li><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<li><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<li><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<li><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
</ul>
<br>[Called By]<ul>
<li><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
</ul>
<p><strong><a name="[6f9]"></a>mbedtls_rsa_rsaes_pkcs1_v15_encrypt</strong>(254 bytes, Stack size 44 btyes, Obj/library_rsa.o(.text.mbedtls_rsa_rsaes_pkcs1_v15_encrypt))<br>
<br>[Stack]<ul><li>Max Depth = 920 
<li>Call Chain = mbedtls_rsa_rsaes_pkcs1_v15_encrypt &rArr; mbedtls_rsa_private &rArr; tih_rsa_decrypt  &rArr; rsa_crt_decrypt  &rArr; RSA_CRTModExp  &rArr; pke_mod  &rArr; pke_modmul  </ul>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<li><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</ul>
<br>[Called By]<ul>
<li><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
</ul>
<p><strong><a name="[6fa]"></a>mbedtls_rsa_pkcs1_encrypt</strong>(90 bytes, Stack size 32 btyes, Obj/library_rsa.o(.text.mbedtls_rsa_pkcs1_encrypt))<br>
<br>[Stack]<ul><li>Max Depth = 988 
<li>Call Chain = mbedtls_rsa_pkcs1_encrypt &rArr; mbedtls_rsa_rsaes_oaep_encrypt &rArr; mbedtls_rsa_private  &rArr; tih_rsa_decrypt  &rArr; rsa_crt_decrypt  &rArr; RSA_CRTModExp  &rArr; pke_mod  &rArr; pke_modmul  </ul>
<br>[Calls]<ul>
<li><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<li><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
</ul>
<br>[Called By]<ul>
<li><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_encrypt_wrap
<li><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
</ul>
<p><strong><a name="[6fb]"></a>mbedtls_rsa_rsaes_oaep_decrypt</strong>(400 bytes, Stack size 368 btyes, Obj/library_rsa.o(.text.mbedtls_rsa_rsaes_oaep_decrypt))<br>
<br>[Stack]<ul><li>Max Depth = 1244 
<li>Call Chain = mbedtls_rsa_rsaes_oaep_decrypt &rArr; mbedtls_rsa_private &rArr; tih_rsa_decrypt  &rArr; rsa_crt_decrypt  &rArr; RSA_CRTModExp  &rArr; pke_mod  &rArr; pke_modmul  </ul>
<br>[Calls]<ul>
<li><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<li><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<li><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<li><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<li><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<li><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<li><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<li><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<li><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
</ul>
<p><strong><a name="[6fc]"></a>mbedtls_rsa_rsaes_pkcs1_v15_decrypt</strong>(384 bytes, Stack size 292 btyes, Obj/library_rsa.o(.text.mbedtls_rsa_rsaes_pkcs1_v15_decrypt))<br>
<br>[Stack]<ul><li>Max Depth = 1168 
<li>Call Chain = mbedtls_rsa_rsaes_pkcs1_v15_decrypt &rArr; mbedtls_rsa_private &rArr; tih_rsa_decrypt  &rArr; rsa_crt_decrypt  &rArr; RSA_CRTModExp  &rArr; pke_mod  &rArr; pke_modmul  </ul>
<br>[Calls]<ul>
<li><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<li><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
</ul>
<p><strong><a name="[6fd]"></a>mbedtls_rsa_pkcs1_decrypt</strong>(100 bytes, Stack size 40 btyes, Obj/library_rsa.o(.text.mbedtls_rsa_pkcs1_decrypt))<br>
<br>[Stack]<ul><li>Max Depth = 1284 
<li>Call Chain = mbedtls_rsa_pkcs1_decrypt &rArr; mbedtls_rsa_rsaes_oaep_decrypt &rArr; mbedtls_rsa_private  &rArr; tih_rsa_decrypt  &rArr; rsa_crt_decrypt  &rArr; RSA_CRTModExp  &rArr; pke_mod  &rArr; pke_modmul  </ul>
<br>[Calls]<ul>
<li><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<li><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
</ul>
<br>[Called By]<ul>
<li><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decrypt_wrap
<li><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
</ul>
<p><strong><a name="[6fe]"></a>mbedtls_rsa_rsassa_pss_sign</strong>(404 bytes, Stack size 104 btyes, Obj/library_rsa.o(.text.mbedtls_rsa_rsassa_pss_sign))<br>
<br>[Stack]<ul><li>Max Depth = 980 
<li>Call Chain = mbedtls_rsa_rsassa_pss_sign &rArr; mbedtls_rsa_private &rArr; tih_rsa_decrypt  &rArr; rsa_crt_decrypt  &rArr; RSA_CRTModExp  &rArr; pke_mod  &rArr; pke_modmul  </ul>
<br>[Calls]<ul>
<li><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<li><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<li><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<li><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<li><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<li><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<li><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<li><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<li><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<li><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
</ul>
<br>[Called By]<ul>
<li><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
</ul>
<p><strong><a name="[6ff]"></a>mbedtls_rsa_rsassa_pkcs1_v15_sign</strong>(436 bytes, Stack size 60 btyes, Obj/library_rsa.o(.text.mbedtls_rsa_rsassa_pkcs1_v15_sign))<br>
<br>[Stack]<ul><li>Max Depth = 936 
<li>Call Chain = mbedtls_rsa_rsassa_pkcs1_v15_sign &rArr; mbedtls_rsa_private &rArr; tih_rsa_decrypt  &rArr; rsa_crt_decrypt  &rArr; RSA_CRTModExp  &rArr; pke_mod  &rArr; pke_modmul  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<li><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<li><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<li><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<li><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_oid_by_md
<li><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
</ul>
<br>[Called By]<ul>
<li><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
</ul>
<p><strong><a name="[700]"></a>mbedtls_rsa_pkcs1_sign</strong>(88 bytes, Stack size 32 btyes, Obj/library_rsa.o(.text.mbedtls_rsa_pkcs1_sign))<br>
<br>[Stack]<ul><li>Max Depth = 1012 
<li>Call Chain = mbedtls_rsa_pkcs1_sign &rArr; mbedtls_rsa_rsassa_pss_sign &rArr; mbedtls_rsa_private  &rArr; tih_rsa_decrypt  &rArr; rsa_crt_decrypt  &rArr; RSA_CRTModExp  &rArr; pke_mod  &rArr; pke_modmul  </ul>
<br>[Calls]<ul>
<li><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<li><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
</ul>
<br>[Called By]<ul>
<li><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_sign_wrap
<li><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
</ul>
<p><strong><a name="[701]"></a>mbedtls_rsa_rsassa_pss_verify_ext</strong>(468 bytes, Stack size 360 btyes, Obj/library_rsa.o(.text.mbedtls_rsa_rsassa_pss_verify_ext))<br>
<br>[Stack]<ul><li>Max Depth = 1236 
<li>Call Chain = mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; tih_rsa_decrypt  &rArr; rsa_crt_decrypt  &rArr; RSA_CRTModExp  &rArr; pke_mod  &rArr; pke_modmul  </ul>
<br>[Calls]<ul>
<li><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<li><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<li><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<li><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<li><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<li><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<li><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<li><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<li><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<li><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<li><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</ul>
<br>[Called By]<ul>
<li><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<li><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
</ul>
<p><strong><a name="[702]"></a>mbedtls_rsa_rsassa_pss_verify</strong>(62 bytes, Stack size 0 btyes, Obj/library_rsa.o(.text.mbedtls_rsa_rsassa_pss_verify))<br>
<p><strong><a name="[703]"></a>mbedtls_rsa_rsassa_pkcs1_v15_verify</strong>(494 bytes, Stack size 312 btyes, Obj/library_rsa.o(.text.mbedtls_rsa_rsassa_pkcs1_v15_verify))<br>
<br>[Stack]<ul><li>Max Depth = 1188 
<li>Call Chain = mbedtls_rsa_rsassa_pkcs1_v15_verify &rArr; mbedtls_rsa_private &rArr; tih_rsa_decrypt  &rArr; rsa_crt_decrypt  &rArr; RSA_CRTModExp  &rArr; pke_mod  &rArr; pke_modmul  </ul>
<br>[Calls]<ul>
<li><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<li><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<li><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<li><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<li><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_md_alg
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</ul>
<br>[Called By]<ul>
<li><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
</ul>
<p><strong><a name="[704]"></a>mbedtls_rsa_pkcs1_verify</strong>(112 bytes, Stack size 44 btyes, Obj/library_rsa.o(.text.mbedtls_rsa_pkcs1_verify))<br>
<br>[Stack]<ul><li>Max Depth = 1280 
<li>Call Chain = mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private  &rArr; tih_rsa_decrypt  &rArr; rsa_crt_decrypt  &rArr; RSA_CRTModExp  &rArr; pke_mod  &rArr; pke_modmul  </ul>
<br>[Calls]<ul>
<li><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<li><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
</ul>
<br>[Called By]<ul>
<li><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_verify_wrap
<li><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
</ul>
<p><strong><a name="[705]"></a>mbedtls_rsa_free</strong>(116 bytes, Stack size 8 btyes, Obj/library_rsa.o(.text.mbedtls_rsa_free))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = mbedtls_rsa_free &rArr; mbedtls_mpi_free </ul>
<br>[Calls]<ul>
<li><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</ul>
<br>[Called By]<ul>
<li><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_free_wrap
<li><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<li><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
</ul>
<p><strong><a name="[706]"></a>mbedtls_rsa_copy</strong>(272 bytes, Stack size 0 btyes, Obj/library_rsa.o(.text.mbedtls_rsa_copy))<br>
<p><strong><a name="[707]"></a>mbedtls_rsa_self_test</strong>(596 bytes, Stack size 456 btyes, Obj/library_rsa.o(.text.mbedtls_rsa_self_test))<br>
<br>[Stack]<ul><li>Max Depth = 1740 
<li>Call Chain = mbedtls_rsa_self_test &rArr; mbedtls_rsa_pkcs1_decrypt &rArr; mbedtls_rsa_rsaes_oaep_decrypt  &rArr; mbedtls_rsa_private  &rArr; tih_rsa_decrypt  &rArr; rsa_crt_decrypt  &rArr; RSA_CRTModExp  &rArr; pke_mod  &rArr; pke_modmul  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<li><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
<li><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
<li><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<li><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
<li><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
<li><a href="#[cc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</ul>
<br>[Called By]<ul>
<li><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_crypto_test
</ul>
<p><strong><a name="[708]"></a>mbedtls_sha1</strong>(58 bytes, Stack size 112 btyes, Obj/library_sha1.o(.text.mbedtls_sha1))<br>
<br>[Stack]<ul><li>Max Depth = 436 
<li>Call Chain = mbedtls_sha1 &rArr; mbedtls_sha1_starts &rArr; tih_sha1_init  &rArr; drv_crypto_lock.part.0  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<li><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_set
<li><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
<li><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<li><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
<li><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
</ul>
<br>[Called By]<ul>
<li><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
</ul>
<p><strong><a name="[709]"></a>mbedtls_sha1_self_test</strong>(202 bytes, Stack size 1176 btyes, Obj/library_sha1.o(.text.mbedtls_sha1_self_test))<br>
<br>[Stack]<ul><li>Max Depth = 1500 
<li>Call Chain = mbedtls_sha1_self_test &rArr; mbedtls_sha1_starts &rArr; tih_sha1_init  &rArr; drv_crypto_lock.part.0  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<li><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_set
<li><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
<li><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<li><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[cc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
<li><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_crypto_test
</ul>
<p><strong><a name="[70a]"></a>mbedtls_sha1_set</strong>(4 bytes, Stack size 0 btyes, Obj/library_sha1_alt.o(.text.mbedtls_sha1_set))<br>
<br>[Called By]<ul>
<li><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_offload_set_wrap
<li><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<li><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
</ul>
<p><strong><a name="[70b]"></a>mbedtls_sha1_free</strong>(16 bytes, Stack size 4 btyes, Obj/library_sha1_alt.o(.text.mbedtls_sha1_free))<br>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_free
<li><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<li><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
<li><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<li><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_server_key_exchange
<li><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
<li><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls
<li><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</ul>
<p><strong><a name="[70c]"></a>mbedtls_sha1_init</strong>(8 bytes, Stack size 4 btyes, Obj/library_sha1_alt.o(.text.mbedtls_sha1_init))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = mbedtls_sha1_init &rArr; mbedtls_sha1_free </ul>
<br>[Calls]<ul>
<li><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
</ul>
<br>[Called By]<ul>
<li><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_alloc
<li><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<li><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
<li><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_server_key_exchange
<li><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
<li><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls
<li><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</ul>
<p><strong><a name="[70d]"></a>mbedtls_sha1_clone</strong>(10 bytes, Stack size 4 btyes, Obj/library_sha1_alt.o(.text.mbedtls_sha1_clone))<br>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_clone_wrap
<li><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
<li><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls
</ul>
<p><strong><a name="[70e]"></a>mbedtls_sha1_starts</strong>(40 bytes, Stack size 4 btyes, Obj/library_sha1_alt.o(.text.mbedtls_sha1_starts))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = mbedtls_sha1_starts &rArr; tih_sha1_init &rArr; drv_crypto_lock.part.0  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sha1_init
</ul>
<br>[Called By]<ul>
<li><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_starts_wrap
<li><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<li><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
<li><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_server_key_exchange
<li><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_reset_checksum
<li><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</ul>
<p><strong><a name="[70f]"></a>mbedtls_sha1_process</strong>(4184 bytes, Stack size 124 btyes, Obj/library_sha1_alt.o(.text.mbedtls_sha1_process))<br>
<br>[Called By]<ul>
<li><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_process_wrap
<li><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
</ul>
<p><strong><a name="[710]"></a>mbedtls_sha1_update</strong>(162 bytes, Stack size 24 btyes, Obj/library_sha1_alt.o(.text.mbedtls_sha1_update))<br>
<br>[Stack]<ul><li>Max Depth = 148 
<li>Call Chain = mbedtls_sha1_update &rArr; mbedtls_sha1_process </ul>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sha1_update
<li><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_process
</ul>
<br>[Called By]<ul>
<li><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update_wrap
<li><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<li><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
<li><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
<li><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_server_key_exchange
<li><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_md5sha1
<li><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_start
</ul>
<p><strong><a name="[711]"></a>mbedtls_sha1_finish</strong>(202 bytes, Stack size 20 btyes, Obj/library_sha1_alt.o(.text.mbedtls_sha1_finish))<br>
<br>[Stack]<ul><li>Max Depth = 316 
<li>Call Chain = mbedtls_sha1_finish &rArr; tih_sha1_final &rArr; rt_mutex_release  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<li><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sha1_final
</ul>
<br>[Called By]<ul>
<li><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_finish_wrap
<li><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<li><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
<li><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_server_key_exchange
<li><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
<li><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls
</ul>
<p><strong><a name="[712]"></a>mbedtls_sha256</strong>(62 bytes, Stack size 132 btyes, Obj/library_sha256.o(.text.mbedtls_sha256))<br>
<br>[Stack]<ul><li>Max Depth = 544 
<li>Call Chain = mbedtls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update  &rArr; mbedtls_sha256_process  </ul>
<br>[Calls]<ul>
<li><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<li><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_set
<li><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
<li><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<li><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<li><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</ul>
<br>[Called By]<ul>
<li><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
<li><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<li><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_wrap
<li><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_wrap
</ul>
<p><strong><a name="[713]"></a>mbedtls_sha256_self_test</strong>(288 bytes, Stack size 196 btyes, Obj/library_sha256.o(.text.mbedtls_sha256_self_test))<br>
<br>[Stack]<ul><li>Max Depth = 608 
<li>Call Chain = mbedtls_sha256_self_test &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update  &rArr; mbedtls_sha256_process  </ul>
<br>[Calls]<ul>
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<li><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<li><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_set
<li><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
<li><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<li><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[cc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</ul>
<br>[Called By]<ul>
<li><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_crypto_test
</ul>
<p><strong><a name="[714]"></a>mbedtls_sha256_init</strong>(12 bytes, Stack size 4 btyes, Obj/library_sha256_alt.o(.text.mbedtls_sha256_init))<br>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_alloc
<li><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<li><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<li><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
<li><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<li><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</ul>
<p><strong><a name="[715]"></a>mbedtls_sha256_set</strong>(4 bytes, Stack size 0 btyes, Obj/library_sha256_alt.o(.text.mbedtls_sha256_set))<br>
<br>[Called By]<ul>
<li><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_offload_set_wrap
<li><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<li><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
</ul>
<p><strong><a name="[716]"></a>mbedtls_sha256_free</strong>(16 bytes, Stack size 4 btyes, Obj/library_sha256_alt.o(.text.mbedtls_sha256_free))<br>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_free
<li><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<li><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<li><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
<li><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<li><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</ul>
<p><strong><a name="[717]"></a>mbedtls_sha256_clone</strong>(10 bytes, Stack size 4 btyes, Obj/library_sha256_alt.o(.text.mbedtls_sha256_clone))<br>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_clone_wrap
<li><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
<li><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
</ul>
<p><strong><a name="[718]"></a>mbedtls_sha256_starts</strong>(104 bytes, Stack size 4 btyes, Obj/library_sha256_alt.o(.text.mbedtls_sha256_starts))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = mbedtls_sha256_starts &rArr; tih_sha256_init &rArr; drv_crypto_lock.part.0  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sha256_init
<li><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sha224_init
</ul>
<br>[Called By]<ul>
<li><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<li><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<li><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_starts_wrap
<li><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_starts_wrap
<li><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<li><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<li><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_reset_checksum
<li><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</ul>
<p><strong><a name="[719]"></a>mbedtls_sha256_process</strong>(2062 bytes, Stack size 368 btyes, Obj/library_sha256_alt.o(.text.mbedtls_sha256_process))<br>
<br>[Called By]<ul>
<li><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_process_wrap
<li><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</ul>
<p><strong><a name="[71a]"></a>mbedtls_sha256_update</strong>(176 bytes, Stack size 24 btyes, Obj/library_sha256_alt.o(.text.mbedtls_sha256_update))<br>
<br>[Stack]<ul><li>Max Depth = 392 
<li>Call Chain = mbedtls_sha256_update &rArr; mbedtls_sha256_process </ul>
<br>[Calls]<ul>
<li><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_process
<li><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sha256_update
<li><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sha224_update
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
<li><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<li><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_update_wrap
<li><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<li><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<li><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<li><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_start
<li><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_sha256
</ul>
<p><strong><a name="[71b]"></a>mbedtls_sha256_finish</strong>(286 bytes, Stack size 20 btyes, Obj/library_sha256_alt.o(.text.mbedtls_sha256_finish))<br>
<br>[Stack]<ul><li>Max Depth = 412 
<li>Call Chain = mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process  </ul>
<br>[Calls]<ul>
<li><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<li><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sha256_final
<li><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sha224_final
</ul>
<br>[Called By]<ul>
<li><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<li><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_finish_wrap
<li><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<li><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<li><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
<li><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
</ul>
<p><strong><a name="[71c]"></a>mbedtls_sm2_genkey</strong>(210 bytes, Stack size 0 btyes, Obj/library_sm2.o(.text.mbedtls_sm2_genkey))<br>
<p><strong><a name="[71d]"></a>mbedtls_sm2_e_get</strong>(36 bytes, Stack size 0 btyes, Obj/library_sm2.o(.text.mbedtls_sm2_e_get))<br>
<p><strong><a name="[71e]"></a>mbedtls_sm2_z_get</strong>(128 bytes, Stack size 28 btyes, Obj/library_sm2.o(.text.mbedtls_sm2_z_get))<br>
<br>[Stack]<ul><li>Max Depth = 416 
<li>Call Chain = mbedtls_sm2_z_get &rArr; mbedtls_ecp_check_pubkey &rArr; tih_ecp_check  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<li><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<li><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm2_z_get
</ul>
<br>[Called By]<ul>
<li><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_z_get_wrap
</ul>
<p><strong><a name="[71f]"></a>mbedtls_sm2_encrypt</strong>(144 bytes, Stack size 40 btyes, Obj/library_sm2.o(.text.mbedtls_sm2_encrypt))<br>
<br>[Stack]<ul><li>Max Depth = 528 
<li>Call Chain = mbedtls_sm2_encrypt &rArr; tih_sm2_encrypt &rArr; sm2_encrypt  &rArr; sm2_encrypt_osr  &rArr; sm2_encrypt_with_k  &rArr; sm2_pointMul_base  &rArr; pointMul_Shamir  &rArr; pke_pre_calc_mont_H  </ul>
<br>[Calls]<ul>
<li><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<li><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<li><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm2_encrypt
</ul>
<br>[Called By]<ul>
<li><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_wrap
</ul>
<p><strong><a name="[720]"></a>mbedtls_sm2_decrypt</strong>(122 bytes, Stack size 36 btyes, Obj/library_sm2.o(.text.mbedtls_sm2_decrypt))<br>
<br>[Stack]<ul><li>Max Depth = 396 
<li>Call Chain = mbedtls_sm2_decrypt &rArr; tih_sm2_decrypt &rArr; sm2_decrypt  &rArr; sm2_decrypt_osr  &rArr; sm2_kdf  &rArr; sm3_final  &rArr; hash_final  &rArr; hash_update  </ul>
<br>[Calls]<ul>
<li><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<li><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<li><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm2_decrypt
</ul>
<br>[Called By]<ul>
<li><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt_wrap
</ul>
<p><strong><a name="[721]"></a>mbedtls_sm2_self_test</strong>(250 bytes, Stack size 0 btyes, Obj/library_sm2.o(.text.mbedtls_sm2_self_test))<br>
<p><strong><a name="[722]"></a>mbedtls_sm3_init</strong>(16 bytes, Stack size 4 btyes, Obj/library_sm3.o(.text.mbedtls_sm3_init))<br>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_ctx_alloc
<li><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sm3
<li><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sm3
<li><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</ul>
<p><strong><a name="[723]"></a>mbedtls_sm3_set</strong>(4 bytes, Stack size 0 btyes, Obj/library_sm3.o(.text.mbedtls_sm3_set))<br>
<br>[Called By]<ul>
<li><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_offload_set_wrap
</ul>
<p><strong><a name="[724]"></a>mbedtls_sm3_free</strong>(20 bytes, Stack size 0 btyes, Obj/library_sm3.o(.text.mbedtls_sm3_free))<br>
<br>[Called By]<ul>
<li><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_ctx_free
<li><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sm3
<li><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sm3
<li><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<li><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
</ul>
<p><strong><a name="[725]"></a>mbedtls_sm3_clone</strong>(10 bytes, Stack size 4 btyes, Obj/library_sm3.o(.text.mbedtls_sm3_clone))<br>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_clone_wrap
<li><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sm3
<li><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sm3
</ul>
<p><strong><a name="[726]"></a>mbedtls_sm3_starts</strong>(52 bytes, Stack size 4 btyes, Obj/library_sm3.o(.text.mbedtls_sm3_starts))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = mbedtls_sm3_starts &rArr; tih_sm3_init &rArr; drv_crypto_lock.part.0  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm3_init
</ul>
<br>[Called By]<ul>
<li><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_starts_wrap
<li><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_reset_checksum
<li><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<li><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
</ul>
<p><strong><a name="[727]"></a>mbedtls_sm3_process</strong>(472 bytes, Stack size 596 btyes, Obj/library_sm3.o(.text.mbedtls_sm3_process))<br>
<br>[Called By]<ul>
<li><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_process_wrap
<li><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_update
</ul>
<p><strong><a name="[728]"></a>mbedtls_sm3_update</strong>(162 bytes, Stack size 24 btyes, Obj/library_sm3.o(.text.mbedtls_sm3_update))<br>
<br>[Stack]<ul><li>Max Depth = 620 
<li>Call Chain = mbedtls_sm3_update &rArr; mbedtls_sm3_process </ul>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm3_update
<li><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_process
</ul>
<br>[Called By]<ul>
<li><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_update_wrap
<li><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_finish
<li><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3
<li><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_self_test
<li><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_sm3
<li><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_start
<li><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
</ul>
<p><strong><a name="[729]"></a>mbedtls_sm3_finish</strong>(266 bytes, Stack size 20 btyes, Obj/library_sm3.o(.text.mbedtls_sm3_finish))<br>
<br>[Stack]<ul><li>Max Depth = 640 
<li>Call Chain = mbedtls_sm3_finish &rArr; mbedtls_sm3_update &rArr; mbedtls_sm3_process  </ul>
<br>[Calls]<ul>
<li><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_update
<li><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm3_final
</ul>
<br>[Called By]<ul>
<li><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_finish_wrap
<li><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3
<li><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_self_test
<li><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sm3
<li><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sm3
<li><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
</ul>
<p><strong><a name="[72a]"></a>mbedtls_sm3</strong>(64 bytes, Stack size 124 btyes, Obj/library_sm3.o(.text.mbedtls_sm3))<br>
<br>[Stack]<ul><li>Max Depth = 764 
<li>Call Chain = mbedtls_sm3 &rArr; mbedtls_sm3_finish &rArr; mbedtls_sm3_update  &rArr; mbedtls_sm3_process  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm3_init
<li><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_update
<li><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_finish
</ul>
<p><strong><a name="[72b]"></a>mbedtls_sm3_self_test</strong>(262 bytes, Stack size 1208 btyes, Obj/library_sm3.o(.text.mbedtls_sm3_self_test))<br>
<br>[Stack]<ul><li>Max Depth = 1848 
<li>Call Chain = mbedtls_sm3_self_test &rArr; mbedtls_sm3_finish &rArr; mbedtls_sm3_update  &rArr; mbedtls_sm3_process  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_update
<li><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_finish
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm3_init
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[cc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</ul>
<br>[Called By]<ul>
<li><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_crypto_test
</ul>
<p><strong><a name="[72d]"></a>mbedtls_sm4_init</strong>(12 bytes, Stack size 4 btyes, Obj/library_sm4.o(.text.mbedtls_sm4_init))<br>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm4_ctx_alloc
</ul>
<p><strong><a name="[72e]"></a>mbedtls_sm4_free</strong>(20 bytes, Stack size 0 btyes, Obj/library_sm4.o(.text.mbedtls_sm4_free))<br>
<br>[Called By]<ul>
<li><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm4_ctx_free
</ul>
<p><strong><a name="[72f]"></a>mbedtls_sm4_setkey_dec</strong>(44 bytes, Stack size 4 btyes, Obj/library_sm4.o(.text.mbedtls_sm4_setkey_dec))<br>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm4_setkey_dec_wrap
<li><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_setkey_enc
</ul>
<p><strong><a name="[730]"></a>mbedtls_sm4_setkey_enc</strong>(8 bytes, Stack size 4 btyes, Obj/library_sm4.o(.text.mbedtls_sm4_setkey_enc))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = mbedtls_sm4_setkey_enc &rArr; mbedtls_sm4_setkey_dec </ul>
<br>[Calls]<ul>
<li><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_setkey_dec
</ul>
<br>[Called By]<ul>
<li><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm4_setkey_enc_wrap
</ul>
<p><strong><a name="[731]"></a>mbedtls_sm4_crypt_ecb</strong>(120 bytes, Stack size 64 btyes, Obj/library_sm4.o(.text.mbedtls_sm4_crypt_ecb))<br>
<br>[Stack]<ul><li>Max Depth = 424 
<li>Call Chain = mbedtls_sm4_crypt_ecb &rArr; tih_sm4_crypt &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm4_crypt
<li><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_dtcm_addr_check
</ul>
<br>[Called By]<ul>
<li><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm4_crypt_ecb_wrap
<li><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_crypt_cfb128
<li><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_crypt_ofb
<li><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_crypt_ctr
<li><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_self_test
</ul>
<p><strong><a name="[732]"></a>mbedtls_sm4_crypt_cbc</strong>(448 bytes, Stack size 152 btyes, Obj/library_sm4.o(.text.mbedtls_sm4_crypt_cbc))<br>
<br>[Stack]<ul><li>Max Depth = 512 
<li>Call Chain = mbedtls_sm4_crypt_cbc &rArr; tih_sm4_crypt &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm4_crypt
<li><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmove
<li><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_dtcm_addr_check
</ul>
<br>[Called By]<ul>
<li><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm4_crypt_cbc_wrap
<li><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_self_test
</ul>
<p><strong><a name="[733]"></a>mbedtls_sm4_crypt_cfb128</strong>(292 bytes, Stack size 60 btyes, Obj/library_sm4.o(.text.mbedtls_sm4_crypt_cfb128))<br>
<br>[Stack]<ul><li>Max Depth = 568 
<li>Call Chain = mbedtls_sm4_crypt_cfb128 &rArr; _mbedtls_sm4_crypt_cfb128 &rArr; tih_sm4_crypt  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbedtls_sm4_crypt_cfb128
<li><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_crypt_ecb
</ul>
<br>[Called By]<ul>
<li><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm4_crypt_cfb128_wrap
<li><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_self_test
</ul>
<p><strong><a name="[734]"></a>mbedtls_sm4_crypt_cfb8</strong>(118 bytes, Stack size 0 btyes, Obj/library_sm4.o(.text.mbedtls_sm4_crypt_cfb8))<br>
<p><strong><a name="[735]"></a>mbedtls_sm4_crypt_ofb</strong>(148 bytes, Stack size 52 btyes, Obj/library_sm4.o(.text.mbedtls_sm4_crypt_ofb))<br>
<br>[Stack]<ul><li>Max Depth = 476 
<li>Call Chain = mbedtls_sm4_crypt_ofb &rArr; mbedtls_sm4_crypt_ecb &rArr; tih_sm4_crypt  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_crypt_ecb
<li><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_dtcm_addr_check
<li><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm4_crypt
</ul>
<br>[Called By]<ul>
<li><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_self_test
</ul>
<p><strong><a name="[736]"></a>_mbedtls_sm4_crypt_ctr</strong>(344 bytes, Stack size 88 btyes, Obj/library_sm4.o(.text._mbedtls_sm4_crypt_ctr))<br>
<br>[Stack]<ul><li>Max Depth = 456 
<li>Call Chain = _mbedtls_sm4_crypt_ctr &rArr; tih_sm4_crypt_ctr &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm4_crypt_ctr
<li><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmove
<li><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_dtcm_addr_check
</ul>
<br>[Called By]<ul>
<li><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_crypt_ctr
</ul>
<p><strong><a name="[737]"></a>mbedtls_sm4_crypt_ctr</strong>(150 bytes, Stack size 48 btyes, Obj/library_sm4.o(.text.mbedtls_sm4_crypt_ctr))<br>
<br>[Stack]<ul><li>Max Depth = 504 
<li>Call Chain = mbedtls_sm4_crypt_ctr &rArr; _mbedtls_sm4_crypt_ctr &rArr; tih_sm4_crypt_ctr  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbedtls_sm4_crypt_ctr
<li><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_crypt_ecb
</ul>
<br>[Called By]<ul>
<li><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_update_mac.isra.0
<li><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm4_crypt_ctr_wrap
<li><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_self_test
</ul>
<p><strong><a name="[738]"></a>mbedtls_sm4_self_test</strong>(1900 bytes, Stack size 316 btyes, Obj/library_sm4.o(.text.mbedtls_sm4_self_test))<br>
<br>[Stack]<ul><li>Max Depth = 884 
<li>Call Chain = mbedtls_sm4_self_test &rArr; mbedtls_sm4_crypt_cfb128 &rArr; _mbedtls_sm4_crypt_cfb128  &rArr; tih_sm4_crypt  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_crypt_ecb
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_crypt_cbc
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_crypt_cfb128
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_crypt_ctr
<li><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_crypt_ofb
<li><a href="#[cc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</ul>
<br>[Called By]<ul>
<li><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_crypto_test
</ul>
<p><strong><a name="[739]"></a>mbedtls_ssl_cache_init</strong>(36 bytes, Stack size 8 btyes, Obj/library_ssl_cache.o(.text.mbedtls_ssl_cache_init))<br>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_create
</ul>
<p><strong><a name="[73a]"></a>mbedtls_ssl_cache_get</strong>(220 bytes, Stack size 36 btyes, Obj/library_ssl_cache.o(.text.mbedtls_ssl_cache_get))<br>
<br>[Stack]<ul><li>Max Depth = 1196 
<li>Call Chain = mbedtls_ssl_cache_get &rArr; mbedtls_x509_crt_parse &rArr; mbedtls_pem_read_buffer  &rArr; pem_des3_decrypt  &rArr; mbedtls_des3_set3key_dec  &rArr; des3_set3key  &rArr; mbedtls_des_setkey  </ul>
<br>[Calls]<ul>
<li><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<li><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<li><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<p><strong><a name="[73b]"></a>mbedtls_ssl_cache_set</strong>(348 bytes, Stack size 48 btyes, Obj/library_ssl_cache.o(.text.mbedtls_ssl_cache_set))<br>
<br>[Stack]<ul><li>Max Depth = 268 
<li>Call Chain = mbedtls_ssl_cache_set &rArr; time &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</ul>
<p><strong><a name="[73c]"></a>mbedtls_ssl_cache_set_timeout</strong>(12 bytes, Stack size 0 btyes, Obj/library_ssl_cache.o(.text.mbedtls_ssl_cache_set_timeout))<br>
<p><strong><a name="[73d]"></a>mbedtls_ssl_cache_set_max_entries</strong>(12 bytes, Stack size 0 btyes, Obj/library_ssl_cache.o(.text.mbedtls_ssl_cache_set_max_entries))<br>
<p><strong><a name="[73e]"></a>mbedtls_ssl_cache_free</strong>(52 bytes, Stack size 16 btyes, Obj/library_ssl_cache.o(.text.mbedtls_ssl_cache_free))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = mbedtls_ssl_cache_free &rArr; mbedtls_ssl_session_free &rArr; mbedtls_x509_crt_free  &rArr; mbedtls_pk_free  </ul>
<br>[Calls]<ul>
<li><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<br>[Called By]<ul>
<li><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_destroy
</ul>
<p><strong><a name="[73f]"></a>mbedtls_ssl_list_ciphersuites</strong>(106 bytes, Stack size 8 btyes, Obj/library_ssl_ciphersuites.o(.text.mbedtls_ssl_list_ciphersuites))<br>
<br>[Called By]<ul>
<li><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</ul>
<p><strong><a name="[740]"></a>mbedtls_gmssl_list_ciphersuites</strong>(60 bytes, Stack size 0 btyes, Obj/library_ssl_ciphersuites.o(.text.mbedtls_gmssl_list_ciphersuites))<br>
<br>[Called By]<ul>
<li><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</ul>
<p><strong><a name="[741]"></a>mbedtls_all_list_ciphersuites</strong>(154 bytes, Stack size 8 btyes, Obj/library_ssl_ciphersuites.o(.text.mbedtls_all_list_ciphersuites))<br>
<br>[Called By]<ul>
<li><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</ul>
<p><strong><a name="[742]"></a>mbedtls_ssl_ciphersuite_from_string</strong>(48 bytes, Stack size 0 btyes, Obj/library_ssl_ciphersuites.o(.text.mbedtls_ssl_ciphersuite_from_string))<br>
<p><strong><a name="[743]"></a>mbedtls_ssl_ciphersuite_from_id</strong>(36 bytes, Stack size 0 btyes, Obj/library_ssl_ciphersuites.o(.text.mbedtls_ssl_ciphersuite_from_id))<br>
<br>[Called By]<ul>
<li><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_hello
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
</ul>
<p><strong><a name="[744]"></a>mbedtls_ssl_get_ciphersuite_name</strong>(38 bytes, Stack size 0 btyes, Obj/library_ssl_ciphersuites.o(.text.mbedtls_ssl_get_ciphersuite_name))<br>
<br>[Called By]<ul>
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
<li><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</ul>
<p><strong><a name="[745]"></a>mbedtls_ssl_get_ciphersuite_id</strong>(14 bytes, Stack size 0 btyes, Obj/library_ssl_ciphersuites.o(.text.mbedtls_ssl_get_ciphersuite_id))<br>
<p><strong><a name="[746]"></a>mbedtls_ssl_get_ciphersuite_sig_pk_alg</strong>(20 bytes, Stack size 0 btyes, Obj/library_ssl_ciphersuites.o(.text.mbedtls_ssl_get_ciphersuite_sig_pk_alg))<br>
<br>[Called By]<ul>
<li><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_server_key_exchange
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_hello
</ul>
<p><strong><a name="[747]"></a>mbedtls_ssl_get_ciphersuite_sig_alg</strong>(26 bytes, Stack size 0 btyes, Obj/library_ssl_ciphersuites.o(.text.mbedtls_ssl_get_ciphersuite_sig_alg))<br>
<br>[Called By]<ul>
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_hello
</ul>
<p><strong><a name="[748]"></a>mbedtls_ssl_ciphersuite_uses_ec</strong>(28 bytes, Stack size 0 btyes, Obj/library_ssl_ciphersuites.o(.text.mbedtls_ssl_ciphersuite_uses_ec))<br>
<br>[Called By]<ul>
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_hello
</ul>
<p><strong><a name="[749]"></a>mbedtls_ssl_ciphersuite_uses_psk</strong>(14 bytes, Stack size 0 btyes, Obj/library_ssl_ciphersuites.o(.text.mbedtls_ssl_ciphersuite_uses_psk))<br>
<br>[Called By]<ul>
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_hello
</ul>
<p><strong><a name="[74e]"></a>mbedtls_ssl_handshake_client_step</strong>(6508 bytes, Stack size 152 btyes, Obj/library_ssl_cli.o(.text.mbedtls_ssl_handshake_client_step))<br>
<br>[Stack]<ul><li>Max Depth = 4600 
<li>Call Chain = mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<li><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<li><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<li><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_sign
<li><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<li><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<li><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_resend
<li><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<li><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<li><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<li><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<li><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_uses_psk
<li><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_public
<li><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp
<li><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_psk_derive_premaster
<li><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<li><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<li><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<li><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<li><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<li><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<li><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi
<li><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<li><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<li><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_version
<li><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
<li><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_optimize_checksum
<li><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<li><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_recv_flight_completed
<li><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_sig_from_pk
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_reset_checksum
<li><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
<li><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<li><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_encrypt
</ul>
<br>[Called By]<ul>
<li><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_step
</ul>
<p><strong><a name="[750]"></a>mbedtls_ssl_cookie_init</strong>(24 bytes, Stack size 0 btyes, Obj/library_ssl_cookie.o(.text.mbedtls_ssl_cookie_init))<br>
<p><strong><a name="[751]"></a>mbedtls_ssl_cookie_set_timeout</strong>(4 bytes, Stack size 0 btyes, Obj/library_ssl_cookie.o(.text.mbedtls_ssl_cookie_set_timeout))<br>
<p><strong><a name="[752]"></a>mbedtls_ssl_cookie_free</strong>(30 bytes, Stack size 0 btyes, Obj/library_ssl_cookie.o(.text.mbedtls_ssl_cookie_free))<br>
<p><strong><a name="[753]"></a>mbedtls_ssl_cookie_setup</strong>(62 bytes, Stack size 0 btyes, Obj/library_ssl_cookie.o(.text.mbedtls_ssl_cookie_setup))<br>
<p><strong><a name="[754]"></a>mbedtls_ssl_cookie_write</strong>(162 bytes, Stack size 0 btyes, Obj/library_ssl_cookie.o(.text.mbedtls_ssl_cookie_write))<br>
<p><strong><a name="[755]"></a>mbedtls_ssl_cookie_check</strong>(206 bytes, Stack size 0 btyes, Obj/library_ssl_cookie.o(.text.mbedtls_ssl_cookie_check))<br>
<p><strong><a name="[75a]"></a>mbedtls_ssl_set_client_transport_id</strong>(78 bytes, Stack size 0 btyes, Obj/library_ssl_srv.o(.text.mbedtls_ssl_set_client_transport_id))<br>
<p><strong><a name="[75b]"></a>mbedtls_ssl_conf_dtls_cookies</strong>(8 bytes, Stack size 0 btyes, Obj/library_ssl_srv.o(.text.mbedtls_ssl_conf_dtls_cookies))<br>
<p><strong><a name="[75c]"></a>mbedtls_ssl_handshake_server_step</strong>(4860 bytes, Stack size 124 btyes, Obj/library_ssl_srv.o(.text.mbedtls_ssl_handshake_server_step))<br>
<br>[Stack]<ul><li>Max Depth = 4760 
<li>Call Chain = mbedtls_ssl_handshake_server_step &rArr; ssl_parse_client_hello &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<li><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<li><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<li><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_decrypt
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<li><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_resend
<li><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<li><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<li><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<li><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<li><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handle_message_type
<li><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<li><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<li><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<li><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<li><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_server_key_exchange
<li><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<li><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<li><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_name
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_hello
<li><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<li><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_public
<li><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp
<li><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<li><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi
<li><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_flight_completed
<li><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_md_alg_from_hash
<li><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_calc_verify_md
<li><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_pk_alg_from_sig
<li><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
<li><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_update_handshake_status
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hash_from_md_alg
<li><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_psk_identity
<li><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_psk_derive_premaster
<li><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_encrypted_pms
<li><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
<li><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_type
</ul>
<br>[Called By]<ul>
<li><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_step
</ul>
<p><strong><a name="[75f]"></a>mbedtls_ssl_ticket_init</strong>(24 bytes, Stack size 0 btyes, Obj/library_ssl_ticket.o(.text.mbedtls_ssl_ticket_init))<br>
<p><strong><a name="[760]"></a>mbedtls_ssl_ticket_setup</strong>(106 bytes, Stack size 0 btyes, Obj/library_ssl_ticket.o(.text.mbedtls_ssl_ticket_setup))<br>
<p><strong><a name="[761]"></a>mbedtls_ssl_ticket_write</strong>(404 bytes, Stack size 0 btyes, Obj/library_ssl_ticket.o(.text.mbedtls_ssl_ticket_write))<br>
<p><strong><a name="[762]"></a>mbedtls_ssl_ticket_parse</strong>(444 bytes, Stack size 0 btyes, Obj/library_ssl_ticket.o(.text.mbedtls_ssl_ticket_parse))<br>
<p><strong><a name="[763]"></a>mbedtls_ssl_ticket_free</strong>(40 bytes, Stack size 0 btyes, Obj/library_ssl_ticket.o(.text.mbedtls_ssl_ticket_free))<br>
<p><strong><a name="[776]"></a>mbedtls_ssl_handle_message_type</strong>(176 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_handle_message_type))<br>
<br>[Stack]<ul><li>Max Depth = 1520 
<li>Call Chain = mbedtls_ssl_handle_message_type &rArr; mbedtls_ssl_prepare_handshake_record &rArr; mbedtls_ssl_resend  &rArr; mbedtls_ssl_write_record  &rArr; mbedtls_ssl_flush_output  &rArr; mbedtls_debug_print_msg  &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
</ul>
<br>[Called By]<ul>
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
<li><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</ul>
<p><strong><a name="[777]"></a>mbedtls_ssl_send_alert_message</strong>(152 bytes, Stack size 32 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_send_alert_message))<br>
<br>[Stack]<ul><li>Max Depth = 1468 
<li>Call Chain = mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; mbedtls_ssl_flush_output  &rArr; mbedtls_debug_print_msg  &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<li><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
</ul>
<br>[Called By]<ul>
<li><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_psk_identity
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_hello
<li><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<li><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<li><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<li><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<li><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<li><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</ul>
<p><strong><a name="[778]"></a>mbedtls_ssl_send_fatal_handshake_failure</strong>(12 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_send_fatal_handshake_failure))<br>
<p><strong><a name="[779]"></a>mbedtls_ssl_write_certificate</strong>(530 bytes, Stack size 36 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_write_certificate))<br>
<br>[Stack]<ul><li>Max Depth = 4432 
<li>Call Chain = mbedtls_ssl_write_certificate &rArr; mbedtls_debug_print_crt &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<li><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
</ul>
<br>[Called By]<ul>
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
</ul>
<p><strong><a name="[77a]"></a>mbedtls_ssl_write_change_cipher_spec</strong>(108 bytes, Stack size 24 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_write_change_cipher_spec))<br>
<br>[Stack]<ul><li>Max Depth = 1460 
<li>Call Chain = mbedtls_ssl_write_change_cipher_spec &rArr; mbedtls_ssl_write_record &rArr; mbedtls_ssl_flush_output  &rArr; mbedtls_debug_print_msg  &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<li><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
</ul>
<br>[Called By]<ul>
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
</ul>
<p><strong><a name="[77b]"></a>mbedtls_ssl_optimize_checksum</strong>(82 bytes, Stack size 8 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_optimize_checksum))<br>
<br>[Stack]<ul><li>Max Depth = 1312 
<li>Call Chain = mbedtls_ssl_optimize_checksum &rArr; mbedtls_debug_print_msg &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</ul>
<br>[Called By]<ul>
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</ul>
<p><strong><a name="[77c]"></a>mbedtls_ssl_reset_checksum</strong>(48 bytes, Stack size 8 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_reset_checksum))<br>
<br>[Stack]<ul><li>Max Depth = 332 
<li>Call Chain = mbedtls_ssl_reset_checksum &rArr; mbedtls_sha1_starts &rArr; tih_sha1_init  &rArr; drv_crypto_lock.part.0  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts
<li><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
<li><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
<li><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_starts
</ul>
<br>[Called By]<ul>
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</ul>
<p><strong><a name="[77d]"></a>mbedtls_ssl_write_finished</strong>(452 bytes, Stack size 24 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_write_finished))<br>
<br>[Stack]<ul><li>Max Depth = 1460 
<li>Call Chain = mbedtls_ssl_write_finished &rArr; mbedtls_ssl_write_record &rArr; mbedtls_ssl_flush_output  &rArr; mbedtls_debug_print_msg  &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<li><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<li><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_flight_completed
</ul>
<br>[Called By]<ul>
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
</ul>
<p><strong><a name="[77e]"></a>mbedtls_ssl_session_init</strong>(12 bytes, Stack size 4 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_session_init))<br>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_hello
</ul>
<p><strong><a name="[77f]"></a>mbedtls_ssl_init</strong>(14 bytes, Stack size 4 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_init))<br>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_init
<li><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_config
</ul>
<p><strong><a name="[780]"></a>mbedtls_ssl_conf_endpoint</strong>(14 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_endpoint))<br>
<p><strong><a name="[781]"></a>mbedtls_ssl_conf_transport</strong>(14 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_transport))<br>
<p><strong><a name="[782]"></a>mbedtls_ssl_conf_dtls_anti_replay</strong>(14 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_dtls_anti_replay))<br>
<p><strong><a name="[783]"></a>mbedtls_ssl_conf_dtls_badmac_limit</strong>(6 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_dtls_badmac_limit))<br>
<p><strong><a name="[784]"></a>mbedtls_ssl_conf_handshake_timeout</strong>(10 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_handshake_timeout))<br>
<p><strong><a name="[785]"></a>mbedtls_ssl_conf_authmode</strong>(14 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_authmode))<br>
<br>[Called By]<ul>
<li><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_config
</ul>
<p><strong><a name="[786]"></a>mbedtls_ssl_conf_verify</strong>(6 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_verify))<br>
<p><strong><a name="[787]"></a>mbedtls_ssl_conf_rng</strong>(6 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_rng))<br>
<br>[Called By]<ul>
<li><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_config
<li><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_config
</ul>
<p><strong><a name="[788]"></a>mbedtls_ssl_conf_dbg</strong>(6 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_dbg))<br>
<br>[Called By]<ul>
<li><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_config
</ul>
<p><strong><a name="[789]"></a>mbedtls_ssl_conf_alpn_protocols</strong>(62 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_alpn_protocols))<br>
<p><strong><a name="[78a]"></a>mbedtls_ssl_get_alpn_protocol</strong>(6 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_get_alpn_protocol))<br>
<p><strong><a name="[78b]"></a>mbedtls_ssl_conf_max_version</strong>(10 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_max_version))<br>
<p><strong><a name="[78c]"></a>mbedtls_ssl_conf_min_version</strong>(10 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_min_version))<br>
<p><strong><a name="[78d]"></a>mbedtls_ssl_conf_fallback</strong>(14 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_fallback))<br>
<p><strong><a name="[78e]"></a>mbedtls_ssl_conf_cert_req_ca_list</strong>(14 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_cert_req_ca_list))<br>
<p><strong><a name="[78f]"></a>mbedtls_ssl_conf_encrypt_then_mac</strong>(14 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_encrypt_then_mac))<br>
<p><strong><a name="[790]"></a>mbedtls_ssl_conf_extended_master_secret</strong>(14 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_extended_master_secret))<br>
<p><strong><a name="[791]"></a>mbedtls_ssl_conf_max_frag_len</strong>(40 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_max_frag_len))<br>
<p><strong><a name="[792]"></a>mbedtls_ssl_conf_truncated_hmac</strong>(14 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_truncated_hmac))<br>
<p><strong><a name="[793]"></a>mbedtls_ssl_conf_cbc_record_splitting</strong>(14 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_cbc_record_splitting))<br>
<p><strong><a name="[794]"></a>mbedtls_ssl_conf_legacy_renegotiation</strong>(14 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_legacy_renegotiation))<br>
<p><strong><a name="[795]"></a>mbedtls_ssl_conf_renegotiation</strong>(14 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_renegotiation))<br>
<p><strong><a name="[796]"></a>mbedtls_ssl_conf_renegotiation_enforced</strong>(6 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_renegotiation_enforced))<br>
<p><strong><a name="[797]"></a>mbedtls_ssl_conf_renegotiation_period</strong>(50 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_renegotiation_period))<br>
<p><strong><a name="[798]"></a>mbedtls_ssl_conf_session_tickets</strong>(14 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_session_tickets))<br>
<p><strong><a name="[799]"></a>mbedtls_ssl_conf_session_tickets_cb</strong>(8 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_session_tickets_cb))<br>
<p><strong><a name="[79a]"></a>mbedtls_ssl_conf_export_keys_cb</strong>(6 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_export_keys_cb))<br>
<p><strong><a name="[79b]"></a>mbedtls_ssl_get_bytes_avail</strong>(16 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_get_bytes_avail))<br>
<p><strong><a name="[79c]"></a>mbedtls_ssl_get_verify_result</strong>(22 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_get_verify_result))<br>
<br>[Called By]<ul>
<li><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_connect
</ul>
<p><strong><a name="[79d]"></a>mbedtls_ssl_get_ciphersuite</strong>(20 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_get_ciphersuite))<br>
<p><strong><a name="[79e]"></a>mbedtls_ssl_get_version</strong>(54 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_get_version))<br>
<p><strong><a name="[79f]"></a>mbedtls_ssl_get_record_expansion</strong>(118 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_get_record_expansion))<br>
<p><strong><a name="[7a0]"></a>mbedtls_ssl_get_max_frag_len</strong>(40 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_get_max_frag_len))<br>
<p><strong><a name="[7a1]"></a>mbedtls_ssl_get_peer_cert</strong>(14 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_get_peer_cert))<br>
<p><strong><a name="[7a2]"></a>mbedtls_ssl_handshake_step</strong>(62 bytes, Stack size 8 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_handshake_step))<br>
<br>[Stack]<ul><li>Max Depth = 4768 
<li>Call Chain = mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_server_step &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</ul>
<br>[Called By]<ul>
<li><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
</ul>
<p><strong><a name="[7a3]"></a>mbedtls_ssl_handshake</strong>(86 bytes, Stack size 16 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_handshake))<br>
<br>[Stack]<ul><li>Max Depth = 4784 
<li>Call Chain = mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_step
</ul>
<br>[Called By]<ul>
<li><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
<li><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_renegotiate
<li><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<li><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<li><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_connect
<li><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_config
</ul>
<p><strong><a name="[7a4]"></a>mbedtls_ssl_close_notify</strong>(130 bytes, Stack size 20 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_close_notify))<br>
<br>[Stack]<ul><li>Max Depth = 1488 
<li>Call Chain = mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record  &rArr; mbedtls_ssl_flush_output  &rArr; mbedtls_debug_print_msg  &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<li><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<li><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
</ul>
<br>[Called By]<ul>
<li><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_close
<li><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_close
</ul>
<p><strong><a name="[7a5]"></a>mbedtls_ssl_transform_free</strong>(56 bytes, Stack size 8 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_transform_free))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = mbedtls_ssl_transform_free &rArr; mbedtls_cipher_free </ul>
<br>[Calls]<ul>
<li><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<li><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
</ul>
<br>[Called By]<ul>
<li><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
<li><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<li><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
<li><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
</ul>
<p><strong><a name="[7a6]"></a>mbedtls_ssl_handshake_free</strong>(152 bytes, Stack size 12 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_handshake_free))<br>
<br>[Stack]<ul><li>Max Depth = 52 
<li>Call Chain = mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free  &rArr; mbedtls_ecp_point_free  &rArr; mbedtls_mpi_free  </ul>
<br>[Calls]<ul>
<li><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
<li><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<li><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<li><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_free
<li><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<li><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_flight_free
</ul>
<br>[Called By]<ul>
<li><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
<li><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<li><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
</ul>
<p><strong><a name="[7a8]"></a>mbedtls_ssl_session_free</strong>(48 bytes, Stack size 8 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_session_free))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = mbedtls_ssl_session_free &rArr; mbedtls_x509_crt_free &rArr; mbedtls_pk_free  </ul>
<br>[Calls]<ul>
<li><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<br>[Called By]<ul>
<li><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_cache_free
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_hello
<li><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<li><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<li><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
<li><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
</ul>
<p><strong><a name="[7a9]"></a>mbedtls_ssl_handshake_wrapup</strong>(208 bytes, Stack size 16 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_handshake_wrapup))<br>
<br>[Stack]<ul><li>Max Depth = 1340 
<li>Call Chain = mbedtls_ssl_handshake_wrapup &rArr; ssl_set_timer &rArr; mbedtls_debug_print_msg  &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<li><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<li><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
</ul>
<br>[Called By]<ul>
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
</ul>
<p><strong><a name="[7ab]"></a>mbedtls_ssl_set_session</strong>(58 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_set_session))<br>
<p><strong><a name="[7ac]"></a>mbedtls_ssl_get_session</strong>(48 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_get_session))<br>
<p><strong><a name="[7ae]"></a>mbedtls_ssl_setup</strong>(206 bytes, Stack size 24 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_setup))<br>
<br>[Stack]<ul><li>Max Depth = 1372 
<li>Call Chain = mbedtls_ssl_setup &rArr; ssl_handshake_init &rArr; ssl_set_timer  &rArr; mbedtls_debug_print_msg  &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<li><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<br>[Called By]<ul>
<li><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_config
<li><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_config
</ul>
<p><strong><a name="[7b3]"></a>mbedtls_ssl_derive_keys</strong>(1670 bytes, Stack size 388 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_derive_keys))<br>
<br>[Stack]<ul><li>Max Depth = 1692 
<li>Call Chain = mbedtls_ssl_derive_keys &rArr; mbedtls_debug_print_msg &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_type
<li><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<li><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_name
<li><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<li><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<li><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<li><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<li><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<li><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<li><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_padding_mode
</ul>
<br>[Called By]<ul>
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
</ul>
<p><strong><a name="[7b4]"></a>gmssl_calc_verify_tls</strong>(104 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.gmssl_calc_verify_tls))<br>
<p><strong><a name="[7b5]"></a>mbedtls_ssl_psk_derive_premaster</strong>(294 bytes, Stack size 44 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_psk_derive_premaster))<br>
<br>[Stack]<ul><li>Max Depth = 1348 
<li>Call Chain = mbedtls_ssl_psk_derive_premaster &rArr; mbedtls_debug_print_msg &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<li><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
</ul>
<br>[Called By]<ul>
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
</ul>
<p><strong><a name="[7b6]"></a>mbedtls_ssl_flush_output</strong>(366 bytes, Stack size 44 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_flush_output))<br>
<br>[Stack]<ul><li>Max Depth = 1348 
<li>Call Chain = mbedtls_ssl_flush_output &rArr; mbedtls_debug_print_msg &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
</ul>
<br>[Called By]<ul>
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
<li><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<li><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
<li><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<li><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_renegotiate
<li><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</ul>
<p><strong><a name="[7b7]"></a>mbedtls_ssl_recv_flight_completed</strong>(74 bytes, Stack size 8 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_recv_flight_completed))<br>
<br>[Stack]<ul><li>Max Depth = 1332 
<li>Call Chain = mbedtls_ssl_recv_flight_completed &rArr; ssl_set_timer &rArr; mbedtls_debug_print_msg  &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_flight_free
<li><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
</ul>
<br>[Called By]<ul>
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_hello
<li><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
</ul>
<p><strong><a name="[7b8]"></a>mbedtls_ssl_send_flight_completed</strong>(82 bytes, Stack size 16 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_send_flight_completed))<br>
<br>[Stack]<ul><li>Max Depth = 1340 
<li>Call Chain = mbedtls_ssl_send_flight_completed &rArr; ssl_set_timer &rArr; mbedtls_debug_print_msg  &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
</ul>
<br>[Called By]<ul>
<li><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
<li><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
</ul>
<p><strong><a name="[7b9]"></a>mbedtls_ssl_write_record</strong>(2284 bytes, Stack size 88 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_write_record))<br>
<br>[Stack]<ul><li>Max Depth = 1436 
<li>Call Chain = mbedtls_ssl_write_record &rArr; mbedtls_ssl_flush_output &rArr; mbedtls_debug_print_msg  &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<li><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<li><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<li><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<li><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<li><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<li><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmove
<li><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version.part.12
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<li><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_encrypt
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<br>[Called By]<ul>
<li><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_server_key_exchange
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
<li><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_hello_request
<li><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_resend
<li><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
<li><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<li><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<li><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<li><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
</ul>
<p><strong><a name="[7bc]"></a>mbedtls_ssl_resend</strong>(268 bytes, Stack size 36 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_resend))<br>
<br>[Stack]<ul><li>Max Depth = 1472 
<li>Call Chain = mbedtls_ssl_resend &rArr; mbedtls_ssl_write_record &rArr; mbedtls_ssl_flush_output  &rArr; mbedtls_debug_print_msg  &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_swap_epochs
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<li><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<li><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<li><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
</ul>
<br>[Called By]<ul>
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
<li><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<li><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
<li><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<li><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</ul>
<p><strong><a name="[7bd]"></a>mbedtls_ssl_fetch_input</strong>(924 bytes, Stack size 40 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_fetch_input))<br>
<br>[Stack]<ul><li>Max Depth = 1512 
<li>Call Chain = mbedtls_ssl_fetch_input &rArr; mbedtls_ssl_resend &rArr; mbedtls_ssl_write_record  &rArr; mbedtls_ssl_flush_output  &rArr; mbedtls_debug_print_msg  &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_timer
<li><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<li><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_resend
<li><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<li><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmove
<li><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_resend_hello_request
</ul>
<br>[Called By]<ul>
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_hello
<li><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
</ul>
<p><strong><a name="[7bf]"></a>mbedtls_ssl_prepare_handshake_record</strong>(1356 bytes, Stack size 48 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_prepare_handshake_record))<br>
<br>[Stack]<ul><li>Max Depth = 1520 
<li>Call Chain = mbedtls_ssl_prepare_handshake_record &rArr; mbedtls_ssl_resend &rArr; mbedtls_ssl_write_record  &rArr; mbedtls_ssl_flush_output  &rArr; mbedtls_debug_print_msg  &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_resend
<li><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmove
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<li><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</ul>
<br>[Called By]<ul>
<li><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handle_message_type
</ul>
<p><strong><a name="[7c0]"></a>mbedtls_ssl_update_handshake_status</strong>(60 bytes, Stack size 8 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_update_handshake_status))<br>
<br>[Called By]<ul>
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
<li><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</ul>
<p><strong><a name="[7c1]"></a>mbedtls_ssl_dtls_replay_check</strong>(178 bytes, Stack size 8 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_dtls_replay_check))<br>
<br>[Called By]<ul>
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_hello
<li><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
</ul>
<p><strong><a name="[7c2]"></a>mbedtls_ssl_dtls_replay_update</strong>(310 bytes, Stack size 28 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_dtls_replay_update))<br>
<br>[Called By]<ul>
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_hello
<li><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
</ul>
<p><strong><a name="[7c3]"></a>mbedtls_ssl_set_bio</strong>(16 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_set_bio))<br>
<br>[Called By]<ul>
<li><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_connect
<li><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_config
</ul>
<p><strong><a name="[7c4]"></a>mbedtls_ssl_conf_read_timeout</strong>(6 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_read_timeout))<br>
<p><strong><a name="[7c5]"></a>mbedtls_ssl_set_timer_cb</strong>(16 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_set_timer_cb))<br>
<p><strong><a name="[7c6]"></a>mbedtls_ssl_conf_session_cache</strong>(8 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_session_cache))<br>
<br>[Called By]<ul>
<li><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_config
</ul>
<p><strong><a name="[7c7]"></a>mbedtls_ssl_conf_ciphersuites</strong>(10 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_ciphersuites))<br>
<p><strong><a name="[7c8]"></a>mbedtls_ssl_conf_ciphersuites_for_version</strong>(18 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_ciphersuites_for_version))<br>
<p><strong><a name="[7c9]"></a>mbedtls_ssl_conf_cert_profile</strong>(4 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_cert_profile))<br>
<p><strong><a name="[7ca]"></a>mbedtls_ssl_conf_own_cert</strong>(10 bytes, Stack size 4 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_own_cert))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = mbedtls_ssl_conf_own_cert &rArr; ssl_append_key_cert </ul>
<br>[Calls]<ul>
<li><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_append_key_cert
</ul>
<br>[Called By]<ul>
<li><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_config
<li><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_config
</ul>
<p><strong><a name="[7cb]"></a>mbedtls_gmssl_conf_own_cert</strong>(10 bytes, Stack size 4 btyes, Obj/library_ssl_tls.o(.text.mbedtls_gmssl_conf_own_cert))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = mbedtls_gmssl_conf_own_cert &rArr; ssl_append_key_cert </ul>
<br>[Calls]<ul>
<li><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_append_key_cert
</ul>
<br>[Called By]<ul>
<li><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_config
<li><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_config
</ul>
<p><strong><a name="[7cc]"></a>mbedtls_ssl_conf_own_cert_new</strong>(46 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_own_cert_new))<br>
<p><strong><a name="[7cd]"></a>mbedtls_ssl_conf_ca_chain</strong>(6 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_ca_chain))<br>
<br>[Called By]<ul>
<li><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_config
<li><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_config
</ul>
<p><strong><a name="[7ce]"></a>mbedtls_gmssl_conf_ca_chain</strong>(10 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_gmssl_conf_ca_chain))<br>
<br>[Called By]<ul>
<li><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_config
<li><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_config
</ul>
<p><strong><a name="[7cf]"></a>mbedtls_ssl_set_hs_own_cert</strong>(14 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_set_hs_own_cert))<br>
<p><strong><a name="[7d0]"></a>mbedtls_ssl_set_hs_ca_chain</strong>(12 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_set_hs_ca_chain))<br>
<p><strong><a name="[7d1]"></a>mbedtls_ssl_set_hs_authmode</strong>(8 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_set_hs_authmode))<br>
<p><strong><a name="[7d2]"></a>mbedtls_ssl_conf_psk</strong>(184 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_psk))<br>
<p><strong><a name="[7d3]"></a>mbedtls_ssl_set_hs_psk</strong>(86 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_set_hs_psk))<br>
<p><strong><a name="[7d4]"></a>mbedtls_ssl_conf_psk_cb</strong>(6 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_psk_cb))<br>
<p><strong><a name="[7d5]"></a>mbedtls_ssl_conf_sig_hashes</strong>(6 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_sig_hashes))<br>
<p><strong><a name="[7d6]"></a>mbedtls_ssl_conf_curves</strong>(6 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_curves))<br>
<p><strong><a name="[7d7]"></a>mbedtls_ssl_set_hostname</strong>(76 bytes, Stack size 20 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_set_hostname))<br>
<br>[Calls]<ul>
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_config
</ul>
<p><strong><a name="[7d8]"></a>mbedtls_ssl_conf_sni</strong>(6 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_conf_sni))<br>
<p><strong><a name="[7d9]"></a>mbedtls_ssl_hash_from_md_alg</strong>(18 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_hash_from_md_alg))<br>
<br>[Called By]<ul>
<li><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_server_key_exchange
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_hello
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
</ul>
<p><strong><a name="[7da]"></a>mbedtls_ssl_check_curve</strong>(34 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_check_curve))<br>
<br>[Called By]<ul>
<li><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
</ul>
<p><strong><a name="[7db]"></a>mbedtls_ssl_check_sig_hash</strong>(34 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_check_sig_hash))<br>
<br>[Called By]<ul>
<li><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_hello
</ul>
<p><strong><a name="[7dc]"></a>mbedtls_ssl_check_cert_usage</strong>(144 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_check_cert_usage))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = mbedtls_ssl_check_cert_usage &rArr; mbedtls_x509_crt_check_extended_key_usage </ul>
<br>[Calls]<ul>
<li><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_key_usage
<li><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_extended_key_usage
</ul>
<br>[Called By]<ul>
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_hello
<li><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</ul>
<p><strong><a name="[7dd]"></a>mbedtls_ssl_parse_certificate</strong>(1482 bytes, Stack size 52 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_parse_certificate))<br>
<br>[Stack]<ul><li>Max Depth = 4448 
<li>Call Chain = mbedtls_ssl_parse_certificate &rArr; mbedtls_debug_print_crt &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<li><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<li><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<li><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<li><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<li><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<li><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
<li><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<li><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<li><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_cert_usage
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</ul>
<br>[Called By]<ul>
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
</ul>
<p><strong><a name="[7de]"></a>mbedtls_ssl_write_version</strong>(20 bytes, Stack size 4 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_write_version))<br>
<br>[Calls]<ul>
<li><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version.part.12
</ul>
<br>[Called By]<ul>
<li><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<li><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_encrypted_pms
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
</ul>
<p><strong><a name="[7df]"></a>mbedtls_ssl_read_version</strong>(44 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_read_version))<br>
<br>[Called By]<ul>
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_hello
</ul>
<p><strong><a name="[7e0]"></a>mbedtls_ssl_set_calc_verify_md</strong>(68 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_set_calc_verify_md))<br>
<br>[Called By]<ul>
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
</ul>
<p><strong><a name="[7e2]"></a>mbedtls_ssl_renegotiate</strong>(164 bytes, Stack size 24 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_renegotiate))<br>
<br>[Stack]<ul><li>Max Depth = 4832 
<li>Call Chain = mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
<li><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<li><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_hello_request
<li><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<li><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
</ul>
<br>[Called By]<ul>
<li><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
</ul>
<p><strong><a name="[7e4]"></a>mbedtls_ssl_write</strong>(266 bytes, Stack size 32 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_write))<br>
<br>[Stack]<ul><li>Max Depth = 4892 
<li>Call Chain = mbedtls_ssl_write &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
<li><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<li><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
<li><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
</ul>
<br>[Called By]<ul>
<li><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_write
<li><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_write
</ul>
<p><strong><a name="[7e6]"></a>mbedtls_ssl_read_record_layer</strong>(4204 bytes, Stack size 156 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_read_record_layer))<br>
<br>[Stack]<ul><li>Max Depth = 1668 
<li>Call Chain = mbedtls_ssl_read_record_layer &rArr; mbedtls_ssl_fetch_input &rArr; mbedtls_ssl_resend  &rArr; mbedtls_ssl_write_record  &rArr; mbedtls_ssl_flush_output  &rArr; mbedtls_debug_print_msg  &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<li><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<li><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
<li><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<li><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_dtls_replay_update
<li><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
<li><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_dtls_replay_check
<li><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_decrypt
<li><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<li><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmove
<li><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<li><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<li><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<li><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version.part.12
<li><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_resend
</ul>
<br>[Called By]<ul>
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
<li><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</ul>
<p><strong><a name="[7e7]"></a>mbedtls_ssl_read_record</strong>(180 bytes, Stack size 24 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_read_record))<br>
<br>[Stack]<ul><li>Max Depth = 1692 
<li>Call Chain = mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; mbedtls_ssl_fetch_input  &rArr; mbedtls_ssl_resend  &rArr; mbedtls_ssl_write_record  &rArr; mbedtls_ssl_flush_output  &rArr; mbedtls_debug_print_msg  &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handle_message_type
<li><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<li><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<li><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_update_handshake_status
</ul>
<br>[Called By]<ul>
<li><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
<li><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<li><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<li><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<li><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</ul>
<p><strong><a name="[7e8]"></a>mbedtls_ssl_parse_change_cipher_spec</strong>(346 bytes, Stack size 24 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_parse_change_cipher_spec))<br>
<br>[Stack]<ul><li>Max Depth = 1716 
<li>Call Chain = mbedtls_ssl_parse_change_cipher_spec &rArr; mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer  &rArr; mbedtls_ssl_fetch_input  &rArr; mbedtls_ssl_resend  &rArr; mbedtls_ssl_write_record  &rArr; mbedtls_ssl_flush_output  &rArr; mbedtls_debug_print_msg  &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<li><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<li><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</ul>
<br>[Called By]<ul>
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
</ul>
<p><strong><a name="[7e9]"></a>mbedtls_ssl_parse_finished</strong>(450 bytes, Stack size 36 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_parse_finished))<br>
<br>[Stack]<ul><li>Max Depth = 1728 
<li>Call Chain = mbedtls_ssl_parse_finished &rArr; mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer  &rArr; mbedtls_ssl_fetch_input  &rArr; mbedtls_ssl_resend  &rArr; mbedtls_ssl_write_record  &rArr; mbedtls_ssl_flush_output  &rArr; mbedtls_debug_print_msg  &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<li><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_recv_flight_completed
<li><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<li><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</ul>
<br>[Called By]<ul>
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
</ul>
<p><strong><a name="[7ea]"></a>mbedtls_ssl_read</strong>(904 bytes, Stack size 28 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_read))<br>
<br>[Stack]<ul><li>Max Depth = 4888 
<li>Call Chain = mbedtls_ssl_read &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<li><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
<li><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<li><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<li><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_resend
<li><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<li><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<li><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_resend_hello_request
<li><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
</ul>
<br>[Called By]<ul>
<li><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_read
<li><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_read
</ul>
<p><strong><a name="[7eb]"></a>mbedtls_ssl_session_reset</strong>(10 bytes, Stack size 4 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_session_reset))<br>
<br>[Stack]<ul><li>Max Depth = 1368 
<li>Call Chain = mbedtls_ssl_session_reset &rArr; ssl_session_reset_int &rArr; ssl_handshake_init  &rArr; ssl_set_timer  &rArr; mbedtls_debug_print_msg  &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
</ul>
<br>[Called By]<ul>
<li><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_close
<li><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_config
</ul>
<p><strong><a name="[7ec]"></a>mbedtls_ssl_free</strong>(256 bytes, Stack size 16 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_free))<br>
<br>[Stack]<ul><li>Max Depth = 1320 
<li>Call Chain = mbedtls_ssl_free &rArr; mbedtls_debug_print_msg &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<li><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<li><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<li><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</ul>
<br>[Called By]<ul>
<li><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_close
<li><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_close
</ul>
<p><strong><a name="[7ed]"></a>mbedtls_ssl_config_init</strong>(12 bytes, Stack size 4 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_config_init))<br>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_init
<li><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_config
</ul>
<p><strong><a name="[7ee]"></a>mbedtls_ssl_config_defaults</strong>(324 bytes, Stack size 8 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_config_defaults))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = mbedtls_ssl_config_defaults &rArr; mbedtls_ssl_list_ciphersuites </ul>
<br>[Calls]<ul>
<li><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_list_ciphersuites
<li><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_grp_id_list
<li><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_all_list_ciphersuites
<li><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gmssl_list_ciphersuites
</ul>
<br>[Called By]<ul>
<li><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_config
<li><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_config
</ul>
<p><strong><a name="[7ef]"></a>mbedtls_ssl_config_free</strong>(136 bytes, Stack size 12 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_config_free))<br>
<br>[Calls]<ul>
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<br>[Called By]<ul>
<li><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_close
<li><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_close
</ul>
<p><strong><a name="[7f0]"></a>mbedtls_ssl_sig_from_pk</strong>(54 bytes, Stack size 12 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_sig_from_pk))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = mbedtls_ssl_sig_from_pk &rArr; mbedtls_pk_can_do </ul>
<br>[Calls]<ul>
<li><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
</ul>
<br>[Called By]<ul>
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</ul>
<p><strong><a name="[7f1]"></a>mbedtls_ssl_sig_from_pk_alg</strong>(18 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_sig_from_pk_alg))<br>
<br>[Called By]<ul>
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_server_key_exchange
</ul>
<p><strong><a name="[7f2]"></a>mbedtls_ssl_pk_alg_from_sig</strong>(20 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_pk_alg_from_sig))<br>
<br>[Called By]<ul>
<li><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_hello
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
</ul>
<p><strong><a name="[7f3]"></a>mbedtls_ssl_sig_hash_set_find</strong>(20 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_sig_hash_set_find))<br>
<br>[Called By]<ul>
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_server_key_exchange
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_hello
</ul>
<p><strong><a name="[7f4]"></a>mbedtls_ssl_sig_hash_set_add</strong>(34 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_sig_hash_set_add))<br>
<br>[Called By]<ul>
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_hello
</ul>
<p><strong><a name="[7f5]"></a>mbedtls_ssl_sig_hash_set_const_hash</strong>(6 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_sig_hash_set_const_hash))<br>
<br>[Called By]<ul>
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_hello
</ul>
<p><strong><a name="[7f6]"></a>mbedtls_ssl_md_alg_from_hash</strong>(20 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_md_alg_from_hash))<br>
<br>[Called By]<ul>
<li><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_hello
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
</ul>
<p><strong><a name="[7f9]"></a>mbedtls_threading_set_alt</strong>(32 bytes, Stack size 8 btyes, Obj/library_threading.o(.text.mbedtls_threading_set_alt))<br>
<br>[Called By]<ul>
<li><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_crypto_register
</ul>
<p><strong><a name="[7fa]"></a>mbedtls_threading_free_alt</strong>(18 bytes, Stack size 0 btyes, Obj/library_threading.o(.text.mbedtls_threading_free_alt))<br>
<p><strong><a name="[7fc]"></a>mbedtls_timing_self_test</strong>(418 bytes, Stack size 108 btyes, Obj/library_timing.o(.text.mbedtls_timing_self_test))<br>
<br>[Stack]<ul><li>Max Depth = 472 
<li>Call Chain = mbedtls_timing_self_test &rArr; mbedtls_set_alarm &rArr; rt_timer_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_timing_get_timer
<li><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_set_alarm
<li><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_timing_set_delay
<li><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busy_msleep
<li><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_timing_get_delay
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_timing_hardclock
<li><a href="#[cc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</ul>
<br>[Called By]<ul>
<li><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_crypto_test
</ul>
<p><strong><a name="[7fd]"></a>mbedtls_version_get_number</strong>(6 bytes, Stack size 0 btyes, Obj/library_version.o(.text.mbedtls_version_get_number))<br>
<p><strong><a name="[7fe]"></a>mbedtls_version_get_string</strong>(24 bytes, Stack size 0 btyes, Obj/library_version.o(.text.mbedtls_version_get_string))<br>
<p><strong><a name="[7ff]"></a>mbedtls_version_get_string_full</strong>(12 bytes, Stack size 0 btyes, Obj/library_version.o(.text.mbedtls_version_get_string_full))<br>
<p><strong><a name="[800]"></a>mbedtls_version_check_feature</strong>(50 bytes, Stack size 0 btyes, Obj/library_version_features.o(.text.mbedtls_version_check_feature))<br>
<p><strong><a name="[803]"></a>mbedtls_x509_get_serial</strong>(82 bytes, Stack size 12 btyes, Obj/library_x509.o(.text.mbedtls_x509_get_serial))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = mbedtls_x509_get_serial &rArr; mbedtls_asn1_get_len </ul>
<br>[Calls]<ul>
<li><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</ul>
<br>[Called By]<ul>
<li><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</ul>
<p><strong><a name="[804]"></a>mbedtls_x509_get_alg_null</strong>(20 bytes, Stack size 0 btyes, Obj/library_x509.o(.text.mbedtls_x509_get_alg_null))<br>
<p><strong><a name="[805]"></a>mbedtls_x509_get_alg</strong>(20 bytes, Stack size 4 btyes, Obj/library_x509.o(.text.mbedtls_x509_get_alg))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = mbedtls_x509_get_alg &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_len  </ul>
<br>[Calls]<ul>
<li><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
</ul>
<br>[Called By]<ul>
<li><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</ul>
<p><strong><a name="[806]"></a>mbedtls_x509_get_rsassa_pss_params</strong>(516 bytes, Stack size 80 btyes, Obj/library_x509.o(.text.mbedtls_x509_get_rsassa_pss_params))<br>
<br>[Stack]<ul><li>Max Depth = 128 
<li>Call Chain = mbedtls_x509_get_rsassa_pss_params &rArr; mbedtls_asn1_get_alg_null &rArr; mbedtls_asn1_get_alg  &rArr; mbedtls_asn1_get_len  </ul>
<br>[Calls]<ul>
<li><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<li><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg_null
<li><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_md_alg
<li><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<li><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</ul>
<br>[Called By]<ul>
<li><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
</ul>
<p><strong><a name="[807]"></a>mbedtls_x509_get_name</strong>(288 bytes, Stack size 36 btyes, Obj/library_x509.o(.text.mbedtls_x509_get_name))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = mbedtls_x509_get_name &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len  </ul>
<br>[Calls]<ul>
<li><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<li><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</ul>
<br>[Called By]<ul>
<li><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</ul>
<p><strong><a name="[808]"></a>mbedtls_x509_get_time</strong>(630 bytes, Stack size 40 btyes, Obj/library_x509.o(.text.mbedtls_x509_get_time))<br>
<br>[Stack]<ul><li>Max Depth = 44 
<li>Call Chain = mbedtls_x509_get_time &rArr; mbedtls_asn1_get_len </ul>
<br>[Calls]<ul>
<li><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</ul>
<br>[Called By]<ul>
<li><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</ul>
<p><strong><a name="[809]"></a>mbedtls_x509_get_sig</strong>(68 bytes, Stack size 20 btyes, Obj/library_x509.o(.text.mbedtls_x509_get_sig))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = mbedtls_x509_get_sig &rArr; mbedtls_asn1_get_bitstring_null &rArr; mbedtls_asn1_get_len  </ul>
<br>[Calls]<ul>
<li><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
</ul>
<br>[Called By]<ul>
<li><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</ul>
<p><strong><a name="[80a]"></a>mbedtls_x509_get_sig_alg</strong>(146 bytes, Stack size 24 btyes, Obj/library_x509.o(.text.mbedtls_x509_get_sig_alg))<br>
<br>[Stack]<ul><li>Max Depth = 152 
<li>Call Chain = mbedtls_x509_get_sig_alg &rArr; mbedtls_x509_get_rsassa_pss_params &rArr; mbedtls_asn1_get_alg_null  &rArr; mbedtls_asn1_get_alg  &rArr; mbedtls_asn1_get_len  </ul>
<br>[Calls]<ul>
<li><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<li><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<br>[Called By]<ul>
<li><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</ul>
<p><strong><a name="[80b]"></a>mbedtls_x509_get_ext</strong>(98 bytes, Stack size 16 btyes, Obj/library_x509.o(.text.mbedtls_x509_get_ext))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = mbedtls_x509_get_ext &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len  </ul>
<br>[Calls]<ul>
<li><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</ul>
<br>[Called By]<ul>
<li><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</ul>
<p><strong><a name="[80c]"></a>mbedtls_x509_dn_oneline_gets</strong>(250 bytes, Stack size 0 btyes, Obj/library_x509.o(.text.mbedtls_x509_dn_oneline_gets))<br>
<p><strong><a name="[80d]"></a>mbedtls_x509_dn_gets</strong>(280 bytes, Stack size 312 btyes, Obj/library_x509.o(.text.mbedtls_x509_dn_gets))<br>
<br>[Stack]<ul><li>Max Depth = 332 
<li>Call Chain = mbedtls_x509_dn_gets &rArr; mbedtls_oid_get_attr_short_name </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
<li><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_attr_short_name
</ul>
<br>[Called By]<ul>
<li><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</ul>
<p><strong><a name="[80e]"></a>mbedtls_x509_serial_gets</strong>(164 bytes, Stack size 48 btyes, Obj/library_x509.o(.text.mbedtls_x509_serial_gets))<br>
<br>[Calls]<ul>
<li><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</ul>
<p><strong><a name="[80f]"></a>mbedtls_x509_sig_alg_gets</strong>(174 bytes, Stack size 44 btyes, Obj/library_x509.o(.text.mbedtls_x509_sig_alg_gets))<br>
<br>[Stack]<ul><li>Max Depth = 68 
<li>Call Chain = mbedtls_x509_sig_alg_gets &rArr; mbedtls_oid_get_sig_alg_desc &rArr; oid_sig_alg_from_asn1  </ul>
<br>[Calls]<ul>
<li><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg_desc
<li><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
<li><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<li><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_name
</ul>
<br>[Called By]<ul>
<li><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</ul>
<p><strong><a name="[810]"></a>mbedtls_x509_key_size_helper</strong>(40 bytes, Stack size 8 btyes, Obj/library_x509.o(.text.mbedtls_x509_key_size_helper))<br>
<br>[Calls]<ul>
<li><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</ul>
<p><strong><a name="[811]"></a>mbedtls_x509_time_is_past</strong>(34 bytes, Stack size 32 btyes, Obj/library_x509.o(.text.mbedtls_x509_time_is_past))<br>
<br>[Stack]<ul><li>Max Depth = 268 
<li>Call Chain = mbedtls_x509_time_is_past &rArr; x509_get_current_time &rArr; time  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_current_time
<li><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_time
</ul>
<br>[Called By]<ul>
<li><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_is_revoked
<li><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<li><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<li><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</ul>
<p><strong><a name="[812]"></a>mbedtls_x509_time_is_future</strong>(34 bytes, Stack size 32 btyes, Obj/library_x509.o(.text.mbedtls_x509_time_is_future))<br>
<br>[Stack]<ul><li>Max Depth = 268 
<li>Call Chain = mbedtls_x509_time_is_future &rArr; x509_get_current_time &rArr; time  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_current_time
<li><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_time
</ul>
<br>[Called By]<ul>
<li><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<li><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<li><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</ul>
<p><strong><a name="[813]"></a>mbedtls_x509_self_test</strong>(232 bytes, Stack size 656 btyes, Obj/library_x509.o(.text.mbedtls_x509_self_test))<br>
<br>[Stack]<ul><li>Max Depth = 2396 
<li>Call Chain = mbedtls_x509_self_test &rArr; mbedtls_x509_crt_verify &rArr; mbedtls_x509_crt_verify_with_profile  &rArr; x509_crt_verify_top  &rArr; x509_crt_verifycrl  &rArr; mbedtls_pk_verify_ext  &rArr; mbedtls_rsa_rsassa_pss_verify_ext  &rArr; mbedtls_rsa_private  &rArr; tih_rsa_decrypt  &rArr; rsa_crt_decrypt  &rArr; RSA_CRTModExp  &rArr; pke_mod  &rArr; pke_modmul  </ul>
<br>[Calls]<ul>
<li><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<li><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify
<li><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
</ul>
<br>[Called By]<ul>
<li><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_crypto_test
</ul>
<p><strong><a name="[814]"></a>mbedtls_x509_string_to_names</strong>(334 bytes, Stack size 0 btyes, Obj/library_x509_create.o(.text.mbedtls_x509_string_to_names))<br>
<p><strong><a name="[815]"></a>mbedtls_x509_set_extension</strong>(56 bytes, Stack size 0 btyes, Obj/library_x509_create.o(.text.mbedtls_x509_set_extension))<br>
<p><strong><a name="[816]"></a>mbedtls_x509_write_names</strong>(258 bytes, Stack size 0 btyes, Obj/library_x509_create.o(.text.mbedtls_x509_write_names))<br>
<p><strong><a name="[817]"></a>mbedtls_x509_write_sig</strong>(146 bytes, Stack size 0 btyes, Obj/library_x509_create.o(.text.mbedtls_x509_write_sig))<br>
<p><strong><a name="[818]"></a>mbedtls_x509_write_extensions</strong>(222 bytes, Stack size 0 btyes, Obj/library_x509_create.o(.text.mbedtls_x509_write_extensions))<br>
<p><strong><a name="[819]"></a>mbedtls_x509_crl_info</strong>(438 bytes, Stack size 0 btyes, Obj/library_x509_crl.o(.text.mbedtls_x509_crl_info))<br>
<p><strong><a name="[81a]"></a>mbedtls_x509_crl_init</strong>(12 bytes, Stack size 0 btyes, Obj/library_x509_crl.o(.text.mbedtls_x509_crl_init))<br>
<p><strong><a name="[81b]"></a>mbedtls_x509_crl_free</strong>(132 bytes, Stack size 0 btyes, Obj/library_x509_crl.o(.text.mbedtls_x509_crl_free))<br>
<p><strong><a name="[81c]"></a>mbedtls_x509_crl_parse_der</strong>(982 bytes, Stack size 0 btyes, Obj/library_x509_crl.o(.text.mbedtls_x509_crl_parse_der))<br>
<p><strong><a name="[81d]"></a>mbedtls_x509_crl_parse</strong>(172 bytes, Stack size 0 btyes, Obj/library_x509_crl.o(.text.mbedtls_x509_crl_parse))<br>
<p><strong><a name="[824]"></a>mbedtls_x509_crt_info</strong>(1620 bytes, Stack size 84 btyes, Obj/library_x509_crt.o(.text.mbedtls_x509_crt_info))<br>
<br>[Stack]<ul><li>Max Depth = 416 
<li>Call Chain = mbedtls_x509_crt_info &rArr; mbedtls_x509_dn_gets &rArr; mbedtls_oid_get_attr_short_name  </ul>
<br>[Calls]<ul>
<li><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
<li><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_serial_gets
<li><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
<li><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
<li><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_name
<li><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_key_size_helper
<li><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_bitlen
<li><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_extended_key_usage
</ul>
<br>[Called By]<ul>
<li><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
</ul>
<p><strong><a name="[825]"></a>mbedtls_x509_crt_verify_info</strong>(124 bytes, Stack size 36 btyes, Obj/library_x509_crt.o(.text.mbedtls_x509_crt_verify_info))<br>
<br>[Calls]<ul>
<li><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_connect
</ul>
<p><strong><a name="[826]"></a>mbedtls_x509_crt_check_key_usage</strong>(24 bytes, Stack size 4 btyes, Obj/library_x509_crt.o(.text.mbedtls_x509_crt_check_key_usage))<br>
<br>[Calls]<ul>
<li><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_key_usage.part.7
</ul>
<br>[Called By]<ul>
<li><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_cert_usage
</ul>
<p><strong><a name="[827]"></a>mbedtls_x509_crt_check_extended_key_usage</strong>(90 bytes, Stack size 24 btyes, Obj/library_x509_crt.o(.text.mbedtls_x509_crt_check_extended_key_usage))<br>
<br>[Calls]<ul>
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</ul>
<br>[Called By]<ul>
<li><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_cert_usage
</ul>
<p><strong><a name="[828]"></a>mbedtls_x509_crt_is_revoked</strong>(64 bytes, Stack size 12 btyes, Obj/library_x509_crt.o(.text.mbedtls_x509_crt_is_revoked))<br>
<br>[Stack]<ul><li>Max Depth = 280 
<li>Call Chain = mbedtls_x509_crt_is_revoked &rArr; mbedtls_x509_time_is_past &rArr; x509_get_current_time  &rArr; time  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
</ul>
<br>[Called By]<ul>
<li><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
</ul>
<p><strong><a name="[82c]"></a>mbedtls_x509_crt_verify_with_profile</strong>(616 bytes, Stack size 84 btyes, Obj/library_x509_crt.o(.text.mbedtls_x509_crt_verify_with_profile))<br>
<br>[Stack]<ul><li>Max Depth = 1716 
<li>Call Chain = mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_top &rArr; x509_crt_verifycrl  &rArr; mbedtls_pk_verify_ext  &rArr; mbedtls_rsa_rsassa_pss_verify_ext  &rArr; mbedtls_rsa_private  &rArr; tih_rsa_decrypt  &rArr; rsa_crt_decrypt  &rArr; RSA_CRTModExp  &rArr; pke_mod  &rArr; pke_modmul  </ul>
<br>[Calls]<ul>
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_wildcard.isra.6
<li><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_type
<li><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key.isra.4
<li><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<li><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<li><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</ul>
<br>[Called By]<ul>
<li><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<li><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify
</ul>
<p><strong><a name="[82d]"></a>mbedtls_x509_crt_verify</strong>(36 bytes, Stack size 24 btyes, Obj/library_x509_crt.o(.text.mbedtls_x509_crt_verify))<br>
<br>[Stack]<ul><li>Max Depth = 1740 
<li>Call Chain = mbedtls_x509_crt_verify &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_top  &rArr; x509_crt_verifycrl  &rArr; mbedtls_pk_verify_ext  &rArr; mbedtls_rsa_rsassa_pss_verify_ext  &rArr; mbedtls_rsa_private  &rArr; tih_rsa_decrypt  &rArr; rsa_crt_decrypt  &rArr; RSA_CRTModExp  &rArr; pke_mod  &rArr; pke_modmul  </ul>
<br>[Calls]<ul>
<li><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</ul>
<br>[Called By]<ul>
<li><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_self_test
</ul>
<p><strong><a name="[82e]"></a>mbedtls_x509_crt_init</strong>(14 bytes, Stack size 4 btyes, Obj/library_x509_crt.o(.text.mbedtls_x509_crt_init))<br>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_cache_get
<li><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<li><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_self_test
<li><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_init
<li><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_create
</ul>
<p><strong><a name="[82f]"></a>mbedtls_x509_crt_free</strong>(184 bytes, Stack size 16 btyes, Obj/library_x509_crt.o(.text.mbedtls_x509_crt_free))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = mbedtls_x509_crt_free &rArr; mbedtls_pk_free </ul>
<br>[Calls]<ul>
<li><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<li><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<li><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_self_test
<li><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<li><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_close
<li><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_destroy
</ul>
<p><strong><a name="[830]"></a>mbedtls_x509_crt_parse_der</strong>(1846 bytes, Stack size 140 btyes, Obj/library_x509_crt.o(.text.mbedtls_x509_crt_parse_der))<br>
<br>[Stack]<ul><li>Max Depth = 588 
<li>Call Chain = mbedtls_x509_crt_parse_der &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_ecpubkey  &rArr; mbedtls_ecp_check_pubkey  &rArr; tih_ecp_check  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<li><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_serial
<li><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg
<li><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
<li><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
<li><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig
<li><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
<li><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gm_pk_parse_subpubkey
<li><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_uid
<li><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_ext
<li><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bool
<li><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_x509_ext_type
<li><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
<li><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring
<li><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_sequence_of
</ul>
<br>[Called By]<ul>
<li><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<li><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
</ul>
<p><strong><a name="[831]"></a>mbedtls_x509_crt_parse</strong>(274 bytes, Stack size 76 btyes, Obj/library_x509_crt.o(.text.mbedtls_x509_crt_parse))<br>
<br>[Stack]<ul><li>Max Depth = 1160 
<li>Call Chain = mbedtls_x509_crt_parse &rArr; mbedtls_pem_read_buffer &rArr; pem_des3_decrypt  &rArr; mbedtls_des3_set3key_dec  &rArr; des3_set3key  &rArr; mbedtls_des_setkey  </ul>
<br>[Calls]<ul>
<li><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<li><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_init
<li><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<li><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<li><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</ul>
<br>[Called By]<ul>
<li><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_cache_get
<li><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_self_test
<li><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_config
<li><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_create
</ul>
<p><strong><a name="[832]"></a>mbedtls_x509_csr_info</strong>(224 bytes, Stack size 0 btyes, Obj/library_x509_csr.o(.text.mbedtls_x509_csr_info))<br>
<p><strong><a name="[833]"></a>mbedtls_x509_csr_init</strong>(12 bytes, Stack size 0 btyes, Obj/library_x509_csr.o(.text.mbedtls_x509_csr_init))<br>
<p><strong><a name="[834]"></a>mbedtls_x509_csr_free</strong>(70 bytes, Stack size 0 btyes, Obj/library_x509_csr.o(.text.mbedtls_x509_csr_free))<br>
<p><strong><a name="[835]"></a>mbedtls_x509_csr_parse_der</strong>(454 bytes, Stack size 0 btyes, Obj/library_x509_csr.o(.text.mbedtls_x509_csr_parse_der))<br>
<p><strong><a name="[836]"></a>mbedtls_x509_csr_parse</strong>(134 bytes, Stack size 0 btyes, Obj/library_x509_csr.o(.text.mbedtls_x509_csr_parse))<br>
<p><strong><a name="[837]"></a>mbedtls_x509write_crt_pem</strong>(70 bytes, Stack size 0 btyes, Obj/library_x509write_crt.o(.text.mbedtls_x509write_crt_pem))<br>
<p><strong><a name="[839]"></a>mbedtls_x509write_crt_init</strong>(24 bytes, Stack size 0 btyes, Obj/library_x509write_crt.o(.text.mbedtls_x509write_crt_init))<br>
<p><strong><a name="[83a]"></a>mbedtls_x509write_crt_free</strong>(46 bytes, Stack size 0 btyes, Obj/library_x509write_crt.o(.text.mbedtls_x509write_crt_free))<br>
<p><strong><a name="[83b]"></a>mbedtls_x509write_crt_set_version</strong>(4 bytes, Stack size 0 btyes, Obj/library_x509write_crt.o(.text.mbedtls_x509write_crt_set_version))<br>
<p><strong><a name="[83c]"></a>mbedtls_x509write_crt_set_md_alg</strong>(4 bytes, Stack size 0 btyes, Obj/library_x509write_crt.o(.text.mbedtls_x509write_crt_set_md_alg))<br>
<p><strong><a name="[83d]"></a>mbedtls_x509write_crt_set_subject_key</strong>(4 bytes, Stack size 0 btyes, Obj/library_x509write_crt.o(.text.mbedtls_x509write_crt_set_subject_key))<br>
<p><strong><a name="[83e]"></a>mbedtls_x509write_crt_set_issuer_key</strong>(4 bytes, Stack size 0 btyes, Obj/library_x509write_crt.o(.text.mbedtls_x509write_crt_set_issuer_key))<br>
<p><strong><a name="[83f]"></a>mbedtls_x509write_crt_set_subject_name</strong>(10 bytes, Stack size 0 btyes, Obj/library_x509write_crt.o(.text.mbedtls_x509write_crt_set_subject_name))<br>
<p><strong><a name="[840]"></a>mbedtls_x509write_crt_set_issuer_name</strong>(10 bytes, Stack size 0 btyes, Obj/library_x509write_crt.o(.text.mbedtls_x509write_crt_set_issuer_name))<br>
<p><strong><a name="[841]"></a>mbedtls_x509write_crt_set_serial</strong>(10 bytes, Stack size 0 btyes, Obj/library_x509write_crt.o(.text.mbedtls_x509write_crt_set_serial))<br>
<p><strong><a name="[842]"></a>mbedtls_x509write_crt_set_validity</strong>(74 bytes, Stack size 0 btyes, Obj/library_x509write_crt.o(.text.mbedtls_x509write_crt_set_validity))<br>
<p><strong><a name="[843]"></a>mbedtls_x509write_crt_set_extension</strong>(30 bytes, Stack size 0 btyes, Obj/library_x509write_crt.o(.text.mbedtls_x509write_crt_set_extension))<br>
<p><strong><a name="[844]"></a>mbedtls_x509write_crt_set_basic_constraints</strong>(158 bytes, Stack size 0 btyes, Obj/library_x509write_crt.o(.text.mbedtls_x509write_crt_set_basic_constraints))<br>
<p><strong><a name="[845]"></a>mbedtls_x509write_crt_set_subject_key_identifier</strong>(138 bytes, Stack size 0 btyes, Obj/library_x509write_crt.o(.text.mbedtls_x509write_crt_set_subject_key_identifier))<br>
<p><strong><a name="[846]"></a>mbedtls_x509write_crt_set_authority_key_identifier</strong>(172 bytes, Stack size 0 btyes, Obj/library_x509write_crt.o(.text.mbedtls_x509write_crt_set_authority_key_identifier))<br>
<p><strong><a name="[847]"></a>mbedtls_x509write_crt_set_key_usage</strong>(76 bytes, Stack size 0 btyes, Obj/library_x509write_crt.o(.text.mbedtls_x509write_crt_set_key_usage))<br>
<p><strong><a name="[848]"></a>mbedtls_x509write_crt_set_ns_cert_type</strong>(58 bytes, Stack size 0 btyes, Obj/library_x509write_crt.o(.text.mbedtls_x509write_crt_set_ns_cert_type))<br>
<p><strong><a name="[849]"></a>mbedtls_x509write_crt_der</strong>(746 bytes, Stack size 0 btyes, Obj/library_x509write_crt.o(.text.mbedtls_x509write_crt_der))<br>
<p><strong><a name="[84a]"></a>mbedtls_x509write_csr_init</strong>(12 bytes, Stack size 0 btyes, Obj/library_x509write_csr.o(.text.mbedtls_x509write_csr_init))<br>
<p><strong><a name="[84b]"></a>mbedtls_x509write_csr_free</strong>(36 bytes, Stack size 0 btyes, Obj/library_x509write_csr.o(.text.mbedtls_x509write_csr_free))<br>
<p><strong><a name="[84c]"></a>mbedtls_x509write_csr_set_md_alg</strong>(4 bytes, Stack size 0 btyes, Obj/library_x509write_csr.o(.text.mbedtls_x509write_csr_set_md_alg))<br>
<p><strong><a name="[84d]"></a>mbedtls_x509write_csr_set_key</strong>(4 bytes, Stack size 0 btyes, Obj/library_x509write_csr.o(.text.mbedtls_x509write_csr_set_key))<br>
<p><strong><a name="[84e]"></a>mbedtls_x509write_csr_set_subject_name</strong>(10 bytes, Stack size 0 btyes, Obj/library_x509write_csr.o(.text.mbedtls_x509write_csr_set_subject_name))<br>
<p><strong><a name="[84f]"></a>mbedtls_x509write_csr_set_extension</strong>(26 bytes, Stack size 0 btyes, Obj/library_x509write_csr.o(.text.mbedtls_x509write_csr_set_extension))<br>
<p><strong><a name="[850]"></a>mbedtls_x509write_csr_set_key_usage</strong>(58 bytes, Stack size 0 btyes, Obj/library_x509write_csr.o(.text.mbedtls_x509write_csr_set_key_usage))<br>
<p><strong><a name="[851]"></a>mbedtls_x509write_csr_set_ns_cert_type</strong>(58 bytes, Stack size 0 btyes, Obj/library_x509write_csr.o(.text.mbedtls_x509write_csr_set_ns_cert_type))<br>
<p><strong><a name="[852]"></a>mbedtls_x509write_csr_der</strong>(546 bytes, Stack size 0 btyes, Obj/library_x509write_csr.o(.text.mbedtls_x509write_csr_der))<br>
<p><strong><a name="[853]"></a>mbedtls_x509write_csr_pem</strong>(70 bytes, Stack size 0 btyes, Obj/library_x509write_csr.o(.text.mbedtls_x509write_csr_pem))<br>
<p><strong><a name="[854]"></a>threading_mutex_init_rtt</strong>(52 bytes, Stack size 24 btyes, Obj/src_threading_alt.o(.text.threading_mutex_init_rtt))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = threading_mutex_init_rtt &rArr; rt_mutex_init &rArr; rt_object_init  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
</ul>
<p><strong><a name="[855]"></a>threading_mutex_free_rtt</strong>(26 bytes, Stack size 8 btyes, Obj/src_threading_alt.o(.text.threading_mutex_free_rtt))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = threading_mutex_free_rtt &rArr; rt_mutex_detach &rArr; rt_thread_resume  &rArr; rt_timer_stop  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
</ul>
<p><strong><a name="[856]"></a>threading_mutex_lock_rtt</strong>(40 bytes, Stack size 4 btyes, Obj/src_threading_alt.o(.text.threading_mutex_lock_rtt))<br>
<br>[Stack]<ul><li>Max Depth = 316 
<li>Call Chain = threading_mutex_lock_rtt &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</ul>
<p><strong><a name="[857]"></a>threading_mutex_unlock_rtt</strong>(36 bytes, Stack size 4 btyes, Obj/src_threading_alt.o(.text.threading_mutex_unlock_rtt))<br>
<br>[Stack]<ul><li>Max Depth = 292 
<li>Call Chain = threading_mutex_unlock_rtt &rArr; rt_mutex_release &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<p><strong><a name="[859]"></a>mbedtls_timing_hardclock</strong>(8 bytes, Stack size 4 btyes, Obj/src_timing_alt.o(.text.mbedtls_timing_hardclock))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = mbedtls_timing_hardclock &rArr; rt_hw_hardclock_get </ul>
<br>[Calls]<ul>
<li><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hardclock_get
</ul>
<br>[Called By]<ul>
<li><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hardclock_poll
<li><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_timing_self_test
</ul>
<p><strong><a name="[85a]"></a>mbedtls_timing_get_timer</strong>(42 bytes, Stack size 12 btyes, Obj/src_timing_alt.o(.text.mbedtls_timing_get_timer))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = mbedtls_timing_get_timer &rArr; rt_hw_hardclock_get </ul>
<br>[Calls]<ul>
<li><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hardclock_get
</ul>
<br>[Called By]<ul>
<li><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busy_msleep
<li><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_timing_self_test
</ul>
<p><strong><a name="[85b]"></a>mbedtls_set_alarm</strong>(52 bytes, Stack size 16 btyes, Obj/src_timing_alt.o(.text.mbedtls_set_alarm))<br>
<br>[Stack]<ul><li>Max Depth = 364 
<li>Call Chain = mbedtls_set_alarm &rArr; rt_timer_create &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<li><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<li><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</ul>
<br>[Called By]<ul>
<li><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_timing_self_test
</ul>
<p><strong><a name="[85c]"></a>mbedtls_timing_set_delay</strong>(22 bytes, Stack size 8 btyes, Obj/src_timing_alt.o(.text.mbedtls_timing_set_delay))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = mbedtls_timing_set_delay &rArr; rt_hw_hardclock_get </ul>
<br>[Calls]<ul>
<li><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hardclock_get
</ul>
<br>[Called By]<ul>
<li><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_timing_self_test
</ul>
<p><strong><a name="[85d]"></a>mbedtls_timing_get_delay</strong>(60 bytes, Stack size 8 btyes, Obj/src_timing_alt.o(.text.mbedtls_timing_get_delay))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = mbedtls_timing_get_delay &rArr; rt_hw_hardclock_get </ul>
<br>[Calls]<ul>
<li><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hardclock_get
</ul>
<br>[Called By]<ul>
<li><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_timing_self_test
</ul>
<p><strong><a name="[85e]"></a>tls_cli_session_destroy</strong>(44 bytes, Stack size 8 btyes, Obj/src_tls_client.o(.text.tls_cli_session_destroy))<br>
<br>[Calls]<ul>
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<br>[Called By]<ul>
<li><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_create
<li><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedlts_client_entry
<li><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_close
</ul>
<p><strong><a name="[85f]"></a>tls_cli_session_create</strong>(112 bytes, Stack size 20 btyes, Obj/src_tls_client.o(.text.tls_cli_session_create))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = tls_cli_session_create &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<li><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strdup
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_destroy
</ul>
<br>[Called By]<ul>
<li><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedlts_client_start
<li><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
</ul>
<p><strong><a name="[860]"></a>tls_cli_session_init</strong>(94 bytes, Stack size 12 btyes, Obj/src_tls_client.o(.text.tls_cli_session_init))<br>
<br>[Stack]<ul><li>Max Depth = 184 
<li>Call Chain = tls_cli_session_init &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_set_threshold
<li><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_init
<li><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_init
<li><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_init
<li><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<li><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_init
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedlts_client_entry
<li><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
</ul>
<p><strong><a name="[861]"></a>tls_cli_session_close</strong>(80 bytes, Stack size 12 btyes, Obj/src_tls_client.o(.text.tls_cli_session_close))<br>
<br>[Stack]<ul><li>Max Depth = 1500 
<li>Call Chain = tls_cli_session_close &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message  &rArr; mbedtls_ssl_write_record  &rArr; mbedtls_ssl_flush_output  &rArr; mbedtls_debug_print_msg  &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<li><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_free
<li><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<li><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<li><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
<li><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
</ul>
<br>[Called By]<ul>
<li><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedlts_client_entry
<li><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_close
</ul>
<p><strong><a name="[862]"></a>tls_cli_session_config</strong>(606 bytes, Stack size 24 btyes, Obj/src_tls_client.o(.text.tls_cli_session_config))<br>
<br>[Stack]<ul><li>Max Depth = 3272 
<li>Call Chain = tls_cli_session_config &rArr; mbedtls_gm_pk_parse_key &rArr; pk_parse_key_pkcs8_encrypted_der  &rArr; mbedtls_pkcs12_pbe  &rArr; mbedtls_pkcs12_derivation  &rArr; mbedtls_md_setup  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<li><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gm_pk_parse_key
<li><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<li><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<li><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
<li><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_authmode
<li><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gmssl_conf_ca_chain
<li><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gmssl_conf_own_cert
<li><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_ca_chain
<li><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_own_cert
<li><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_rng
<li><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
</ul>
<br>[Called By]<ul>
<li><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedlts_client_entry
<li><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
</ul>
<p><strong><a name="[863]"></a>tls_cli_session_connect</strong>(212 bytes, Stack size 24 btyes, Obj/src_tls_client.o(.text.tls_cli_session_connect))<br>
<br>[Stack]<ul><li>Max Depth = 4808 
<li>Call Chain = tls_cli_session_connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_connect
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_bio
<li><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<li><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_verify_result
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_info
</ul>
<br>[Called By]<ul>
<li><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedlts_client_entry
<li><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
</ul>
<p><strong><a name="[864]"></a>tls_cli_session_read</strong>(24 bytes, Stack size 4 btyes, Obj/src_tls_client.o(.text.tls_cli_session_read))<br>
<br>[Stack]<ul><li>Max Depth = 4892 
<li>Call Chain = tls_cli_session_read &rArr; mbedtls_ssl_read &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</ul>
<br>[Called By]<ul>
<li><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedlts_client_entry
<li><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_recv.isra.0.constprop.7
</ul>
<p><strong><a name="[865]"></a>tls_cli_session_write</strong>(24 bytes, Stack size 4 btyes, Obj/src_tls_client.o(.text.tls_cli_session_write))<br>
<br>[Stack]<ul><li>Max Depth = 4896 
<li>Call Chain = tls_cli_session_write &rArr; mbedtls_ssl_write &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
</ul>
<br>[Called By]<ul>
<li><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedlts_client_entry
<li><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_write
</ul>
<p><strong><a name="[866]"></a>mbedtls_hardware_poll</strong>(20 bytes, Stack size 12 btyes, Obj/src_tls_hardware.o(.text.mbedtls_hardware_poll))<br>
<br>[Stack]<ul><li>Max Depth = 340 
<li>Call Chain = mbedtls_hardware_poll &rArr; tih_rand_get &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_rand_get
</ul>
<br>[Called By]<ul>
<li><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_source_self_test_gather.constprop.0
</ul>
<p><strong><a name="[867]"></a>mbedtls_hardware_random</strong>(22 bytes, Stack size 4 btyes, Obj/src_tls_hardware.o(.text.mbedtls_hardware_random))<br>
<br>[Stack]<ul><li>Max Depth = 332 
<li>Call Chain = mbedtls_hardware_random &rArr; tih_rand_get &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_rand_get
</ul>
<p><strong><a name="[868]"></a>mbedtls_net_init</strong>(8 bytes, Stack size 0 btyes, Obj/src_tls_net.o(.text.mbedtls_net_init))<br>
<br>[Called By]<ul>
<li><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_init
<li><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_create
<li><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_create
</ul>
<p><strong><a name="[869]"></a>mbedtls_net_connect</strong>(152 bytes, Stack size 56 btyes, Obj/src_tls_net.o(.text.mbedtls_net_connect))<br>
<br>[Stack]<ul><li>Max Depth = 512 
<li>Call Chain = mbedtls_net_connect &rArr; getaddrinfo &rArr; lwip_getaddrinfo  &rArr; netconn_gethostbyname  &rArr; sys_sem_new  &rArr; rt_sem_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getaddrinfo
<li><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<li><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<li><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<li><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeaddrinfo
</ul>
<br>[Called By]<ul>
<li><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_connect
</ul>
<p><strong><a name="[86a]"></a>mbedtls_net_bind</strong>(228 bytes, Stack size 68 btyes, Obj/src_tls_net.o(.text.mbedtls_net_bind))<br>
<br>[Stack]<ul><li>Max Depth = 740 
<li>Call Chain = mbedtls_net_bind &rArr; setsockopt &rArr; lwip_setsockopt  &rArr; igmp_leavegroup  &rArr; igmp_leavegroup_netif  &rArr; igmp_send  &rArr; ip4_output_if_opt  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getaddrinfo
<li><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<li><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<li><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<li><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<li><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<li><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeaddrinfo
</ul>
<br>[Called By]<ul>
<li><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_listen
</ul>
<p><strong><a name="[86b]"></a>mbedtls_net_accept</strong>(324 bytes, Stack size 88 btyes, Obj/src_tls_net.o(.text.mbedtls_net_accept))<br>
<br>[Stack]<ul><li>Max Depth = 760 
<li>Call Chain = mbedtls_net_accept &rArr; setsockopt &rArr; lwip_setsockopt  &rArr; igmp_leavegroup  &rArr; igmp_leavegroup_netif  &rArr; igmp_send  &rArr; ip4_output_if_opt  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockopt
<li><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<li><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<li><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<li><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcntl
<li><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockname
<li><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<li><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<li><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
</ul>
<br>[Called By]<ul>
<li><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_create
</ul>
<p><strong><a name="[86c]"></a>net_set_block</strong>(20 bytes, Stack size 0 btyes, Obj/src_tls_net.o(.text.net_set_block))<br>
<p><strong><a name="[86d]"></a>net_set_nonblock</strong>(20 bytes, Stack size 0 btyes, Obj/src_tls_net.o(.text.net_set_nonblock))<br>
<p><strong><a name="[86e]"></a>mbedtls_net_usleep</strong>(44 bytes, Stack size 0 btyes, Obj/src_tls_net.o(.text.mbedtls_net_usleep))<br>
<p><strong><a name="[86f]"></a>mbedtls_net_recv</strong>(86 bytes, Stack size 8 btyes, Obj/src_tls_net.o(.text.mbedtls_net_recv))<br>
<br>[Stack]<ul><li>Max Depth = 552 
<li>Call Chain = mbedtls_net_recv &rArr; recv &rArr; lwip_recv  &rArr; lwip_recvfrom  &rArr; netconn_recv  &rArr; netconn_recv_data  &rArr; netconn_close_shutdown  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<li><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcntl
<li><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
</ul>
<p><strong><a name="[870]"></a>mbedtls_net_recv_timeout</strong>(138 bytes, Stack size 0 btyes, Obj/src_tls_net.o(.text.mbedtls_net_recv_timeout))<br>
<p><strong><a name="[871]"></a>mbedtls_net_send</strong>(94 bytes, Stack size 8 btyes, Obj/src_tls_net.o(.text.mbedtls_net_send))<br>
<br>[Stack]<ul><li>Max Depth = 372 
<li>Call Chain = mbedtls_net_send &rArr; send &rArr; dfs_net_getsocket  &rArr; fd_put  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<li><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcntl
<li><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
</ul>
<p><strong><a name="[872]"></a>mbedtls_net_free</strong>(22 bytes, Stack size 12 btyes, Obj/src_tls_net.o(.text.mbedtls_net_free))<br>
<br>[Stack]<ul><li>Max Depth = 436 
<li>Call Chain = mbedtls_net_free &rArr; closesocket &rArr; lwip_close  &rArr; netconn_delete  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
</ul>
<br>[Called By]<ul>
<li><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_close
<li><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_destroy
<li><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_listen
<li><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_destroy
<li><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_create
</ul>
<p><strong><a name="[874]"></a>tls_srv_destroy</strong>(92 bytes, Stack size 8 btyes, Obj/src_tls_server.o(.text.tls_srv_destroy))<br>
<br>[Stack]<ul><li>Max Depth = 444 
<li>Call Chain = tls_srv_destroy &rArr; mbedtls_net_free &rArr; closesocket  &rArr; lwip_close  &rArr; netconn_delete  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_free
<li><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<li><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<li><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_cache_free
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<br>[Called By]<ul>
<li><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_create
<li><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_thread
</ul>
<p><strong><a name="[875]"></a>tls_srv_create</strong>(426 bytes, Stack size 36 btyes, Obj/src_tls_server.o(.text.tls_srv_create))<br>
<br>[Stack]<ul><li>Max Depth = 3284 
<li>Call Chain = tls_srv_create &rArr; mbedtls_pk_parse_key &rArr; pk_parse_key_pkcs8_encrypted_der  &rArr; mbedtls_pkcs12_pbe  &rArr; mbedtls_pkcs12_derivation  &rArr; mbedtls_md_setup  </ul>
<br>[Calls]<ul>
<li><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<li><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strdup
<li><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_set_threshold
<li><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_cache_init
<li><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<li><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_init
<li><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_init
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<li><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<li><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<li><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gm_pk_parse_key
<li><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_destroy
</ul>
<br>[Called By]<ul>
<li><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_thread
</ul>
<p><strong><a name="[876]"></a>tls_srv_listen</strong>(66 bytes, Stack size 12 btyes, Obj/src_tls_server.o(.text.tls_srv_listen))<br>
<br>[Stack]<ul><li>Max Depth = 752 
<li>Call Chain = tls_srv_listen &rArr; mbedtls_net_bind &rArr; setsockopt  &rArr; lwip_setsockopt  &rArr; igmp_leavegroup  &rArr; igmp_leavegroup_netif  &rArr; igmp_send  &rArr; ip4_output_if_opt  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<li><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_bind
<li><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_free
</ul>
<br>[Called By]<ul>
<li><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_thread
</ul>
<p><strong><a name="[877]"></a>tls_srv_session_destroy</strong>(46 bytes, Stack size 8 btyes, Obj/src_tls_server.o(.text.tls_srv_session_destroy))<br>
<br>[Stack]<ul><li>Max Depth = 444 
<li>Call Chain = tls_srv_session_destroy &rArr; mbedtls_net_free &rArr; closesocket  &rArr; lwip_close  &rArr; netconn_delete  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_free
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<br>[Called By]<ul>
<li><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_create
<li><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_create
<li><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_close
</ul>
<p><strong><a name="[878]"></a>tls_srv_session_create</strong>(150 bytes, Stack size 44 btyes, Obj/src_tls_server.o(.text.tls_srv_session_create))<br>
<br>[Stack]<ul><li>Max Depth = 804 
<li>Call Chain = tls_srv_session_create &rArr; mbedtls_net_accept &rArr; setsockopt  &rArr; lwip_setsockopt  &rArr; igmp_leavegroup  &rArr; igmp_leavegroup_netif  &rArr; igmp_send  &rArr; ip4_output_if_opt  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<li><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_init
<li><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_accept
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_free
<li><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_destroy
</ul>
<br>[Called By]<ul>
<li><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_create
</ul>
<p><strong><a name="[879]"></a>tls_srv_session_init</strong>(70 bytes, Stack size 0 btyes, Obj/src_tls_server.o(.text.tls_srv_session_init))<br>
<br>[Called By]<ul>
<li><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_create
</ul>
<p><strong><a name="[87a]"></a>tls_srv_session_close</strong>(76 bytes, Stack size 12 btyes, Obj/src_tls_server.o(.text.tls_srv_session_close))<br>
<br>[Stack]<ul><li>Max Depth = 1500 
<li>Call Chain = tls_srv_session_close &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message  &rArr; mbedtls_ssl_write_record  &rArr; mbedtls_ssl_flush_output  &rArr; mbedtls_debug_print_msg  &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<li><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_reset
<li><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<li><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
</ul>
<br>[Called By]<ul>
<li><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_create
<li><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_close
</ul>
<p><strong><a name="[87b]"></a>tls_srv_session_config</strong>(320 bytes, Stack size 24 btyes, Obj/src_tls_server.o(.text.tls_srv_session_config))<br>
<br>[Stack]<ul><li>Max Depth = 4808 
<li>Call Chain = tls_srv_session_config &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<li><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_init
<li><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
<li><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_rng
<li><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_dbg
<li><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_session_cache
<li><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gmssl_conf_ca_chain
<li><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gmssl_conf_own_cert
<li><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_ca_chain
<li><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_own_cert
<li><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_init
<li><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<li><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_reset
<li><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_bio
<li><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
</ul>
<br>[Called By]<ul>
<li><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_create
</ul>
<p><strong><a name="[87c]"></a>tls_srv_session_read</strong>(140 bytes, Stack size 28 btyes, Obj/src_tls_server.o(.text.tls_srv_session_read))<br>
<br>[Stack]<ul><li>Max Depth = 4916 
<li>Call Chain = tls_srv_session_read &rArr; mbedtls_ssl_read &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<li><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</ul>
<br>[Called By]<ul>
<li><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_session_handle
<li><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_read
</ul>
<p><strong><a name="[87d]"></a>tls_srv_session_write</strong>(80 bytes, Stack size 16 btyes, Obj/src_tls_server.o(.text.tls_srv_session_write))<br>
<br>[Stack]<ul><li>Max Depth = 4908 
<li>Call Chain = tls_srv_session_write &rArr; mbedtls_ssl_write &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<li><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
</ul>
<br>[Called By]<ul>
<li><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_printf
<li><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_write
<li><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_set_header
</ul>
<p><strong><a name="[87f]"></a>mbedtls_crypto_test</strong>(446 bytes, Stack size 12 btyes, Obj/samples_crypto_app_test.o(.text.mbedtls_crypto_test))<br>
<br>[Stack]<ul><li>Max Depth = 2408 
<li>Call Chain = mbedtls_crypto_test &rArr; mbedtls_x509_self_test &rArr; mbedtls_x509_crt_verify  &rArr; mbedtls_x509_crt_verify_with_profile  &rArr; x509_crt_verify_top  &rArr; x509_crt_verifycrl  &rArr; mbedtls_pk_verify_ext  &rArr; mbedtls_rsa_rsassa_pss_verify_ext  &rArr; mbedtls_rsa_private  &rArr; tih_rsa_decrypt  &rArr; rsa_crt_decrypt  &rArr; RSA_CRTModExp  &rArr; pke_mod  &rArr; pke_modmul  </ul>
<br>[Calls]<ul>
<li><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_snprintf
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[cd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<li><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<li><a href="#[cc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
<li><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_self_test
<li><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
<li><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<li><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_self_test
<li><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_self_test
<li><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<li><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_self_test
<li><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
<li><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_self_test
<li><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cmac_self_test
<li><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_self_test
<li><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<li><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<li><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_self_test
<li><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_self_test
<li><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_self_test
<li><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<li><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
<li><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_self_test
<li><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_timing_self_test
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</ul>
<p><strong><a name="[880]"></a>mbedlts_client_start</strong>(72 bytes, Stack size 12 btyes, Obj/samples_tls_app_test.o(.text.mbedlts_client_start))<br>
<br>[Stack]<ul><li>Max Depth = 340 
<li>Call Chain = mbedlts_client_start &rArr; rt_thread_create &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_create
<li><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<li><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[882]"></a>iperf_server</strong>(478 bytes, Stack size 156 btyes, Obj/iperf_iperf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 828 
<li>Call Chain = iperf_server &rArr; setsockopt &rArr; lwip_setsockopt  &rArr; igmp_leavegroup  &rArr; igmp_leavegroup_netif  &rArr; igmp_send  &rArr; ip4_output_if_opt  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<li><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<li><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<li><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<li><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<li><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<li><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<li><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<li><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<li><a href="#[c9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__muldi3
<li><a href="#[c9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivdi3
<li><a href="#[c9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__floatundisf
<li><a href="#[ca5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__divsf3
<li><a href="#[cad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__extendsfdf2
<li><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<p><strong><a name="[883]"></a>iperf_usage</strong>(102 bytes, Stack size 0 btyes, Obj/iperf_iperf.o(.text.iperf_usage))<br>
<br>[Stack]<ul><li>Max Depth = 172 
<li>Call Chain = iperf_usage &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf
</ul>
<p><strong><a name="[884]"></a>iperf</strong>(380 bytes, Stack size 40 btyes, Obj/iperf_iperf.o(.text.iperf))<br>
<br>[Stack]<ul><li>Max Depth = 368 
<li>Call Chain = iperf &rArr; rt_thread_create &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<li><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_usage
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<li><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<li><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<li><a href="#[cd5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[889]"></a>ntp_get_time</strong>(704 bytes, Stack size 140 btyes, Obj/ntp_ntp.o(.text.ntp_get_time))<br>
<br>[Stack]<ul><li>Max Depth = 688 
<li>Call Chain = ntp_get_time &rArr; recvfrom &rArr; lwip_recvfrom  &rArr; netconn_recv  &rArr; netconn_recv_data  &rArr; netconn_close_shutdown  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
<li><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<li><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<li><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto_ntp_server
<li><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<li><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<li><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<li><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<li><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</ul>
<br>[Called By]<ul>
<li><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_to_rtc
</ul>
<p><strong><a name="[88a]"></a>ntp_get_local_time</strong>(18 bytes, Stack size 0 btyes, Obj/ntp_ntp.o(.text.ntp_get_local_time))<br>
<p><strong><a name="[88b]"></a>ntp_sync_to_rtc</strong>(68 bytes, Stack size 8 btyes, Obj/ntp_ntp.o(.text.ntp_sync_to_rtc))<br>
<br>[Stack]<ul><li>Max Depth = 696 
<li>Call Chain = ntp_sync_to_rtc &rArr; ntp_get_time &rArr; recvfrom  &rArr; lwip_recvfrom  &rArr; netconn_recv  &rArr; netconn_recv_data  &rArr; netconn_close_shutdown  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<li><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<li><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<li><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
</ul>
<br>[Called By]<ul>
<li><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_thread_enrty
<li><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync
</ul>
<p><strong><a name="[88e]"></a>ping</strong>(590 bytes, Stack size 212 btyes, Obj/ping_ping.o(.text.ping))<br>
<br>[Stack]<ul><li>Max Depth = 860 
<li>Call Chain = ping &rArr; lwip_setsockopt &rArr; igmp_leavegroup  &rArr; igmp_leavegroup_netif  &rArr; igmp_send  &rArr; ip4_output_if_opt  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<li><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<li><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<li><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<li><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<li><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<li><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<li><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</ul>
<br>[Called By]<ul>
<li><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ping
</ul>
<p><strong><a name="[88f]"></a>cmd_ping</strong>(32 bytes, Stack size 4 btyes, Obj/ping_ping.o(.text.cmd_ping))<br>
<br>[Stack]<ul><li>Max Depth = 864 
<li>Call Chain = cmd_ping &rArr; ping &rArr; lwip_setsockopt  &rArr; igmp_leavegroup  &rArr; igmp_leavegroup_netif  &rArr; igmp_send  &rArr; ip4_output_if_opt  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[89a]"></a>tftp_init</strong>(74 bytes, Stack size 16 btyes, Obj/tftp_tftp_server.o(.text.tftp_init))<br>
<br>[Stack]<ul><li>Max Depth = 240 
<li>Call Chain = tftp_init &rArr; udp_new_ip_type &rArr; udp_new  &rArr; memp_malloc  &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
<li><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<li><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<li><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
</ul>
<br>[Called By]<ul>
<li><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_server
</ul>
<p><strong><a name="[89e]"></a>webclient_header_fields_add</strong>(156 bytes, Stack size 24 btyes, Obj/src_webclient.o(.text.webclient_header_fields_add))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = webclient_header_fields_add &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<li><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post_test
</ul>
<p><strong><a name="[89f]"></a>webclient_header_fields_get</strong>(156 bytes, Stack size 24 btyes, Obj/src_webclient.o(.text.webclient_header_fields_get))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = webclient_header_fields_get &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<li><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<li><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
<li><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_test
</ul>
<p><strong><a name="[8a0]"></a>webclient_resp_status_get</strong>(28 bytes, Stack size 0 btyes, Obj/src_webclient.o(.text.webclient_resp_status_get))<br>
<p><strong><a name="[8a1]"></a>webclient_content_length_get</strong>(28 bytes, Stack size 8 btyes, Obj/src_webclient.o(.text.webclient_content_length_get))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = webclient_content_length_get &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_test
</ul>
<p><strong><a name="[8a2]"></a>webclient_handle_response</strong>(376 bytes, Stack size 36 btyes, Obj/src_webclient.o(.text.webclient_handle_response))<br>
<br>[Stack]<ul><li>Max Depth = 4964 
<li>Call Chain = webclient_handle_response &rArr; webclient_read_line &rArr; webclient_recv.isra.0.constprop.7  &rArr; tls_cli_session_read  &rArr; mbedtls_ssl_read  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<li><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read_line
<li><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<li><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<li><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<li><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<li><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_get
<li><a href="#[cd5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<li><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
<li><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post
</ul>
<p><strong><a name="[8a3]"></a>webclient_session_create</strong>(162 bytes, Stack size 16 btyes, Obj/src_webclient.o(.text.webclient_session_create))<br>
<br>[Stack]<ul><li>Max Depth = 340 
<li>Call Chain = webclient_session_create &rArr; rt_calloc &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<br>[Called By]<ul>
<li><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_test
<li><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post_test
</ul>
<p><strong><a name="[8a4]"></a>webclient_set_timeout</strong>(88 bytes, Stack size 0 btyes, Obj/src_webclient.o(.text.webclient_set_timeout))<br>
<p><strong><a name="[8a5]"></a>webclient_read</strong>(392 bytes, Stack size 96 btyes, Obj/src_webclient.o(.text.webclient_read))<br>
<br>[Stack]<ul><li>Max Depth = 5024 
<li>Call Chain = webclient_read &rArr; webclient_read_line &rArr; webclient_recv.isra.0.constprop.7  &rArr; tls_cli_session_read  &rArr; mbedtls_ssl_read  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_recv.isra.0.constprop.7
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read_line
<li><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<li><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<li><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_test
<li><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post_test
</ul>
<p><strong><a name="[8a6]"></a>webclient_write</strong>(164 bytes, Stack size 28 btyes, Obj/src_webclient.o(.text.webclient_write))<br>
<br>[Stack]<ul><li>Max Depth = 4924 
<li>Call Chain = webclient_write &rArr; tls_cli_session_write &rArr; mbedtls_ssl_write  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_write
<li><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<li><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<li><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<li><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post
</ul>
<p><strong><a name="[8a8]"></a>webclient_get</strong>(142 bytes, Stack size 12 btyes, Obj/src_webclient.o(.text.webclient_get))<br>
<br>[Stack]<ul><li>Max Depth = 4976 
<li>Call Chain = webclient_get &rArr; webclient_handle_response &rArr; webclient_read_line  &rArr; webclient_recv.isra.0.constprop.7  &rArr; tls_cli_session_read  &rArr; mbedtls_ssl_read  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
<li><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<li><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<li><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_get
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_test
</ul>
<p><strong><a name="[8a9]"></a>webclient_get_position</strong>(164 bytes, Stack size 0 btyes, Obj/src_webclient.o(.text.webclient_get_position))<br>
<p><strong><a name="[8aa]"></a>webclient_post</strong>(140 bytes, Stack size 16 btyes, Obj/src_webclient.o(.text.webclient_post))<br>
<br>[Stack]<ul><li>Max Depth = 4980 
<li>Call Chain = webclient_post &rArr; webclient_handle_response &rArr; webclient_read_line  &rArr; webclient_recv.isra.0.constprop.7  &rArr; tls_cli_session_read  &rArr; mbedtls_ssl_read  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
<li><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<li><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<li><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_write
<li><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post_test
</ul>
<p><strong><a name="[8ab]"></a>webclient_close</strong>(114 bytes, Stack size 8 btyes, Obj/src_webclient.o(.text.webclient_close))<br>
<br>[Stack]<ul><li>Max Depth = 1508 
<li>Call Chain = webclient_close &rArr; tls_cli_session_close &rArr; mbedtls_ssl_close_notify  &rArr; mbedtls_ssl_send_alert_message  &rArr; mbedtls_ssl_write_record  &rArr; mbedtls_ssl_flush_output  &rArr; mbedtls_debug_print_msg  &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_close
<li><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_destroy
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_test
<li><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post_test
</ul>
<p><strong><a name="[8ac]"></a>webclient_response</strong>(222 bytes, Stack size 0 btyes, Obj/src_webclient.o(.text.webclient_response))<br>
<p><strong><a name="[8ad]"></a>webclient_request</strong>(268 bytes, Stack size 0 btyes, Obj/src_webclient.o(.text.webclient_request))<br>
<p><strong><a name="[8ae]"></a>webclient_get_file</strong>(268 bytes, Stack size 0 btyes, Obj/src_webclient_file.o(.text.webclient_get_file))<br>
<p><strong><a name="[8af]"></a>webclient_post_file</strong>(340 bytes, Stack size 0 btyes, Obj/src_webclient_file.o(.text.webclient_post_file))<br>
<p><strong><a name="[8b0]"></a>wget</strong>(32 bytes, Stack size 0 btyes, Obj/src_webclient_file.o(.text.wget))<br>
<p><strong><a name="[8b1]"></a>webclient_get_test</strong>(510 bytes, Stack size 40 btyes, Obj/samples_webclient_get_sample.o(.text.webclient_get_test))<br>
<br>[Stack]<ul><li>Max Depth = 5064 
<li>Call Chain = webclient_get_test &rArr; webclient_read &rArr; webclient_read_line  &rArr; webclient_recv.isra.0.constprop.7  &rArr; tls_cli_session_read  &rArr; mbedtls_ssl_read  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_session_create
<li><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_close
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_get
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<li><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<li><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_content_length_get
<li><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
<li><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</ul>
<p><strong><a name="[8b2]"></a>webclient_post_test</strong>(234 bytes, Stack size 28 btyes, Obj/samples_webclient_post_sample.o(.text.webclient_post_test))<br>
<br>[Stack]<ul><li>Max Depth = 5052 
<li>Call Chain = webclient_post_test &rArr; webclient_read &rArr; webclient_read_line  &rArr; webclient_recv.isra.0.constprop.7  &rArr; tls_cli_session_read  &rArr; mbedtls_ssl_read  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_session_create
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_add
<li><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_close
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
</ul>
<p><strong><a name="[8b4]"></a>webnet_set_port</strong>(28 bytes, Stack size 0 btyes, Obj/src_webnet.o(.text.webnet_set_port))<br>
<p><strong><a name="[8b5]"></a>webnet_get_port</strong>(6 bytes, Stack size 0 btyes, Obj/src_webnet.o(.text.webnet_get_port))<br>
<p><strong><a name="[8b6]"></a>webnet_set_root</strong>(22 bytes, Stack size 0 btyes, Obj/src_webnet.o(.text.webnet_set_root))<br>
<p><strong><a name="[8b7]"></a>webnet_get_root</strong>(4 bytes, Stack size 0 btyes, Obj/src_webnet.o(.text.webnet_get_root))<br>
<br>[Called By]<ul>
<li><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_get_physical_path
<li><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_handle_uri
<li><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_asp_dofile
<li><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_dirindex
</ul>
<p><strong><a name="[8b8]"></a>webnet_init</strong>(124 bytes, Stack size 16 btyes, Obj/src_webnet.o(.text.webnet_init))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = webnet_init &rArr; rt_thread_create &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<li><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_test
</ul>
<p><strong><a name="[8b9]"></a>mime_get_type</strong>(48 bytes, Stack size 16 btyes, Obj/src_wn_mimetype.o(.text.mime_get_type))<br>
<br>[Stack]<ul><li>Max Depth = 40 
<li>Call Chain = mime_get_type &rArr; str_end_with &rArr; strncasecmp  </ul>
<br>[Calls]<ul>
<li><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_end_with
</ul>
<br>[Called By]<ul>
<li><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_system_dofile
<li><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_calc_handler
<li><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_hello_handler
<li><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_done
</ul>
<p><strong><a name="[8bc]"></a>webnet_request_has_query</strong>(58 bytes, Stack size 0 btyes, Obj/src_wn_request.o(.text.webnet_request_has_query))<br>
<p><strong><a name="[8bd]"></a>webnet_request_get_query</strong>(62 bytes, Stack size 24 btyes, Obj/src_wn_request.o(.text.webnet_request_get_query))<br>
<br>[Calls]<ul>
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</ul>
<br>[Called By]<ul>
<li><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_calc_handler
</ul>
<p><strong><a name="[8be]"></a>webnet_request_parse_method</strong>(246 bytes, Stack size 24 btyes, Obj/src_wn_request.o(.text.webnet_request_parse_method))<br>
<br>[Stack]<ul><li>Max Depth = 368 
<li>Call Chain = webnet_request_parse_method &rArr; _webnet_request_parse_query &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<li><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_begin_with
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<li><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<li><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_request_parse_query
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_session_handle
</ul>
<p><strong><a name="[8bf]"></a>webnet_request_parse_header</strong>(856 bytes, Stack size 52 btyes, Obj/src_wn_request.o(.text.webnet_request_parse_header))<br>
<br>[Stack]<ul><li>Max Depth = 376 
<li>Call Chain = webnet_request_parse_header &rArr; rt_strdup &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_begin_with
<li><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<li><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<li><a href="#[cd5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_session_handle
</ul>
<p><strong><a name="[8c0]"></a>webnet_request_parse_post</strong>(108 bytes, Stack size 20 btyes, Obj/src_wn_request.o(.text.webnet_request_parse_post))<br>
<br>[Stack]<ul><li>Max Depth = 364 
<li>Call Chain = webnet_request_parse_post &rArr; _webnet_request_parse_query &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_begin_with
<li><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_request_parse_query
</ul>
<br>[Called By]<ul>
<li><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_session_handle
</ul>
<p><strong><a name="[8c1]"></a>webnet_request_parse</strong>(1196 bytes, Stack size 0 btyes, Obj/src_wn_request.o(.text.webnet_request_parse))<br>
<p><strong><a name="[8c2]"></a>webnet_request_create</strong>(30 bytes, Stack size 8 btyes, Obj/src_wn_request.o(.text.webnet_request_create))<br>
<br>[Stack]<ul><li>Max Depth = 316 
<li>Call Chain = webnet_request_create &rArr; rt_malloc &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</ul>
<br>[Called By]<ul>
<li><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_sessions_handle_fds
</ul>
<p><strong><a name="[8c3]"></a>webnet_request_destory</strong>(156 bytes, Stack size 8 btyes, Obj/src_wn_request.o(.text.webnet_request_destory))<br>
<br>[Stack]<ul><li>Max Depth = 292 
<li>Call Chain = webnet_request_destory &rArr; rt_free &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<br>[Called By]<ul>
<li><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_close
<li><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_sessions_handle_fds
</ul>
<p><strong><a name="[8c6]"></a>webnet_session_create</strong>(148 bytes, Stack size 16 btyes, Obj/src_wn_session.o(.text.webnet_session_create))<br>
<br>[Stack]<ul><li>Max Depth = 4824 
<li>Call Chain = webnet_session_create &rArr; tls_srv_session_config &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_create
<li><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_init
<li><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_config
<li><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_close
<li><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_destroy
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<br>[Called By]<ul>
<li><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_thread
</ul>
<p><strong><a name="[8c7]"></a>webnet_session_read</strong>(30 bytes, Stack size 8 btyes, Obj/src_wn_session.o(.text.webnet_session_read))<br>
<br>[Stack]<ul><li>Max Depth = 4924 
<li>Call Chain = webnet_session_read &rArr; tls_srv_session_read &rArr; mbedtls_ssl_read  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_read
</ul>
<br>[Called By]<ul>
<li><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_module_upload_handle.part.2
</ul>
<p><strong><a name="[8c8]"></a>webnet_session_close</strong>(104 bytes, Stack size 8 btyes, Obj/src_wn_session.o(.text.webnet_session_close))<br>
<br>[Stack]<ul><li>Max Depth = 1508 
<li>Call Chain = webnet_session_close &rArr; tls_srv_session_close &rArr; mbedtls_ssl_close_notify  &rArr; mbedtls_ssl_send_alert_message  &rArr; mbedtls_ssl_write_record  &rArr; mbedtls_ssl_flush_output  &rArr; mbedtls_debug_print_msg  &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_close
<li><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_destroy
<li><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_request_destory
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<br>[Called By]<ul>
<li><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_sessions_handle_fds
<li><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_open
</ul>
<p><strong><a name="[8c9]"></a>webnet_session_printf</strong>(62 bytes, Stack size 24 btyes, Obj/src_wn_session.o(.text.webnet_session_printf))<br>
<br>[Stack]<ul><li>Max Depth = 4932 
<li>Call Chain = webnet_session_printf &rArr; tls_srv_session_write &rArr; mbedtls_ssl_write  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[c4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<li><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_write
</ul>
<br>[Called By]<ul>
<li><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_set_header_status_line
<li><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_sessions_handle_fds
<li><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_system_dofile
<li><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_asp_dofile
<li><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_dirindex
<li><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asp_var_version
<li><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_calc_handler
<li><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_done
</ul>
<p><strong><a name="[8ca]"></a>webnet_session_write</strong>(16 bytes, Stack size 8 btyes, Obj/src_wn_session.o(.text.webnet_session_write))<br>
<br>[Stack]<ul><li>Max Depth = 4916 
<li>Call Chain = webnet_session_write &rArr; tls_srv_session_write &rArr; mbedtls_ssl_write  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_write
</ul>
<br>[Called By]<ul>
<li><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_dofile_handle
<li><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_asp_dofile
<li><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_ssi_sendfile
<li><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_ssi_dofile
<li><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_calc_handler
<li><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_hello_handler
</ul>
<p><strong><a name="[8cb]"></a>webnet_session_redirect</strong>(66 bytes, Stack size 0 btyes, Obj/src_wn_session.o(.text.webnet_session_redirect))<br>
<p><strong><a name="[8cc]"></a>webnet_session_get_physical_path</strong>(68 bytes, Stack size 16 btyes, Obj/src_wn_session.o(.text.webnet_session_get_physical_path))<br>
<br>[Stack]<ul><li>Max Depth = 172 
<li>Call Chain = webnet_session_get_physical_path &rArr; rt_snprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_get_root
<li><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_normalize_path
<li><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_begin_with
</ul>
<br>[Called By]<ul>
<li><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_ssi_dofile
</ul>
<p><strong><a name="[8cd]"></a>webnet_session_set_header_status_line</strong>(56 bytes, Stack size 28 btyes, Obj/src_wn_session.o(.text.webnet_session_set_header_status_line))<br>
<br>[Stack]<ul><li>Max Depth = 4960 
<li>Call Chain = webnet_session_set_header_status_line &rArr; webnet_session_printf &rArr; tls_srv_session_write  &rArr; mbedtls_ssl_write  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_printf
</ul>
<br>[Called By]<ul>
<li><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_system_dofile
</ul>
<p><strong><a name="[8ce]"></a>webnet_session_set_header</strong>(160 bytes, Stack size 44 btyes, Obj/src_wn_session.o(.text.webnet_session_set_header))<br>
<br>[Stack]<ul><li>Max Depth = 5108 
<li>Call Chain = webnet_session_set_header &rArr; webnet_module_handle_event &rArr; _webnet_module_system_uri_physical  &rArr; webnet_module_upload  &rArr; webnet_module_upload_open.part.3  &rArr; _webnet_module_upload_handle.part.2  &rArr; webnet_session_read  &rArr; tls_srv_session_read  &rArr; mbedtls_ssl_read  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_handle_event
<li><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_write
</ul>
<br>[Called By]<ul>
<li><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_sessions_handle_fds
<li><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_asp_dofile
<li><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_dirindex
<li><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_ssi_dofile
<li><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_calc_handler
<li><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_hello_handler
<li><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_done
</ul>
<p><strong><a name="[8cf]"></a>webnet_sessions_set_fds</strong>(88 bytes, Stack size 12 btyes, Obj/src_wn_session.o(.text.webnet_sessions_set_fds))<br>
<br>[Called By]<ul>
<li><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_thread
</ul>
<p><strong><a name="[8d0]"></a>webnet_sessions_set_err_callback</strong>(6 bytes, Stack size 0 btyes, Obj/src_wn_session.o(.text.webnet_sessions_set_err_callback))<br>
<p><strong><a name="[8d1]"></a>webnet_sessions_handle_fds</strong>(460 bytes, Stack size 60 btyes, Obj/src_wn_session.o(.text.webnet_sessions_handle_fds))<br>
<br>[Stack]<ul><li>Max Depth = 5344 
<li>Call Chain = webnet_sessions_handle_fds &rArr; _webnet_session_handle &rArr; webnet_module_handle_uri  &rArr; _webnet_module_system_uri_post  &rArr; webnet_module_dirindex  &rArr; webnet_session_set_header  &rArr; webnet_module_handle_event  &rArr; _webnet_module_system_uri_physical  &rArr; webnet_module_upload  &rArr; webnet_module_upload_open.part.3  &rArr; _webnet_module_upload_handle.part.2  &rArr; webnet_session_read  &rArr; tls_srv_session_read  &rArr; mbedtls_ssl_read  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_close
<li><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_request_destory
<li><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_request_create
<li><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_session_handle
<li><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_set_header
<li><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_printf
</ul>
<br>[Called By]<ul>
<li><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_thread
</ul>
<p><strong><a name="[8d2]"></a>str_path_with</strong>(58 bytes, Stack size 16 btyes, Obj/src_wn_utils.o(.text.str_path_with))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = str_path_with &rArr; strncasecmp </ul>
<br>[Calls]<ul>
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</ul>
<br>[Called By]<ul>
<li><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_auth
<li><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_alias
</ul>
<p><strong><a name="[8d3]"></a>str_begin_with</strong>(28 bytes, Stack size 12 btyes, Obj/src_wn_utils.o(.text.str_begin_with))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = str_begin_with &rArr; strncasecmp </ul>
<br>[Calls]<ul>
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</ul>
<br>[Called By]<ul>
<li><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_request_parse_method
<li><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_request_parse_header
<li><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_request_parse_post
<li><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_get_physical_path
<li><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_handle_uri
<li><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_asp_dofile
<li><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_module_upload_handle.part.2
<li><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_upload_open.part.3
</ul>
<p><strong><a name="[8d4]"></a>str_end_with</strong>(46 bytes, Stack size 16 btyes, Obj/src_wn_utils.o(.text.str_end_with))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = str_end_with &rArr; strncasecmp </ul>
<br>[Calls]<ul>
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</ul>
<br>[Called By]<ul>
<li><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mime_get_type
</ul>
<p><strong><a name="[8d5]"></a>str_decode_path</strong>(220 bytes, Stack size 0 btyes, Obj/src_wn_utils.o(.text.str_decode_path))<br>
<p><strong><a name="[8d6]"></a>str_base64_encode</strong>(234 bytes, Stack size 12 btyes, Obj/src_wn_utils.o(.text.str_base64_encode))<br>
<br>[Stack]<ul><li>Max Depth = 320 
<li>Call Chain = str_base64_encode &rArr; rt_malloc &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</ul>
<br>[Called By]<ul>
<li><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_auth_set
</ul>
<p><strong><a name="[8d7]"></a>str_normalize_path</strong>(270 bytes, Stack size 4 btyes, Obj/src_wn_utils.o(.text.str_normalize_path))<br>
<br>[Called By]<ul>
<li><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_get_physical_path
<li><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_handle_uri
<li><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_dirindex
</ul>
<p><strong><a name="[8d8]"></a>urlencode</strong>(184 bytes, Stack size 0 btyes, Obj/src_wn_utils.o(.text.urlencode))<br>
<p><strong><a name="[8d9]"></a>urldecode</strong>(208 bytes, Stack size 40 btyes, Obj/src_wn_utils.o(.text.urldecode))<br>
<br>[Calls]<ul>
<li><a href="#[cc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isxdigit
<li><a href="#[cc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isupper
<li><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</ul>
<br>[Called By]<ul>
<li><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_request_parse_query
</ul>
<p><strong><a name="[8dc]"></a>webnet_module_system_dofile</strong>(412 bytes, Stack size 44 btyes, Obj/src_wn_module.o(.text.webnet_module_system_dofile))<br>
<br>[Stack]<ul><li>Max Depth = 5004 
<li>Call Chain = webnet_module_system_dofile &rArr; webnet_session_set_header_status_line &rArr; webnet_session_printf  &rArr; tls_srv_session_write  &rArr; mbedtls_ssl_write  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mime_get_type
<li><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<li><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<li><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<li><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<li><a href="#[cd5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<li><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<li><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_set_header_status_line
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_printf
</ul>
<br>[Called By]<ul>
<li><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_module_system_uri_post
</ul>
<p><strong><a name="[8de]"></a>webnet_module_handle_event</strong>(66 bytes, Stack size 4 btyes, Obj/src_wn_module.o(.text.webnet_module_handle_event))<br>
<br>[Stack]<ul><li>Max Depth = 5064 
<li>Call Chain = webnet_module_handle_event &rArr; _webnet_module_system_uri_physical &rArr; webnet_module_upload  &rArr; webnet_module_upload_open.part.3  &rArr; _webnet_module_upload_handle.part.2  &rArr; webnet_session_read  &rArr; tls_srv_session_read  &rArr; mbedtls_ssl_read  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_module_system_uri_post
<li><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_module_system_uri_physical
<li><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_cgi
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_thread
<li><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_set_header
</ul>
<p><strong><a name="[8df]"></a>webnet_module_handle_uri</strong>(258 bytes, Stack size 40 btyes, Obj/src_wn_module.o(.text.webnet_module_handle_uri))<br>
<br>[Stack]<ul><li>Max Depth = 5268 
<li>Call Chain = webnet_module_handle_uri &rArr; _webnet_module_system_uri_post &rArr; webnet_module_dirindex  &rArr; webnet_session_set_header  &rArr; webnet_module_handle_event  &rArr; _webnet_module_system_uri_physical  &rArr; webnet_module_upload  &rArr; webnet_module_upload_open.part.3  &rArr; _webnet_module_upload_handle.part.2  &rArr; webnet_session_read  &rArr; tls_srv_session_read  &rArr; mbedtls_ssl_read  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_module_system_uri_physical
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_get_root
<li><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_normalize_path
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_begin_with
<li><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_module_system_uri_post
<li><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<li><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_session_handle
</ul>
<p><strong><a name="[8e1]"></a>webnet_asp_add_var</strong>(114 bytes, Stack size 24 btyes, Obj/module_wn_module_asp.o(.text.webnet_asp_add_var))<br>
<br>[Stack]<ul><li>Max Depth = 352 
<li>Call Chain = webnet_asp_add_var &rArr; rt_realloc &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<li><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_test
</ul>
<p><strong><a name="[8e2]"></a>webnet_module_asp</strong>(196 bytes, Stack size 20 btyes, Obj/module_wn_module_asp.o(.text.webnet_module_asp))<br>
<br>[Stack]<ul><li>Max Depth = 5188 
<li>Call Chain = webnet_module_asp &rArr; _webnet_asp_dofile &rArr; webnet_session_set_header  &rArr; webnet_module_handle_event  &rArr; _webnet_module_system_uri_physical  &rArr; webnet_module_upload  &rArr; webnet_module_upload_open.part.3  &rArr; _webnet_module_upload_handle.part.2  &rArr; webnet_session_read  &rArr; tls_srv_session_read  &rArr; mbedtls_ssl_read  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<li><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<li><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_asp_dofile
<li><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_module_system_uri_post
</ul>
<p><strong><a name="[8e3]"></a>webnet_auth_set</strong>(210 bytes, Stack size 40 btyes, Obj/module_wn_module_auth.o(.text.webnet_auth_set))<br>
<br>[Stack]<ul><li>Max Depth = 368 
<li>Call Chain = webnet_auth_set &rArr; rt_realloc &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_base64_encode
<li><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<li><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_test
</ul>
<p><strong><a name="[8e4]"></a>webnet_module_auth</strong>(156 bytes, Stack size 24 btyes, Obj/module_wn_module_auth.o(.text.webnet_module_auth))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = webnet_module_auth &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_path_with
<li><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<li><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_module_system_uri_physical
</ul>
<p><strong><a name="[8e5]"></a>webnet_cgi_set_root</strong>(74 bytes, Stack size 0 btyes, Obj/module_wn_module_cgi.o(.text.webnet_cgi_set_root))<br>
<p><strong><a name="[8e6]"></a>webnet_cgi_register</strong>(82 bytes, Stack size 20 btyes, Obj/module_wn_module_cgi.o(.text.webnet_cgi_register))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = webnet_cgi_register &rArr; rt_realloc &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_test
</ul>
<p><strong><a name="[8e7]"></a>webnet_module_cgi</strong>(180 bytes, Stack size 36 btyes, Obj/module_wn_module_cgi.o(.text.webnet_module_cgi))<br>
<br>[Stack]<ul><li>Max Depth = 220 
<li>Call Chain = webnet_module_cgi &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_module_system_uri_physical
<li><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_handle_event
</ul>
<p><strong><a name="[8e8]"></a>webnet_module_dirindex</strong>(296 bytes, Stack size 108 btyes, Obj/module_wn_module_index.o(.text.webnet_module_dirindex))<br>
<br>[Stack]<ul><li>Max Depth = 5216 
<li>Call Chain = webnet_module_dirindex &rArr; webnet_session_set_header &rArr; webnet_module_handle_event  &rArr; _webnet_module_system_uri_physical  &rArr; webnet_module_upload  &rArr; webnet_module_upload_open.part.3  &rArr; _webnet_module_upload_handle.part.2  &rArr; webnet_session_read  &rArr; tls_srv_session_read  &rArr; mbedtls_ssl_read  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_set_header
<li><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_get_root
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<li><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_printf
<li><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<li><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<li><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_normalize_path
<li><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<li><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<br>[Called By]<ul>
<li><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_module_system_uri_post
</ul>
<p><strong><a name="[8e9]"></a>webnet_alias_set</strong>(170 bytes, Stack size 24 btyes, Obj/module_wn_module_alias.o(.text.webnet_alias_set))<br>
<br>[Stack]<ul><li>Max Depth = 352 
<li>Call Chain = webnet_alias_set &rArr; rt_realloc &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<li><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</ul>
<br>[Called By]<ul>
<li><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_test
</ul>
<p><strong><a name="[8ea]"></a>webnet_module_alias</strong>(168 bytes, Stack size 28 btyes, Obj/module_wn_module_alias.o(.text.webnet_module_alias))<br>
<br>[Stack]<ul><li>Max Depth = 336 
<li>Call Chain = webnet_module_alias &rArr; rt_malloc &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_path_with
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_module_system_uri_physical
</ul>
<p><strong><a name="[8f4]"></a>webnet_module_upload_open</strong>(20 bytes, Stack size 0 btyes, Obj/module_wn_module_upload.o(.text.webnet_module_upload_open))<br>
<p><strong><a name="[8f5]"></a>webnet_module_upload</strong>(24 bytes, Stack size 4 btyes, Obj/module_wn_module_upload.o(.text.webnet_module_upload))<br>
<br>[Stack]<ul><li>Max Depth = 5048 
<li>Call Chain = webnet_module_upload &rArr; webnet_module_upload_open.part.3 &rArr; _webnet_module_upload_handle.part.2  &rArr; webnet_session_read  &rArr; tls_srv_session_read  &rArr; mbedtls_ssl_read  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_upload_open.part.3
</ul>
<br>[Called By]<ul>
<li><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_module_system_uri_physical
</ul>
<p><strong><a name="[8f6]"></a>webnet_upload_add</strong>(92 bytes, Stack size 16 btyes, Obj/module_wn_module_upload.o(.text.webnet_upload_add))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = webnet_upload_add &rArr; rt_realloc &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_test
</ul>
<p><strong><a name="[8f7]"></a>webnet_upload_get_filename</strong>(12 bytes, Stack size 0 btyes, Obj/module_wn_module_upload.o(.text.webnet_upload_get_filename))<br>
<br>[Called By]<ul>
<li><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_name
<li><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_open
</ul>
<p><strong><a name="[8f8]"></a>webnet_upload_get_content_type</strong>(12 bytes, Stack size 0 btyes, Obj/module_wn_module_upload.o(.text.webnet_upload_get_content_type))<br>
<br>[Called By]<ul>
<li><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_open
</ul>
<p><strong><a name="[8f9]"></a>webnet_upload_get_nameentry</strong>(56 bytes, Stack size 0 btyes, Obj/module_wn_module_upload.o(.text.webnet_upload_get_nameentry))<br>
<p><strong><a name="[8fa]"></a>webnet_upload_get_userdata</strong>(12 bytes, Stack size 0 btyes, Obj/module_wn_module_upload.o(.text.webnet_upload_get_userdata))<br>
<br>[Called By]<ul>
<li><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_write
<li><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_close
</ul>
<p><strong><a name="[8fb]"></a>webnet_upload_file_open</strong>(30 bytes, Stack size 0 btyes, Obj/module_wn_module_upload.o(.text.webnet_upload_file_open))<br>
<p><strong><a name="[8fc]"></a>webnet_upload_file_close</strong>(24 bytes, Stack size 0 btyes, Obj/module_wn_module_upload.o(.text.webnet_upload_file_close))<br>
<p><strong><a name="[8fd]"></a>webnet_upload_file_write</strong>(22 bytes, Stack size 0 btyes, Obj/module_wn_module_upload.o(.text.webnet_upload_file_write))<br>
<p><strong><a name="[900]"></a>webnet_module_ssi</strong>(188 bytes, Stack size 24 btyes, Obj/module_wn_module_ssi.o(.text.webnet_module_ssi))<br>
<br>[Stack]<ul><li>Max Depth = 5184 
<li>Call Chain = webnet_module_ssi &rArr; _webnet_ssi_dofile &rArr; webnet_session_set_header  &rArr; webnet_module_handle_event  &rArr; _webnet_module_system_uri_physical  &rArr; webnet_module_upload  &rArr; webnet_module_upload_open.part.3  &rArr; _webnet_module_upload_handle.part.2  &rArr; webnet_session_read  &rArr; tls_srv_session_read  &rArr; mbedtls_ssl_read  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<li><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_ssi_dofile
<li><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_module_system_uri_post
</ul>
<p><strong><a name="[901]"></a>webnet_test</strong>(126 bytes, Stack size 8 btyes, Obj/samples_wn_sample.o(.text.webnet_test))<br>
<br>[Stack]<ul><li>Max Depth = 492 
<li>Call Chain = webnet_test &rArr; dfs_mount &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_cgi_register
<li><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_asp_add_var
<li><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_alias_set
<li><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_auth_set
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_create
<li><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_upload_add
<li><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_init
</ul>
<p><strong><a name="[908]"></a>get_file_name</strong>(50 bytes, Stack size 8 btyes, Obj/samples_wn_sample_upload.o(.text.get_file_name))<br>
<br>[Stack]<ul><li>Max Depth = 180 
<li>Call Chain = get_file_name &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_upload_get_filename
<li><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_open
</ul>
<p><strong><a name="[90b]"></a>dma_hw_init</strong>(246 bytes, Stack size 0 btyes, bsp_dma.o(.text.dma_hw_init))<br>
<p><strong><a name="[90c]"></a>dma_intr_enable</strong>(8 bytes, Stack size 4 btyes, bsp_dma.o(.text.dma_intr_enable))<br>
<br>[Calls]<ul>
<li><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_intr_enable
</ul>
<br>[Called By]<ul>
<li><a href="#[b1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_hw_init
</ul>
<p><strong><a name="[90d]"></a>dma_intr_disable</strong>(68 bytes, Stack size 0 btyes, bsp_dma.o(.text.dma_intr_disable))<br>
<p><strong><a name="[90e]"></a>dma_abort</strong>(124 bytes, Stack size 0 btyes, bsp_dma.o(.text.dma_abort))<br>
<p><strong><a name="[910]"></a>dma_channel_intr_status_get</strong>(22 bytes, Stack size 4 btyes, bsp_dma.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_intr_enable
</ul>
<p><strong><a name="[911]"></a>dma_intr_status</strong>(24 bytes, Stack size 4 btyes, bsp_dma.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_intr_enable
</ul>
<br>[Called By]<ul>
<li><a href="#[b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_hw_internal
</ul>
<p><strong><a name="[912]"></a>dma_intr_clear</strong>(38 bytes, Stack size 0 btyes, bsp_dma.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_hw_internal
</ul>
<p><strong><a name="[913]"></a>dma_start</strong>(138 bytes, Stack size 4 btyes, bsp_dma.o(.fast))<br>
<p><strong><a name="[914]"></a>dma_is_busy</strong>(32 bytes, Stack size 0 btyes, bsp_dma.o(.fast))<br>
<p><strong><a name="[916]"></a>gpio_intr_enable</strong>(28 bytes, Stack size 0 btyes, bsp_gpio.o(.text.gpio_intr_enable))<br>
<br>[Called By]<ul>
<li><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_irq_enable
<li><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_attach_irq
</ul>
<p><strong><a name="[917]"></a>gpio_intr_disable</strong>(30 bytes, Stack size 0 btyes, bsp_gpio.o(.text.gpio_intr_disable))<br>
<br>[Called By]<ul>
<li><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_detach_irq
</ul>
<p><strong><a name="[918]"></a>gpio_status_get</strong>(8 bytes, Stack size 0 btyes, bsp_gpio.o(.fast))<br>
<p><strong><a name="[919]"></a>gpio_intr_clear</strong>(8 bytes, Stack size 0 btyes, bsp_gpio.o(.text.gpio_intr_clear))<br>
<p><strong><a name="[91a]"></a>gpio_pull_mode_set</strong>(14 bytes, Stack size 0 btyes, bsp_gpio.o(.text.gpio_pull_mode_set))<br>
<p><strong><a name="[91b]"></a>gpio_hw_init</strong>(350 bytes, Stack size 12 btyes, bsp_gpio.o(.text.gpio_hw_init))<br>
<br>[Calls]<ul>
<li><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pull_mode_set.part.0
</ul>
<br>[Called By]<ul>
<li><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_mode
<li><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_attach_irq
</ul>
<p><strong><a name="[91c]"></a>gpio_set</strong>(60 bytes, Stack size 4 btyes, bsp_gpio.o(.text.gpio_set))<br>
<br>[Calls]<ul>
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</ul>
<br>[Called By]<ul>
<li><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_write
</ul>
<p><strong><a name="[91d]"></a>gpio_get</strong>(62 bytes, Stack size 4 btyes, bsp_gpio.o(.text.gpio_get))<br>
<br>[Calls]<ul>
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</ul>
<br>[Called By]<ul>
<li><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_read
</ul>
<p><strong><a name="[91e]"></a>gpio_intr_status</strong>(8 bytes, Stack size 0 btyes, bsp_gpio.o(.fast))<br>
<p><strong><a name="[91f]"></a>h2x_hw_init</strong>(80 bytes, Stack size 0 btyes, bsp_h2x.o(.text.h2x_hw_init))<br>
<br>[Called By]<ul>
<li><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_init
<li><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init_private
</ul>
<p><strong><a name="[920]"></a>h2x_read_queue_set</strong>(80 bytes, Stack size 844 btyes, bsp_h2x.o(.text.h2x_read_queue_set))<br>
<p><strong><a name="[921]"></a>h2x_write_queue_set</strong>(80 bytes, Stack size 0 btyes, bsp_h2x.o(.text.h2x_write_queue_set))<br>
<p><strong><a name="[922]"></a>i2c_intr_enable</strong>(62 bytes, Stack size 0 btyes, bsp_i2c.o(.text.i2c_intr_enable))<br>
<p><strong><a name="[923]"></a>i2c_intr_disable</strong>(62 bytes, Stack size 0 btyes, bsp_i2c.o(.text.i2c_intr_disable))<br>
<p><strong><a name="[924]"></a>i2c_status_get</strong>(8 bytes, Stack size 0 btyes, bsp_i2c.o(.fast))<br>
<p><strong><a name="[925]"></a>i2c_intr_clear</strong>(62 bytes, Stack size 0 btyes, bsp_i2c.o(.text.i2c_intr_clear))<br>
<p><strong><a name="[926]"></a>i2c_recv</strong>(128 bytes, Stack size 8 btyes, bsp_i2c.o(.text.i2c_recv))<br>
<br>[Called By]<ul>
<li><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_i2c_xfer
</ul>
<p><strong><a name="[927]"></a>i2c_send</strong>(102 bytes, Stack size 0 btyes, bsp_i2c.o(.text.i2c_send))<br>
<br>[Called By]<ul>
<li><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_i2c_xfer
</ul>
<p><strong><a name="[928]"></a>i2c_is_busy</strong>(12 bytes, Stack size 0 btyes, bsp_i2c.o(.text.i2c_is_busy))<br>
<br>[Called By]<ul>
<li><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_i2c_xfer
</ul>
<p><strong><a name="[929]"></a>i2c_hw_init</strong>(62 bytes, Stack size 12 btyes, bsp_i2c.o(.text.i2c_hw_init))<br>
<br>[Calls]<ul>
<li><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_get
</ul>
<br>[Called By]<ul>
<li><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_i2c_init
</ul>
<p><strong><a name="[92a]"></a>i2c_scl_val_set</strong>(16 bytes, Stack size 0 btyes, bsp_i2c.o(.text.i2c_scl_val_set))<br>
<p><strong><a name="[92b]"></a>i2c_sda_val_set</strong>(16 bytes, Stack size 0 btyes, bsp_i2c.o(.text.i2c_sda_val_set))<br>
<p><strong><a name="[92c]"></a>i2c_intr_status</strong>(48 bytes, Stack size 0 btyes, bsp_i2c.o(.fast))<br>
<p><strong><a name="[92e]"></a>scu_tdc_temp_get</strong>(34 bytes, Stack size 0 btyes, bsp_scu.o(.text.scu_tdc_temp_get))<br>
<p><strong><a name="[92f]"></a>scu_ice_enable</strong>(14 bytes, Stack size 0 btyes, bsp_scu.o(.text.scu_ice_enable))<br>
<p><strong><a name="[930]"></a>scu_ice_disable</strong>(14 bytes, Stack size 0 btyes, bsp_scu.o(.text.scu_ice_disable))<br>
<p><strong><a name="[931]"></a>scu_pin_mux_set</strong>(20 bytes, Stack size 0 btyes, bsp_scu.o(.text.scu_pin_mux_set))<br>
<br>[Called By]<ul>
<li><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_mode
<li><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_attach_irq
<li><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp3202_init
</ul>
<p><strong><a name="[932]"></a>scu_chipid_get</strong>(14 bytes, Stack size 0 btyes, bsp_scu.o(.text.scu_chipid_get))<br>
<p><strong><a name="[933]"></a>scu_chipid_set</strong>(108 bytes, Stack size 0 btyes, bsp_scu.o(.text.scu_chipid_set))<br>
<p><strong><a name="[934]"></a>scu_reset_record_get</strong>(8 bytes, Stack size 0 btyes, bsp_scu.o(.text.scu_reset_record_get))<br>
<p><strong><a name="[936]"></a>scu_sw_cnt_get</strong>(6 bytes, Stack size 0 btyes, bsp_scu.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_us_delay
<li><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hardclock_get
<li><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cputime_gettime
</ul>
<p><strong><a name="[937]"></a>scu_sw_cnt_enable</strong>(8 bytes, Stack size 0 btyes, bsp_scu.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<li><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cputime_init
</ul>
<p><strong><a name="[938]"></a>scu_alien_enable</strong>(14 bytes, Stack size 0 btyes, bsp_scu.o(.fast))<br>
<p><strong><a name="[939]"></a>scu_alien_disable</strong>(14 bytes, Stack size 0 btyes, bsp_scu.o(.fast))<br>
<p><strong><a name="[93a]"></a>module_reset</strong>(78 bytes, Stack size 4 btyes, bsp_scu.o(.fast))<br>
<p><strong><a name="[93b]"></a>multi_module_reset</strong>(110 bytes, Stack size 4 btyes, bsp_scu.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_reset
</ul>
<p><strong><a name="[93c]"></a>module_enable</strong>(72 bytes, Stack size 0 btyes, bsp_scu.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_init
</ul>
<p><strong><a name="[93d]"></a>module_disable</strong>(64 bytes, Stack size 4 btyes, bsp_scu.o(.fast))<br>
<p><strong><a name="[93e]"></a>clock_freq_get</strong>(150 bytes, Stack size 0 btyes, bsp_scu.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_init
<li><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_configure
<li><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_hwtimer_control
<li><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_timers_init
<li><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<li><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_standby
<li><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tic_us_get
<li><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_hw_init
<li><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init
<li><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_hw_init
<li><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_reset
<li><a href="#[bae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_clk_set
<li><a href="#[c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_hw_init
<li><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cputime_getres
<li><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_hw_init
</ul>
<p><strong><a name="[93f]"></a>clock_freq_set</strong>(448 bytes, Stack size 12 btyes, bsp_scu.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_source_set.part.0
</ul>
<br>[Called By]<ul>
<li><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_init
<li><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_standby
<li><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_normal
</ul>
<p><strong><a name="[940]"></a>clock_source_set</strong>(48 bytes, Stack size 4 btyes, bsp_scu.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_source_set.part.0
</ul>
<br>[Called By]<ul>
<li><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_init
</ul>
<p><strong><a name="[941]"></a>clock_source_get</strong>(12 bytes, Stack size 0 btyes, bsp_scu.o(.fast))<br>
<p><strong><a name="[942]"></a>clock_enable</strong>(30 bytes, Stack size 0 btyes, bsp_scu.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_init
</ul>
<p><strong><a name="[943]"></a>clock_disable</strong>(36 bytes, Stack size 0 btyes, bsp_scu.o(.fast))<br>
<p><strong><a name="[944]"></a>clock_reset</strong>(150 bytes, Stack size 4 btyes, bsp_scu.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_init
</ul>
<p><strong><a name="[945]"></a>clock_standby</strong>(78 bytes, Stack size 4 btyes, bsp_scu.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = clock_standby &rArr; clock_freq_set </ul>
<br>[Calls]<ul>
<li><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_get
<li><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_set
</ul>
<p><strong><a name="[946]"></a>clock_normal</strong>(60 bytes, Stack size 4 btyes, bsp_scu.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = clock_normal &rArr; clock_freq_set </ul>
<br>[Calls]<ul>
<li><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_source_set.part.0
<li><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_set
</ul>
<p><strong><a name="[947]"></a>spi_intr_enable</strong>(62 bytes, Stack size 0 btyes, bsp_spi.o(.text.spi_intr_enable))<br>
<p><strong><a name="[948]"></a>spi_intr_disable</strong>(62 bytes, Stack size 0 btyes, bsp_spi.o(.text.spi_intr_disable))<br>
<p><strong><a name="[949]"></a>spi_status_get</strong>(8 bytes, Stack size 0 btyes, bsp_spi.o(.fast))<br>
<p><strong><a name="[94a]"></a>spi_intr_clear</strong>(62 bytes, Stack size 0 btyes, bsp_spi.o(.text.spi_intr_clear))<br>
<p><strong><a name="[94b]"></a>spi_frame_output_port_set</strong>(22 bytes, Stack size 0 btyes, bsp_spi.o(.text.spi_frame_output_port_set))<br>
<br>[Called By]<ul>
<li><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_init
</ul>
<p><strong><a name="[94c]"></a>spi_frame_output_low</strong>(44 bytes, Stack size 4 btyes, bsp_spi.o(.text.spi_frame_output_low))<br>
<br>[Called By]<ul>
<li><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_xfer
</ul>
<p><strong><a name="[94d]"></a>spi_frame_output_high</strong>(14 bytes, Stack size 0 btyes, bsp_spi.o(.text.spi_frame_output_high))<br>
<br>[Called By]<ul>
<li><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_xfer
</ul>
<p><strong><a name="[94e]"></a>spi_txfifo_not_full</strong>(12 bytes, Stack size 0 btyes, bsp_spi.o(.text.spi_txfifo_not_full))<br>
<p><strong><a name="[94f]"></a>spi_tx_start</strong>(22 bytes, Stack size 0 btyes, bsp_spi.o(.text.spi_tx_start))<br>
<p><strong><a name="[950]"></a>spi_tx_stop</strong>(18 bytes, Stack size 0 btyes, bsp_spi.o(.text.spi_tx_stop))<br>
<p><strong><a name="[951]"></a>spi_tx_rx_start</strong>(30 bytes, Stack size 0 btyes, bsp_spi.o(.text.spi_tx_rx_start))<br>
<p><strong><a name="[952]"></a>spi_tx_rx_stop</strong>(14 bytes, Stack size 0 btyes, bsp_spi.o(.text.spi_tx_rx_stop))<br>
<p><strong><a name="[953]"></a>spi_wait_txfifo_empty</strong>(42 bytes, Stack size 0 btyes, bsp_spi.o(.text.spi_wait_txfifo_empty))<br>
<p><strong><a name="[954]"></a>spi_is_busy</strong>(12 bytes, Stack size 0 btyes, bsp_spi.o(.text.spi_is_busy))<br>
<p><strong><a name="[955]"></a>spi_rx_fifo_read</strong>(220 bytes, Stack size 0 btyes, bsp_spi.o(.text.spi_rx_fifo_read))<br>
<p><strong><a name="[956]"></a>spi_tx_fifo_write</strong>(158 bytes, Stack size 0 btyes, bsp_spi.o(.text.spi_tx_fifo_write))<br>
<p><strong><a name="[957]"></a>spi_tx_rx_fifo</strong>(244 bytes, Stack size 12 btyes, bsp_spi.o(.text.spi_tx_rx_fifo))<br>
<br>[Calls]<ul>
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</ul>
<br>[Called By]<ul>
<li><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_recv
</ul>
<p><strong><a name="[958]"></a>spi_recv</strong>(44 bytes, Stack size 0 btyes, bsp_spi.o(.text.spi_recv))<br>
<p><strong><a name="[959]"></a>spi_send</strong>(136 bytes, Stack size 0 btyes, bsp_spi.o(.text.spi_send))<br>
<p><strong><a name="[95a]"></a>spi_hw_init</strong>(196 bytes, Stack size 8 btyes, bsp_spi.o(.text.spi_hw_init))<br>
<br>[Stack]<ul><li>Max Depth = 304 
<li>Call Chain = spi_hw_init &rArr; log_error_id &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
</ul>
<br>[Called By]<ul>
<li><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_configure
</ul>
<p><strong><a name="[95b]"></a>spi_send_recv</strong>(44 bytes, Stack size 8 btyes, bsp_spi.o(.text.spi_send_recv))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = spi_send_recv &rArr; spi_tx_rx_fifo </ul>
<br>[Calls]<ul>
<li><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_rx_fifo
</ul>
<br>[Called By]<ul>
<li><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_xfer
</ul>
<p><strong><a name="[95c]"></a>spi_intr_status</strong>(48 bytes, Stack size 0 btyes, bsp_spi.o(.fast))<br>
<p><strong><a name="[95d]"></a>timer_count_get</strong>(16 bytes, Stack size 0 btyes, bsp_timer.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_hwtimer_count_get
</ul>
<p><strong><a name="[95e]"></a>timer_hw_init</strong>(172 bytes, Stack size 16 btyes, bsp_timer.o(.text.timer_hw_init))<br>
<br>[Stack]<ul><li>Max Depth = 100 
<li>Call Chain = timer_hw_init &rArr; __fixunssfsi &rArr; __subsf3  &rArr; _fpadd_parts  </ul>
<br>[Calls]<ul>
<li><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_get
<li><a href="#[cae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__floatunsisf
<li><a href="#[ca3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subsf3
<li><a href="#[ca4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mulsf3
<li><a href="#[c9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fixunssfsi
</ul>
<br>[Called By]<ul>
<li><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_hwtimer_start
<li><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_hwtimer_init
</ul>
<p><strong><a name="[95f]"></a>timer_intr_enable</strong>(26 bytes, Stack size 0 btyes, bsp_timer.o(.text.timer_intr_enable))<br>
<p><strong><a name="[960]"></a>timer_intr_disable</strong>(26 bytes, Stack size 0 btyes, bsp_timer.o(.text.timer_intr_disable))<br>
<p><strong><a name="[961]"></a>timer_is_timeout</strong>(20 bytes, Stack size 0 btyes, bsp_timer.o(.text.timer_is_timeout))<br>
<p><strong><a name="[962]"></a>timer_pm_adjust</strong>(82 bytes, Stack size 0 btyes, bsp_timer.o(.text.timer_pm_adjust))<br>
<p><strong><a name="[963]"></a>timer_pm_recover</strong>(70 bytes, Stack size 0 btyes, bsp_timer.o(.text.timer_pm_recover))<br>
<p><strong><a name="[964]"></a>tic_init</strong>(54 bytes, Stack size 0 btyes, bsp_timer.o(.text.tic_init))<br>
<p><strong><a name="[965]"></a>timer_intr_status</strong>(8 bytes, Stack size 0 btyes, bsp_timer.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_isr
</ul>
<p><strong><a name="[966]"></a>timer_intr_clear</strong>(58 bytes, Stack size 4 btyes, bsp_timer.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_isr
</ul>
<p><strong><a name="[967]"></a>timer_start</strong>(40 bytes, Stack size 0 btyes, bsp_timer.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_hwtimer_start
</ul>
<p><strong><a name="[968]"></a>timer_stop</strong>(34 bytes, Stack size 0 btyes, bsp_timer.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_hwtimer_stop
</ul>
<p><strong><a name="[969]"></a>tic_start</strong>(22 bytes, Stack size 0 btyes, bsp_timer.o(.fast))<br>
<p><strong><a name="[96a]"></a>tic_stop</strong>(34 bytes, Stack size 0 btyes, bsp_timer.o(.fast))<br>
<p><strong><a name="[96b]"></a>tic_us_get</strong>(28 bytes, Stack size 8 btyes, bsp_timer.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_get
</ul>
<br>[Called By]<ul>
<li><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_hwtimer_start
</ul>
<p><strong><a name="[96c]"></a>uart_recv</strong>(62 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_recv))<br>
<p><strong><a name="[96d]"></a>uart_tx_ready</strong>(28 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_tx_ready))<br>
<p><strong><a name="[96e]"></a>uart_ndelay_putc</strong>(18 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_ndelay_putc))<br>
<p><strong><a name="[96f]"></a>uart_rx_ready</strong>(28 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_rx_ready))<br>
<br>[Called By]<ul>
<li><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_getc
</ul>
<p><strong><a name="[970]"></a>uart_ndelay_getc</strong>(20 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_ndelay_getc))<br>
<br>[Called By]<ul>
<li><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_getc
</ul>
<p><strong><a name="[971]"></a>uart_mode_set</strong>(30 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_mode_set))<br>
<p><strong><a name="[972]"></a>uart_line_status_get</strong>(24 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_line_status_get))<br>
<p><strong><a name="[973]"></a>uart_intr_id_get</strong>(26 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_intr_id_get))<br>
<p><strong><a name="[974]"></a>uart_line_break_set</strong>(32 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_line_break_set))<br>
<p><strong><a name="[975]"></a>uart_line_break_clear</strong>(32 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_line_break_clear))<br>
<p><strong><a name="[976]"></a>uart_loopback_set</strong>(42 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_loopback_set))<br>
<p><strong><a name="[977]"></a>uart_fifo_enable</strong>(32 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_fifo_enable))<br>
<p><strong><a name="[978]"></a>uart_fifo_disable</strong>(32 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_fifo_disable))<br>
<p><strong><a name="[979]"></a>uart_fifo_init</strong>(60 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_fifo_init))<br>
<p><strong><a name="[97a]"></a>uart_hw_init</strong>(184 bytes, Stack size 28 btyes, bsp_uart.o(.text.uart_hw_init))<br>
<br>[Calls]<ul>
<li><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_get
</ul>
<br>[Called By]<ul>
<li><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_configure
<li><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</ul>
<p><strong><a name="[97b]"></a>uart_intr_enable</strong>(64 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_intr_enable))<br>
<br>[Called By]<ul>
<li><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_control
</ul>
<p><strong><a name="[97c]"></a>uart_intr_disable</strong>(64 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_intr_disable))<br>
<br>[Called By]<ul>
<li><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_control
</ul>
<p><strong><a name="[97d]"></a>uart_intr_status</strong>(108 bytes, Stack size 0 btyes, bsp_uart.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_irq_handler
<li><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_irq_handler
</ul>
<p><strong><a name="[97e]"></a>console_putc</strong>(42 bytes, Stack size 0 btyes, bsp_uart.o(.text.console_putc))<br>
<br>[Called By]<ul>
<li><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</ul>
<p><strong><a name="[97f]"></a>console_getc</strong>(20 bytes, Stack size 0 btyes, bsp_uart.o(.text.console_getc))<br>
<p><strong><a name="[980]"></a>uart_putc</strong>(50 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_putc))<br>
<br>[Called By]<ul>
<li><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_putc
</ul>
<p><strong><a name="[981]"></a>uart_getc</strong>(50 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_getc))<br>
<p><strong><a name="[982]"></a>uart_send</strong>(64 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_send))<br>
<p><strong><a name="[983]"></a>uart_intr_clear</strong>(2 bytes, Stack size 0 btyes, bsp_uart.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_irq_handler
<li><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_irq_handler
</ul>
<p><strong><a name="[984]"></a>wdt_signal_set</strong>(42 bytes, Stack size 0 btyes, bsp_wdt.o(.text.wdt_signal_set))<br>
<p><strong><a name="[985]"></a>wdt_status_clear</strong>(10 bytes, Stack size 0 btyes, bsp_wdt.o(.fast))<br>
<p><strong><a name="[986]"></a>wdt_intr_enable</strong>(14 bytes, Stack size 0 btyes, bsp_wdt.o(.text.wdt_intr_enable))<br>
<p><strong><a name="[987]"></a>wdt_intr_disable</strong>(14 bytes, Stack size 0 btyes, bsp_wdt.o(.text.wdt_intr_disable))<br>
<p><strong><a name="[988]"></a>wdt_hw_init</strong>(78 bytes, Stack size 12 btyes, bsp_wdt.o(.text.wdt_hw_init))<br>
<br>[Calls]<ul>
<li><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_get
</ul>
<br>[Called By]<ul>
<li><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_wdt_config
<li><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_wdt_control
</ul>
<p><strong><a name="[989]"></a>wdt_start</strong>(20 bytes, Stack size 0 btyes, bsp_wdt.o(.text.wdt_start))<br>
<br>[Called By]<ul>
<li><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_wdt_control
</ul>
<p><strong><a name="[98a]"></a>wdt_stop</strong>(14 bytes, Stack size 0 btyes, bsp_wdt.o(.text.wdt_stop))<br>
<br>[Called By]<ul>
<li><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_wdt_control
</ul>
<p><strong><a name="[98b]"></a>chip_reset</strong>(104 bytes, Stack size 12 btyes, bsp_wdt.o(.text.chip_reset))<br>
<br>[Calls]<ul>
<li><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_get
</ul>
<br>[Called By]<ul>
<li><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</ul>
<p><strong><a name="[98c]"></a>wdt_status_get</strong>(8 bytes, Stack size 0 btyes, bsp_wdt.o(.fast))<br>
<p><strong><a name="[98d]"></a>wdt_intr_status</strong>(8 bytes, Stack size 0 btyes, bsp_wdt.o(.fast))<br>
<p><strong><a name="[98e]"></a>wdt_intr_clear</strong>(10 bytes, Stack size 0 btyes, bsp_wdt.o(.fast))<br>
<p><strong><a name="[98f]"></a>wdt_feed</strong>(20 bytes, Stack size 0 btyes, bsp_wdt.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_wdt_control
<li><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_link_change_handler
<li><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_complete_wait
</ul>
<p><strong><a name="[990]"></a>ext_gpio_intr_enable</strong>(28 bytes, Stack size 0 btyes, bsp_ext_gpio.o(.text.ext_gpio_intr_enable))<br>
<p><strong><a name="[991]"></a>ext_gpio_intr_disable</strong>(30 bytes, Stack size 0 btyes, bsp_ext_gpio.o(.text.ext_gpio_intr_disable))<br>
<p><strong><a name="[992]"></a>ext_gpio_status_get</strong>(8 bytes, Stack size 0 btyes, bsp_ext_gpio.o(.fast))<br>
<p><strong><a name="[993]"></a>ext_gpio_intr_clear</strong>(8 bytes, Stack size 0 btyes, bsp_ext_gpio.o(.text.ext_gpio_intr_clear))<br>
<p><strong><a name="[994]"></a>ext_gpio_pull_mode_set</strong>(60 bytes, Stack size 0 btyes, bsp_ext_gpio.o(.text.ext_gpio_pull_mode_set))<br>
<p><strong><a name="[995]"></a>ext_gpio_hw_init</strong>(318 bytes, Stack size 0 btyes, bsp_ext_gpio.o(.text.ext_gpio_hw_init))<br>
<p><strong><a name="[996]"></a>ext_gpio_set</strong>(64 bytes, Stack size 0 btyes, bsp_ext_gpio.o(.text.ext_gpio_set))<br>
<p><strong><a name="[997]"></a>ext_gpio_get</strong>(60 bytes, Stack size 0 btyes, bsp_ext_gpio.o(.text.ext_gpio_get))<br>
<p><strong><a name="[998]"></a>ext_gpio_intr_status</strong>(8 bytes, Stack size 0 btyes, bsp_ext_gpio.o(.fast))<br>
<p><strong><a name="[999]"></a>aes_crypt</strong>(202 bytes, Stack size 44 btyes, crypto_aes.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 64 
<li>Call Chain = aes_crypt &rArr; crypto_dma_start &rArr; symm_param_cfg  </ul>
<br>[Calls]<ul>
<li><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_dma_start
</ul>
<br>[Called By]<ul>
<li><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_aes_crypt
</ul>
<p><strong><a name="[99a]"></a>aes_crypt_ctr</strong>(174 bytes, Stack size 52 btyes, crypto_aes.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 72 
<li>Call Chain = aes_crypt_ctr &rArr; crypto_dma_start &rArr; symm_param_cfg  </ul>
<br>[Calls]<ul>
<li><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_dma_start
</ul>
<br>[Called By]<ul>
<li><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_aes_crypt_ctr
</ul>
<p><strong><a name="[99b]"></a>aes_crypt_xts</strong>(174 bytes, Stack size 52 btyes, crypto_aes.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 72 
<li>Call Chain = aes_crypt_xts &rArr; crypto_dma_start &rArr; symm_param_cfg  </ul>
<br>[Calls]<ul>
<li><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_dma_start
</ul>
<br>[Called By]<ul>
<li><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_aes_crypt_xts
</ul>
<p><strong><a name="[99c]"></a>cmac_init</strong>(98 bytes, Stack size 4 btyes, crypto_cmac.o(.text.cmac_init))<br>
<br>[Called By]<ul>
<li><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_cmac_init
</ul>
<p><strong><a name="[99d]"></a>cmac_update</strong>(340 bytes, Stack size 72 btyes, crypto_cmac.o(.text.cmac_update))<br>
<br>[Stack]<ul><li>Max Depth = 92 
<li>Call Chain = cmac_update &rArr; crypto_dma_start &rArr; symm_param_cfg  </ul>
<br>[Calls]<ul>
<li><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_dma_start
</ul>
<br>[Called By]<ul>
<li><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_cmac_update
</ul>
<p><strong><a name="[99e]"></a>cmac_final</strong>(24 bytes, Stack size 12 btyes, crypto_cmac.o(.text.cmac_final))<br>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_cmac_final
</ul>
<p><strong><a name="[99f]"></a>ECC_Init</strong>(28 bytes, Stack size 0 btyes, crypto_eccp.o(.text.ECC_Init))<br>
<p><strong><a name="[9a0]"></a>ECC_PointMul</strong>(82 bytes, Stack size 0 btyes, crypto_eccp.o(.text.ECC_PointMul))<br>
<p><strong><a name="[9a1]"></a>ECC_PointMul_Shamir</strong>(118 bytes, Stack size 0 btyes, crypto_eccp.o(.text.ECC_PointMul_Shamir))<br>
<p><strong><a name="[9a2]"></a>ECC_PointAdd</strong>(88 bytes, Stack size 0 btyes, crypto_eccp.o(.text.ECC_PointAdd))<br>
<p><strong><a name="[9a3]"></a>ECC_PointDouble</strong>(64 bytes, Stack size 0 btyes, crypto_eccp.o(.text.ECC_PointDouble))<br>
<p><strong><a name="[9a4]"></a>ECC_TestPoint</strong>(44 bytes, Stack size 0 btyes, crypto_eccp.o(.text.ECC_TestPoint))<br>
<p><strong><a name="[9a5]"></a>ECC_Close</strong>(8 bytes, Stack size 0 btyes, crypto_eccp.o(.text.ECC_Close))<br>
<p><strong><a name="[9a7]"></a>hash_init</strong>(44 bytes, Stack size 12 btyes, crypto_hash.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_hash_reset
</ul>
<br>[Called By]<ul>
<li><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_init
<li><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_init
<li><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_init
<li><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_init
</ul>
<p><strong><a name="[9a8]"></a>hash_update</strong>(194 bytes, Stack size 28 btyes, crypto_hash.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_dma_write
</ul>
<br>[Called By]<ul>
<li><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_final
<li><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update
<li><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_update
<li><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_update
<li><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_update
</ul>
<p><strong><a name="[9a9]"></a>hash_final</strong>(266 bytes, Stack size 44 btyes, crypto_hash.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 72 
<li>Call Chain = hash_final &rArr; hash_update </ul>
<br>[Calls]<ul>
<li><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_update
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_final
<li><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_final
<li><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_final
<li><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_final
</ul>
<p><strong><a name="[9aa]"></a>hash_key</strong>(142 bytes, Stack size 0 btyes, crypto_hmac.o(.text.hash_key))<br>
<p><strong><a name="[9ab]"></a>key_xor_ipad</strong>(34 bytes, Stack size 0 btyes, crypto_hmac.o(.text.key_xor_ipad))<br>
<p><strong><a name="[9ac]"></a>key_xor_opad</strong>(34 bytes, Stack size 0 btyes, crypto_hmac.o(.text.key_xor_opad))<br>
<p><strong><a name="[9ad]"></a>hmac_init</strong>(160 bytes, Stack size 0 btyes, crypto_hmac.o(.text.hmac_init))<br>
<p><strong><a name="[9ae]"></a>hmac_update</strong>(26 bytes, Stack size 0 btyes, crypto_hmac.o(.text.hmac_update))<br>
<p><strong><a name="[9af]"></a>hmac_final</strong>(156 bytes, Stack size 0 btyes, crypto_hmac.o(.text.hmac_final))<br>
<p><strong><a name="[9b0]"></a>hmac</strong>(80 bytes, Stack size 0 btyes, crypto_hmac.o(.text.hmac))<br>
<p><strong><a name="[9b4]"></a>pke_init</strong>(3152 bytes, Stack size 44 btyes, crypto_pke.o(.text.pke_init))<br>
<br>[Called By]<ul>
<li><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_crypto_reset
</ul>
<p><strong><a name="[9b5]"></a>uint8_XOR</strong>(32 bytes, Stack size 0 btyes, crypto_pke.o(.text.uint8_XOR))<br>
<br>[Called By]<ul>
<li><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_with_k
<li><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt_osr
</ul>
<p><strong><a name="[9b6]"></a>get_valid_bits</strong>(16 bytes, Stack size 0 btyes, crypto_pke.o(.text.get_valid_bits))<br>
<p><strong><a name="[9b7]"></a>get_valid_words</strong>(48 bytes, Stack size 0 btyes, crypto_pke.o(.text.get_valid_words))<br>
<p><strong><a name="[9b8]"></a>convert_byte_array</strong>(78 bytes, Stack size 20 btyes, crypto_pke.o(.text.convert_byte_array))<br>
<br>[Called By]<ul>
<li><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_crt_keypair_gen
<li><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_encrypt
<li><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_crt_decrypt
<li><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_keypair_gen
<li><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decrypt
<li><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pq_keypair_gen
<li><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_getZ_osr
<li><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_keyget
<li><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign_osr
<li><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_verify_osr
<li><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_with_k
<li><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_osr
<li><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt_osr
<li><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_exchangekey_osr
</ul>
<p><strong><a name="[9b9]"></a>pke_load_operand</strong>(26 bytes, Stack size 0 btyes, crypto_pke.o(.text.pke_load_operand))<br>
<p><strong><a name="[9ba]"></a>pke_read_operand</strong>(26 bytes, Stack size 0 btyes, crypto_pke.o(.text.pke_read_operand))<br>
<p><strong><a name="[9bb]"></a>uint32_BigNumCmp</strong>(188 bytes, Stack size 0 btyes, crypto_pke.o(.text.uint32_BigNumCmp))<br>
<br>[Called By]<ul>
<li><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_mod
<li><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_CRTModExp
<li><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_Get_E2.part.0
<li><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GetCRTKey
<li><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_keyget
<li><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign_with_k
<li><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign_osr
<li><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_verify_osr
<li><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_with_k
<li><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt_osr
<li><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_exchangekey_osr
<li><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bn_cmp
</ul>
<p><strong><a name="[9bc]"></a>uint8_BigNum_Check_NULL</strong>(38 bytes, Stack size 0 btyes, crypto_pke.o(.text.uint8_BigNum_Check_NULL))<br>
<br>[Called By]<ul>
<li><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_with_k
<li><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt_osr
</ul>
<p><strong><a name="[9bd]"></a>uint32_BigNum_Check_NULL</strong>(34 bytes, Stack size 0 btyes, crypto_pke.o(.text.uint32_BigNum_Check_NULL))<br>
<br>[Called By]<ul>
<li><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_keyget
<li><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign_with_k
<li><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign_osr
<li><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_verify_osr
<li><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_with_k
<li><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt_osr
<li><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_exchangekey_osr
</ul>
<p><strong><a name="[9be]"></a>uint32_copy</strong>(26 bytes, Stack size 0 btyes, crypto_pke.o(.text.uint32_copy))<br>
<br>[Called By]<ul>
<li><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_CRTModExp
<li><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GetCRTKey
<li><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_pointMul_base
<li><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign_with_k
</ul>
<p><strong><a name="[9bf]"></a>uint32_clear</strong>(28 bytes, Stack size 0 btyes, crypto_pke.o(.text.uint32_clear))<br>
<br>[Called By]<ul>
<li><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_CRTModExp
<li><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_pointMul_base
<li><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_exchangekey_osr
</ul>
<p><strong><a name="[9c0]"></a>uint32_set</strong>(26 bytes, Stack size 0 btyes, crypto_pke.o(.text.uint32_set))<br>
<br>[Called By]<ul>
<li><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GetKey
<li><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GetCRTKey
<li><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_pq_GetKey
</ul>
<p><strong><a name="[9c1]"></a>pke_set_operand_width</strong>(132 bytes, Stack size 0 btyes, crypto_pke.o(.text.pke_set_operand_width))<br>
<br>[Called By]<ul>
<li><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_add
<li><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_sub
<li><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_mul
<li><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_modadd
<li><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_modsub
<li><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_pre_calc_mont_H
<li><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_load_pre_calc_mont_H
<li><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_modmul
<li><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_modexp
<li><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_modinv
<li><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bigint_div_table_high
<li><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bigint_div_table_low
<li><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_mod
<li><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prime_Test_Miller_Rabin
<li><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointMul
<li><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointMul_Shamir
<li><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointAdd
<li><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointDouble
<li><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointVerify
<li><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_CRTModExp
<li><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GetKey
<li><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_pq_GetKey
</ul>
<p><strong><a name="[9c2]"></a>pke_get_operand_bytes</strong>(6 bytes, Stack size 0 btyes, crypto_pke.o(.text.pke_get_operand_bytes))<br>
<br>[Called By]<ul>
<li><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_CRTModExp
<li><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GetKey
<li><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_pq_GetKey
</ul>
<p><strong><a name="[9c3]"></a>pke_add</strong>(316 bytes, Stack size 20 btyes, crypto_pke.o(.text.pke_add))<br>
<br>[Calls]<ul>
<li><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_set_operand_width
</ul>
<br>[Called By]<ul>
<li><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_CRTModExp
<li><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bn_add
</ul>
<p><strong><a name="[9c4]"></a>pke_sub</strong>(280 bytes, Stack size 20 btyes, crypto_pke.o(.text.pke_sub))<br>
<br>[Calls]<ul>
<li><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_set_operand_width
</ul>
<br>[Called By]<ul>
<li><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_mod
<li><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_CRTModExp
<li><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign_with_k
<li><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign_osr
<li><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_verify_osr
<li><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bn_sub
</ul>
<p><strong><a name="[9c5]"></a>pke_mul</strong>(356 bytes, Stack size 24 btyes, crypto_pke.o(.text.pke_mul))<br>
<br>[Calls]<ul>
<li><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_valid_bits.part.1
<li><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_set_operand_width
</ul>
<br>[Called By]<ul>
<li><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_CRTModExp
<li><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GetKey
<li><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GetCRTKey
<li><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_pq_GetKey
<li><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bn_mul
</ul>
<p><strong><a name="[9c6]"></a>pke_modadd</strong>(388 bytes, Stack size 24 btyes, crypto_pke.o(.text.pke_modadd))<br>
<br>[Calls]<ul>
<li><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_set_operand_width
</ul>
<br>[Called By]<ul>
<li><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_mod
<li><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign_with_k
<li><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_verify_osr
<li><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_exchangekey_osr
<li><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bn_modadd
</ul>
<p><strong><a name="[9c7]"></a>pke_modsub</strong>(388 bytes, Stack size 24 btyes, crypto_pke.o(.text.pke_modsub))<br>
<br>[Calls]<ul>
<li><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_set_operand_width
</ul>
<br>[Called By]<ul>
<li><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_CRTModExp
<li><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign_with_k
<li><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bn_modsub
</ul>
<p><strong><a name="[9c8]"></a>pke_pre_calc_mont_N0</strong>(54 bytes, Stack size 0 btyes, crypto_pke.o(.text.pke_pre_calc_mont_N0))<br>
<br>[Called By]<ul>
<li><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_pre_calc_mont_H
<li><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_modmul
<li><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_modexp
<li><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointMul
<li><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointMul_Shamir
<li><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointAdd
<li><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointDouble
<li><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointVerify
</ul>
<p><strong><a name="[9c9]"></a>pke_pre_calc_mont_H</strong>(302 bytes, Stack size 16 btyes, crypto_pke.o(.text.pke_pre_calc_mont_H))<br>
<br>[Calls]<ul>
<li><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_set_operand_width
<li><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_pre_calc_mont_N0
<li><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_valid_bits.part.1
</ul>
<br>[Called By]<ul>
<li><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_pre_calc_mont_H_without_output
<li><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_mod
<li><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prime_Test_Miller_Rabin
<li><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointMul
<li><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointMul_Shamir
<li><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointAdd
<li><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointDouble
<li><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointVerify
<li><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bn_modmul
<li><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bn_modexp
</ul>
<p><strong><a name="[9ca]"></a>pke_pre_calc_mont_H_without_output</strong>(14 bytes, Stack size 4 btyes, crypto_pke.o(.text.pke_pre_calc_mont_H_without_output))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = pke_pre_calc_mont_H_without_output &rArr; pke_pre_calc_mont_H </ul>
<br>[Calls]<ul>
<li><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_pre_calc_mont_H
</ul>
<br>[Called By]<ul>
<li><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_ModExp
<li><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GetKey
<li><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GetCRTKey
<li><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_pq_GetKey
</ul>
<p><strong><a name="[9cb]"></a>pke_load_pre_calc_mont_H</strong>(104 bytes, Stack size 12 btyes, crypto_pke.o(.text.pke_load_pre_calc_mont_H))<br>
<br>[Calls]<ul>
<li><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_set_operand_width
</ul>
<br>[Called By]<ul>
<li><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_mod
<li><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_ModExp
<li><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign_with_k
<li><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_exchangekey_osr
<li><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bn_modmul
<li><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bn_modexp
</ul>
<p><strong><a name="[9cc]"></a>pke_modmul</strong>(388 bytes, Stack size 24 btyes, crypto_pke.o(.text.pke_modmul))<br>
<br>[Calls]<ul>
<li><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_set_operand_width
<li><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_pre_calc_mont_N0
</ul>
<br>[Called By]<ul>
<li><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_mod
<li><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_CRTModExp
<li><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign_with_k
<li><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_exchangekey_osr
<li><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bn_modmul
</ul>
<p><strong><a name="[9cd]"></a>pke_modexp</strong>(400 bytes, Stack size 32 btyes, crypto_pke.o(.text.pke_modexp))<br>
<br>[Calls]<ul>
<li><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_set_operand_width
<li><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_pre_calc_mont_N0
</ul>
<br>[Called By]<ul>
<li><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prime_Test_Miller_Rabin
<li><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_ModExp
<li><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_CRTModExp
<li><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GetKey
<li><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GetCRTKey
<li><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_pq_GetKey
<li><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bn_modexp
</ul>
<p><strong><a name="[9ce]"></a>pke_modinv</strong>(272 bytes, Stack size 24 btyes, crypto_pke.o(.text.pke_modinv))<br>
<br>[Calls]<ul>
<li><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_set_operand_width
</ul>
<br>[Called By]<ul>
<li><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GetKey
<li><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GetCRTKey
<li><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_pq_GetKey
<li><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign_with_k
<li><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bn_modinv
</ul>
<p><strong><a name="[9cf]"></a>Bigint_div_table_high</strong>(272 bytes, Stack size 28 btyes, crypto_pke.o(.text.Bigint_div_table_high))<br>
<br>[Calls]<ul>
<li><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_set_operand_width
</ul>
<br>[Called By]<ul>
<li><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPrime
</ul>
<p><strong><a name="[9d0]"></a>Bigint_div_table_low</strong>(262 bytes, Stack size 36 btyes, crypto_pke.o(.text.Bigint_div_table_low))<br>
<br>[Calls]<ul>
<li><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_set_operand_width
</ul>
<br>[Called By]<ul>
<li><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPrime
</ul>
<p><strong><a name="[9d1]"></a>Get_Multiple2_Number</strong>(56 bytes, Stack size 0 btyes, crypto_pke.o(.text.Get_Multiple2_Number))<br>
<p><strong><a name="[9d2]"></a>Big_Div2n</strong>(230 bytes, Stack size 16 btyes, crypto_pke.o(.text.Big_Div2n))<br>
<br>[Called By]<ul>
<li><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_mod
<li><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prime_Test_Miller_Rabin
</ul>
<p><strong><a name="[9d3]"></a>pke_mod</strong>(856 bytes, Stack size 48 btyes, crypto_pke.o(.text.pke_mod))<br>
<br>[Stack]<ul><li>Max Depth = 72 
<li>Call Chain = pke_mod &rArr; pke_modmul </ul>
<br>[Calls]<ul>
<li><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_BigNumCmp
<li><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_set_operand_width
<li><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_sub
<li><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_load_pre_calc_mont_H
<li><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_modmul
<li><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_valid_bits.part.1
<li><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Big_Div2n
<li><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_modadd
<li><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_pre_calc_mont_H
</ul>
<br>[Called By]<ul>
<li><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_CRTModExp
<li><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GetCRTKey
<li><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bn_mod
</ul>
<p><strong><a name="[9d4]"></a>Bigint_Check_1</strong>(22 bytes, Stack size 0 btyes, crypto_pke.o(.text.Bigint_Check_1))<br>
<p><strong><a name="[9d5]"></a>Bigint_Check_p_1</strong>(28 bytes, Stack size 0 btyes, crypto_pke.o(.text.Bigint_Check_p_1))<br>
<p><strong><a name="[9d6]"></a>prime_Test_Miller_Rabin</strong>(662 bytes, Stack size 76 btyes, crypto_pke.o(.text.prime_Test_Miller_Rabin))<br>
<br>[Stack]<ul><li>Max Depth = 108 
<li>Call Chain = prime_Test_Miller_Rabin &rArr; rand_get &rArr; get_rand  </ul>
<br>[Calls]<ul>
<li><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_set_operand_width
<li><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Big_Div2n
<li><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand_get
<li><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_pre_calc_mont_H
<li><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_modexp
<li><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bigint_Check_p_1.part.4
<li><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bigint_Check_1.part.3
</ul>
<br>[Called By]<ul>
<li><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPrime
</ul>
<p><strong><a name="[9d7]"></a>GetPrime</strong>(216 bytes, Stack size 236 btyes, crypto_pke.o(.text.GetPrime))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = GetPrime &rArr; prime_Test_Miller_Rabin &rArr; rand_get  &rArr; get_rand  </ul>
<br>[Calls]<ul>
<li><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand_get
<li><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bigint_div_table_high
<li><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bigint_div_table_low
<li><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prime_Test_Miller_Rabin
</ul>
<br>[Called By]<ul>
<li><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GetKey
<li><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GetCRTKey
</ul>
<p><strong><a name="[9d8]"></a>pointMul</strong>(800 bytes, Stack size 44 btyes, crypto_pke.o(.text.pointMul))<br>
<br>[Stack]<ul><li>Max Depth = 60 
<li>Call Chain = pointMul &rArr; pke_pre_calc_mont_H </ul>
<br>[Calls]<ul>
<li><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_set_operand_width
<li><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_pre_calc_mont_N0
<li><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_pre_calc_mont_H
</ul>
<br>[Called By]<ul>
<li><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_with_k
<li><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt_osr
<li><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_mul
</ul>
<p><strong><a name="[9d9]"></a>pointMul_Shamir</strong>(1068 bytes, Stack size 56 btyes, crypto_pke.o(.text.pointMul_Shamir))<br>
<br>[Stack]<ul><li>Max Depth = 72 
<li>Call Chain = pointMul_Shamir &rArr; pke_pre_calc_mont_H </ul>
<br>[Calls]<ul>
<li><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_set_operand_width
<li><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_pre_calc_mont_N0
<li><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_pre_calc_mont_H
</ul>
<br>[Called By]<ul>
<li><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_pointMul_base
<li><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_verify_osr
<li><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_exchangekey_osr
<li><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_shamir
</ul>
<p><strong><a name="[9da]"></a>pointAdd</strong>(920 bytes, Stack size 48 btyes, crypto_pke.o(.text.pointAdd))<br>
<br>[Stack]<ul><li>Max Depth = 64 
<li>Call Chain = pointAdd &rArr; pke_pre_calc_mont_H </ul>
<br>[Calls]<ul>
<li><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_set_operand_width
<li><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_pre_calc_mont_N0
<li><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_pre_calc_mont_H
</ul>
<br>[Called By]<ul>
<li><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_add
</ul>
<p><strong><a name="[9db]"></a>pointDouble</strong>(694 bytes, Stack size 40 btyes, crypto_pke.o(.text.pointDouble))<br>
<br>[Stack]<ul><li>Max Depth = 56 
<li>Call Chain = pointDouble &rArr; pke_pre_calc_mont_H </ul>
<br>[Calls]<ul>
<li><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_set_operand_width
<li><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_pre_calc_mont_N0
<li><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_pre_calc_mont_H
</ul>
<br>[Called By]<ul>
<li><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_double
</ul>
<p><strong><a name="[9dc]"></a>pointVerify</strong>(592 bytes, Stack size 32 btyes, crypto_pke.o(.text.pointVerify))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = pointVerify &rArr; pke_pre_calc_mont_H </ul>
<br>[Calls]<ul>
<li><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_set_operand_width
<li><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_pre_calc_mont_N0
<li><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_pre_calc_mont_H
</ul>
<br>[Called By]<ul>
<li><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt_osr
<li><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_exchangekey_osr
<li><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_verify
</ul>
<p><strong><a name="[9dd]"></a>get_rand</strong>(242 bytes, Stack size 28 btyes, crypto_rng.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand_get
</ul>
<p><strong><a name="[9de]"></a>get_rand_uint32</strong>(10 bytes, Stack size 0 btyes, crypto_rng.o(.text.get_rand_uint32))<br>
<p><strong><a name="[9df]"></a>rand_get</strong>(8 bytes, Stack size 4 btyes, crypto_rng.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = rand_get &rArr; get_rand </ul>
<br>[Calls]<ul>
<li><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rand
</ul>
<br>[Called By]<ul>
<li><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_rand_get
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prime_Test_Miller_Rabin
<li><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPrime
<li><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_Get_E1
<li><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_keyget
<li><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign_osr
<li><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_osr
</ul>
<p><strong><a name="[9e0]"></a>rsa_crt_keypair_gen</strong>(182 bytes, Stack size 64 btyes, crypto_rsa.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 1344 
<li>Call Chain = rsa_crt_keypair_gen &rArr; RSA_GetCRTKey &rArr; RSA_CRTModExp  &rArr; pke_mod  &rArr; pke_modmul  </ul>
<br>[Calls]<ul>
<li><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GetCRTKey
<li><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_byte_array
</ul>
<br>[Called By]<ul>
<li><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_rsa_keypair_gen
</ul>
<p><strong><a name="[9e1]"></a>rsa_encrypt</strong>(212 bytes, Stack size 52 btyes, crypto_rsa.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 120 
<li>Call Chain = rsa_encrypt &rArr; RSA_ModExp &rArr; pke_modexp  </ul>
<br>[Calls]<ul>
<li><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_byte_array
<li><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_ModExp
</ul>
<br>[Called By]<ul>
<li><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_rsa_encrypt
</ul>
<p><strong><a name="[9e2]"></a>rsa_crt_decrypt</strong>(468 bytes, Stack size 92 btyes, crypto_rsa.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 740 
<li>Call Chain = rsa_crt_decrypt &rArr; RSA_CRTModExp &rArr; pke_mod  &rArr; pke_modmul  </ul>
<br>[Calls]<ul>
<li><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_byte_array
<li><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_CRTModExp
</ul>
<br>[Called By]<ul>
<li><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_rsa_decrypt
</ul>
<p><strong><a name="[9e3]"></a>rsa_keypair_gen</strong>(106 bytes, Stack size 28 btyes, crypto_rsa.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 968 
<li>Call Chain = rsa_keypair_gen &rArr; RSA_GetKey &rArr; GetPrime  &rArr; prime_Test_Miller_Rabin  &rArr; rand_get  &rArr; get_rand  </ul>
<br>[Calls]<ul>
<li><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GetKey
<li><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_byte_array
</ul>
<p><strong><a name="[9e4]"></a>rsa_decrypt</strong>(274 bytes, Stack size 52 btyes, crypto_rsa.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 120 
<li>Call Chain = rsa_decrypt &rArr; RSA_ModExp &rArr; pke_modexp  </ul>
<br>[Calls]<ul>
<li><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_byte_array
<li><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_ModExp
</ul>
<p><strong><a name="[9e5]"></a>rsa_pq_keypair_gen</strong>(262 bytes, Stack size 56 btyes, crypto_rsa.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = rsa_pq_keypair_gen &rArr; RSA_pq_GetKey &rArr; RSA_Get_E2.part.0  &rArr; RSA_Get_E1  &rArr; rand_get  &rArr; get_rand  </ul>
<br>[Calls]<ul>
<li><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_byte_array
<li><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_pq_GetKey
</ul>
<p><strong><a name="[9e6]"></a>RSA_ModExp</strong>(172 bytes, Stack size 36 btyes, crypto_rsa_osr.o(.text.RSA_ModExp))<br>
<br>[Stack]<ul><li>Max Depth = 68 
<li>Call Chain = RSA_ModExp &rArr; pke_modexp </ul>
<br>[Calls]<ul>
<li><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_load_pre_calc_mont_H
<li><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_modexp
<li><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_pre_calc_mont_H_without_output
</ul>
<br>[Called By]<ul>
<li><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_encrypt
<li><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decrypt
</ul>
<p><strong><a name="[9e7]"></a>RSA_CRTModExp</strong>(366 bytes, Stack size 576 btyes, crypto_rsa_osr.o(.text.RSA_CRTModExp))<br>
<br>[Stack]<ul><li>Max Depth = 648 
<li>Call Chain = RSA_CRTModExp &rArr; pke_mod &rArr; pke_modmul  </ul>
<br>[Calls]<ul>
<li><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_set_operand_width
<li><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_get_operand_bytes
<li><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_mod
<li><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_modexp
<li><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_BigNumCmp
<li><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_sub
<li><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_modsub
<li><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_modmul
<li><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_mul
<li><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_copy
<li><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_clear
<li><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_add
</ul>
<br>[Called By]<ul>
<li><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_crt_decrypt
<li><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GetCRTKey
</ul>
<p><strong><a name="[9e8]"></a>RSA_Get_E1</strong>(86 bytes, Stack size 20 btyes, crypto_rsa_osr.o(.text.RSA_Get_E1))<br>
<br>[Stack]<ul><li>Max Depth = 52 
<li>Call Chain = RSA_Get_E1 &rArr; rand_get &rArr; get_rand  </ul>
<br>[Calls]<ul>
<li><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand_get
</ul>
<br>[Called By]<ul>
<li><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_Get_E2.part.0
<li><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GetKey
<li><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GetCRTKey
<li><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_pq_GetKey
</ul>
<p><strong><a name="[9ea]"></a>RSA_Get_E2</strong>(18 bytes, Stack size 0 btyes, crypto_rsa_osr.o(.text.RSA_Get_E2))<br>
<p><strong><a name="[9eb]"></a>CheckValue_0x5a5a5a5a</strong>(60 bytes, Stack size 0 btyes, crypto_rsa_osr.o(.text.CheckValue_0x5a5a5a5a))<br>
<p><strong><a name="[9ec]"></a>RSA_GetKey</strong>(550 bytes, Stack size 596 btyes, crypto_rsa_osr.o(.text.RSA_GetKey))<br>
<br>[Stack]<ul><li>Max Depth = 940 
<li>Call Chain = RSA_GetKey &rArr; GetPrime &rArr; prime_Test_Miller_Rabin  &rArr; rand_get  &rArr; get_rand  </ul>
<br>[Calls]<ul>
<li><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_set_operand_width
<li><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_get_operand_bytes
<li><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPrime
<li><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_mul
<li><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_Get_E2.part.0
<li><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_modinv
<li><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_set
<li><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_pre_calc_mont_H_without_output
<li><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_modexp
<li><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_Get_E1
</ul>
<br>[Called By]<ul>
<li><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_keypair_gen
</ul>
<p><strong><a name="[9ed]"></a>RSA_GetCRTKey</strong>(804 bytes, Stack size 632 btyes, crypto_rsa_osr.o(.text.RSA_GetCRTKey))<br>
<br>[Stack]<ul><li>Max Depth = 1280 
<li>Call Chain = RSA_GetCRTKey &rArr; RSA_CRTModExp &rArr; pke_mod  &rArr; pke_modmul  </ul>
<br>[Calls]<ul>
<li><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPrime
<li><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_BigNumCmp
<li><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_Get_E2.part.0
<li><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_mod
<li><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_modinv
<li><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_copy
<li><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_Get_E1
<li><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_mul
<li><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_set
<li><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_pre_calc_mont_H_without_output
<li><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_modexp
<li><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_CRTModExp
</ul>
<br>[Called By]<ul>
<li><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_crt_keypair_gen
</ul>
<p><strong><a name="[9ee]"></a>RSA_pq_GetKey</strong>(524 bytes, Stack size 64 btyes, crypto_rsa_osr.o(.text.RSA_pq_GetKey))<br>
<br>[Stack]<ul><li>Max Depth = 152 
<li>Call Chain = RSA_pq_GetKey &rArr; RSA_Get_E2.part.0 &rArr; RSA_Get_E1  &rArr; rand_get  &rArr; get_rand  </ul>
<br>[Calls]<ul>
<li><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_set_operand_width
<li><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_get_operand_bytes
<li><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_mul
<li><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_Get_E2.part.0
<li><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_modinv
<li><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_Get_E1
<li><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_set
<li><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_pre_calc_mont_H_without_output
<li><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_modexp
</ul>
<br>[Called By]<ul>
<li><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pq_keypair_gen
</ul>
<p><strong><a name="[9ef]"></a>sha1_init</strong>(12 bytes, Stack size 4 btyes, crypto_sha1.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = sha1_init &rArr; hash_init </ul>
<br>[Calls]<ul>
<li><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_init
</ul>
<br>[Called By]<ul>
<li><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sha1_init
</ul>
<p><strong><a name="[9f0]"></a>sha1_update</strong>(16 bytes, Stack size 4 btyes, crypto_sha1.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = sha1_update &rArr; hash_update </ul>
<br>[Calls]<ul>
<li><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_update
</ul>
<br>[Called By]<ul>
<li><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sha1_update
</ul>
<p><strong><a name="[9f1]"></a>sha1_final</strong>(14 bytes, Stack size 4 btyes, crypto_sha1.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 76 
<li>Call Chain = sha1_final &rArr; hash_final &rArr; hash_update  </ul>
<br>[Calls]<ul>
<li><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_final
</ul>
<br>[Called By]<ul>
<li><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sha1_final
</ul>
<p><strong><a name="[9f2]"></a>sha224_init</strong>(12 bytes, Stack size 4 btyes, crypto_sha224.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = sha224_init &rArr; hash_init </ul>
<br>[Calls]<ul>
<li><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_init
</ul>
<br>[Called By]<ul>
<li><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sha224_init
</ul>
<p><strong><a name="[9f3]"></a>sha224_update</strong>(16 bytes, Stack size 4 btyes, crypto_sha224.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = sha224_update &rArr; hash_update </ul>
<br>[Calls]<ul>
<li><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_update
</ul>
<br>[Called By]<ul>
<li><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sha224_update
</ul>
<p><strong><a name="[9f4]"></a>sha224_final</strong>(14 bytes, Stack size 4 btyes, crypto_sha224.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 76 
<li>Call Chain = sha224_final &rArr; hash_final &rArr; hash_update  </ul>
<br>[Calls]<ul>
<li><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_final
</ul>
<br>[Called By]<ul>
<li><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sha224_final
</ul>
<p><strong><a name="[9f5]"></a>sha256_init</strong>(12 bytes, Stack size 4 btyes, crypto_sha256.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = sha256_init &rArr; hash_init </ul>
<br>[Calls]<ul>
<li><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_init
</ul>
<br>[Called By]<ul>
<li><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sha256_init
</ul>
<p><strong><a name="[9f6]"></a>sha256_update</strong>(16 bytes, Stack size 4 btyes, crypto_sha256.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = sha256_update &rArr; hash_update </ul>
<br>[Calls]<ul>
<li><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_update
</ul>
<br>[Called By]<ul>
<li><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sha256_update
</ul>
<p><strong><a name="[9f7]"></a>sha256_final</strong>(14 bytes, Stack size 4 btyes, crypto_sha256.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 76 
<li>Call Chain = sha256_final &rArr; hash_final &rArr; hash_update  </ul>
<br>[Calls]<ul>
<li><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_final
</ul>
<br>[Called By]<ul>
<li><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sha256_final
</ul>
<p><strong><a name="[9f8]"></a>sm2_e_get</strong>(30 bytes, Stack size 4 btyes, crypto_sm2.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 100 
<li>Call Chain = sm2_e_get &rArr; sm2_getE_osr &rArr; sm3_final  &rArr; hash_final  &rArr; hash_update  </ul>
<br>[Calls]<ul>
<li><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_getE_osr
</ul>
<br>[Called By]<ul>
<li><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm2_e_get
</ul>
<p><strong><a name="[9f9]"></a>sm2_z_get</strong>(42 bytes, Stack size 4 btyes, crypto_sm2.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 132 
<li>Call Chain = sm2_z_get &rArr; sm2_getZ_osr &rArr; sm3_final  &rArr; hash_final  &rArr; hash_update  </ul>
<br>[Calls]<ul>
<li><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_getZ_osr
</ul>
<br>[Called By]<ul>
<li><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm2_z_get
</ul>
<p><strong><a name="[9fa]"></a>sm2_keypair_gen</strong>(30 bytes, Stack size 4 btyes, crypto_sm2.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 300 
<li>Call Chain = sm2_keypair_gen &rArr; sm2_keyget &rArr; sm2_pointMul_base  &rArr; pointMul_Shamir  &rArr; pke_pre_calc_mont_H  </ul>
<br>[Calls]<ul>
<li><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_keyget
</ul>
<br>[Called By]<ul>
<li><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm2_keypair_gen
</ul>
<p><strong><a name="[9fb]"></a>sm2_sign</strong>(54 bytes, Stack size 4 btyes, crypto_sm2.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 468 
<li>Call Chain = sm2_sign &rArr; sm2_sign_osr &rArr; sm2_sign_with_k  &rArr; sm2_pointMul_base  &rArr; pointMul_Shamir  &rArr; pke_pre_calc_mont_H  </ul>
<br>[Calls]<ul>
<li><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign_osr
</ul>
<br>[Called By]<ul>
<li><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm2_sign
</ul>
<p><strong><a name="[9fc]"></a>sm2_verify</strong>(66 bytes, Stack size 4 btyes, crypto_sm2.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 280 
<li>Call Chain = sm2_verify &rArr; sm2_verify_osr &rArr; pointMul_Shamir  &rArr; pke_pre_calc_mont_H  </ul>
<br>[Calls]<ul>
<li><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_verify_osr
</ul>
<br>[Called By]<ul>
<li><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm2_verify
</ul>
<p><strong><a name="[9fd]"></a>sm2_encrypt</strong>(58 bytes, Stack size 12 btyes, crypto_sm2.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 452 
<li>Call Chain = sm2_encrypt &rArr; sm2_encrypt_osr &rArr; sm2_encrypt_with_k  &rArr; sm2_pointMul_base  &rArr; pointMul_Shamir  &rArr; pke_pre_calc_mont_H  </ul>
<br>[Calls]<ul>
<li><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_osr
</ul>
<br>[Called By]<ul>
<li><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm2_encrypt
</ul>
<p><strong><a name="[9fe]"></a>sm2_decrypt</strong>(94 bytes, Stack size 12 btyes, crypto_sm2.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 328 
<li>Call Chain = sm2_decrypt &rArr; sm2_decrypt_osr &rArr; sm2_kdf  &rArr; sm3_final  &rArr; hash_final  &rArr; hash_update  </ul>
<br>[Calls]<ul>
<li><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt_osr
</ul>
<br>[Called By]<ul>
<li><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm2_decrypt
</ul>
<p><strong><a name="[9ff]"></a>sm2_key_exchange</strong>(130 bytes, Stack size 56 btyes, crypto_sm2.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 476 
<li>Call Chain = sm2_key_exchange &rArr; sm2_exchangekey_osr &rArr; sm2_kdf  &rArr; sm3_final  &rArr; hash_final  &rArr; hash_update  </ul>
<br>[Calls]<ul>
<li><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_exchangekey_osr
</ul>
<br>[Called By]<ul>
<li><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm2_key_exchange
</ul>
<p><strong><a name="[a00]"></a>sm2_pointMul_base</strong>(80 bytes, Stack size 104 btyes, crypto_sm2_osr.o(.text.sm2_pointMul_base))<br>
<br>[Stack]<ul><li>Max Depth = 176 
<li>Call Chain = sm2_pointMul_base &rArr; pointMul_Shamir &rArr; pke_pre_calc_mont_H  </ul>
<br>[Calls]<ul>
<li><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_copy
<li><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_clear
<li><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointMul_Shamir
</ul>
<br>[Called By]<ul>
<li><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_keyget
<li><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign_with_k
<li><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_with_k
</ul>
<p><strong><a name="[a01]"></a>uint32_BigNum_Add_One</strong>(38 bytes, Stack size 0 btyes, crypto_sm2_osr.o(.text.uint32_BigNum_Add_One))<br>
<p><strong><a name="[a02]"></a>sm2_kdf_counter_add_one</strong>(24 bytes, Stack size 0 btyes, crypto_sm2_osr.o(.text.sm2_kdf_counter_add_one))<br>
<p><strong><a name="[a03]"></a>sm2_kdf</strong>(202 bytes, Stack size 72 btyes, crypto_sm2_osr.o(.text.sm2_kdf))<br>
<br>[Stack]<ul><li>Max Depth = 148 
<li>Call Chain = sm2_kdf &rArr; sm3_final &rArr; hash_final  &rArr; hash_update  </ul>
<br>[Calls]<ul>
<li><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_init
<li><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_update
<li><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_final
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_with_k
<li><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt_osr
<li><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_exchangekey_osr
</ul>
<p><strong><a name="[a04]"></a>sm2_getZ_osr</strong>(212 bytes, Stack size 52 btyes, crypto_sm2_osr.o(.text.sm2_getZ_osr))<br>
<br>[Stack]<ul><li>Max Depth = 128 
<li>Call Chain = sm2_getZ_osr &rArr; sm3_final &rArr; hash_final  &rArr; hash_update  </ul>
<br>[Calls]<ul>
<li><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_init
<li><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_update
<li><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_byte_array
<li><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_final
</ul>
<br>[Called By]<ul>
<li><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_z_get
</ul>
<p><strong><a name="[a05]"></a>sm2_getE_osr</strong>(84 bytes, Stack size 20 btyes, crypto_sm2_osr.o(.text.sm2_getE_osr))<br>
<br>[Stack]<ul><li>Max Depth = 96 
<li>Call Chain = sm2_getE_osr &rArr; sm3_final &rArr; hash_final  &rArr; hash_update  </ul>
<br>[Calls]<ul>
<li><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_init
<li><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_update
<li><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_final
</ul>
<br>[Called By]<ul>
<li><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_e_get
</ul>
<p><strong><a name="[a06]"></a>sm2_keyget</strong>(134 bytes, Stack size 120 btyes, crypto_sm2_osr.o(.text.sm2_keyget))<br>
<br>[Stack]<ul><li>Max Depth = 296 
<li>Call Chain = sm2_keyget &rArr; sm2_pointMul_base &rArr; pointMul_Shamir  &rArr; pke_pre_calc_mont_H  </ul>
<br>[Calls]<ul>
<li><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_BigNum_Check_NULL
<li><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand_get
<li><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_BigNumCmp
<li><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_pointMul_base
<li><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_byte_array
</ul>
<br>[Called By]<ul>
<li><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_keypair_gen
</ul>
<p><strong><a name="[a07]"></a>sm2_sign_with_k</strong>(328 bytes, Stack size 100 btyes, crypto_sm2_osr.o(.text.sm2_sign_with_k))<br>
<br>[Stack]<ul><li>Max Depth = 276 
<li>Call Chain = sm2_sign_with_k &rArr; sm2_pointMul_base &rArr; pointMul_Shamir  &rArr; pke_pre_calc_mont_H  </ul>
<br>[Calls]<ul>
<li><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_BigNum_Check_NULL
<li><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_BigNumCmp
<li><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_pointMul_base
<li><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_sub
<li><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_modadd
<li><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_load_pre_calc_mont_H
<li><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_modmul
<li><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_modsub
<li><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_copy
<li><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_modinv
</ul>
<br>[Called By]<ul>
<li><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign_osr
</ul>
<p><strong><a name="[a08]"></a>sm2_sign_osr</strong>(194 bytes, Stack size 188 btyes, crypto_sm2_osr.o(.text.sm2_sign_osr))<br>
<br>[Stack]<ul><li>Max Depth = 464 
<li>Call Chain = sm2_sign_osr &rArr; sm2_sign_with_k &rArr; sm2_pointMul_base  &rArr; pointMul_Shamir  &rArr; pke_pre_calc_mont_H  </ul>
<br>[Calls]<ul>
<li><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_byte_array
<li><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_BigNumCmp
<li><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_sub
<li><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_BigNum_Check_NULL
<li><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign_with_k
<li><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand_get
</ul>
<br>[Called By]<ul>
<li><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign
</ul>
<p><strong><a name="[a09]"></a>sm2_verify_osr</strong>(330 bytes, Stack size 204 btyes, crypto_sm2_osr.o(.text.sm2_verify_osr))<br>
<br>[Stack]<ul><li>Max Depth = 276 
<li>Call Chain = sm2_verify_osr &rArr; pointMul_Shamir &rArr; pke_pre_calc_mont_H  </ul>
<br>[Calls]<ul>
<li><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_byte_array
<li><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_BigNum_Check_NULL
<li><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_BigNumCmp
<li><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_modadd
<li><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointMul_Shamir
<li><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_sub
</ul>
<br>[Called By]<ul>
<li><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_verify
</ul>
<p><strong><a name="[a0a]"></a>sm2_encrypt_with_k</strong>(352 bytes, Stack size 116 btyes, crypto_sm2_osr.o(.text.sm2_encrypt_with_k))<br>
<br>[Stack]<ul><li>Max Depth = 292 
<li>Call Chain = sm2_encrypt_with_k &rArr; sm2_pointMul_base &rArr; pointMul_Shamir  &rArr; pke_pre_calc_mont_H  </ul>
<br>[Calls]<ul>
<li><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_BigNum_Check_NULL
<li><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_BigNumCmp
<li><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_pointMul_base
<li><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_byte_array
<li><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointMul
<li><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_kdf
<li><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_BigNum_Check_NULL
<li><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_XOR
<li><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_init
<li><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_update
<li><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_final
</ul>
<br>[Called By]<ul>
<li><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_osr
</ul>
<p><strong><a name="[a0b]"></a>sm2_encrypt_osr</strong>(114 bytes, Stack size 148 btyes, crypto_sm2_osr.o(.text.sm2_encrypt_osr))<br>
<br>[Stack]<ul><li>Max Depth = 440 
<li>Call Chain = sm2_encrypt_osr &rArr; sm2_encrypt_with_k &rArr; sm2_pointMul_base  &rArr; pointMul_Shamir  &rArr; pke_pre_calc_mont_H  </ul>
<br>[Calls]<ul>
<li><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_byte_array
<li><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_with_k
<li><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand_get
</ul>
<br>[Called By]<ul>
<li><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt
</ul>
<p><strong><a name="[a0c]"></a>sm2_decrypt_osr</strong>(354 bytes, Stack size 168 btyes, crypto_sm2_osr.o(.text.sm2_decrypt_osr))<br>
<br>[Stack]<ul><li>Max Depth = 316 
<li>Call Chain = sm2_decrypt_osr &rArr; sm2_kdf &rArr; sm3_final  &rArr; hash_final  &rArr; hash_update  </ul>
<br>[Calls]<ul>
<li><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_byte_array
<li><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointVerify
<li><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_BigNum_Check_NULL
<li><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_BigNumCmp
<li><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointMul
<li><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_kdf
<li><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_BigNum_Check_NULL
<li><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_XOR
<li><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_init
<li><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_update
<li><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_final
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</ul>
<br>[Called By]<ul>
<li><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt
</ul>
<p><strong><a name="[a0d]"></a>sm2_exchangekey_osr</strong>(756 bytes, Stack size 272 btyes, crypto_sm2_osr.o(.text.sm2_exchangekey_osr))<br>
<br>[Stack]<ul><li>Max Depth = 420 
<li>Call Chain = sm2_exchangekey_osr &rArr; sm2_kdf &rArr; sm3_final  &rArr; hash_final  &rArr; hash_update  </ul>
<br>[Calls]<ul>
<li><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_clear
<li><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_byte_array
<li><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_BigNum_Check_NULL
<li><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_BigNumCmp
<li><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_load_pre_calc_mont_H
<li><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_modmul
<li><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_modadd
<li><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointVerify
<li><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointMul_Shamir
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_kdf
<li><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_init
<li><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_update
<li><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_final
</ul>
<br>[Called By]<ul>
<li><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_key_exchange
</ul>
<p><strong><a name="[a0e]"></a>sm3_init</strong>(12 bytes, Stack size 4 btyes, crypto_sm3.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = sm3_init &rArr; hash_init </ul>
<br>[Calls]<ul>
<li><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_init
</ul>
<br>[Called By]<ul>
<li><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm3_init
<li><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_kdf
<li><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_getZ_osr
<li><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_getE_osr
<li><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_with_k
<li><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt_osr
<li><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_exchangekey_osr
</ul>
<p><strong><a name="[a0f]"></a>sm3_update</strong>(16 bytes, Stack size 4 btyes, crypto_sm3.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = sm3_update &rArr; hash_update </ul>
<br>[Calls]<ul>
<li><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_update
</ul>
<br>[Called By]<ul>
<li><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm3_update
<li><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_kdf
<li><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_getZ_osr
<li><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_getE_osr
<li><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_with_k
<li><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt_osr
<li><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_exchangekey_osr
</ul>
<p><strong><a name="[a10]"></a>sm3_final</strong>(14 bytes, Stack size 4 btyes, crypto_sm3.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 76 
<li>Call Chain = sm3_final &rArr; hash_final &rArr; hash_update  </ul>
<br>[Calls]<ul>
<li><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_final
</ul>
<br>[Called By]<ul>
<li><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm3_final
<li><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_kdf
<li><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_getZ_osr
<li><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_getE_osr
<li><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_with_k
<li><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt_osr
<li><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_exchangekey_osr
</ul>
<p><strong><a name="[a11]"></a>sm4_crypt</strong>(208 bytes, Stack size 44 btyes, crypto_sm4.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 64 
<li>Call Chain = sm4_crypt &rArr; crypto_dma_start &rArr; symm_param_cfg  </ul>
<br>[Calls]<ul>
<li><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_dma_start
</ul>
<br>[Called By]<ul>
<li><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm4_crypt
</ul>
<p><strong><a name="[a12]"></a>sm4_crypt_ctr</strong>(152 bytes, Stack size 48 btyes, crypto_sm4.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 68 
<li>Call Chain = sm4_crypt_ctr &rArr; crypto_dma_start &rArr; symm_param_cfg  </ul>
<br>[Calls]<ul>
<li><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_dma_start
</ul>
<br>[Called By]<ul>
<li><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm4_crypt_ctr
</ul>
<p><strong><a name="[a13]"></a>sm4_crypt_xts</strong>(152 bytes, Stack size 48 btyes, crypto_sm4.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 68 
<li>Call Chain = sm4_crypt_xts &rArr; crypto_dma_start &rArr; symm_param_cfg  </ul>
<br>[Calls]<ul>
<li><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_dma_start
</ul>
<br>[Called By]<ul>
<li><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm4_crypt_xts
</ul>
<p><strong><a name="[a15]"></a>crypto_hw_init</strong>(2 bytes, Stack size 0 btyes, crypto_crypto.o(.text.crypto_hw_init))<br>
<br>[Called By]<ul>
<li><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_crypto_ioctl
<li><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_crypto_reset
</ul>
<p><strong><a name="[a16]"></a>crypto_reset</strong>(18 bytes, Stack size 0 btyes, crypto_crypto.o(.text.crypto_reset))<br>
<br>[Called By]<ul>
<li><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_crypto_ioctl
<li><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_crypto_reset
<li><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_reset
</ul>
<p><strong><a name="[a17]"></a>crypto_hash_reset</strong>(16 bytes, Stack size 0 btyes, crypto_crypto.o(.text.crypto_hash_reset))<br>
<br>[Called By]<ul>
<li><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_init
</ul>
<p><strong><a name="[a18]"></a>crypto_data_pad</strong>(12 bytes, Stack size 0 btyes, crypto_crypto.o(.text.crypto_data_pad))<br>
<br>[Called By]<ul>
<li><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_reset
</ul>
<p><strong><a name="[a19]"></a>crypto_data_discard</strong>(12 bytes, Stack size 0 btyes, crypto_crypto.o(.text.crypto_data_discard))<br>
<br>[Called By]<ul>
<li><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_reset
</ul>
<p><strong><a name="[a1a]"></a>crypto_master_reset</strong>(12 bytes, Stack size 0 btyes, crypto_crypto.o(.text.crypto_master_reset))<br>
<p><strong><a name="[a1b]"></a>crypto_slave_reset</strong>(12 bytes, Stack size 0 btyes, crypto_crypto.o(.text.crypto_slave_reset))<br>
<p><strong><a name="[a1c]"></a>crypto_reg_symc_lsr_get</strong>(8 bytes, Stack size 0 btyes, crypto_crypto.o(.text.crypto_reg_symc_lsr_get))<br>
<p><strong><a name="[a1d]"></a>crypto_symc_data_cnt</strong>(10 bytes, Stack size 0 btyes, crypto_crypto.o(.text.crypto_symc_data_cnt))<br>
<p><strong><a name="[a1e]"></a>crypto_is_busy</strong>(32 bytes, Stack size 0 btyes, crypto_crypto.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_reset
</ul>
<p><strong><a name="[a1f]"></a>crypto_bridge_is_required</strong>(48 bytes, Stack size 0 btyes, crypto_crypto.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_write
<li><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_read
</ul>
<p><strong><a name="[a20]"></a>crypto_frontend_port_addr</strong>(6 bytes, Stack size 0 btyes, crypto_crypto.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_write
<li><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_read
</ul>
<p><strong><a name="[a21]"></a>crypto_backend_port_addr</strong>(6 bytes, Stack size 0 btyes, crypto_crypto.o(.fast))<br>
<p><strong><a name="[a22]"></a>crypto_fifo_enable</strong>(206 bytes, Stack size 12 btyes, crypto_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = crypto_fifo_enable &rArr; symm_param_cfg </ul>
<br>[Calls]<ul>
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symm_param_cfg
</ul>
<p><strong><a name="[a23]"></a>crypto_bridge_enable</strong>(350 bytes, Stack size 24 btyes, crypto_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = crypto_bridge_enable &rArr; symm_param_cfg </ul>
<br>[Calls]<ul>
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symm_param_cfg
</ul>
<br>[Called By]<ul>
<li><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_write
<li><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_read
</ul>
<p><strong><a name="[a24]"></a>crypto_bridge_prd_enable</strong>(318 bytes, Stack size 16 btyes, crypto_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = crypto_bridge_prd_enable &rArr; symm_param_cfg </ul>
<br>[Calls]<ul>
<li><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symm_param_cfg
</ul>
<p><strong><a name="[a25]"></a>crypto_dma_start</strong>(604 bytes, Stack size 16 btyes, crypto_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = crypto_dma_start &rArr; symm_param_cfg </ul>
<br>[Calls]<ul>
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symm_param_cfg
</ul>
<br>[Called By]<ul>
<li><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt
<li><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_ctr
<li><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_xts
<li><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm4_crypt
<li><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm4_crypt_ctr
<li><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm4_crypt_xts
<li><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_update
</ul>
<p><strong><a name="[a26]"></a>bn_mod</strong>(26 bytes, Stack size 12 btyes, crypto_bignum.o(.text.bn_mod))<br>
<br>[Stack]<ul><li>Max Depth = 84 
<li>Call Chain = bn_mod &rArr; pke_mod &rArr; pke_modmul  </ul>
<br>[Calls]<ul>
<li><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_mod
</ul>
<br>[Called By]<ul>
<li><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_mpi_mod_mpi
</ul>
<p><strong><a name="[a27]"></a>bn_cmp</strong>(14 bytes, Stack size 4 btyes, crypto_bignum.o(.text.bn_cmp))<br>
<br>[Calls]<ul>
<li><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_BigNumCmp
</ul>
<br>[Called By]<ul>
<li><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_mpi_cmp
</ul>
<p><strong><a name="[a28]"></a>bn_add</strong>(8 bytes, Stack size 4 btyes, crypto_bignum.o(.text.bn_add))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = bn_add &rArr; pke_add </ul>
<br>[Calls]<ul>
<li><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_add
</ul>
<br>[Called By]<ul>
<li><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_mpi_add
</ul>
<p><strong><a name="[a29]"></a>bn_sub</strong>(8 bytes, Stack size 4 btyes, crypto_bignum.o(.text.bn_sub))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = bn_sub &rArr; pke_sub </ul>
<br>[Calls]<ul>
<li><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_sub
</ul>
<br>[Called By]<ul>
<li><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_mpi_sub
</ul>
<p><strong><a name="[a2a]"></a>bn_mul</strong>(8 bytes, Stack size 4 btyes, crypto_bignum.o(.text.bn_mul))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = bn_mul &rArr; pke_mul </ul>
<br>[Calls]<ul>
<li><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_mul
</ul>
<br>[Called By]<ul>
<li><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_mpi_mul
</ul>
<p><strong><a name="[a2b]"></a>bn_modadd</strong>(20 bytes, Stack size 8 btyes, crypto_bignum.o(.text.bn_modadd))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = bn_modadd &rArr; pke_modadd </ul>
<br>[Calls]<ul>
<li><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_modadd
</ul>
<br>[Called By]<ul>
<li><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_mpi_add_mod
</ul>
<p><strong><a name="[a2c]"></a>bn_modsub</strong>(20 bytes, Stack size 8 btyes, crypto_bignum.o(.text.bn_modsub))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = bn_modsub &rArr; pke_modsub </ul>
<br>[Calls]<ul>
<li><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_modsub
</ul>
<br>[Called By]<ul>
<li><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_mpi_sub_mod
</ul>
<p><strong><a name="[a2d]"></a>bn_modmul</strong>(48 bytes, Stack size 28 btyes, crypto_bignum.o(.text.bn_modmul))<br>
<br>[Stack]<ul><li>Max Depth = 52 
<li>Call Chain = bn_modmul &rArr; pke_modmul </ul>
<br>[Calls]<ul>
<li><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_pre_calc_mont_H
<li><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_load_pre_calc_mont_H
<li><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_modmul
</ul>
<br>[Called By]<ul>
<li><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_mpi_mul_mod
</ul>
<p><strong><a name="[a2e]"></a>bn_modexp</strong>(56 bytes, Stack size 36 btyes, crypto_bignum.o(.text.bn_modexp))<br>
<br>[Stack]<ul><li>Max Depth = 68 
<li>Call Chain = bn_modexp &rArr; pke_modexp </ul>
<br>[Calls]<ul>
<li><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_pre_calc_mont_H
<li><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_load_pre_calc_mont_H
<li><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_modexp
</ul>
<br>[Called By]<ul>
<li><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_mpi_exp_mod
</ul>
<p><strong><a name="[a2f]"></a>bn_modinv</strong>(20 bytes, Stack size 8 btyes, crypto_bignum.o(.text.bn_modinv))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = bn_modinv &rArr; pke_modinv </ul>
<br>[Calls]<ul>
<li><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_modinv
</ul>
<br>[Called By]<ul>
<li><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_mpi_inv_mod
</ul>
<p><strong><a name="[a30]"></a>ecc_point_verify</strong>(68 bytes, Stack size 44 btyes, crypto_ecc.o(.text.ecc_point_verify))<br>
<br>[Stack]<ul><li>Max Depth = 92 
<li>Call Chain = ecc_point_verify &rArr; pointVerify &rArr; pke_pre_calc_mont_H  </ul>
<br>[Calls]<ul>
<li><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointVerify
</ul>
<br>[Called By]<ul>
<li><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_ecp_check
</ul>
<p><strong><a name="[a31]"></a>ecc_point_add</strong>(96 bytes, Stack size 64 btyes, crypto_ecc.o(.text.ecc_point_add))<br>
<br>[Stack]<ul><li>Max Depth = 128 
<li>Call Chain = ecc_point_add &rArr; pointAdd &rArr; pke_pre_calc_mont_H  </ul>
<br>[Calls]<ul>
<li><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointAdd
</ul>
<br>[Called By]<ul>
<li><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_ecp_add
</ul>
<p><strong><a name="[a32]"></a>ecc_point_double</strong>(94 bytes, Stack size 48 btyes, crypto_ecc.o(.text.ecc_point_double))<br>
<br>[Stack]<ul><li>Max Depth = 104 
<li>Call Chain = ecc_point_double &rArr; pointDouble &rArr; pke_pre_calc_mont_H  </ul>
<br>[Calls]<ul>
<li><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointDouble
</ul>
<br>[Called By]<ul>
<li><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_ecp_double
</ul>
<p><strong><a name="[a33]"></a>ecc_point_mul</strong>(88 bytes, Stack size 56 btyes, crypto_ecc.o(.text.ecc_point_mul))<br>
<br>[Stack]<ul><li>Max Depth = 116 
<li>Call Chain = ecc_point_mul &rArr; pointMul &rArr; pke_pre_calc_mont_H  </ul>
<br>[Calls]<ul>
<li><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointMul
</ul>
<br>[Called By]<ul>
<li><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_ecp_mul
</ul>
<p><strong><a name="[a34]"></a>ecc_point_shamir</strong>(112 bytes, Stack size 80 btyes, crypto_ecc.o(.text.ecc_point_shamir))<br>
<br>[Stack]<ul><li>Max Depth = 152 
<li>Call Chain = ecc_point_shamir &rArr; pointMul_Shamir &rArr; pke_pre_calc_mont_H  </ul>
<br>[Calls]<ul>
<li><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointMul_Shamir
</ul>
<br>[Called By]<ul>
<li><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_ecp_muladd
</ul>
<p><strong><a name="[a37]"></a>norc_port_switch_cmd</strong>(26 bytes, Stack size 0 btyes, norflash_norflash.o(.text.norc_port_switch_cmd))<br>
<p><strong><a name="[a38]"></a>norc_port_switch_xip</strong>(24 bytes, Stack size 0 btyes, norflash_norflash.o(.text.norc_port_switch_xip))<br>
<p><strong><a name="[a39]"></a>norflash_hw_init</strong>(352 bytes, Stack size 4 btyes, norflash_norflash.o(.text.norflash_hw_init))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = norflash_hw_init &rArr; norc_port_switch_xip.part.1 </ul>
<br>[Calls]<ul>
<li><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norc_port_switch_xip.part.1
<li><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norc_port_switch_cmd.part.0
</ul>
<br>[Called By]<ul>
<li><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_init
<li><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</ul>
<p><strong><a name="[a3a]"></a>norflash_byte_read</strong>(116 bytes, Stack size 0 btyes, norflash_norflash.o(.text.norflash_byte_read))<br>
<p><strong><a name="[a3b]"></a>norflash_byte_write</strong>(226 bytes, Stack size 12 btyes, norflash_norflash.o(.text.norflash_byte_write))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = norflash_byte_write &rArr; norc_port_switch_xip.part.1 </ul>
<br>[Calls]<ul>
<li><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norc_port_switch_xip.part.1
<li><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norc_port_switch_cmd.part.0
</ul>
<br>[Called By]<ul>
<li><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_write
</ul>
<p><strong><a name="[a3c]"></a>norflash_read</strong>(150 bytes, Stack size 0 btyes, norflash_norflash.o(.text.norflash_read))<br>
<br>[Called By]<ul>
<li><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_read
</ul>
<p><strong><a name="[a3d]"></a>norflash_write</strong>(308 bytes, Stack size 36 btyes, norflash_norflash.o(.text.norflash_write))<br>
<br>[Stack]<ul><li>Max Depth = 40 
<li>Call Chain = norflash_write &rArr; norc_port_switch_xip.part.1 </ul>
<br>[Calls]<ul>
<li><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norc_port_switch_xip.part.1
<li><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norc_port_switch_cmd.part.0
</ul>
<br>[Called By]<ul>
<li><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_write
</ul>
<p><strong><a name="[a3e]"></a>norflash_sector_erase</strong>(198 bytes, Stack size 8 btyes, norflash_norflash.o(.text.norflash_sector_erase))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = norflash_sector_erase &rArr; norc_port_switch_xip.part.1 </ul>
<br>[Calls]<ul>
<li><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norc_port_switch_xip.part.1
<li><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norc_port_switch_cmd.part.0
</ul>
<br>[Called By]<ul>
<li><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_write
</ul>
<p><strong><a name="[a3f]"></a>norflash_block_erase</strong>(206 bytes, Stack size 0 btyes, norflash_norflash.o(.text.norflash_block_erase))<br>
<p><strong><a name="[a40]"></a>norflash_chip_erase</strong>(164 bytes, Stack size 0 btyes, norflash_norflash.o(.text.norflash_chip_erase))<br>
<p><strong><a name="[a41]"></a>norflash_capacity_get</strong>(130 bytes, Stack size 0 btyes, norflash_norflash.o(.text.norflash_capacity_get))<br>
<p><strong><a name="[a43]"></a>debug_mp_print</strong>(304 bytes, Stack size 0 btyes, norflash_nftl.o(.text.debug_mp_print))<br>
<p><strong><a name="[a46]"></a>nftl_write</strong>(1094 bytes, Stack size 0 btyes, norflash_nftl.o(.fast))<br>
<p><strong><a name="[a47]"></a>nftl_read</strong>(194 bytes, Stack size 0 btyes, norflash_nftl.o(.fast))<br>
<p><strong><a name="[a48]"></a>nftl_delete</strong>(198 bytes, Stack size 0 btyes, norflash_nftl.o(.fast))<br>
<p><strong><a name="[a49]"></a>nftl_idle_gc</strong>(12 bytes, Stack size 0 btyes, norflash_nftl.o(.fast))<br>
<p><strong><a name="[a4a]"></a>nftl_init</strong>(216 bytes, Stack size 0 btyes, norflash_nftl.o(.fast))<br>
<p><strong><a name="[a4b]"></a>nftl_capacity_bytes_get</strong>(12 bytes, Stack size 0 btyes, norflash_nftl.o(.fast))<br>
<p><strong><a name="[a4c]"></a>usb_phy_cfg</strong>(20 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_phy_cfg))<br>
<p><strong><a name="[a53]"></a>usb_sw_reset</strong>(26 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_sw_reset))<br>
<p><strong><a name="[a54]"></a>usb_connect</strong>(16 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_connect))<br>
<p><strong><a name="[a55]"></a>usb_disconnect</strong>(16 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_disconnect))<br>
<p><strong><a name="[a56]"></a>usb_vbus_set</strong>(18 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_vbus_set))<br>
<p><strong><a name="[a57]"></a>usb_spd_set</strong>(56 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_spd_set))<br>
<p><strong><a name="[a58]"></a>usb_spd_get</strong>(30 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_spd_get))<br>
<p><strong><a name="[a59]"></a>usb_suspend</strong>(12 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_suspend))<br>
<p><strong><a name="[a5a]"></a>usb_addr_set</strong>(22 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_addr_set))<br>
<p><strong><a name="[a5b]"></a>usb_config_set</strong>(16 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_config_set))<br>
<p><strong><a name="[a5c]"></a>usb_config_is_set</strong>(14 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_config_is_set))<br>
<p><strong><a name="[a5d]"></a>usb_config_clear</strong>(16 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_config_clear))<br>
<p><strong><a name="[a5e]"></a>usb_remote_wakeup_set</strong>(12 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_remote_wakeup_set))<br>
<p><strong><a name="[a5f]"></a>usb_remote_wakeup_clear</strong>(12 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_remote_wakeup_clear))<br>
<p><strong><a name="[a60]"></a>usb_remote_wakeup</strong>(12 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_remote_wakeup))<br>
<p><strong><a name="[a61]"></a>usb_lpm_enable</strong>(12 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_lpm_enable))<br>
<p><strong><a name="[a62]"></a>usb_lpm_disable</strong>(12 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_lpm_disable))<br>
<p><strong><a name="[a63]"></a>usb_test_mode_set</strong>(68 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_test_mode_set))<br>
<p><strong><a name="[a64]"></a>usb_ltm_enable</strong>(12 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ltm_enable))<br>
<p><strong><a name="[a65]"></a>usb_ltm_disable</strong>(12 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ltm_disable))<br>
<p><strong><a name="[a66]"></a>usb_set_belt</strong>(34 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_set_belt))<br>
<p><strong><a name="[a67]"></a>usb_u1_enable</strong>(12 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_u1_enable))<br>
<p><strong><a name="[a68]"></a>usb_u2_enable</strong>(12 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_u2_enable))<br>
<p><strong><a name="[a69]"></a>usb_u1_disable</strong>(12 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_u1_disable))<br>
<p><strong><a name="[a6a]"></a>usb_u2_disable</strong>(12 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_u2_disable))<br>
<p><strong><a name="[a6b]"></a>usb_u3_enter</strong>(12 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_u3_enter))<br>
<p><strong><a name="[a6c]"></a>usb_u1_timeout_set</strong>(24 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_u1_timeout_set))<br>
<p><strong><a name="[a6d]"></a>usb_u2_timeout_set</strong>(16 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_u2_timeout_set))<br>
<p><strong><a name="[a6e]"></a>usb_ep0_recv</strong>(154 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ep0_recv))<br>
<p><strong><a name="[a6f]"></a>usb_ep0_send</strong>(172 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ep0_send))<br>
<p><strong><a name="[a70]"></a>usb_ep0_ack</strong>(16 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ep0_ack))<br>
<p><strong><a name="[a71]"></a>usb_ep0_stall</strong>(16 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ep0_stall))<br>
<p><strong><a name="[a72]"></a>usb_total_entry_get</strong>(10 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_total_entry_get))<br>
<p><strong><a name="[a73]"></a>usb_ep_type_set</strong>(26 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ep_type_set))<br>
<p><strong><a name="[a74]"></a>usb_ep_dir_set</strong>(26 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ep_dir_set))<br>
<p><strong><a name="[a75]"></a>usb_ep_start_entry_set</strong>(114 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ep_start_entry_set))<br>
<p><strong><a name="[a76]"></a>usb_ep_entry_set</strong>(28 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ep_entry_set))<br>
<p><strong><a name="[a77]"></a>usb_ep_mps_set</strong>(24 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ep_mps_set))<br>
<p><strong><a name="[a78]"></a>usb_ep_stall</strong>(18 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ep_stall))<br>
<p><strong><a name="[a79]"></a>usb_ep_stall_clear</strong>(26 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ep_stall_clear))<br>
<p><strong><a name="[a7a]"></a>usb_ep_is_stalled</strong>(16 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ep_is_stalled))<br>
<p><strong><a name="[a7b]"></a>usb_ep_seqnum_reset</strong>(18 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ep_seqnum_reset))<br>
<p><strong><a name="[a7c]"></a>usb_ep_active</strong>(18 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ep_active))<br>
<p><strong><a name="[a7d]"></a>usb_ep_is_active</strong>(16 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ep_is_active))<br>
<p><strong><a name="[a7e]"></a>usb_ep_reset</strong>(16 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ep_reset))<br>
<p><strong><a name="[a7f]"></a>usb_ep_is_full</strong>(16 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ep_is_full))<br>
<p><strong><a name="[a80]"></a>usb_pio_trash</strong>(38 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_pio_trash))<br>
<p><strong><a name="[a81]"></a>usb_stream_disable</strong>(14 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_stream_disable))<br>
<p><strong><a name="[a82]"></a>usb_edma_start</strong>(264 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_edma_start))<br>
<p><strong><a name="[a83]"></a>usb_edma_is_busy</strong>(8 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_edma_is_busy))<br>
<p><strong><a name="[a84]"></a>usb_dma_init</strong>(16 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_dma_init))<br>
<p><strong><a name="[a85]"></a>usb_hw_init</strong>(44 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_hw_init))<br>
<p><strong><a name="[a86]"></a>set_reg</strong>(16 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[a87]"></a>clear_reg</strong>(18 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[a88]"></a>usb_ep_bycnt_get</strong>(18 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[a89]"></a>usb_ep_bycnt_set</strong>(28 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[a8a]"></a>usb_ep_0byte_send</strong>(16 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[a8b]"></a>usb_ep_is_empty</strong>(16 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[a8c]"></a>usb_pio_recv</strong>(38 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[a8d]"></a>usb_pio_send</strong>(168 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[a8e]"></a>usb_stream_check</strong>(126 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[a8f]"></a>usb_stream_start</strong>(26 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[a90]"></a>usb_stream_accepted</strong>(174 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[a91]"></a>usb_stream_resume</strong>(150 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[a92]"></a>usb_dma_start</strong>(126 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[a93]"></a>usb_dma_is_busy</strong>(14 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[a94]"></a>usb_intr_enable</strong>(178 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[a95]"></a>usb_intr_disable</strong>(182 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[a96]"></a>usb_intr_status</strong>(188 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[a97]"></a>usb_intr_clear</strong>(182 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[a98]"></a>ahci_error_info_print</strong>(2 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_error_info_print))<br>
<p><strong><a name="[a99]"></a>ahci_hex_print</strong>(2 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_hex_print))<br>
<br>[Called By]<ul>
<li><a href="#[af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_fis_rx
</ul>
<p><strong><a name="[a9a]"></a>ahci_cmd_status_clear</strong>(98 bytes, Stack size 4 btyes, sata_host_ahci.o(.fast))<br>
<p><strong><a name="[a9b]"></a>ahci_is_device_probed</strong>(36 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_is_device_probed))<br>
<p><strong><a name="[a9c]"></a>ahci_port_serr_clear</strong>(14 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_port_serr_clear))<br>
<br>[Called By]<ul>
<li><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_isr
</ul>
<p><strong><a name="[a9d]"></a>ahci_port_sntf_clear</strong>(14 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_port_sntf_clear))<br>
<p><strong><a name="[a9e]"></a>ahci_port_sntf_get</strong>(14 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_port_sntf_get))<br>
<p><strong><a name="[a9f]"></a>ahci_reg_is_flush</strong>(30 bytes, Stack size 4 btyes, sata_host_ahci.o(.text.ahci_reg_is_flush))<br>
<br>[Called By]<ul>
<li><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_isr
</ul>
<p><strong><a name="[aa0]"></a>ahci_reg_cmd_get</strong>(12 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_reg_cmd_get))<br>
<p><strong><a name="[aa1]"></a>ahci_reg_ci_get</strong>(12 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_reg_ci_get))<br>
<br>[Called By]<ul>
<li><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_cmd_pending_check
<li><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_isr
</ul>
<p><strong><a name="[aa2]"></a>ahci_reg_ci_set</strong>(20 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_reg_ci_set))<br>
<p><strong><a name="[aa3]"></a>ahci_reg_is_get</strong>(12 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_reg_is_get))<br>
<p><strong><a name="[aa4]"></a>ahci_reg_tfd_get</strong>(12 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_reg_tfd_get))<br>
<p><strong><a name="[aa5]"></a>ahci_reg_sts_get</strong>(12 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_reg_sts_get))<br>
<p><strong><a name="[aa6]"></a>ahci_reg_err_get</strong>(12 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_reg_err_get))<br>
<p><strong><a name="[aa7]"></a>ahci_ccs_get</strong>(20 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_ccs_get))<br>
<br>[Called By]<ul>
<li><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_isr
</ul>
<p><strong><a name="[aa8]"></a>ahci_dsfis_base_get</strong>(8 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_dsfis_base_get))<br>
<p><strong><a name="[aa9]"></a>ahci_sdbfis_base_get</strong>(8 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_sdbfis_base_get))<br>
<p><strong><a name="[aaa]"></a>ahci_rfis_base_get</strong>(8 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_rfis_base_get))<br>
<p><strong><a name="[aab]"></a>ahci_intr_enable</strong>(18 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_intr_enable))<br>
<br>[Called By]<ul>
<li><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_ioctl
<li><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_init
</ul>
<p><strong><a name="[aac]"></a>ahci_intr_disable</strong>(20 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_intr_disable))<br>
<br>[Called By]<ul>
<li><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_ioctl
</ul>
<p><strong><a name="[aad]"></a>ahci_intr_status</strong>(68 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_intr_status))<br>
<br>[Called By]<ul>
<li><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_isr
</ul>
<p><strong><a name="[aae]"></a>ahci_intr_clear</strong>(24 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_intr_clear))<br>
<br>[Called By]<ul>
<li><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_isr
</ul>
<p><strong><a name="[aaf]"></a>ahci_device_probe</strong>(24 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_device_probe))<br>
<p><strong><a name="[ab0]"></a>ahci_port_init</strong>(542 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_port_init))<br>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hba_reset
</ul>
<p><strong><a name="[ab1]"></a>ahci_port_mode_set</strong>(192 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_port_mode_set))<br>
<p><strong><a name="[ab2]"></a>ahci_auto_partial2slumber_set</strong>(64 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_auto_partial2slumber_set))<br>
<p><strong><a name="[ab3]"></a>ahci_port_state_set</strong>(328 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_port_state_set))<br>
<p><strong><a name="[ab4]"></a>ahci_addr_mode_get</strong>(20 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_addr_mode_get))<br>
<p><strong><a name="[ab5]"></a>ahci_addr_mode_set</strong>(88 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_addr_mode_set))<br>
<p><strong><a name="[ab6]"></a>ahci_sector_per_block_set</strong>(100 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_sector_per_block_set))<br>
<p><strong><a name="[ab7]"></a>ahci_puis_device_spinup_set</strong>(82 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_puis_device_spinup_set))<br>
<p><strong><a name="[ab8]"></a>ahci_puis_feature_set</strong>(100 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_puis_feature_set))<br>
<p><strong><a name="[ab9]"></a>ahci_sata_feature_set</strong>(338 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_sata_feature_set))<br>
<p><strong><a name="[aba]"></a>ahci_cache_feature_set</strong>(132 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_cache_feature_set))<br>
<p><strong><a name="[abb]"></a>ahci_apm_feature_set</strong>(126 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_apm_feature_set))<br>
<p><strong><a name="[abc]"></a>ahci_lkah_feature_set</strong>(132 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_lkah_feature_set))<br>
<p><strong><a name="[abd]"></a>ahci_revert_to_default_feature_set</strong>(100 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_revert_to_default_feature_set))<br>
<p><strong><a name="[abe]"></a>ahci_feature_set_exception</strong>(76 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_feature_set_exception))<br>
<p><strong><a name="[abf]"></a>ahci_sleep_standby_handle</strong>(92 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_sleep_standby_handle))<br>
<p><strong><a name="[ac0]"></a>ahci_xfer_mode_set</strong>(162 bytes, Stack size 28 btyes, sata_host_ahci.o(.text.ahci_xfer_mode_set))<br>
<br>[Stack]<ul><li>Max Depth = 380 
<li>Call Chain = ahci_xfer_mode_set &rArr; ahci_cmd_issue &rArr; ahci_cmd_complete_wait  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_set_features
<li><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_issue
<li><a href="#[af1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_slot_free
</ul>
<br>[Called By]<ul>
<li><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_probe
</ul>
<p><strong><a name="[ac1]"></a>ahci_log_ext_read</strong>(94 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_log_ext_read))<br>
<p><strong><a name="[ac2]"></a>identify_revise</strong>(318 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.identify_revise))<br>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_identify_read
</ul>
<p><strong><a name="[ac3]"></a>ahci_identify_read</strong>(124 bytes, Stack size 20 btyes, sata_host_ahci.o(.text.ahci_identify_read))<br>
<br>[Stack]<ul><li>Max Depth = 372 
<li>Call Chain = ahci_identify_read &rArr; ahci_cmd_issue &rArr; ahci_cmd_complete_wait  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_identify
<li><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_issue
<li><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;identify_revise
<li><a href="#[af1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_slot_free
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
</ul>
<br>[Called By]<ul>
<li><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_probe
<li><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hba_reset
</ul>
<p><strong><a name="[ac4]"></a>ahci_smart</strong>(66 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_smart))<br>
<p><strong><a name="[ac5]"></a>ahci_read_max_address_ext</strong>(134 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_read_max_address_ext))<br>
<p><strong><a name="[ac6]"></a>ahci_read_max_address</strong>(130 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_read_max_address))<br>
<p><strong><a name="[ac7]"></a>ahci_read_verify_sectors</strong>(66 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_read_verify_sectors))<br>
<p><strong><a name="[ac8]"></a>ahci_read_verify_sectors_ext</strong>(68 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_read_verify_sectors_ext))<br>
<p><strong><a name="[ac9]"></a>ahci_security</strong>(66 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_security))<br>
<p><strong><a name="[aca]"></a>ahci_passthru</strong>(212 bytes, Stack size 20 btyes, sata_host_ahci.o(.text.ahci_passthru))<br>
<br>[Stack]<ul><li>Max Depth = 372 
<li>Call Chain = ahci_passthru &rArr; ahci_cmd_issue &rArr; ahci_cmd_complete_wait  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_inout_data_lba
<li><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_issue
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[af1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_slot_free
<li><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_non_data_lba
</ul>
<br>[Called By]<ul>
<li><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hba_reset
</ul>
<p><strong><a name="[acb]"></a>ahci_hba_reset</strong>(408 bytes, Stack size 36 btyes, sata_host_ahci.o(.text.ahci_hba_reset))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = ahci_hba_reset &rArr; ahci_identify_read &rArr; ahci_cmd_issue  &rArr; ahci_cmd_complete_wait  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_port_init
<li><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_link_change_handler
<li><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_identify_read
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<li><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_passthru
<li><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_error_handler
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<li><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_port_reset
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
</ul>
<br>[Called By]<ul>
<li><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_probe
<li><a href="#[ae3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_error_recover
<li><a href="#[ace]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hw_init
</ul>
<p><strong><a name="[acc]"></a>ahci_device_intr_enable</strong>(256 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_device_intr_enable))<br>
<p><strong><a name="[acd]"></a>ahci_sw_reset</strong>(284 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_sw_reset))<br>
<p><strong><a name="[ace]"></a>ahci_hw_init</strong>(330 bytes, Stack size 16 btyes, sata_host_ahci.o(.text.ahci_hw_init))<br>
<br>[Stack]<ul><li>Max Depth = 312 
<li>Call Chain = ahci_hw_init &rArr; log_error_id &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hba_reset
<li><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
</ul>
<br>[Called By]<ul>
<li><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_init
</ul>
<p><strong><a name="[acf]"></a>ahci_clock_set</strong>(6 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_clock_set))<br>
<br>[Called By]<ul>
<li><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_init
</ul>
<p><strong><a name="[ad0]"></a>ahci_clock_get</strong>(6 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_clock_get))<br>
<p><strong><a name="[ad1]"></a>ahci_wait_timeout_set</strong>(6 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_wait_timeout_set))<br>
<br>[Called By]<ul>
<li><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_init
</ul>
<p><strong><a name="[ad2]"></a>ahci_speed_set</strong>(46 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_speed_set))<br>
<br>[Called By]<ul>
<li><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_init
</ul>
<p><strong><a name="[ad3]"></a>ahci_prdt_setup</strong>(144 bytes, Stack size 36 btyes, sata_host_ahci.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_prdt_pre_setup
</ul>
<p><strong><a name="[ad4]"></a>ahci_prdt_setup2</strong>(138 bytes, Stack size 36 btyes, sata_host_ahci.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_rw_ncq
<li><a href="#[b01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_rw_dma
<li><a href="#[b02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_rw_multi
</ul>
<p><strong><a name="[ad5]"></a>ahci_prdt_pre_setup</strong>(122 bytes, Stack size 4 btyes, sata_host_ahci.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 40 
<li>Call Chain = ahci_prdt_pre_setup &rArr; ahci_prdt_setup </ul>
<br>[Calls]<ul>
<li><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_prdt_setup
</ul>
<br>[Called By]<ul>
<li><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_inout_data_lba
<li><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_dma_ncq_lba
</ul>
<p><strong><a name="[ad6]"></a>ahci_hba_get</strong>(4 bytes, Stack size 0 btyes, sata_host_ahci.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_register
<li><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_reset
</ul>
<p><strong><a name="[ad7]"></a>ahci_reg_sact_set</strong>(20 bytes, Stack size 0 btyes, sata_host_ahci.o(.fast))<br>
<p><strong><a name="[ad8]"></a>ahci_reg_sact_get</strong>(12 bytes, Stack size 0 btyes, sata_host_ahci.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_cmd_pending_check
<li><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_isr
</ul>
<p><strong><a name="[ad9]"></a>ahci_link_change_handler</strong>(228 bytes, Stack size 20 btyes, sata_host_ahci.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 316 
<li>Call Chain = ahci_link_change_handler &rArr; log_error_id &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_feed
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
</ul>
<br>[Called By]<ul>
<li><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_isr
<li><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_port_reset
<li><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hba_reset
</ul>
<p><strong><a name="[ada]"></a>ahci_port_reset</strong>(294 bytes, Stack size 20 btyes, sata_host_ahci.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 336 
<li>Call Chain = ahci_port_reset &rArr; ahci_link_change_handler &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_link_change_handler
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
</ul>
<br>[Called By]<ul>
<li><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hba_reset
</ul>
<p><strong><a name="[adb]"></a>ahci_cmd_complete_wait</strong>(270 bytes, Stack size 52 btyes, sata_host_ahci.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = ahci_cmd_complete_wait &rArr; log_error_id &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_feed
<li><a href="#[af1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_slot_free
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
<li><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_nonvolatile
<li><a href="#[af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_fis_rx
</ul>
<br>[Called By]<ul>
<li><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_issue
</ul>
<p><strong><a name="[adc]"></a>ahci_cache_flush</strong>(184 bytes, Stack size 20 btyes, sata_host_ahci.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 372 
<li>Call Chain = ahci_cache_flush &rArr; ahci_cmd_issue &rArr; ahci_cmd_complete_wait  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[af9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_flush_cache
<li><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_issue
<li><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_flush_cache_ext
<li><a href="#[af1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_slot_free
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
</ul>
<br>[Called By]<ul>
<li><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_sync
</ul>
<p><strong><a name="[add]"></a>ahci_data_set_trim</strong>(108 bytes, Stack size 20 btyes, sata_host_ahci.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 372 
<li>Call Chain = ahci_data_set_trim &rArr; ahci_cmd_issue &rArr; ahci_cmd_complete_wait  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[b0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_data_set_management_trim
<li><a href="#[af1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_slot_free
<li><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_issue
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
</ul>
<br>[Called By]<ul>
<li><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_trim
</ul>
<p><strong><a name="[ade]"></a>ahci_raw_rw</strong>(168 bytes, Stack size 44 btyes, sata_host_ahci.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 112 
<li>Call Chain = ahci_raw_rw &rArr; ahci_cmd_rw_dma &rArr; ahci_prdt_setup2  </ul>
<br>[Calls]<ul>
<li><a href="#[b01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_rw_dma
<li><a href="#[b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_rw_ncq
</ul>
<p><strong><a name="[adf]"></a>ahci_sector_read</strong>(196 bytes, Stack size 28 btyes, sata_host_ahci.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 372 
<li>Call Chain = ahci_sector_read &rArr; ahci_cmd_read_sector_lba48 &rArr; ahci_inout_data_lba  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_read_sector_lba48
<li><a href="#[afb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_read_sector_lba28
<li><a href="#[b07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_read_multi_lba48
<li><a href="#[b06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_read_multi_lba28
<li><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_read_ncq
</ul>
<br>[Called By]<ul>
<li><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_read
</ul>
<p><strong><a name="[ae0]"></a>ahci_sector_write</strong>(206 bytes, Stack size 28 btyes, sata_host_ahci.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 372 
<li>Call Chain = ahci_sector_write &rArr; ahci_cmd_write_sector_lba48 &rArr; ahci_inout_data_lba  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[afe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_write_sector_lba48
<li><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_write_sector_lba28
<li><a href="#[b09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_write_multi_lba48
<li><a href="#[b05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_write_ncq
<li><a href="#[b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_write_multi_lba28
<li><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
</ul>
<br>[Called By]<ul>
<li><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_write
</ul>
<p><strong><a name="[ae1]"></a>ahci_ncq_queue_abort</strong>(114 bytes, Stack size 24 btyes, sata_host_ahci.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 376 
<li>Call Chain = ahci_ncq_queue_abort &rArr; ahci_cmd_issue &rArr; ahci_cmd_complete_wait  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[aff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_ncq_queue_mgmt
<li><a href="#[af1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_slot_free
<li><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_issue
<li><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
</ul>
<p><strong><a name="[ae2]"></a>ahci_ncq_deadline_handle</strong>(106 bytes, Stack size 24 btyes, sata_host_ahci.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 376 
<li>Call Chain = ahci_ncq_deadline_handle &rArr; ahci_cmd_issue &rArr; ahci_cmd_complete_wait  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[aff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_ncq_queue_mgmt
<li><a href="#[af1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_slot_free
<li><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_issue
<li><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
</ul>
<p><strong><a name="[ae3]"></a>ahci_error_recover</strong>(204 bytes, Stack size 8 btyes, sata_host_ahci.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 44 + In Cycle
<li>Call Chain = ahci_error_recover &rArr; ahci_hba_reset &rArr; ahci_identify_read  &rArr; ahci_cmd_issue  &rArr; ahci_cmd_complete_wait  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hba_reset
</ul>
<br>[Called By]<ul>
<li><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_error_handler
</ul>
<p><strong><a name="[ae4]"></a>ahci_error_handler</strong>(182 bytes, Stack size 12 btyes, sata_host_ahci.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 308 
<li>Call Chain = ahci_error_handler &rArr; log_error_id &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
<li><a href="#[ae3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_error_recover
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</ul>
<br>[Called By]<ul>
<li><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_trim
<li><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_sync
<li><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_write
<li><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_read
<li><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_probe
<li><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hba_reset
</ul>
<p><strong><a name="[ae5]"></a>ahci_cmd_slot_is_empty</strong>(78 bytes, Stack size 4 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</ul>
<br>[Called By]<ul>
<li><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_trim
<li><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_sync
<li><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_write
<li><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_read
</ul>
<p><strong><a name="[ae6]"></a>ahci_tfd_read</strong>(28 bytes, Stack size 0 btyes, sata_host_ahci_cmd.o(.text.ahci_tfd_read))<br>
<p><strong><a name="[ae7]"></a>ahci_cmd_identify</strong>(72 bytes, Stack size 0 btyes, sata_host_ahci_cmd.o(.text.ahci_cmd_identify))<br>
<br>[Stack]<ul><li>Max Depth = 332 
<li>Call Chain = ahci_cmd_identify &rArr; ahci_inout_data_lba &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_inout_data_lba
</ul>
<br>[Called By]<ul>
<li><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_identify_read
</ul>
<p><strong><a name="[ae8]"></a>ahci_cmd_sw_reset</strong>(72 bytes, Stack size 0 btyes, sata_host_ahci_cmd.o(.text.ahci_cmd_sw_reset))<br>
<p><strong><a name="[ae9]"></a>ahci_cmd_exec_diag</strong>(40 bytes, Stack size 0 btyes, sata_host_ahci_cmd.o(.text.ahci_cmd_exec_diag))<br>
<p><strong><a name="[aea]"></a>ahci_cmd_intr_enable</strong>(38 bytes, Stack size 0 btyes, sata_host_ahci_cmd.o(.text.ahci_cmd_intr_enable))<br>
<p><strong><a name="[aeb]"></a>ahci_cmd_set_features</strong>(54 bytes, Stack size 4 btyes, sata_host_ahci_cmd.o(.text.ahci_cmd_set_features))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = ahci_cmd_set_features &rArr; ahci_non_data_lba </ul>
<br>[Calls]<ul>
<li><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_non_data_lba
</ul>
<br>[Called By]<ul>
<li><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_xfer_mode_set
</ul>
<p><strong><a name="[aec]"></a>ahci_cmd_read_log_ext</strong>(84 bytes, Stack size 0 btyes, sata_host_ahci_cmd.o(.text.ahci_cmd_read_log_ext))<br>
<p><strong><a name="[aed]"></a>ahci_cmd_set_multiple_mode</strong>(50 bytes, Stack size 0 btyes, sata_host_ahci_cmd.o(.text.ahci_cmd_set_multiple_mode))<br>
<p><strong><a name="[aee]"></a>ahci_cmd_sleep_standby</strong>(76 bytes, Stack size 0 btyes, sata_host_ahci_cmd.o(.text.ahci_cmd_sleep_standby))<br>
<p><strong><a name="[aef]"></a>ahci_cmd_smart</strong>(164 bytes, Stack size 0 btyes, sata_host_ahci_cmd.o(.text.ahci_cmd_smart))<br>
<p><strong><a name="[af0]"></a>ahci_cmd_security</strong>(114 bytes, Stack size 0 btyes, sata_host_ahci_cmd.o(.text.ahci_cmd_security))<br>
<p><strong><a name="[af1]"></a>ahci_cmd_slot_free</strong>(10 bytes, Stack size 0 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_write
<li><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_read
<li><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_complete_wait
<li><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cache_flush
<li><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_data_set_trim
<li><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_ncq_queue_abort
<li><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_ncq_deadline_handle
<li><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_xfer_mode_set
<li><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_identify_read
<li><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_passthru
</ul>
<p><strong><a name="[af2]"></a>ahci_cmd_slot_get</strong>(20 bytes, Stack size 0 btyes, sata_host_ahci_cmd.o(.fast))<br>
<p><strong><a name="[af3]"></a>ahci_usable_cmd_slot_get</strong>(120 bytes, Stack size 20 btyes, sata_host_ahci_cmd.o(.fast))<br>
<p><strong><a name="[af4]"></a>ahci_fis_rx</strong>(156 bytes, Stack size 12 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hex_print
</ul>
<br>[Called By]<ul>
<li><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_complete_wait
</ul>
<p><strong><a name="[af5]"></a>ahci_cmd_issue</strong>(62 bytes, Stack size 4 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 352 
<li>Call Chain = ahci_cmd_issue &rArr; ahci_cmd_complete_wait &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_complete_wait
</ul>
<br>[Called By]<ul>
<li><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_write
<li><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_read
<li><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cache_flush
<li><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_data_set_trim
<li><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_ncq_queue_abort
<li><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_ncq_deadline_handle
<li><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_xfer_mode_set
<li><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_identify_read
<li><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_passthru
</ul>
<p><strong><a name="[af6]"></a>ahci_non_data_lba</strong>(404 bytes, Stack size 24 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_passthru
<li><a href="#[af9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_flush_cache
<li><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_flush_cache_ext
<li><a href="#[b0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_read_max_address_ext
<li><a href="#[b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_read_max_address
<li><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_read_verify_sectors
<li><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_read_verify_sectors_ext
<li><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_set_features
</ul>
<p><strong><a name="[af7]"></a>ahci_inout_data_lba</strong>(348 bytes, Stack size 36 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 332 
<li>Call Chain = ahci_inout_data_lba &rArr; log_error_id &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_prdt_pre_setup
<li><a href="#[ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__umoddi3
<li><a href="#[c9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivdi3
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
</ul>
<br>[Called By]<ul>
<li><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_passthru
<li><a href="#[afb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_read_sector_lba28
<li><a href="#[afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_read_sector_lba48
<li><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_write_sector_lba28
<li><a href="#[afe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_write_sector_lba48
<li><a href="#[b06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_read_multi_lba28
<li><a href="#[b07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_read_multi_lba48
<li><a href="#[b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_write_multi_lba28
<li><a href="#[b09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_write_multi_lba48
<li><a href="#[b0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_data_set_management_trim
<li><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_identify
</ul>
<p><strong><a name="[af8]"></a>ahci_dma_ncq_lba</strong>(214 bytes, Stack size 12 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 52 
<li>Call Chain = ahci_dma_ncq_lba &rArr; ahci_prdt_pre_setup &rArr; ahci_prdt_setup  </ul>
<br>[Calls]<ul>
<li><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_prdt_pre_setup
</ul>
<br>[Called By]<ul>
<li><a href="#[aff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_ncq_queue_mgmt
<li><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_read_ncq
<li><a href="#[b05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_write_ncq
</ul>
<p><strong><a name="[af9]"></a>ahci_cmd_flush_cache</strong>(64 bytes, Stack size 4 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = ahci_cmd_flush_cache &rArr; ahci_non_data_lba </ul>
<br>[Calls]<ul>
<li><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_non_data_lba
</ul>
<br>[Called By]<ul>
<li><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cache_flush
</ul>
<p><strong><a name="[afa]"></a>ahci_cmd_flush_cache_ext</strong>(64 bytes, Stack size 4 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = ahci_cmd_flush_cache_ext &rArr; ahci_non_data_lba </ul>
<br>[Calls]<ul>
<li><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_non_data_lba
</ul>
<br>[Called By]<ul>
<li><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cache_flush
</ul>
<p><strong><a name="[afb]"></a>ahci_cmd_read_sector_lba28</strong>(108 bytes, Stack size 4 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 336 
<li>Call Chain = ahci_cmd_read_sector_lba28 &rArr; ahci_inout_data_lba &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_inout_data_lba
</ul>
<br>[Called By]<ul>
<li><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_sector_read
</ul>
<p><strong><a name="[afc]"></a>ahci_cmd_read_sector_lba48</strong>(88 bytes, Stack size 12 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = ahci_cmd_read_sector_lba48 &rArr; ahci_inout_data_lba &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_inout_data_lba
</ul>
<br>[Called By]<ul>
<li><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_sector_read
</ul>
<p><strong><a name="[afd]"></a>ahci_cmd_write_sector_lba28</strong>(108 bytes, Stack size 4 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 336 
<li>Call Chain = ahci_cmd_write_sector_lba28 &rArr; ahci_inout_data_lba &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_inout_data_lba
</ul>
<br>[Called By]<ul>
<li><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_sector_write
</ul>
<p><strong><a name="[afe]"></a>ahci_cmd_write_sector_lba48</strong>(88 bytes, Stack size 12 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = ahci_cmd_write_sector_lba48 &rArr; ahci_inout_data_lba &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_inout_data_lba
</ul>
<br>[Called By]<ul>
<li><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_sector_write
</ul>
<p><strong><a name="[aff]"></a>ahci_cmd_ncq_queue_mgmt</strong>(118 bytes, Stack size 12 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 64 
<li>Call Chain = ahci_cmd_ncq_queue_mgmt &rArr; ahci_dma_ncq_lba &rArr; ahci_prdt_pre_setup  &rArr; ahci_prdt_setup  </ul>
<br>[Calls]<ul>
<li><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_dma_ncq_lba
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</ul>
<br>[Called By]<ul>
<li><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_ncq_queue_abort
<li><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_ncq_deadline_handle
</ul>
<p><strong><a name="[b00]"></a>ahci_cmd_rw_ncq</strong>(246 bytes, Stack size 28 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 64 
<li>Call Chain = ahci_cmd_rw_ncq &rArr; ahci_prdt_setup2 </ul>
<br>[Calls]<ul>
<li><a href="#[ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_prdt_setup2
</ul>
<br>[Called By]<ul>
<li><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_raw_rw
</ul>
<p><strong><a name="[b01]"></a>ahci_cmd_rw_dma</strong>(248 bytes, Stack size 32 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 68 
<li>Call Chain = ahci_cmd_rw_dma &rArr; ahci_prdt_setup2 </ul>
<br>[Calls]<ul>
<li><a href="#[ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_prdt_setup2
</ul>
<br>[Called By]<ul>
<li><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_raw_rw
</ul>
<p><strong><a name="[b02]"></a>ahci_cmd_rw_multi</strong>(216 bytes, Stack size 28 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 64 
<li>Call Chain = ahci_cmd_rw_multi &rArr; ahci_prdt_setup2 </ul>
<br>[Calls]<ul>
<li><a href="#[ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_prdt_setup2
</ul>
<p><strong><a name="[b03]"></a>ahci_quick_rw</strong>(138 bytes, Stack size 8 btyes, sata_host_ahci_cmd.o(.fast))<br>
<p><strong><a name="[b04]"></a>ahci_cmd_read_ncq</strong>(138 bytes, Stack size 12 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 64 
<li>Call Chain = ahci_cmd_read_ncq &rArr; ahci_dma_ncq_lba &rArr; ahci_prdt_pre_setup  &rArr; ahci_prdt_setup  </ul>
<br>[Calls]<ul>
<li><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_dma_ncq_lba
</ul>
<br>[Called By]<ul>
<li><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_sector_read
</ul>
<p><strong><a name="[b05]"></a>ahci_cmd_write_ncq</strong>(138 bytes, Stack size 12 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 64 
<li>Call Chain = ahci_cmd_write_ncq &rArr; ahci_dma_ncq_lba &rArr; ahci_prdt_pre_setup  &rArr; ahci_prdt_setup  </ul>
<br>[Calls]<ul>
<li><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_dma_ncq_lba
</ul>
<br>[Called By]<ul>
<li><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_sector_write
</ul>
<p><strong><a name="[b06]"></a>ahci_cmd_read_multi_lba28</strong>(78 bytes, Stack size 8 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 340 
<li>Call Chain = ahci_cmd_read_multi_lba28 &rArr; ahci_inout_data_lba &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_inout_data_lba
</ul>
<br>[Called By]<ul>
<li><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_sector_read
</ul>
<p><strong><a name="[b07]"></a>ahci_cmd_read_multi_lba48</strong>(78 bytes, Stack size 12 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = ahci_cmd_read_multi_lba48 &rArr; ahci_inout_data_lba &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_inout_data_lba
</ul>
<br>[Called By]<ul>
<li><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_sector_read
</ul>
<p><strong><a name="[b08]"></a>ahci_cmd_write_multi_lba28</strong>(78 bytes, Stack size 8 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 340 
<li>Call Chain = ahci_cmd_write_multi_lba28 &rArr; ahci_inout_data_lba &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_inout_data_lba
</ul>
<br>[Called By]<ul>
<li><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_sector_write
</ul>
<p><strong><a name="[b09]"></a>ahci_cmd_write_multi_lba48</strong>(78 bytes, Stack size 12 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = ahci_cmd_write_multi_lba48 &rArr; ahci_inout_data_lba &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_inout_data_lba
</ul>
<br>[Called By]<ul>
<li><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_sector_write
</ul>
<p><strong><a name="[b0a]"></a>ahci_cmd_data_set_management_trim</strong>(92 bytes, Stack size 8 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 340 
<li>Call Chain = ahci_cmd_data_set_management_trim &rArr; ahci_inout_data_lba &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_inout_data_lba
</ul>
<br>[Called By]<ul>
<li><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_data_set_trim
</ul>
<p><strong><a name="[b0b]"></a>ahci_cmd_read_max_address_ext</strong>(54 bytes, Stack size 4 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = ahci_cmd_read_max_address_ext &rArr; ahci_non_data_lba </ul>
<br>[Calls]<ul>
<li><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_non_data_lba
</ul>
<p><strong><a name="[b0c]"></a>ahci_cmd_read_max_address</strong>(40 bytes, Stack size 4 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = ahci_cmd_read_max_address &rArr; ahci_non_data_lba </ul>
<br>[Calls]<ul>
<li><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_non_data_lba
</ul>
<p><strong><a name="[b0d]"></a>ahci_cmd_read_verify_sectors</strong>(58 bytes, Stack size 4 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = ahci_cmd_read_verify_sectors &rArr; ahci_non_data_lba </ul>
<br>[Calls]<ul>
<li><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_non_data_lba
</ul>
<p><strong><a name="[b0e]"></a>ahci_cmd_read_verify_sectors_ext</strong>(66 bytes, Stack size 8 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = ahci_cmd_read_verify_sectors_ext &rArr; ahci_non_data_lba </ul>
<br>[Calls]<ul>
<li><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_non_data_lba
</ul>
<p><strong><a name="[b0f]"></a>delay_init</strong>(10 bytes, Stack size 0 btyes, common_delay.o(.text.delay_init))<br>
<p><strong><a name="[b10]"></a>udelay</strong>(42 bytes, Stack size 0 btyes, common_delay.o(.fast))<br>
<p><strong><a name="[b11]"></a>delay</strong>(18 bytes, Stack size 0 btyes, common_delay.o(.fast))<br>
<p><strong><a name="[b12]"></a>mdelay</strong>(14 bytes, Stack size 0 btyes, common_delay.o(.fast))<br>
<p><strong><a name="[b14]"></a>log_st_init</strong>(188 bytes, Stack size 0 btyes, common_log.o(.text.log_st_init))<br>
<p><strong><a name="[b15]"></a>log_init</strong>(264 bytes, Stack size 0 btyes, common_log.o(.text.log_init))<br>
<p><strong><a name="[b16]"></a>log_write</strong>(356 bytes, Stack size 64 btyes, common_log.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 104 
<li>Call Chain = log_write &rArr; norflash_write &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_write
<li><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_byte_write
<li><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_sector_erase
</ul>
<br>[Called By]<ul>
<li><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_st_data.part.0
<li><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_nonvolatile
</ul>
<p><strong><a name="[b18]"></a>log_read</strong>(158 bytes, Stack size 32 btyes, common_log.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_read
</ul>
<p><strong><a name="[b19]"></a>log_nonvolatile</strong>(174 bytes, Stack size 188 btyes, common_log.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 292 
<li>Call Chain = log_nonvolatile &rArr; log_write &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_write
<li><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_complete_wait
<li><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
</ul>
<p><strong><a name="[b1a]"></a>log_error_id</strong>(20 bytes, Stack size 4 btyes, common_log.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 296 
<li>Call Chain = log_error_id &rArr; log_nonvolatile &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_nonvolatile
</ul>
<br>[Called By]<ul>
<li><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_link_change_handler
<li><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_port_reset
<li><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_complete_wait
<li><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cache_flush
<li><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_data_set_trim
<li><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_sector_write
<li><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_ncq_queue_abort
<li><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_ncq_deadline_handle
<li><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_error_handler
<li><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_identify_read
<li><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hba_reset
<li><a href="#[ace]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hw_init
<li><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_inout_data_lba
<li><a href="#[bae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_clk_set
<li><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_frame_transmit
<li><a href="#[bb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_frame_recv_poll
<li><a href="#[baa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_tx_queue_init
<li><a href="#[bab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_rx_queue_init
<li><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_hw_init
</ul>
<p><strong><a name="[b1b]"></a>log_st_data</strong>(28 bytes, Stack size 4 btyes, common_log.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 64 
<li>Call Chain = log_st_data &rArr; ascii_to_dec </ul>
<br>[Calls]<ul>
<li><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii_to_dec
</ul>
<p><strong><a name="[b1d]"></a>mem_hw_init</strong>(40 bytes, Stack size 4 btyes, common_memcpy_hw.o(.text.mem_hw_init))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = mem_hw_init &rArr; intr_disconnect &rArr; intr_cache_flush.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[c94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_disconnect
<li><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_intr_enable
</ul>
<br>[Called By]<ul>
<li><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmem_init
</ul>
<p><strong><a name="[b1e]"></a>memcpy_hw</strong>(136 bytes, Stack size 28 btyes, common_memcpy_hw.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = memcpy_hw &rArr; mem_hw_internal &rArr; dma_intr_status  </ul>
<br>[Calls]<ul>
<li><a href="#[b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_hw_internal
</ul>
<br>[Called By]<ul>
<li><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy
</ul>
<p><strong><a name="[b1f]"></a>memset_hw</strong>(132 bytes, Stack size 32 btyes, common_memcpy_hw.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 40 
<li>Call Chain = memset_hw &rArr; mem_hw_internal &rArr; dma_intr_status  </ul>
<br>[Calls]<ul>
<li><a href="#[b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_hw_internal
</ul>
<br>[Called By]<ul>
<li><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemset
</ul>
<p><strong><a name="[b21]"></a>perf_is_done</strong>(22 bytes, Stack size 0 btyes, common_perf.o(.text.perf_is_done))<br>
<p><strong><a name="[b22]"></a>perf_statistic</strong>(60 bytes, Stack size 0 btyes, common_perf.o(.text.perf_statistic))<br>
<p><strong><a name="[b23]"></a>perf_result</strong>(300 bytes, Stack size 0 btyes, common_perf.o(.text.perf_result))<br>
<p><strong><a name="[b24]"></a>perf_start</strong>(122 bytes, Stack size 0 btyes, common_perf.o(.text.perf_start))<br>
<p><strong><a name="[b26]"></a>mp_info_get</strong>(72 bytes, Stack size 0 btyes, component_mp.o(.text.mp_info_get))<br>
<p><strong><a name="[b27]"></a>dfu_init</strong>(118 bytes, Stack size 0 btyes, component_mp.o(.text.dfu_init))<br>
<p><strong><a name="[b28]"></a>dfu_update</strong>(58 bytes, Stack size 0 btyes, component_mp.o(.text.dfu_update))<br>
<p><strong><a name="[b29]"></a>dfu_final</strong>(68 bytes, Stack size 0 btyes, component_mp.o(.text.dfu_final))<br>
<p><strong><a name="[b2b]"></a>snfc_cmd_send</strong>(164 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.snfc_cmd_send))<br>
<p><strong><a name="[b2c]"></a>snfc_cmd_fast_send</strong>(22 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.snfc_cmd_fast_send))<br>
<p><strong><a name="[b2d]"></a>snfc_port_switch</strong>(22 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.snfc_port_switch))<br>
<p><strong><a name="[b2e]"></a>snfc_dma_en_set</strong>(20 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.snfc_dma_en_set))<br>
<p><strong><a name="[b2f]"></a>snfc_cmd_cmplt_sts_is_set</strong>(12 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.snfc_cmd_cmplt_sts_is_set))<br>
<p><strong><a name="[b30]"></a>snfc_cmd_cmplt_sts_clr</strong>(10 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.snfc_cmd_cmplt_sts_clr))<br>
<p><strong><a name="[b31]"></a>spiflash_hw_init</strong>(666 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.spiflash_hw_init))<br>
<p><strong><a name="[b32]"></a>spiflash_hw_conf_get</strong>(154 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.spiflash_hw_conf_get))<br>
<p><strong><a name="[b33]"></a>spiflash_write_enable</strong>(66 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.spiflash_write_enable))<br>
<p><strong><a name="[b34]"></a>spiflash_status_poll</strong>(66 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.spiflash_status_poll))<br>
<p><strong><a name="[b35]"></a>spiflash_read_cmd_send</strong>(322 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.spiflash_read_cmd_send))<br>
<p><strong><a name="[b36]"></a>spiflash_byte_read</strong>(104 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.spiflash_byte_read))<br>
<p><strong><a name="[b37]"></a>spiflash_byte_write</strong>(182 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.spiflash_byte_write))<br>
<p><strong><a name="[b38]"></a>spiflash_read</strong>(180 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.spiflash_read))<br>
<p><strong><a name="[b39]"></a>spiflash_write</strong>(300 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.spiflash_write))<br>
<p><strong><a name="[b3a]"></a>spiflash_sector_erase</strong>(148 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.spiflash_sector_erase))<br>
<p><strong><a name="[b3b]"></a>spiflash_block_erase</strong>(154 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.spiflash_block_erase))<br>
<p><strong><a name="[b3c]"></a>spiflash_chip_erase</strong>(120 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.spiflash_chip_erase))<br>
<p><strong><a name="[b3d]"></a>spiflash_capacity_get</strong>(162 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.spiflash_capacity_get))<br>
<p><strong><a name="[b3f]"></a>sata_diagnose</strong>(24 bytes, Stack size 0 btyes, sata_device_sata.o(.text.sata_diagnose))<br>
<p><strong><a name="[b40]"></a>sata_ctrller_reset</strong>(76 bytes, Stack size 0 btyes, sata_device_sata.o(.text.sata_ctrller_reset))<br>
<p><strong><a name="[b41]"></a>sata_host_detec</strong>(144 bytes, Stack size 0 btyes, sata_device_sata.o(.text.sata_host_detec))<br>
<p><strong><a name="[b42]"></a>sata_host_detec_status_get</strong>(12 bytes, Stack size 0 btyes, sata_device_sata.o(.text.sata_host_detec_status_get))<br>
<p><strong><a name="[b43]"></a>sata_slumber</strong>(14 bytes, Stack size 0 btyes, sata_device_sata.o(.text.sata_slumber))<br>
<p><strong><a name="[b44]"></a>sata_lower_power_enter</strong>(12 bytes, Stack size 0 btyes, sata_device_sata.o(.text.sata_lower_power_enter))<br>
<p><strong><a name="[b45]"></a>sata_power_mode_set</strong>(20 bytes, Stack size 0 btyes, sata_device_sata.o(.text.sata_power_mode_set))<br>
<p><strong><a name="[b46]"></a>sata_sleep_enable</strong>(12 bytes, Stack size 0 btyes, sata_device_sata.o(.text.sata_sleep_enable))<br>
<p><strong><a name="[b47]"></a>sata_sleep_disable</strong>(12 bytes, Stack size 0 btyes, sata_device_sata.o(.text.sata_sleep_disable))<br>
<p><strong><a name="[b48]"></a>sata_speed_set</strong>(30 bytes, Stack size 0 btyes, sata_device_sata.o(.text.sata_speed_set))<br>
<p><strong><a name="[b49]"></a>sata_err_bits_get</strong>(8 bytes, Stack size 0 btyes, sata_device_sata.o(.text.sata_err_bits_get))<br>
<p><strong><a name="[b4a]"></a>sata_err_bits_clr</strong>(8 bytes, Stack size 0 btyes, sata_device_sata.o(.text.sata_err_bits_clr))<br>
<p><strong><a name="[b4b]"></a>sata_hw_init</strong>(86 bytes, Stack size 0 btyes, sata_device_sata.o(.text.sata_hw_init))<br>
<p><strong><a name="[b4c]"></a>sata_prdt_addr_set</strong>(60 bytes, Stack size 0 btyes, sata_device_sata.o(.text.sata_prdt_addr_set))<br>
<p><strong><a name="[b4d]"></a>sata_dma_abort</strong>(14 bytes, Stack size 0 btyes, sata_device_sata.o(.text.sata_dma_abort))<br>
<p><strong><a name="[b4e]"></a>secu_psw_addr_get</strong>(104 bytes, Stack size 0 btyes, sata_device_sata.o(.text.secu_psw_addr_get))<br>
<p><strong><a name="[b4f]"></a>sata_remainder_cnt</strong>(10 bytes, Stack size 0 btyes, sata_device_sata.o(.text.sata_remainder_cnt))<br>
<p><strong><a name="[b50]"></a>sata_speed_get</strong>(12 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[b51]"></a>sata_cmd_illegal</strong>(14 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[b52]"></a>sata_cmd_abort</strong>(12 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[b53]"></a>sata_is_lba_dev</strong>(12 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[b54]"></a>sata_cmd_code_get</strong>(10 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[b55]"></a>sata_cmd_fea_get</strong>(12 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[b56]"></a>sata_cmd_tag_get</strong>(12 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[b57]"></a>sata_cmd_lba_get</strong>(66 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[b58]"></a>sata_cmd_cnt_get</strong>(48 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[b59]"></a>sata_cmd_device_region_get</strong>(10 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[b5a]"></a>sata_cmd_chs_head_get</strong>(12 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[b5b]"></a>sata_cmd_chs_cylinder_get</strong>(12 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[b5c]"></a>sata_cmd_chs_sector_get</strong>(10 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[b5d]"></a>sata_nd_cmd_d2h_send</strong>(14 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[b5e]"></a>sata_ncq_cmd_d2h_send</strong>(24 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[b5f]"></a>sata_h2d_parse</strong>(122 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[b61]"></a>sata_status</strong>(294 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[b62]"></a>sata_is_busy</strong>(32 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[b63]"></a>sata_io</strong>(816 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[b64]"></a>sata_intr_enable</strong>(8 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[b65]"></a>sata_intr_disable</strong>(14 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[b66]"></a>sata_intr_status</strong>(8 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[b67]"></a>sata_intr_clear</strong>(8 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[b68]"></a>emcc_ctrl_get</strong>(18 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_ctrl_get))<br>
<p><strong><a name="[b69]"></a>emcc_ctrl_set</strong>(18 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_ctrl_set))<br>
<p><strong><a name="[b6a]"></a>emcc_intmask_get</strong>(26 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_intmask_get))<br>
<p><strong><a name="[b6b]"></a>emcc_intmask_set</strong>(26 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_intmask_set))<br>
<p><strong><a name="[b6c]"></a>emcc_intsien_get</strong>(26 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_intsien_get))<br>
<p><strong><a name="[b6d]"></a>emcc_intsien_set</strong>(26 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_intsien_set))<br>
<p><strong><a name="[b6e]"></a>emcc_cmd_send</strong>(110 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[b6f]"></a>emcc_direct_res_long_get</strong>(56 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_direct_res_long_get))<br>
<p><strong><a name="[b70]"></a>emcc_ecsd_byte_get</strong>(208 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_ecsd_byte_get))<br>
<p><strong><a name="[b71]"></a>emcc_bus_timing_set</strong>(198 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_bus_timing_set))<br>
<p><strong><a name="[b72]"></a>emcc_tuning_ds_set</strong>(34 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_tuning_ds_set))<br>
<p><strong><a name="[b73]"></a>emcc_tuning_clk_set</strong>(28 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_tuning_clk_set))<br>
<p><strong><a name="[b74]"></a>emcc_bus_mode_set</strong>(248 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_bus_mode_set))<br>
<p><strong><a name="[b75]"></a>emcc_bus_mode_reset</strong>(50 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_bus_mode_reset))<br>
<p><strong><a name="[b76]"></a>emmc_intr_wait</strong>(66 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emmc_intr_wait))<br>
<p><strong><a name="[b77]"></a>emcc_clk_div_set</strong>(16 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_clk_div_set))<br>
<p><strong><a name="[b78]"></a>emcc_phy_div_set</strong>(36 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_phy_div_set))<br>
<p><strong><a name="[b79]"></a>emcc_phy_div_enable</strong>(38 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_phy_div_enable))<br>
<p><strong><a name="[b7a]"></a>emcc_phy_div_disable</strong>(38 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_phy_div_disable))<br>
<p><strong><a name="[b7b]"></a>emcc_idle_wait</strong>(66 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_idle_wait))<br>
<p><strong><a name="[b7c]"></a>emcc_direct_res_short_get</strong>(18 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[b7d]"></a>emcc_queue_res_get</strong>(26 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[b7e]"></a>emcc_qcmd_fifo_status_check</strong>(44 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[b7f]"></a>emcc_dcmd_reg_status_check</strong>(34 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[b80]"></a>emcc_device_busy_check</strong>(36 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[b81]"></a>emcc_fifo_reset</strong>(38 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[b82]"></a>emcc_reset</strong>(38 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[b83]"></a>emcc_junk_enable</strong>(26 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[b84]"></a>emcc_junk_disable</strong>(24 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[b85]"></a>emcc_force_clk_enable</strong>(24 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[b86]"></a>emcc_force_clk_disable</strong>(24 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[b87]"></a>emcc_wr_fifo_state_get</strong>(34 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[b88]"></a>emcc_intr_check</strong>(34 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[b89]"></a>emcc_intr_mask</strong>(32 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[b8a]"></a>emcc_intr_unmask</strong>(30 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[b8b]"></a>emcc_intr_enable</strong>(48 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[b8c]"></a>emcc_intr_disable</strong>(36 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[b8d]"></a>emcc_intr_status</strong>(24 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[b8e]"></a>emcc_intr_clear</strong>(24 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[b8f]"></a>emcc_data_port_get</strong>(16 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[b90]"></a>emcc_data_port_belong</strong>(12 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[b91]"></a>gmac_phy_addr_set</strong>(12 bytes, Stack size 0 btyes, gmac_gmac.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[b92]"></a>gmac_addr_filter_set</strong>(88 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_addr_filter_set))<br>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[b93]"></a>gmac_addr_filter_get</strong>(22 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_addr_filter_get))<br>
<br>[Called By]<ul>
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[b94]"></a>gmac_hash_filter_set</strong>(292 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_hash_filter_set))<br>
<br>[Called By]<ul>
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[b95]"></a>gmac_hash_filter_get</strong>(24 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_hash_filter_get))<br>
<br>[Called By]<ul>
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[b96]"></a>gmac_mac_addr_set</strong>(66 bytes, Stack size 8 btyes, gmac_gmac.o(.text.gmac_mac_addr_set))<br>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[b97]"></a>gmac_mac_addr_get</strong>(70 bytes, Stack size 8 btyes, gmac_gmac.o(.text.gmac_mac_addr_get))<br>
<br>[Called By]<ul>
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[b98]"></a>gmac_flow_ctrl_enable</strong>(134 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_flow_ctrl_enable))<br>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[b99]"></a>gmac_flow_ctrl_disable</strong>(32 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_flow_ctrl_disable))<br>
<br>[Called By]<ul>
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[b9a]"></a>gmac_tx_enable</strong>(28 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_tx_enable))<br>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[b9b]"></a>gmac_tx_disable</strong>(24 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_tx_disable))<br>
<br>[Called By]<ul>
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[b9c]"></a>gmac_rx_enable</strong>(32 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_rx_enable))<br>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[b9d]"></a>gmac_rx_disable</strong>(24 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_rx_disable))<br>
<br>[Called By]<ul>
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[b9e]"></a>gmac_jumbo_frame_enable</strong>(24 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_jumbo_frame_enable))<br>
<br>[Called By]<ul>
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[b9f]"></a>gmac_jumbo_frame_disable</strong>(22 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_jumbo_frame_disable))<br>
<br>[Called By]<ul>
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[ba0]"></a>gmac_chksum_offload_set</strong>(78 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_chksum_offload_set))<br>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[ba1]"></a>gmac_checksum_offload_get</strong>(18 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_checksum_offload_get))<br>
<p><strong><a name="[ba2]"></a>gmac_wol_wakeup_frame_filter_set</strong>(404 bytes, Stack size 24 btyes, gmac_gmac.o(.text.gmac_wol_wakeup_frame_filter_set))<br>
<br>[Called By]<ul>
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[ba3]"></a>gmac_wol_wakeup_event_set</strong>(34 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_wol_wakeup_event_set))<br>
<br>[Called By]<ul>
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[ba4]"></a>gmac_wol_wakeup_event_get</strong>(22 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_wol_wakeup_event_get))<br>
<p><strong><a name="[ba5]"></a>gmac_wol_mode_enter</strong>(78 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_wol_mode_enter))<br>
<br>[Called By]<ul>
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[ba6]"></a>gmac_wol_mode_exit</strong>(62 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_wol_mode_exit))<br>
<br>[Called By]<ul>
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[ba7]"></a>gmac_wol_state_poll</strong>(24 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_wol_state_poll))<br>
<br>[Called By]<ul>
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[ba8]"></a>gmac_speed_duplex_set</strong>(92 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_speed_duplex_set))<br>
<br>[Called By]<ul>
<li><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_link_update
</ul>
<p><strong><a name="[ba9]"></a>gmac_statistics_get</strong>(158 bytes, Stack size 4 btyes, gmac_gmac.o(.text.gmac_statistics_get))<br>
<br>[Called By]<ul>
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[baa]"></a>gmac_tx_queue_init</strong>(230 bytes, Stack size 24 btyes, gmac_gmac.o(.text.gmac_tx_queue_init))<br>
<br>[Stack]<ul><li>Max Depth = 320 
<li>Call Chain = gmac_tx_queue_init &rArr; log_error_id &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[bab]"></a>gmac_rx_queue_init</strong>(236 bytes, Stack size 28 btyes, gmac_gmac.o(.text.gmac_rx_queue_init))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = gmac_rx_queue_init &rArr; log_error_id &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[bac]"></a>gmac_hw_init</strong>(108 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_hw_init))<br>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[bad]"></a>gmac_hw_deinit</strong>(34 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_hw_deinit))<br>
<br>[Called By]<ul>
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[bae]"></a>gmac_phy_mmd_clk_set</strong>(76 bytes, Stack size 12 btyes, gmac_gmac.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 308 
<li>Call Chain = gmac_phy_mmd_clk_set &rArr; log_error_id &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
<li><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_get
</ul>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[baf]"></a>gmac_phy_mmd_read16</strong>(76 bytes, Stack size 0 btyes, gmac_gmac.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvell_phy_init
<li><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvell_phy_intr_disable
<li><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvell_phy_intr_status
<li><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvell_phy_intr_clear
<li><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvell_phy_link_status_get
<li><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvell_phy_speed_duplex_change
</ul>
<p><strong><a name="[bb0]"></a>gmac_phy_mmd_write16</strong>(94 bytes, Stack size 0 btyes, gmac_gmac.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvell_phy_intr_enable
<li><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvell_phy_init
<li><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvell_phy_intr_disable
<li><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvell_phy_intr_status
<li><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvell_phy_intr_clear
<li><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvell_phy_link_status_get
<li><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvell_phy_speed_duplex_change
</ul>
<p><strong><a name="[bb1]"></a>gmac_intr_enable</strong>(18 bytes, Stack size 0 btyes, gmac_gmac.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_rx
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[bb2]"></a>gmac_intr_disable</strong>(24 bytes, Stack size 0 btyes, gmac_gmac.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth1_isr
</ul>
<p><strong><a name="[bb3]"></a>gmac_intr_status</strong>(18 bytes, Stack size 0 btyes, gmac_gmac.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth1_isr
</ul>
<p><strong><a name="[bb4]"></a>gmac_intr_clear</strong>(18 bytes, Stack size 0 btyes, gmac_gmac.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth1_isr
</ul>
<p><strong><a name="[bb5]"></a>gmac_frame_transmit</strong>(406 bytes, Stack size 16 btyes, gmac_gmac.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 312 
<li>Call Chain = gmac_frame_transmit &rArr; log_error_id &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
</ul>
<br>[Called By]<ul>
<li><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_tx
</ul>
<p><strong><a name="[bb6]"></a>gmac_frame_transmitted_buf_poll</strong>(138 bytes, Stack size 0 btyes, gmac_gmac.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_tx
</ul>
<p><strong><a name="[bb7]"></a>gmac_frame_recv_poll</strong>(666 bytes, Stack size 28 btyes, gmac_gmac.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = gmac_frame_recv_poll &rArr; log_error_id &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
</ul>
<br>[Called By]<ul>
<li><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_rx
</ul>
<p><strong><a name="[bb8]"></a>gmac_rx_buf_attach</strong>(84 bytes, Stack size 0 btyes, gmac_gmac.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_rx
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[bb9]"></a>gmac_rx_valid_buf</strong>(86 bytes, Stack size 0 btyes, gmac_gmac.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_rx
</ul>
<p><strong><a name="[bba]"></a>gmac_rx_buf_processed</strong>(44 bytes, Stack size 0 btyes, gmac_gmac.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_rx
</ul>
<p><strong><a name="[bbd]"></a>set_reg_bit</strong>(14 bytes, Stack size 0 btyes, xhci_xhci.o(.text.set_reg_bit))<br>
<p><strong><a name="[bbe]"></a>clear_reg_bit</strong>(16 bytes, Stack size 0 btyes, xhci_xhci.o(.text.clear_reg_bit))<br>
<p><strong><a name="[bbf]"></a>xhci_halt</strong>(22 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_halt))<br>
<p><strong><a name="[bc0]"></a>xhci_run</strong>(56 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_run))<br>
<p><strong><a name="[bc1]"></a>xhci_reset</strong>(28 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_reset))<br>
<p><strong><a name="[bc2]"></a>xhci_find_new_dequeue_state</strong>(36 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_find_new_dequeue_state))<br>
<p><strong><a name="[bc3]"></a>xhci_set_tr_deq_ptr</strong>(118 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_set_tr_deq_ptr))<br>
<p><strong><a name="[bc4]"></a>xhci_ep_reset</strong>(138 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_ep_reset))<br>
<p><strong><a name="[bc5]"></a>xhci_bandwidth_check</strong>(70 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_bandwidth_check))<br>
<p><strong><a name="[bc6]"></a>xhci_get_endpoint_interval</strong>(214 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_get_endpoint_interval))<br>
<p><strong><a name="[bc7]"></a>xhci_drop_endpoint</strong>(132 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_drop_endpoint))<br>
<p><strong><a name="[bc8]"></a>xhci_add_endpoint</strong>(604 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_add_endpoint))<br>
<p><strong><a name="[bc9]"></a>xhci_reset_device</strong>(166 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_reset_device))<br>
<p><strong><a name="[bca]"></a>xhci_set_ERDP</strong>(332 bytes, Stack size 0 btyes, xhci_xhci.o(.fast))<br>
<p><strong><a name="[bcb]"></a>xhci_set_dev_notification</strong>(20 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_set_dev_notification))<br>
<p><strong><a name="[bcc]"></a>xhci_set_port_arrays</strong>(240 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_set_port_arrays))<br>
<p><strong><a name="[bcd]"></a>xhci_mem_cleanup</strong>(60 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_mem_cleanup))<br>
<p><strong><a name="[bce]"></a>xhci_mem_init</strong>(632 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_mem_init))<br>
<p><strong><a name="[bcf]"></a>xhci_bulk_ep_index_get</strong>(248 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_bulk_ep_index_get))<br>
<p><strong><a name="[bd0]"></a>xhci_dev_free</strong>(144 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_dev_free))<br>
<p><strong><a name="[bd1]"></a>xhci_dev_alloc</strong>(396 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_dev_alloc))<br>
<p><strong><a name="[bd2]"></a>xhci_dev_stop</strong>(194 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_dev_stop))<br>
<p><strong><a name="[bd3]"></a>xhci_dev_set_address</strong>(344 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_dev_set_address))<br>
<p><strong><a name="[bd4]"></a>xhci_fs_maxp_check</strong>(92 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_fs_maxp_check))<br>
<p><strong><a name="[bd5]"></a>xhci_hw_init</strong>(26 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_hw_init))<br>
<p><strong><a name="[bd6]"></a>xhci_dev_speed_get</strong>(38 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_dev_speed_get))<br>
<p><strong><a name="[bd7]"></a>xhci_print_cap_regs</strong>(388 bytes, Stack size 0 btyes, xhci_xhci_dbg.o(.text.xhci_print_cap_regs))<br>
<p><strong><a name="[bd8]"></a>xhci_print_command_reg</strong>(120 bytes, Stack size 0 btyes, xhci_xhci_dbg.o(.text.xhci_print_command_reg))<br>
<p><strong><a name="[bd9]"></a>xhci_print_status_reg</strong>(138 bytes, Stack size 0 btyes, xhci_xhci_dbg.o(.text.xhci_print_status_reg))<br>
<p><strong><a name="[bda]"></a>xhci_print_op_regs</strong>(20 bytes, Stack size 0 btyes, xhci_xhci_dbg.o(.text.xhci_print_op_regs))<br>
<p><strong><a name="[bdb]"></a>xhci_print_ports</strong>(106 bytes, Stack size 0 btyes, xhci_xhci_dbg.o(.text.xhci_print_ports))<br>
<p><strong><a name="[bdc]"></a>xhci_print_ir_set</strong>(106 bytes, Stack size 0 btyes, xhci_xhci_dbg.o(.text.xhci_print_ir_set))<br>
<p><strong><a name="[bdd]"></a>xhci_print_run_regs</strong>(72 bytes, Stack size 0 btyes, xhci_xhci_dbg.o(.text.xhci_print_run_regs))<br>
<p><strong><a name="[bde]"></a>xhci_print_registers</strong>(2 bytes, Stack size 0 btyes, xhci_xhci_dbg.o(.text.xhci_print_registers))<br>
<p><strong><a name="[bdf]"></a>xhci_print_memory</strong>(2 bytes, Stack size 0 btyes, xhci_xhci_dbg.o(.text.xhci_print_memory))<br>
<p><strong><a name="[be0]"></a>xhci_port_status_check</strong>(10 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.text.xhci_port_status_check))<br>
<p><strong><a name="[be1]"></a>xhci_port_warm_reset</strong>(18 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.text.xhci_port_warm_reset))<br>
<p><strong><a name="[be3]"></a>xhci_link_segments</strong>(20 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.text.xhci_link_segments))<br>
<p><strong><a name="[be4]"></a>xhci_alloc_segments_for_ring</strong>(134 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.text.xhci_alloc_segments_for_ring))<br>
<p><strong><a name="[be5]"></a>xhci_ring_alloc</strong>(80 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.text.xhci_ring_alloc))<br>
<p><strong><a name="[be6]"></a>xhci_link_rings</strong>(184 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.text.xhci_link_rings))<br>
<p><strong><a name="[be7]"></a>xhci_test_and_clear_bit</strong>(30 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.text.xhci_test_and_clear_bit))<br>
<p><strong><a name="[be8]"></a>inc_deq</strong>(422 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.fast))<br>
<p><strong><a name="[be9]"></a>xhci_ring_cmd_db</strong>(12 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.text.xhci_ring_cmd_db))<br>
<p><strong><a name="[bea]"></a>handle_cmd_completion</strong>(294 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.text.handle_cmd_completion))<br>
<p><strong><a name="[beb]"></a>xhci_poll_rh_status</strong>(524 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.text.xhci_poll_rh_status))<br>
<p><strong><a name="[bec]"></a>handle_port_status</strong>(362 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.text.handle_port_status))<br>
<p><strong><a name="[bed]"></a>xhci_ctrl_xfer</strong>(444 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.text.xhci_ctrl_xfer))<br>
<p><strong><a name="[bee]"></a>xhci_async_ctrl_xfer</strong>(356 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.text.xhci_async_ctrl_xfer))<br>
<p><strong><a name="[bef]"></a>xhci_queue_command</strong>(70 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.text.xhci_queue_command))<br>
<p><strong><a name="[bf0]"></a>xhci_dev_attach_event</strong>(72 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.text.xhci_dev_attach_event))<br>
<p><strong><a name="[bf1]"></a>xhci_dev_dettach_event</strong>(72 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.text.xhci_dev_dettach_event))<br>
<p><strong><a name="[bf2]"></a>inc_enq</strong>(178 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.fast))<br>
<p><strong><a name="[bf3]"></a>xhci_ring_ep_db</strong>(20 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.fast))<br>
<p><strong><a name="[bf4]"></a>handle_tx_event</strong>(840 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.fast))<br>
<p><strong><a name="[bf5]"></a>xhci_isr</strong>(208 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.fast))<br>
<p><strong><a name="[bf6]"></a>prepare_room_on_ring</strong>(238 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.fast))<br>
<p><strong><a name="[bf7]"></a>xhci_td_size</strong>(66 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.fast))<br>
<p><strong><a name="[bf8]"></a>giveback_first_trb</strong>(56 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.fast))<br>
<p><strong><a name="[bf9]"></a>xhci_bulk_xfer</strong>(708 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.fast))<br>
<p><strong><a name="[bfa]"></a>xhci_async_bulk_xfer</strong>(544 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.fast))<br>
<p><strong><a name="[bfb]"></a>xhci_async_xfer_check</strong>(114 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.fast))<br>
<p><strong><a name="[bfc]"></a>xhci_os_read_usbsts</strong>(8 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_read_usbsts))<br>
<p><strong><a name="[bfd]"></a>xhci_os_port_change_status_get</strong>(8 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_port_change_status_get))<br>
<p><strong><a name="[bfe]"></a>xhci_os_port_change_status_clear</strong>(10 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_port_change_status_clear))<br>
<p><strong><a name="[bff]"></a>xhci_os_roothub_connect</strong>(40 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_roothub_connect))<br>
<p><strong><a name="[c00]"></a>xhci_os_roothub_disconnect</strong>(34 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_roothub_disconnect))<br>
<p><strong><a name="[c01]"></a>xhci_os_hw_init</strong>(8 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_hw_init))<br>
<p><strong><a name="[c02]"></a>xhci_os_halt</strong>(8 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_halt))<br>
<p><strong><a name="[c03]"></a>xhci_os_reset</strong>(8 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_reset))<br>
<p><strong><a name="[c04]"></a>xhci_os_run</strong>(8 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_run))<br>
<p><strong><a name="[c05]"></a>xhci_os_mem_init</strong>(20 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_mem_init))<br>
<p><strong><a name="[c06]"></a>xhci_os_status_flag_clear</strong>(36 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_status_flag_clear))<br>
<p><strong><a name="[c07]"></a>xhci_os_event_ring_update</strong>(34 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_event_ring_update))<br>
<p><strong><a name="[c08]"></a>xhci_os_hse_handler</strong>(16 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_hse_handler))<br>
<p><strong><a name="[c09]"></a>xhci_os_handle_event</strong>(114 bytes, Stack size 0 btyes, xhci_xhci_os.o(.fast))<br>
<p><strong><a name="[c0a]"></a>xhci_os_slot_request</strong>(12 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_slot_request))<br>
<p><strong><a name="[c0b]"></a>xhci_os_set_address</strong>(8 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_set_address))<br>
<p><strong><a name="[c0c]"></a>xhci_os_add_endpoint</strong>(100 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_add_endpoint))<br>
<p><strong><a name="[c0d]"></a>xhci_os_dev_free</strong>(38 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_dev_free))<br>
<p><strong><a name="[c0e]"></a>xhci_os_dev_speed_get</strong>(8 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_dev_speed_get))<br>
<p><strong><a name="[c0f]"></a>xhci_os_ctrl_xfer</strong>(8 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_ctrl_xfer))<br>
<p><strong><a name="[c10]"></a>xhci_os_bulk_xfer</strong>(8 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_bulk_xfer))<br>
<p><strong><a name="[c11]"></a>xhci_os_bandwidth_check</strong>(8 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_bandwidth_check))<br>
<p><strong><a name="[c12]"></a>xhci_os_bulk_ep_index_get</strong>(8 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_bulk_ep_index_get))<br>
<p><strong><a name="[c13]"></a>xhci_os_drop_endpoint</strong>(8 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_drop_endpoint))<br>
<p><strong><a name="[c14]"></a>xhci_os_ep_reset</strong>(8 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_ep_reset))<br>
<p><strong><a name="[c15]"></a>xhci_os_intr_xfer_check</strong>(54 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_intr_xfer_check))<br>
<p><strong><a name="[c16]"></a>xhci_os_intr_xfer</strong>(478 bytes, Stack size 0 btyes, xhci_xhci_os.o(.fast))<br>
<p><strong><a name="[c17]"></a>muxio_intr_status</strong>(8 bytes, Stack size 0 btyes, muxio_muxio.o(.fast))<br>
<p><strong><a name="[c18]"></a>muxio_intr_enable</strong>(258 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_intr_enable))<br>
<p><strong><a name="[c19]"></a>muxio_intr_disable</strong>(258 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_intr_disable))<br>
<p><strong><a name="[c1a]"></a>muxio_fs_wfifo_free_entries</strong>(10 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_fs_wfifo_free_entries))<br>
<p><strong><a name="[c1b]"></a>muxio_fs_rfifo_valid_entries</strong>(10 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_fs_rfifo_valid_entries))<br>
<p><strong><a name="[c1c]"></a>muxio_fs_cwfifo_free_entries</strong>(12 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_fs_cwfifo_free_entries))<br>
<p><strong><a name="[c1d]"></a>muxio_fs_crfifo_valid_entries</strong>(10 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_fs_crfifo_valid_entries))<br>
<p><strong><a name="[c1e]"></a>muxio_fs_status_get</strong>(8 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_fs_status_get))<br>
<p><strong><a name="[c1f]"></a>muxio_fs_hw_init</strong>(132 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_fs_hw_init))<br>
<p><strong><a name="[c20]"></a>muxio_fs_data_send</strong>(58 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_fs_data_send))<br>
<p><strong><a name="[c21]"></a>muxio_fs_data_recv</strong>(58 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_fs_data_recv))<br>
<p><strong><a name="[c22]"></a>muxio_fs_cmd_send</strong>(58 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_fs_cmd_send))<br>
<p><strong><a name="[c23]"></a>muxio_fs_cmd_recv</strong>(58 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_fs_cmd_recv))<br>
<p><strong><a name="[c24]"></a>muxio_fm_exfifo_is_empty</strong>(10 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_fm_exfifo_is_empty))<br>
<p><strong><a name="[c25]"></a>muxio_fm_exfifo_is_full</strong>(12 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_fm_exfifo_is_full))<br>
<p><strong><a name="[c26]"></a>muxio_fm_hw_init</strong>(64 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_fm_hw_init))<br>
<p><strong><a name="[c27]"></a>muxio_fm_send</strong>(40 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_fm_send))<br>
<p><strong><a name="[c28]"></a>muxio_fm_recv</strong>(32 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_fm_recv))<br>
<p><strong><a name="[c29]"></a>muxio_sram_hw_init</strong>(204 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_sram_hw_init))<br>
<p><strong><a name="[c2a]"></a>muxio_admux_op_mode_set</strong>(22 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_admux_op_mode_set))<br>
<p><strong><a name="[c2b]"></a>muxio_admux_tim_mode_set</strong>(20 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_admux_tim_mode_set))<br>
<p><strong><a name="[c2c]"></a>muxio_admux_hw_init</strong>(100 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_admux_hw_init))<br>
<p><strong><a name="[c2d]"></a>muxio_data_port_addr</strong>(126 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_data_port_addr))<br>
<p><strong><a name="[c2e]"></a>muxio_cmd_port_addr</strong>(30 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_cmd_port_addr))<br>
<p><strong><a name="[c2f]"></a>muxio_intr_clear_all</strong>(12 bytes, Stack size 0 btyes, muxio_muxio.o(.fast))<br>
<p><strong><a name="[c30]"></a>muxio_intr_clear</strong>(8 bytes, Stack size 0 btyes, muxio_muxio.o(.fast))<br>
<p><strong><a name="[c31]"></a>dq_addlast</strong>(26 bytes, Stack size 0 btyes, cklib_dq_addlast.o(.text.dq_addlast))<br>
<p><strong><a name="[c32]"></a>dq_rem</strong>(40 bytes, Stack size 0 btyes, cklib_dq_rem.o(.text.dq_rem))<br>
<p><strong><a name="[c33]"></a>mm_get_mallinfo</strong>(44 bytes, Stack size 0 btyes, cklib_lib_mallinfo.o(.text.mm_get_mallinfo))<br>
<p><strong><a name="[314]"></a>malloc</strong>(14 bytes, Stack size 0 btyes, cklib_malloc.o(.text.malloc))<br>
<br>[Called By]<ul>
<li><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<li><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
<li><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
<li><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_wrap
<li><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt_wrap
<li><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_create
<li><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_create
<li><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_create
</ul>
<p><strong><a name="[315]"></a>free</strong>(14 bytes, Stack size 0 btyes, cklib_malloc.o(.text.free))<br>
<br>[Called By]<ul>
<li><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<li><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
<li><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
<li><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_client
<li><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hba_reset
<li><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<li><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<li><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<li><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<li><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_ctx_free
<li><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_ctx_free
<li><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm4_ctx_free
<li><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_ctx_free
<li><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_free
<li><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_free
<li><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<li><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<li><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_ctx_free
<li><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_free
<li><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_free
<li><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_ctx_free
<li><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<li><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<li><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_free_wrap
<li><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_free_wrap
<li><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_free_wrap
<li><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sm2_free_wrap
<li><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_wrap
<li><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt_wrap
<li><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<li><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<li><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_cache_get
<li><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_cache_set
<li><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_cache_free
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_flight_free
<li><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<li><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
<li><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<li><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
<li><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<li><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<li><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<li><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<li><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
<li><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<li><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
<li><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<li><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
<li><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<li><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<li><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_destroy
<li><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_destroy
<li><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_destroy
</ul>
<p><strong><a name="[316]"></a>realloc</strong>(44 bytes, Stack size 0 btyes, cklib_malloc.o(.text.realloc))<br>
<p><strong><a name="[317]"></a>calloc</strong>(34 bytes, Stack size 0 btyes, cklib_malloc.o(.text.calloc))<br>
<br>[Called By]<ul>
<li><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_client
<li><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hba_reset
<li><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_sequence_of
<li><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<li><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<li><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_ctx_alloc
<li><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_ctx_alloc
<li><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm4_ctx_alloc
<li><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_ctx_alloc
<li><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_alloc
<li><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_alloc
<li><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_starts
<li><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<li><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_ctx_alloc
<li><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_alloc
<li><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_alloc
<li><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_ctx_alloc
<li><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<li><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alloc_wrap
<li><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_alloc_wrap
<li><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_alloc_wrap
<li><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sm2_alloc_wrap
<li><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<li><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<li><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_cache_get
<li><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_cache_set
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_client_hello
<li><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_append_key_cert
<li><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<li><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
<li><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<li><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<li><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<li><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<li><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
<li><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
<li><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</ul>
<p><strong><a name="[c34]"></a>mm_addfreechunk</strong>(92 bytes, Stack size 0 btyes, cklib_mm_addfreechunk.o(.text.mm_addfreechunk))<br>
<p><strong><a name="[c35]"></a>mm_free</strong>(148 bytes, Stack size 0 btyes, cklib_mm_free.o(.text.mm_free))<br>
<p><strong><a name="[c36]"></a>mm_addregion</strong>(80 bytes, Stack size 0 btyes, cklib_mm_initialize.o(.text.mm_addregion))<br>
<p><strong><a name="[c37]"></a>mm_initialize</strong>(58 bytes, Stack size 0 btyes, cklib_mm_initialize.o(.text.mm_initialize))<br>
<p><strong><a name="[c38]"></a>mm_heap_initialize</strong>(18 bytes, Stack size 0 btyes, cklib_mm_initialize.o(.text.mm_heap_initialize))<br>
<p><strong><a name="[c3d]"></a>mm_dbg_clone</strong>(36 bytes, Stack size 0 btyes, cklib_mm_leak.o(.text.mm_dbg_clone))<br>
<p><strong><a name="[c3e]"></a>mm_statistics_save</strong>(8 bytes, Stack size 0 btyes, cklib_mm_leak.o(.text.mm_statistics_save))<br>
<p><strong><a name="[c3f]"></a>mm_statistics_restore</strong>(8 bytes, Stack size 0 btyes, cklib_mm_leak.o(.text.mm_statistics_restore))<br>
<p><strong><a name="[c40]"></a>mm_do_snapshoot</strong>(80 bytes, Stack size 0 btyes, cklib_mm_leak.o(.text.mm_do_snapshoot))<br>
<p><strong><a name="[c41]"></a>mm_release_snapshoot</strong>(38 bytes, Stack size 0 btyes, cklib_mm_leak.o(.text.mm_release_snapshoot))<br>
<p><strong><a name="[c42]"></a>mm_leak_add_chunk</strong>(24 bytes, Stack size 0 btyes, cklib_mm_leak.o(.text.mm_leak_add_chunk))<br>
<p><strong><a name="[c43]"></a>mm_leak_del_chunk</strong>(24 bytes, Stack size 0 btyes, cklib_mm_leak.o(.text.mm_leak_del_chunk))<br>
<p><strong><a name="[c44]"></a>mm_do_statistics</strong>(72 bytes, Stack size 0 btyes, cklib_mm_leak.o(.text.mm_do_statistics))<br>
<p><strong><a name="[c45]"></a>mm_record_minfree</strong>(12 bytes, Stack size 0 btyes, cklib_mm_leak.o(.text.mm_record_minfree))<br>
<p><strong><a name="[c46]"></a>mm_leak_dump</strong>(16 bytes, Stack size 0 btyes, cklib_mm_leak.o(.text.mm_leak_dump))<br>
<p><strong><a name="[c47]"></a>mm_leak_search_chunk</strong>(106 bytes, Stack size 0 btyes, cklib_mm_leak.o(.text.mm_leak_search_chunk))<br>
<p><strong><a name="[c48]"></a>mm_show_corrupted</strong>(30 bytes, Stack size 0 btyes, cklib_mm_leak.o(.text.mm_show_corrupted))<br>
<p><strong><a name="[c49]"></a>mm_mallinfo</strong>(90 bytes, Stack size 0 btyes, cklib_mm_mallinfo.o(.text.mm_mallinfo))<br>
<p><strong><a name="[c4a]"></a>mm_max_usedsize_update</strong>(50 bytes, Stack size 0 btyes, cklib_mm_mallinfo.o(.text.mm_max_usedsize_update))<br>
<p><strong><a name="[c4b]"></a>mm_get_max_usedsize</strong>(6 bytes, Stack size 0 btyes, cklib_mm_mallinfo.o(.text.mm_get_max_usedsize))<br>
<p><strong><a name="[c4c]"></a>mm_malloc</strong>(150 bytes, Stack size 0 btyes, cklib_mm_malloc.o(.text.mm_malloc))<br>
<p><strong><a name="[c4d]"></a>mm_size2ndx</strong>(32 bytes, Stack size 0 btyes, cklib_mm_size2ndx.o(.text.mm_size2ndx))<br>
<p><strong><a name="[c4f]"></a>vsnprintf</strong>(1426 bytes, Stack size 84 btyes, cklib_printf.o(.text.vsnprintf))<br>
<br>[Stack]<ul><li>Max Depth = 228 
<li>Call Chain = vsnprintf &rArr; __muldf3 &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[cb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fixdfsi
<li><a href="#[cb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__floatsidf
<li><a href="#[cb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subdf3
<li><a href="#[cb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__eqdf2
<li><a href="#[cb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__muldf3
</ul>
<br>[Called By]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_printf
</ul>
<p><strong><a name="[e9]"></a>snprintf</strong>(24 bytes, Stack size 0 btyes, cklib_printf.o(.text.snprintf))<br>
<br>[Called By]<ul>
<li><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<li><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
<li><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
<li><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi.part.0
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<li><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<li><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp.part.1
<li><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
<li><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
<li><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_serial_gets
<li><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
<li><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_key_size_helper
<li><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
<li><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_info
<li><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_snprintf
</ul>
<p><strong><a name="[eb]"></a>vsprintf</strong>(16 bytes, Stack size 0 btyes, cklib_printf.o(.text.vsprintf))<br>
<br>[Called By]<ul>
<li><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_nonvolatile
</ul>
<p><strong><a name="[ed]"></a>sprintf</strong>(26 bytes, Stack size 0 btyes, cklib_printf.o(.text.sprintf))<br>
<br>[Called By]<ul>
<li><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_st_data.part.0
<li><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_nonvolatile
<li><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_open
</ul>
<p><strong><a name="[f3]"></a>printf</strong>(70 bytes, Stack size 0 btyes, cklib_printf.o(.text.printf))<br>
<br>[Called By]<ul>
<li><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symm_param_cfg
<li><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_fifo_enable
<li><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bridge_enable
<li><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_dma_start
<li><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_link_change_handler
<li><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_complete_wait
<li><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_error_handler
<li><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_passthru
<li><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_slot_is_empty
<li><a href="#[aff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_ncq_queue_mgmt
<li><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_print.constprop.1
<li><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
<li><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<li><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_self_test
<li><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<li><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_self_test
<li><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_test_subkeys.constprop.2
<li><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_test_wth_cipher.constprop.1
<li><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cmac_self_test
<li><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_self_test
<li><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_self_test
<li><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<li><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_source_self_test
<li><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
<li><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
<li><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_self_test
<li><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_self_test
<li><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_self_test
<li><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<li><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
<li><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<li><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_self_test
<li><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_self_test
<li><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_timing_self_test
<li><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_self_test
<li><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_crypto_test
<li><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<li><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
<li><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_rx_fifo
</ul>
<p><strong><a name="[c50]"></a>ac_mp_status</strong>(10 bytes, Stack size 0 btyes, ck803_aclink_client.o(.fast))<br>
<p><strong><a name="[c51]"></a>ac_mp_init</strong>(76 bytes, Stack size 0 btyes, ck803_aclink_client.o(.text.ac_mp_init))<br>
<p><strong><a name="[c52]"></a>ac_mp_intr_clear</strong>(12 bytes, Stack size 0 btyes, ck803_aclink_client.o(.fast))<br>
<p><strong><a name="[c53]"></a>ac_mp_intr_enable</strong>(2 bytes, Stack size 0 btyes, ck803_aclink_client.o(.fast))<br>
<p><strong><a name="[c54]"></a>ac_mp_intr_disable</strong>(2 bytes, Stack size 0 btyes, ck803_aclink_client.o(.fast))<br>
<p><strong><a name="[c55]"></a>ac_mp_send</strong>(124 bytes, Stack size 0 btyes, ck803_aclink_client.o(.fast))<br>
<p><strong><a name="[c56]"></a>ac_mp_recv</strong>(88 bytes, Stack size 0 btyes, ck803_aclink_client.o(.fast))<br>
<p><strong><a name="[c57]"></a>csi_vic_init</strong>(12 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[c8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_hw_init
</ul>
<p><strong><a name="[c58]"></a>csi_coret_config</strong>(100 bytes, Stack size 0 btyes, ck803_core_ck803.o(.text.csi_coret_config))<br>
<p><strong><a name="[c59]"></a>csi_cache_set_range</strong>(28 bytes, Stack size 0 btyes, ck803_core_ck803.o(.text.csi_cache_set_range))<br>
<br>[Called By]<ul>
<li><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_init
</ul>
<p><strong><a name="[c5a]"></a>csi_cache_enable_profile</strong>(16 bytes, Stack size 0 btyes, ck803_core_ck803.o(.text.csi_cache_enable_profile))<br>
<p><strong><a name="[c5b]"></a>csi_cache_disable_profile</strong>(16 bytes, Stack size 0 btyes, ck803_core_ck803.o(.text.csi_cache_disable_profile))<br>
<p><strong><a name="[c5c]"></a>csi_cache_reset_profile</strong>(16 bytes, Stack size 0 btyes, ck803_core_ck803.o(.text.csi_cache_reset_profile))<br>
<p><strong><a name="[c5d]"></a>csi_cache_get_access_time</strong>(8 bytes, Stack size 0 btyes, ck803_core_ck803.o(.text.csi_cache_get_access_time))<br>
<p><strong><a name="[c5e]"></a>csi_cache_get_miss_time</strong>(8 bytes, Stack size 0 btyes, ck803_core_ck803.o(.text.csi_cache_get_miss_time))<br>
<p><strong><a name="[c5f]"></a>csi_mpu_enable</strong>(14 bytes, Stack size 0 btyes, ck803_core_ck803.o(.text.csi_mpu_enable))<br>
<p><strong><a name="[c60]"></a>csi_mpu_disable</strong>(14 bytes, Stack size 0 btyes, ck803_core_ck803.o(.text.csi_mpu_disable))<br>
<p><strong><a name="[c61]"></a>csi_mpu_config_region</strong>(110 bytes, Stack size 0 btyes, ck803_core_ck803.o(.text.csi_mpu_config_region))<br>
<p><strong><a name="[c62]"></a>csi_mpu_enable_region</strong>(32 bytes, Stack size 0 btyes, ck803_core_ck803.o(.text.csi_mpu_enable_region))<br>
<p><strong><a name="[c63]"></a>csi_mpu_disable_region</strong>(32 bytes, Stack size 0 btyes, ck803_core_ck803.o(.text.csi_mpu_disable_region))<br>
<p><strong><a name="[c64]"></a>csi_system_reset</strong>(18 bytes, Stack size 0 btyes, ck803_core_ck803.o(.text.csi_system_reset))<br>
<p><strong><a name="[c65]"></a>csi_vic_enable_irq</strong>(16 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[c96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_enable
</ul>
<p><strong><a name="[c66]"></a>csi_vic_disable_irq</strong>(18 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[c94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_disconnect
<li><a href="#[c97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_disable
<li><a href="#[c8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_hw_init
</ul>
<p><strong><a name="[c67]"></a>csi_vic_get_pending_irq</strong>(20 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[c68]"></a>csi_vic_set_pending_irq</strong>(18 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[c69]"></a>csi_vic_clear_pending_irq</strong>(18 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_clear
<li><a href="#[c94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_disconnect
<li><a href="#[c98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_clear
</ul>
<p><strong><a name="[c6a]"></a>csi_vic_get_wakeup_irq</strong>(18 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[c6b]"></a>csi_vic_set_wakeup_irq</strong>(16 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[c6c]"></a>csi_vic_clear_wakeup_irq</strong>(18 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[c6d]"></a>csi_vic_get_active</strong>(20 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[c6e]"></a>csi_vic_set_threshold</strong>(26 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[c6f]"></a>csi_vic_set_prio</strong>(56 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_init
<li><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_install
<li><a href="#[c93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_connect
</ul>
<p><strong><a name="[c70]"></a>csi_vic_get_prio</strong>(36 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[c71]"></a>csi_vic_set_vector</strong>(16 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[c8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_hw_init
</ul>
<p><strong><a name="[c72]"></a>csi_vic_get_vector</strong>(20 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[c73]"></a>csi_coret_get_load</strong>(6 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[c74]"></a>csi_coret_get_value</strong>(6 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[c75]"></a>csi_icache_enable</strong>(32 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_init
</ul>
<p><strong><a name="[c76]"></a>csi_icache_disable</strong>(32 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[c77]"></a>csi_dcache_enable</strong>(28 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[c78]"></a>csi_dcache_disable</strong>(32 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[c79]"></a>csi_dcache_invalid</strong>(24 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[c7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_icache_invalid
</ul>
<p><strong><a name="[c7a]"></a>csi_icache_invalid</strong>(8 bytes, Stack size 4 btyes, ck803_core_ck803.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[c79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_dcache_invalid
</ul>
<p><strong><a name="[c7b]"></a>csi_dcache_clean</strong>(24 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[c7c]"></a>csi_dcache_clean_invalid</strong>(24 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[c7d]"></a>csi_dcache_invalid_range</strong>(44 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[c8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_cache_flush.part.0
</ul>
<p><strong><a name="[c7e]"></a>csi_dcache_clean_range</strong>(54 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[c7f]"></a>csi_dcache_clean_invalid_range</strong>(44 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[c8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_cache_flush.part.0
</ul>
<p><strong><a name="[c80]"></a>csi_irq_save</strong>(10 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norc_port_switch_cmd.part.0
<li><a href="#[c8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_hw_init
</ul>
<p><strong><a name="[c81]"></a>csi_irq_restore</strong>(6 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norc_port_switch_xip.part.1
<li><a href="#[c8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_hw_init
</ul>
<p><strong><a name="[c82]"></a>irq_enable</strong>(6 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</ul>
<p><strong><a name="[c83]"></a>irq_disable</strong>(6 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[c84]"></a>core_timer_hw_init</strong>(50 bytes, Stack size 12 btyes, ck803_core_timer.o(.text.core_timer_hw_init))<br>
<br>[Calls]<ul>
<li><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_get
</ul>
<br>[Called By]<ul>
<li><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_init
</ul>
<p><strong><a name="[c85]"></a>core_timer_clear</strong>(16 bytes, Stack size 0 btyes, ck803_core_timer.o(.fast))<br>
<p><strong><a name="[c86]"></a>core_timer_intr_enable</strong>(12 bytes, Stack size 0 btyes, ck803_core_timer.o(.text.core_timer_intr_enable))<br>
<br>[Called By]<ul>
<li><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_init
</ul>
<p><strong><a name="[c87]"></a>core_timer_intr_disable</strong>(12 bytes, Stack size 0 btyes, ck803_core_timer.o(.text.core_timer_intr_disable))<br>
<br>[Called By]<ul>
<li><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_init
</ul>
<p><strong><a name="[c88]"></a>core_timer_intr_status</strong>(12 bytes, Stack size 0 btyes, ck803_core_timer.o(.fast))<br>
<p><strong><a name="[c89]"></a>core_timer_intr_clear</strong>(16 bytes, Stack size 0 btyes, ck803_core_timer.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_isr
</ul>
<p><strong><a name="[c8a]"></a>core_timer_start</strong>(12 bytes, Stack size 0 btyes, ck803_core_timer.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_init
</ul>
<p><strong><a name="[c8b]"></a>core_timer_stop</strong>(12 bytes, Stack size 0 btyes, ck803_core_timer.o(.fast))<br>
<p><strong><a name="[c8c]"></a>core_timer_current_value_get</strong>(6 bytes, Stack size 0 btyes, ck803_core_timer.o(.fast))<br>
<p><strong><a name="[c8e]"></a>intr_hw_init</strong>(84 bytes, Stack size 0 btyes, ck803_interrupt.o(.text.intr_hw_init))<br>
<br>[Stack]<ul><li>Max Depth = 4 
<li>Call Chain = intr_hw_init &rArr; intr_cache_flush.part.0 </ul>
<br>[Calls]<ul>
<li><a href="#[c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_irq_save
<li><a href="#[c57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_vic_init
<li><a href="#[c66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_vic_disable_irq
<li><a href="#[c71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_vic_set_vector
<li><a href="#[c8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_cache_flush.part.0
<li><a href="#[c81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_irq_restore
</ul>
<br>[Called By]<ul>
<li><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_init
</ul>
<p><strong><a name="[c8f]"></a>intr_status_get</strong>(8 bytes, Stack size 0 btyes, ck803_interrupt.o(.text.intr_status_get))<br>
<p><strong><a name="[c91]"></a>intr_vector_enable</strong>(2 bytes, Stack size 0 btyes, ck803_interrupt.o(.fast))<br>
<p><strong><a name="[c92]"></a>intr_vector_disable</strong>(2 bytes, Stack size 0 btyes, ck803_interrupt.o(.fast))<br>
<p><strong><a name="[c93]"></a>intr_connect</strong>(38 bytes, Stack size 8 btyes, ck803_interrupt.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = intr_connect &rArr; intr_cache_flush.part.0 </ul>
<br>[Calls]<ul>
<li><a href="#[c8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_cache_flush.part.0
<li><a href="#[c6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_vic_set_prio
</ul>
<br>[Called By]<ul>
<li><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_install
</ul>
<p><strong><a name="[c94]"></a>intr_disconnect</strong>(38 bytes, Stack size 8 btyes, ck803_interrupt.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = intr_disconnect &rArr; intr_cache_flush.part.0 </ul>
<br>[Calls]<ul>
<li><a href="#[c69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_vic_clear_pending_irq
<li><a href="#[c66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_vic_disable_irq
<li><a href="#[c8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_cache_flush.part.0
</ul>
<br>[Called By]<ul>
<li><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_install
<li><a href="#[b1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_hw_init
</ul>
<p><strong><a name="[c95]"></a>intr_is_connected</strong>(36 bytes, Stack size 0 btyes, ck803_interrupt.o(.fast))<br>
<p><strong><a name="[c96]"></a>intr_enable</strong>(8 bytes, Stack size 4 btyes, ck803_interrupt.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[c65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_vic_enable_irq
</ul>
<br>[Called By]<ul>
<li><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_umask
</ul>
<p><strong><a name="[c97]"></a>intr_disable</strong>(8 bytes, Stack size 4 btyes, ck803_interrupt.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[c66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_vic_disable_irq
</ul>
<br>[Called By]<ul>
<li><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_mask
</ul>
<p><strong><a name="[c98]"></a>intr_clear</strong>(8 bytes, Stack size 4 btyes, ck803_interrupt.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[c69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_vic_clear_pending_irq
</ul>
<p><strong><a name="[c99]"></a>backtrace</strong>(222 bytes, Stack size 0 btyes, ck803_backtrace.o(.text.backtrace))<br>
<p><strong><a name="[c9a]"></a>__muldi3</strong>(74 bytes, Stack size 12 btyes, _muldi3.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[ca4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mulsf3
<li><a href="#[cb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__muldf3
<li><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoull
<li><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<li><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
<li><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
<li><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
<li><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
</ul>
<p><strong><a name="[c9b]"></a>__fixunssfsi</strong>(46 bytes, Stack size 8 btyes, _fixunssfsi.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 84 
<li>Call Chain = __fixunssfsi &rArr; __subsf3 &rArr; _fpadd_parts  </ul>
<br>[Calls]<ul>
<li><a href="#[ca9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gesf2
<li><a href="#[cac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fixsfsi
<li><a href="#[ca3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subsf3
</ul>
<br>[Called By]<ul>
<li><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_hw_init
<li><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_write
</ul>
<p><strong><a name="[c9c]"></a>__floatdisf</strong>(122 bytes, Stack size 0 btyes, _floatdisf.o(.text))<br>
<p><strong><a name="[c9d]"></a>__floatundisf</strong>(84 bytes, Stack size 16 btyes, _floatundisf.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 160 
<li>Call Chain = __floatundisf &rArr; __muldf3 &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[cb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__floatunsidf
<li><a href="#[cb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__muldf3
<li><a href="#[cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__adddf3
<li><a href="#[cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__truncdfsf2
</ul>
<br>[Called By]<ul>
<li><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<li><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
<li><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
</ul>
<p><strong><a name="[c9e]"></a>__floatundidf</strong>(40 bytes, Stack size 0 btyes, _floatundidf.o(.text))<br>
<p><strong><a name="[c9f]"></a>__udivdi3</strong>(814 bytes, Stack size 20 btyes, _udivdi3.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[c4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<li><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<li><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<li><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<li><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<li><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<li><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
<li><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
<li><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_inout_data_lba
<li><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</ul>
<p><strong><a name="[ca0]"></a>__umoddi3</strong>(800 bytes, Stack size 24 btyes, _umoddi3.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[c4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<li><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<li><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_inout_data_lba
</ul>
<p><strong><a name="[ca2]"></a>__addsf3</strong>(42 bytes, Stack size 60 btyes, _addsub_sf.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 76 
<li>Call Chain = __addsf3 &rArr; _fpadd_parts </ul>
<br>[Calls]<ul>
<li><a href="#[cbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_f
<li><a href="#[ca1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fpadd_parts
<li><a href="#[cba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pack_f
</ul>
<br>[Called By]<ul>
<li><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_write
<li><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_read
</ul>
<p><strong><a name="[ca3]"></a>__subsf3</strong>(50 bytes, Stack size 60 btyes, _addsub_sf.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 76 
<li>Call Chain = __subsf3 &rArr; _fpadd_parts </ul>
<br>[Calls]<ul>
<li><a href="#[cbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_f
<li><a href="#[ca1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fpadd_parts
<li><a href="#[cba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pack_f
</ul>
<br>[Called By]<ul>
<li><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_hw_init
<li><a href="#[c9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fixunssfsi
<li><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_write
<li><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_read
</ul>
<p><strong><a name="[ca4]"></a>__mulsf3</strong>(278 bytes, Stack size 64 btyes, _mul_sf.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 76 
<li>Call Chain = __mulsf3 &rArr; __muldi3 </ul>
<br>[Calls]<ul>
<li><a href="#[cbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_f
<li><a href="#[c9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__muldi3
<li><a href="#[cba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pack_f
</ul>
<br>[Called By]<ul>
<li><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_hw_init
<li><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_write
<li><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_read
</ul>
<p><strong><a name="[ca5]"></a>__divsf3</strong>(192 bytes, Stack size 44 btyes, _div_sf.o(.text))<br>
<br>[Calls]<ul>
<li><a href="#[cbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_f
<li><a href="#[cba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pack_f
</ul>
<br>[Called By]<ul>
<li><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<li><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
<li><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
<li><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cputime_getres
<li><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_write
<li><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_read
</ul>
<p><strong><a name="[ca6]"></a>__eqsf2</strong>(50 bytes, Stack size 44 btyes, _eq_sf.o(.text))<br>
<br>[Calls]<ul>
<li><a href="#[cbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_f
<li><a href="#[cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpcmp_parts_f
</ul>
<br>[Called By]<ul>
<li><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_write
</ul>
<p><strong><a name="[ca7]"></a>__nesf2</strong>(50 bytes, Stack size 0 btyes, _ne_sf.o(.text))<br>
<p><strong><a name="[ca8]"></a>__gtsf2</strong>(58 bytes, Stack size 44 btyes, _gt_sf.o(.text))<br>
<br>[Calls]<ul>
<li><a href="#[cbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_f
<li><a href="#[cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpcmp_parts_f
</ul>
<br>[Called By]<ul>
<li><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_write
</ul>
<p><strong><a name="[ca9]"></a>__gesf2</strong>(58 bytes, Stack size 44 btyes, _ge_sf.o(.text))<br>
<br>[Calls]<ul>
<li><a href="#[cbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_f
<li><a href="#[cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpcmp_parts_f
</ul>
<br>[Called By]<ul>
<li><a href="#[c9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fixunssfsi
<li><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_write
</ul>
<p><strong><a name="[caa]"></a>__ltsf2</strong>(50 bytes, Stack size 44 btyes, _lt_sf.o(.text))<br>
<br>[Calls]<ul>
<li><a href="#[cbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_f
<li><a href="#[cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpcmp_parts_f
</ul>
<br>[Called By]<ul>
<li><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_write
</ul>
<p><strong><a name="[cab]"></a>__floatsisf</strong>(82 bytes, Stack size 20 btyes, _si_to_sf.o(.text))<br>
<br>[Calls]<ul>
<li><a href="#[cba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pack_f
</ul>
<br>[Called By]<ul>
<li><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_write
<li><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_read
</ul>
<p><strong><a name="[cac]"></a>__fixsfsi</strong>(82 bytes, Stack size 24 btyes, _sf_to_si.o(.text))<br>
<br>[Calls]<ul>
<li><a href="#[cbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_f
</ul>
<br>[Called By]<ul>
<li><a href="#[c9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fixunssfsi
<li><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_read
</ul>
<p><strong><a name="[cad]"></a>__extendsfdf2</strong>(40 bytes, Stack size 28 btyes, _sf_to_df.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 76 
<li>Call Chain = __extendsfdf2 &rArr; __make_dp &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[cbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_f
<li><a href="#[cb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__make_dp
</ul>
<br>[Called By]<ul>
<li><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<li><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
<li><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
</ul>
<p><strong><a name="[cae]"></a>__floatunsisf</strong>(94 bytes, Stack size 20 btyes, _usi_to_sf.o(.text))<br>
<br>[Calls]<ul>
<li><a href="#[cba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pack_f
</ul>
<br>[Called By]<ul>
<li><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_hw_init
<li><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cputime_getres
<li><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_write
<li><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_read
</ul>
<p><strong><a name="[cb0]"></a>__adddf3</strong>(46 bytes, Stack size 80 btyes, _addsub_df.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 124 
<li>Call Chain = __adddf3 &rArr; _fpadd_parts </ul>
<br>[Calls]<ul>
<li><a href="#[cbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_d
<li><a href="#[caf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fpadd_parts
<li><a href="#[cbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pack_d
</ul>
<br>[Called By]<ul>
<li><a href="#[c9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__floatundisf
</ul>
<p><strong><a name="[cb1]"></a>__subdf3</strong>(54 bytes, Stack size 80 btyes, _addsub_df.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 124 
<li>Call Chain = __subdf3 &rArr; _fpadd_parts </ul>
<br>[Calls]<ul>
<li><a href="#[cbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_d
<li><a href="#[caf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fpadd_parts
<li><a href="#[cbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pack_d
</ul>
<br>[Called By]<ul>
<li><a href="#[c4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<li><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</ul>
<p><strong><a name="[cb2]"></a>__muldf3</strong>(508 bytes, Stack size 124 btyes, _mul_df.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 144 
<li>Call Chain = __muldf3 &rArr; __pack_d </ul>
<br>[Calls]<ul>
<li><a href="#[cbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_d
<li><a href="#[c9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__muldi3
<li><a href="#[cbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pack_d
</ul>
<br>[Called By]<ul>
<li><a href="#[c4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<li><a href="#[c9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__floatundisf
<li><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</ul>
<p><strong><a name="[cb3]"></a>__divdf3</strong>(274 bytes, Stack size 0 btyes, _div_df.o(.text))<br>
<p><strong><a name="[cb4]"></a>__eqdf2</strong>(54 bytes, Stack size 60 btyes, _eq_df.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 64 
<li>Call Chain = __eqdf2 &rArr; __unpack_d </ul>
<br>[Calls]<ul>
<li><a href="#[cbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_d
<li><a href="#[cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpcmp_parts_d
</ul>
<br>[Called By]<ul>
<li><a href="#[c4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<li><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</ul>
<p><strong><a name="[cb5]"></a>__floatsidf</strong>(104 bytes, Stack size 24 btyes, _si_to_df.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 44 
<li>Call Chain = __floatsidf &rArr; __pack_d </ul>
<br>[Calls]<ul>
<li><a href="#[cbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pack_d
</ul>
<br>[Called By]<ul>
<li><a href="#[c4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<li><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</ul>
<p><strong><a name="[cb6]"></a>__fixdfsi</strong>(112 bytes, Stack size 32 btyes, _df_to_si.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = __fixdfsi &rArr; __unpack_d </ul>
<br>[Calls]<ul>
<li><a href="#[cbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_d
</ul>
<br>[Called By]<ul>
<li><a href="#[c4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<li><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</ul>
<p><strong><a name="[cb7]"></a>__make_dp</strong>(46 bytes, Stack size 28 btyes, _make_df.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = __make_dp &rArr; __pack_d </ul>
<br>[Calls]<ul>
<li><a href="#[cbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pack_d
</ul>
<br>[Called By]<ul>
<li><a href="#[cad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__extendsfdf2
</ul>
<p><strong><a name="[cb8]"></a>__truncdfsf2</strong>(52 bytes, Stack size 32 btyes, _df_to_sf.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 52 
<li>Call Chain = __truncdfsf2 &rArr; __make_fp </ul>
<br>[Calls]<ul>
<li><a href="#[cbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_d
<li><a href="#[cbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__make_fp
</ul>
<br>[Called By]<ul>
<li><a href="#[c9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__floatundisf
</ul>
<p><strong><a name="[cb9]"></a>__floatunsidf</strong>(86 bytes, Stack size 28 btyes, _usi_to_df.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = __floatunsidf &rArr; __pack_d </ul>
<br>[Calls]<ul>
<li><a href="#[cbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pack_d
</ul>
<br>[Called By]<ul>
<li><a href="#[c9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__floatundisf
</ul>
<p><strong><a name="[cba]"></a>__pack_f</strong>(190 bytes, Stack size 0 btyes, _pack_sf.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[ca2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__addsf3
<li><a href="#[ca3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subsf3
<li><a href="#[ca4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mulsf3
<li><a href="#[ca5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__divsf3
<li><a href="#[cab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__floatsisf
<li><a href="#[cae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__floatunsisf
<li><a href="#[cbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__make_fp
</ul>
<p><strong><a name="[cbb]"></a>__unpack_f</strong>(120 bytes, Stack size 0 btyes, _unpack_sf.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[ca2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__addsf3
<li><a href="#[ca3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subsf3
<li><a href="#[ca4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mulsf3
<li><a href="#[ca5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__divsf3
<li><a href="#[ca6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__eqsf2
<li><a href="#[ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gtsf2
<li><a href="#[ca9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gesf2
<li><a href="#[caa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ltsf2
<li><a href="#[cac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fixsfsi
<li><a href="#[cad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__extendsfdf2
</ul>
<p><strong><a name="[cbc]"></a>__fpcmp_parts_f</strong>(172 bytes, Stack size 0 btyes, _fpcmp_parts_sf.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[ca6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__eqsf2
<li><a href="#[ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gtsf2
<li><a href="#[ca9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gesf2
<li><a href="#[caa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ltsf2
</ul>
<p><strong><a name="[cbd]"></a>__make_fp</strong>(22 bytes, Stack size 20 btyes, _make_sf.o(.text))<br>
<br>[Calls]<ul>
<li><a href="#[cba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pack_f
</ul>
<br>[Called By]<ul>
<li><a href="#[cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__truncdfsf2
</ul>
<p><strong><a name="[cbe]"></a>__pack_d</strong>(398 bytes, Stack size 20 btyes, _pack_df.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__adddf3
<li><a href="#[cb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subdf3
<li><a href="#[cb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__muldf3
<li><a href="#[cb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__floatsidf
<li><a href="#[cb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__make_dp
<li><a href="#[cb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__floatunsidf
</ul>
<p><strong><a name="[cbf]"></a>__unpack_d</strong>(228 bytes, Stack size 4 btyes, _unpack_df.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__adddf3
<li><a href="#[cb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subdf3
<li><a href="#[cb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__muldf3
<li><a href="#[cb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__eqdf2
<li><a href="#[cb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fixdfsi
<li><a href="#[cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__truncdfsf2
</ul>
<p><strong><a name="[cc0]"></a>__fpcmp_parts_d</strong>(194 bytes, Stack size 0 btyes, _fpcmp_parts_df.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[cb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__eqdf2
</ul>
<p><strong><a name="[cc1]"></a>__isxdigit_fast</strong>(12 bytes, Stack size 0 btyes, isxdigit_fast.o(.text))<br>
<p><strong><a name="[cc2]"></a>isxdigit</strong>(12 bytes, Stack size 0 btyes, isxdigit_fast.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urldecode
</ul>
<p><strong><a name="[cc3]"></a>__GI_isupper</strong>(8 bytes, Stack size 0 btyes, isupper.o(.text))<br>
<p><strong><a name="[cc4]"></a>isupper</strong>(8 bytes, Stack size 0 btyes, isupper.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[cd1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_strtoul
<li><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urldecode
</ul>
<p><strong><a name="[cc5]"></a>__GI_putchar</strong>(12 bytes, Stack size 4 btyes, putchar.o(.text))<br>
<br>[Calls]<ul>
<li><a href="#[cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</ul>
<p><strong><a name="[cc6]"></a>putchar</strong>(12 bytes, Stack size 0 btyes, putchar.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_print.constprop.1
<li><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<li><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<li><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_self_test
<li><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cmac_self_test
<li><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_self_test
<li><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_self_test
<li><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<li><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_source_self_test
<li><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
<li><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
<li><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_self_test
<li><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_self_test
<li><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_self_test
<li><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<li><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
<li><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<li><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_self_test
<li><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_self_test
<li><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_timing_self_test
<li><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_crypto_test
</ul>
<p><strong><a name="[cc7]"></a>__GI_perror</strong>(62 bytes, Stack size 8 btyes, perror.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 44 + In Cycle
<li>Call Chain = __GI_perror &rArr; fputc &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[cd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<li><a href="#[cca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
<li><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</ul>
<p><strong><a name="[cc8]"></a>perror</strong>(62 bytes, Stack size 0 btyes, perror.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
</ul>
<p><strong><a name="[cc9]"></a>__GI_fputs</strong>(74 bytes, Stack size 24 btyes, fputs.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 60 + In Cycle
<li>Call Chain = __GI_fputs &rArr; fputc &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_critical_enter
<li><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<li><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_critical_exit
</ul>
<p><strong><a name="[cca]"></a>fputs</strong>(74 bytes, Stack size 0 btyes, fputs.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[cc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_perror
</ul>
<p><strong><a name="[ccb]"></a>__GI_fflush</strong>(4 bytes, Stack size 0 btyes, fflush.o(.text))<br>
<p><strong><a name="[ccc]"></a>fflush</strong>(4 bytes, Stack size 0 btyes, fflush.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_create
<li><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_listen
<li><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_create
<li><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_config
<li><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_read
<li><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_write
</ul>
<p><strong><a name="[ccd]"></a>__GI_rand</strong>(0 bytes, Stack size 0 btyes, rand.o(.text))<br>
<p><strong><a name="[cce]"></a>rand</strong>(20 bytes, Stack size 0 btyes, rand.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<li><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<li><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<li><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
<li><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
<li><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myrand
</ul>
<p><strong><a name="[ccf]"></a>__GI_srand</strong>(6 bytes, Stack size 0 btyes, rand.o(.text))<br>
<p><strong><a name="[cd0]"></a>srand</strong>(6 bytes, Stack size 0 btyes, rand.o(.text))<br>
<p><strong><a name="[cd1]"></a>__GI_strtoul</strong>(244 bytes, Stack size 28 btyes, strtoul.o(.text))<br>
<br>[Calls]<ul>
<li><a href="#[ce3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<li><a href="#[cdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isdigit
<li><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isalpha
<li><a href="#[cc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isupper
</ul>
<p><strong><a name="[cd2]"></a>strtoul</strong>(244 bytes, Stack size 0 btyes, strtoul.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
<li><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_memory
</ul>
<p><strong><a name="[cd3]"></a>__GI_exit</strong>(4 bytes, Stack size 0 btyes, exit.o(.text))<br>
<p><strong><a name="[cd4]"></a>exit</strong>(4 bytes, Stack size 0 btyes, exit.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_crypto_test
</ul>
<p><strong><a name="[cd5]"></a>atoi</strong>(12 bytes, Stack size 4 btyes, atoi.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = atoi &rArr; strtol &rArr; simple_strtol  &rArr; simple_strtoul  </ul>
<br>[Calls]<ul>
<li><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</ul>
<br>[Called By]<ul>
<li><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf
<li><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<li><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<li><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_testcase_run
<li><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<li><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_request_parse_header
<li><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_system_dofile
<li><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_calc_handler
</ul>
<p><strong><a name="[cd6]"></a>__GI_strerror</strong>(18 bytes, Stack size 0 btyes, strerror.o(.text))<br>
<p><strong><a name="[cd7]"></a>strerror</strong>(18 bytes, Stack size 0 btyes, strerror.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[cc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_perror
</ul>
<p><strong><a name="[cd8]"></a>__GI_memchr</strong>(20 bytes, Stack size 0 btyes, memchr.o(.text))<br>
<p><strong><a name="[cd9]"></a>memchr</strong>(20 bytes, Stack size 0 btyes, memchr.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_module_upload_handle.part.2
</ul>
<p><strong><a name="[cda]"></a>__GI_gmtime</strong>(106 bytes, Stack size 12 btyes, gmtime.o(.text))<br>
<br>[Calls]<ul>
<li><a href="#[cdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_u__div
</ul>
<p><strong><a name="[cdb]"></a>gmtime</strong>(106 bytes, Stack size 0 btyes, gmtime.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_current_time
</ul>
<p><strong><a name="[cdc]"></a>__GI__u__div</strong>(26 bytes, Stack size 0 btyes, gmtime.o(.text))<br>
<p><strong><a name="[cdd]"></a>_u__div</strong>(26 bytes, Stack size 0 btyes, gmtime.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[cda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_gmtime
</ul>
<p><strong><a name="[cde]"></a>__GI_isdigit</strong>(8 bytes, Stack size 0 btyes, isdigit.o(.text))<br>
<p><strong><a name="[cdf]"></a>isdigit</strong>(8 bytes, Stack size 0 btyes, isdigit.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[cd1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_strtoul
</ul>
<p><strong><a name="[ce0]"></a>__GI_isalpha</strong>(18 bytes, Stack size 0 btyes, isalpha.o(.text))<br>
<p><strong><a name="[ce1]"></a>isalpha</strong>(18 bytes, Stack size 0 btyes, isalpha.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[cd1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_strtoul
</ul>
<p><strong><a name="[ce2]"></a>__GI_isspace</strong>(20 bytes, Stack size 0 btyes, isspace.o(.text))<br>
<p><strong><a name="[ce3]"></a>isspace</strong>(20 bytes, Stack size 0 btyes, isspace.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[cd1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_strtoul
</ul>
<p><strong><a name="[ce4]"></a>minilibc_init</strong>(40 bytes, Stack size 0 btyes, minilibc_init.o(.text))<br>
<p><strong><a name="[ce5]"></a>__GI_os_critical_open</strong>(4 bytes, Stack size 0 btyes, critical.o(.text))<br>
<p><strong><a name="[ce6]"></a>os_critical_open</strong>(4 bytes, Stack size 0 btyes, critical.o(.text))<br>
<p><strong><a name="[ce7]"></a>__GI_os_critical_enter</strong>(4 bytes, Stack size 0 btyes, critical.o(.text))<br>
<p><strong><a name="[77]"></a>os_critical_enter</strong>(4 bytes, Stack size 0 btyes, critical.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[cc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_fputs
</ul>
<p><strong><a name="[ce8]"></a>__GI_os_critical_exit</strong>(4 bytes, Stack size 0 btyes, critical.o(.text))<br>
<p><strong><a name="[7d]"></a>os_critical_exit</strong>(4 bytes, Stack size 0 btyes, critical.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[cc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_fputs
</ul>
<p><strong><a name="[ce9]"></a>__GI_os_critical_close</strong>(4 bytes, Stack size 0 btyes, critical.o(.text))<br>
<p><strong><a name="[cea]"></a>os_critical_close</strong>(4 bytes, Stack size 0 btyes, critical.o(.text))<br>
<p><strong><a name="[ceb]"></a>__GI_putc</strong>(8 bytes, Stack size 4 btyes, putc.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 40 + In Cycle
<li>Call Chain = __GI_putc &rArr; fputc &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</ul>
<p><strong><a name="[cec]"></a>putc</strong>(8 bytes, Stack size 0 btyes, putc.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[cc5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_putchar
</ul>
<h3>Local Symbols</h3>
<p><strong><a name="[0]"></a>thread1_entry</strong>(2 bytes, Stack size 0 btyes, Obj/entry_main.o(.text.thread1_entry))<br>
<p><strong><a name="[2]"></a>data_print.constprop.1</strong>(44 bytes, Stack size 16 btyes, Obj/entry_ipraw.o(.text.data_print.constprop.1))<br>
<br>[Calls]<ul>
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[cc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</ul>
<br>[Called By]<ul>
<li><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
</ul>
<p><strong><a name="[5]"></a>drv_cputime_gettime</strong>(8 bytes, Stack size 4 btyes, Obj/drivers_drv_cputime.o(.text.drv_cputime_gettime))<br>
<br>[Calls]<ul>
<li><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_sw_cnt_get
</ul>
<p><strong><a name="[6]"></a>drv_cputime_getres</strong>(40 bytes, Stack size 8 btyes, Obj/drivers_drv_cputime.o(.text.drv_cputime_getres))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = drv_cputime_getres &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_get
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[cae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__floatunsisf
<li><a href="#[ca5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__divsf3
</ul>
<p><strong><a name="[7]"></a>drv_crypto_init</strong>(32 bytes, Stack size 8 btyes, Obj/drivers_drv_crypto.o(.text.drv_crypto_init))<br>
<br>[Stack]<ul><li>Max Depth = 252 
<li>Call Chain = drv_crypto_init &rArr; rt_crypto_register &rArr; rt_device_register  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_crypto_register
</ul>
<p><strong><a name="[8]"></a>drv_crypto_ioctl</strong>(18 bytes, Stack size 4 btyes, Obj/drivers_drv_crypto.o(.text.drv_crypto_ioctl))<br>
<br>[Calls]<ul>
<li><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_hw_init
<li><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_reset
</ul>
<p><strong><a name="[9]"></a>drv_crypto_reset</strong>(18 bytes, Stack size 4 btyes, Obj/drivers_drv_crypto.o(.text.drv_crypto_reset))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = drv_crypto_reset &rArr; pke_init </ul>
<br>[Calls]<ul>
<li><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_hw_init
<li><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_reset
<li><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_init
</ul>
<p><strong><a name="[a]"></a>drv_crypto_lock.part.0</strong>(14 bytes, Stack size 4 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 316 
<li>Call Chain = drv_crypto_lock.part.0 &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</ul>
<br>[Called By]<ul>
<li><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm2_e_get
<li><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm2_z_get
<li><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm2_encrypt
<li><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm2_decrypt
<li><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm2_key_exchange
<li><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sha1_init
<li><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sha224_init
<li><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sha256_init
<li><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm3_init
</ul>
<p><strong><a name="[3b]"></a>sys_tick_isr</strong>(20 bytes, Stack size 4 btyes, Obj/drivers_drv_ctimer.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 256 
<li>Call Chain = sys_tick_isr &rArr; rt_tick_increase &rArr; rt_thread_yield  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_intr_clear
<li><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_clear
<li><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</ul>
<p><strong><a name="[3d]"></a>eth_dev_open</strong>(4 bytes, Stack size 0 btyes, Obj/drivers_drv_eth.o(.text.eth_dev_open))<br>
<p><strong><a name="[3e]"></a>eth_dev_close</strong>(4 bytes, Stack size 0 btyes, Obj/drivers_drv_eth.o(.text.eth_dev_close))<br>
<p><strong><a name="[3f]"></a>rt_hw_t610_eth1_init</strong>(438 bytes, Stack size 24 btyes, Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth1_init))<br>
<br>[Stack]<ul><li>Max Depth = 456 
<li>Call Chain = rt_hw_t610_eth1_init &rArr; eth_device_init &rArr; eth_device_init_with_flag  &rArr; netifapi_netif_add  &rArr; tcpip_api_call  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand_get
<li><a href="#[bac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_hw_init
<li><a href="#[baa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_tx_queue_init
<li><a href="#[bab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_rx_queue_init
<li><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_rx_buf_attach
<li><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_chksum_offload_set
<li><a href="#[b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_flow_ctrl_enable
<li><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_mac_addr_set
<li><a href="#[bb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_intr_enable
<li><a href="#[b92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_addr_filter_set
<li><a href="#[b9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_tx_enable
<li><a href="#[b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_rx_enable
<li><a href="#[b91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_addr_set
<li><a href="#[bae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_clk_set
<li><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<li><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_install
<li><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_umask
<li><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[40]"></a>eth_dev_tx</strong>(318 bytes, Stack size 28 btyes, Obj/drivers_drv_eth.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 388 
<li>Call Chain = eth_dev_tx &rArr; pbuf_alloc &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[bb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_frame_transmitted_buf_poll
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<li><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_frame_transmit
<li><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
</ul>
<p><strong><a name="[41]"></a>eth_dev_init</strong>(34 bytes, Stack size 0 btyes, Obj/drivers_drv_eth.o(.text.eth_dev_init))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = eth_dev_init &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<p><strong><a name="[42]"></a>eth_dev_control</strong>(824 bytes, Stack size 28 btyes, Obj/drivers_drv_eth.o(.text.eth_dev_control))<br>
<br>[Stack]<ul><li>Max Depth = 388 
<li>Call Chain = eth_dev_control &rArr; pbuf_alloc &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_addr_filter_get
<li><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_mac_addr_get
<li><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_mac_addr_set
<li><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<li><a href="#[ba2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_wol_wakeup_frame_filter_set
<li><a href="#[ba3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_wol_wakeup_event_set
<li><a href="#[ba5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_wol_mode_enter
<li><a href="#[ba7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_wol_state_poll
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[ba6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_wol_mode_exit
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[b99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_flow_ctrl_disable
<li><a href="#[ba9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_statistics_get
<li><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_hash_filter_set
<li><a href="#[b95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_hash_filter_get
<li><a href="#[b9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_tx_disable
<li><a href="#[b9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_rx_disable
<li><a href="#[b9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_jumbo_frame_disable
<li><a href="#[b92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_addr_filter_set
<li><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_jumbo_frame_enable
<li><a href="#[b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_rx_enable
<li><a href="#[b9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_tx_enable
<li><a href="#[b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_flow_ctrl_enable
<li><a href="#[bad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_hw_deinit
<li><a href="#[bac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_hw_init
<li><a href="#[baa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_tx_queue_init
<li><a href="#[bab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_rx_queue_init
<li><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_rx_buf_attach
<li><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_chksum_offload_set
<li><a href="#[bb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_intr_enable
<li><a href="#[b91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_addr_set
<li><a href="#[bae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_clk_set
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[43]"></a>eth_dev_write</strong>(14 bytes, Stack size 4 btyes, Obj/drivers_drv_eth.o(.text.eth_dev_write))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = eth_dev_write &rArr; rt_set_errno </ul>
<br>[Calls]<ul>
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<p><strong><a name="[44]"></a>eth_dev_read</strong>(14 bytes, Stack size 0 btyes, Obj/drivers_drv_eth.o(.text.eth_dev_read))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = eth_dev_read &rArr; rt_set_errno </ul>
<br>[Calls]<ul>
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<p><strong><a name="[45]"></a>eth_dev_rx</strong>(224 bytes, Stack size 20 btyes, Obj/drivers_drv_eth.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 380 
<li>Call Chain = eth_dev_rx &rArr; pbuf_alloc &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[bb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_frame_recv_poll
<li><a href="#[bb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_rx_valid_buf
<li><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_rx_buf_attach
<li><a href="#[bba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_rx_buf_processed
<li><a href="#[bb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_intr_enable
</ul>
<p><strong><a name="[46]"></a>eth_link_update</strong>(330 bytes, Stack size 88 btyes, Obj/drivers_drv_eth.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 396 
<li>Call Chain = eth_link_update &rArr; eth_device_linkchange &rArr; rt_mb_send  &rArr; rt_mb_send_wait  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_speed_duplex_set
<li><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_linkchange
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[47]"></a>eth1_isr</strong>(78 bytes, Stack size 12 btyes, Obj/drivers_drv_eth.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = eth1_isr &rArr; eth_device_ready &rArr; rt_mb_send  &rArr; rt_mb_send_wait  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_clear
<li><a href="#[bb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_intr_status
<li><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_intr_clear
<li><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_ready
<li><a href="#[bb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_intr_disable
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[4e]"></a>drv_pin_init</strong>(14 bytes, Stack size 4 btyes, Obj/drivers_drv_gpio.o(.text.drv_pin_init))<br>
<br>[Stack]<ul><li>Max Depth = 236 
<li>Call Chain = drv_pin_init &rArr; rt_device_pin_register &rArr; rt_device_register  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
</ul>
<p><strong><a name="[50]"></a>drv_i2c_init</strong>(48 bytes, Stack size 12 btyes, Obj/drivers_drv_i2c.o(.text.drv_i2c_init))<br>
<br>[Stack]<ul><li>Max Depth = 264 
<li>Call Chain = drv_i2c_init &rArr; rt_i2c_bus_device_register &rArr; rt_i2c_bus_device_device_init  &rArr; rt_device_register  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_hw_init
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<li><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_register
</ul>
<p><strong><a name="[51]"></a>drv_i2c_xfer</strong>(216 bytes, Stack size 24 btyes, Obj/drivers_drv_i2c.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = drv_i2c_xfer &rArr; i2c_recv </ul>
<br>[Calls]<ul>
<li><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_is_busy
<li><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send
<li><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_recv
</ul>
<p><strong><a name="[58]"></a>drv_ata_register</strong>(32 bytes, Stack size 4 btyes, Obj/drivers_drv_sata.o(.text.drv_ata_register))<br>
<br>[Stack]<ul><li>Max Depth = 248 
<li>Call Chain = drv_ata_register &rArr; rt_ata_register &rArr; rt_device_register  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[ad6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hba_get
<li><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ata_register
</ul>
<p><strong><a name="[59]"></a>drv_ata_trim</strong>(74 bytes, Stack size 20 btyes, Obj/drivers_drv_sata.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 392 
<li>Call Chain = drv_ata_trim &rArr; ahci_data_set_trim &rArr; ahci_cmd_issue  &rArr; ahci_cmd_complete_wait  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_slot_is_empty
<li><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_data_set_trim
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_error_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_write
<li><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_read
</ul>
<p><strong><a name="[5a]"></a>drv_ata_probe</strong>(138 bytes, Stack size 0 btyes, Obj/drivers_drv_sata.o(.text.drv_ata_probe))<br>
<br>[Stack]<ul><li>Max Depth = 380 
<li>Call Chain = drv_ata_probe &rArr; ahci_xfer_mode_set &rArr; ahci_cmd_issue  &rArr; ahci_cmd_complete_wait  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hba_reset
<li><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_identify_read
<li><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_xfer_mode_set
<li><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_error_handler
</ul>
<p><strong><a name="[5b]"></a>drv_ata_init</strong>(126 bytes, Stack size 12 btyes, Obj/drivers_drv_sata.o(.text.drv_ata_init))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = drv_ata_init &rArr; ahci_hw_init &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_get
<li><a href="#[acf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_clock_set
<li><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_wait_timeout_set
<li><a href="#[ad2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_speed_set
<li><a href="#[ace]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hw_init
<li><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_mask
<li><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_intr_enable
<li><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_install
<li><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_umask
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_reset
</ul>
<p><strong><a name="[5c]"></a>drv_ata_reset</strong>(134 bytes, Stack size 36 btyes, Obj/drivers_drv_sata.o(.text.drv_ata_reset))<br>
<br>[Stack]<ul><li>Max Depth = 360 
<li>Call Chain = drv_ata_reset &rArr; drv_ata_init &rArr; ahci_hw_init  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[ad6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hba_get
<li><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_is_busy
<li><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_module_reset
<li><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_reset
<li><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_init
<li><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_data_pad
<li><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_data_discard
</ul>
<br>[Called By]<ul>
<li><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_write
<li><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_read
</ul>
<p><strong><a name="[5d]"></a>drv_ata_sync</strong>(66 bytes, Stack size 12 btyes, Obj/drivers_drv_sata.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 384 
<li>Call Chain = drv_ata_sync &rArr; ahci_cache_flush &rArr; ahci_cmd_issue  &rArr; ahci_cmd_complete_wait  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_slot_is_empty
<li><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cache_flush
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_error_handler
</ul>
<p><strong><a name="[5e]"></a>drv_ata_ioctl</strong>(64 bytes, Stack size 4 btyes, Obj/drivers_drv_sata.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 176 
<li>Call Chain = drv_ata_ioctl &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[aac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_intr_disable
<li><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_mask
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_intr_enable
<li><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_umask
</ul>
<p><strong><a name="[5f]"></a>drv_ata_cmd_pending_check</strong>(130 bytes, Stack size 28 btyes, Obj/drivers_drv_sata.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 320 
<li>Call Chain = drv_ata_cmd_pending_check &rArr; rt_wqueue_wait &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
<li><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_reg_ci_get
<li><a href="#[ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_reg_sact_get
</ul>
<p><strong><a name="[60]"></a>drv_ata_write</strong>(294 bytes, Stack size 52 btyes, Obj/drivers_drv_sata.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 444 
<li>Call Chain = drv_ata_write &rArr; drv_ata_trim &rArr; ahci_data_set_trim  &rArr; ahci_cmd_issue  &rArr; ahci_cmd_complete_wait  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_slot_is_empty
<li><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_sector_write
<li><a href="#[af1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_slot_free
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bridge_is_required
<li><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bridge_enable
<li><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_frontend_port_addr
<li><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_issue
<li><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_trim
<li><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_error_handler
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_reset
</ul>
<p><strong><a name="[61]"></a>drv_ata_read</strong>(322 bytes, Stack size 52 btyes, Obj/drivers_drv_sata.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 444 
<li>Call Chain = drv_ata_read &rArr; drv_ata_trim &rArr; ahci_data_set_trim  &rArr; ahci_cmd_issue  &rArr; ahci_cmd_complete_wait  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_slot_is_empty
<li><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_sector_read
<li><a href="#[af1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_slot_free
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bridge_is_required
<li><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bridge_enable
<li><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_frontend_port_addr
<li><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_issue
<li><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_trim
<li><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_error_handler
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_reset
</ul>
<p><strong><a name="[62]"></a>ahci_isr</strong>(458 bytes, Stack size 36 btyes, Obj/drivers_drv_sata.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 352 
<li>Call Chain = ahci_isr &rArr; ahci_link_change_handler &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_intr_status
<li><a href="#[aae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_intr_clear
<li><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_reg_is_flush
<li><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_clear
<li><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_reg_ci_get
<li><a href="#[ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_reg_sact_get
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_ccs_get
<li><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_port_serr_clear
<li><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_link_change_handler
</ul>
<p><strong><a name="[63]"></a>drv_spi_xfer</strong>(84 bytes, Stack size 12 btyes, Obj/drivers_drv_spi.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = drv_spi_xfer &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_recv
<li><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frame_output_high
<li><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frame_output_low
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[64]"></a>drv_spi_configure</strong>(132 bytes, Stack size 32 btyes, Obj/drivers_drv_spi.o(.text.drv_spi_configure))<br>
<br>[Stack]<ul><li>Max Depth = 336 
<li>Call Chain = drv_spi_configure &rArr; spi_hw_init &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_get
<li><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_hw_init
</ul>
<p><strong><a name="[65]"></a>drv_spi_init</strong>(20 bytes, Stack size 4 btyes, Obj/drivers_drv_spi.o(.text.drv_spi_init))<br>
<br>[Stack]<ul><li>Max Depth = 260 
<li>Call Chain = drv_spi_init &rArr; rt_spi_bus_register &rArr; rt_spi_bus_device_init  &rArr; rt_device_register  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frame_output_port_set
<li><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
</ul>
<p><strong><a name="[68]"></a>drv_timers_init</strong>(112 bytes, Stack size 0 btyes, Obj/drivers_drv_timer.o(.text.drv_timers_init))<br>
<br>[Stack]<ul><li>Max Depth = 240 
<li>Call Chain = drv_timers_init &rArr; rt_device_hwtimer_register &rArr; rt_device_register  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_get
<li><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_hwtimer_register
</ul>
<p><strong><a name="[69]"></a>drv_hwtimer_control</strong>(78 bytes, Stack size 16 btyes, Obj/drivers_drv_timer.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = drv_hwtimer_control &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_get
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[6a]"></a>drv_hwtimer_count_get</strong>(48 bytes, Stack size 8 btyes, Obj/drivers_drv_timer.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = drv_hwtimer_count_get &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_count_get
</ul>
<p><strong><a name="[6b]"></a>drv_hwtimer_stop</strong>(48 bytes, Stack size 8 btyes, Obj/drivers_drv_timer.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = drv_hwtimer_stop &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop
</ul>
<p><strong><a name="[6c]"></a>drv_hwtimer_start</strong>(110 bytes, Stack size 36 btyes, Obj/drivers_drv_timer.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 220 
<li>Call Chain = drv_hwtimer_start &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tic_us_get
<li><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_hw_init
<li><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_install
<li><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_umask
<li><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[6e]"></a>drv_uart_init</strong>(192 bytes, Stack size 0 btyes, Obj/drivers_drv_uart.o(.text.drv_uart_init))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = drv_uart_init &rArr; rt_hw_serial_register &rArr; rt_device_register  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
</ul>
<p><strong><a name="[70]"></a>drv_uart_getc</strong>(64 bytes, Stack size 8 btyes, Obj/drivers_drv_uart.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = drv_uart_getc &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_ready
<li><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ndelay_getc
</ul>
<p><strong><a name="[71]"></a>drv_uart_putc</strong>(54 bytes, Stack size 12 btyes, Obj/drivers_drv_uart.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = drv_uart_putc &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc
</ul>
<p><strong><a name="[72]"></a>drv_uart_control</strong>(122 bytes, Stack size 12 btyes, Obj/drivers_drv_uart.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = drv_uart_control &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_intr_disable
<li><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_intr_enable
<li><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_install
<li><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_umask
</ul>
<p><strong><a name="[73]"></a>drv_uart_configure</strong>(96 bytes, Stack size 28 btyes, Obj/drivers_drv_uart.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = drv_uart_configure &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init
</ul>
<p><strong><a name="[74]"></a>drv_wdt_config</strong>(24 bytes, Stack size 12 btyes, Obj/drivers_drv_wdt.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = drv_wdt_config &rArr; wdt_hw_init </ul>
<br>[Calls]<ul>
<li><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_hw_init
</ul>
<p><strong><a name="[75]"></a>drv_wdt_init</strong>(22 bytes, Stack size 4 btyes, Obj/drivers_drv_wdt.o(.text.drv_wdt_init))<br>
<br>[Stack]<ul><li>Max Depth = 248 
<li>Call Chain = drv_wdt_init &rArr; rt_hw_watchdog_register &rArr; rt_device_register  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_watchdog_register
</ul>
<p><strong><a name="[76]"></a>drv_wdt_control</strong>(92 bytes, Stack size 12 btyes, Obj/drivers_drv_wdt.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = drv_wdt_control &rArr; wdt_hw_init </ul>
<br>[Calls]<ul>
<li><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_start
<li><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_feed
<li><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_stop
<li><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_hw_init
</ul>
<p><strong><a name="[9c]"></a>rti_end</strong>(4 bytes, Stack size 0 btyes, Obj/src_components.o(.text.rti_end))<br>
<p><strong><a name="[9e]"></a>rti_board_end</strong>(4 bytes, Stack size 0 btyes, Obj/src_components.o(.text.rti_board_end))<br>
<p><strong><a name="[9f]"></a>rti_start</strong>(4 bytes, Stack size 0 btyes, Obj/src_components.o(.text.rti_start))<br>
<p><strong><a name="[a0]"></a>rti_board_start</strong>(4 bytes, Stack size 0 btyes, Obj/src_components.o(.text.rti_board_start))<br>
<p><strong><a name="[b8]"></a>rt_thread_idle_entry</strong>(18 bytes, Stack size 8 btyes, Obj/src_idle.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 328 
<li>Call Chain = rt_thread_idle_entry &rArr; rt_thread_idle_excute &rArr; rt_object_delete  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</ul>
<p><strong><a name="[e5]"></a>print_number</strong>(514 bytes, Stack size 108 btyes, Obj/src_kservice.o(.text.print_number))<br>
<br>[Stack]<ul><li>Max Depth = 132 
<li>Call Chain = print_number &rArr; __umoddi3 </ul>
<br>[Calls]<ul>
<li><a href="#[ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__umoddi3
<li><a href="#[c9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivdi3
</ul>
<br>[Called By]<ul>
<li><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</ul>
<p><strong><a name="[116]"></a>plug_holes</strong>(158 bytes, Stack size 16 btyes, Obj/src_mem.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = plug_holes &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
</ul>
<p><strong><a name="[13c]"></a>_rt_thread_init.isra.0</strong>(144 bytes, Stack size 24 btyes, Obj/src_thread.o(.text._rt_thread_init.isra.0))<br>
<br>[Stack]<ul><li>Max Depth = 256 
<li>Call Chain = _rt_thread_init.isra.0 &rArr; rt_timer_init &rArr; rt_object_init  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<li><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
<li><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<li><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</ul>
<p><strong><a name="[17c]"></a>copyfile</strong>(194 bytes, Stack size 48 btyes, Obj/src_dfs_file.o(.text.copyfile))<br>
<br>[Stack]<ul><li>Max Depth = 460 
<li>Call Chain = copyfile &rArr; dfs_file_open &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<br>[Called By]<ul>
<li><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<li><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</ul>
<p><strong><a name="[183]"></a>copydir</strong>(256 bytes, Stack size 388 btyes, Obj/src_dfs_file.o(.text.copydir))<br>
<br>[Stack]<ul><li>Max Depth = 388 
<li>Call Chain = copydir &rArr; copyfile &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<li><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<li><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<li><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<li><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<li><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</ul>
<br>[Called By]<ul>
<li><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<li><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</ul>
<p><strong><a name="[1ac]"></a>_poll_add</strong>(54 bytes, Stack size 12 btyes, Obj/src_poll.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 320 
<li>Call Chain = _poll_add &rArr; rt_malloc &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_add
</ul>
<p><strong><a name="[1ad]"></a>__wqueue_pollwake</strong>(32 bytes, Stack size 4 btyes, Obj/src_poll.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wqueue_default_wake
</ul>
<p><strong><a name="[1b1]"></a>dfs_device_fs_poll</strong>(4 bytes, Stack size 0 btyes, Obj/devfs_devfs.o(.text.dfs_device_fs_poll))<br>
<p><strong><a name="[1d7]"></a>get_ldnumber</strong>(90 bytes, Stack size 4 btyes, Obj/elmfat_ff.o(.text.get_ldnumber))<br>
<br>[Called By]<ul>
<li><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<li><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<li><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<li><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</ul>
<p><strong><a name="[1d8]"></a>xname_sum</strong>(86 bytes, Stack size 12 btyes, Obj/elmfat_ff.o(.text.xname_sum))<br>
<br>[Calls]<ul>
<li><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</ul>
<br>[Called By]<ul>
<li><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<li><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</ul>
<p><strong><a name="[1d9]"></a>validate</strong>(76 bytes, Stack size 16 btyes, Obj/elmfat_ff.o(.text.validate))<br>
<br>[Stack]<ul><li>Max Depth = 332 
<li>Call Chain = validate &rArr; ff_req_grant &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<li><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
</ul>
<br>[Called By]<ul>
<li><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<li><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<li><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<li><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<li><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<li><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</ul>
<p><strong><a name="[1da]"></a>sync_window.part.5</strong>(78 bytes, Stack size 20 btyes, Obj/elmfat_ff.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 48 + In Cycle
<li>Call Chain = sync_window.part.5 &rArr; disk_write &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</ul>
<br>[Called By]<ul>
<li><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<li><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_bitmap
<li><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<li><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat.part.7
<li><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<li><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<li><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<li><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<li><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<li><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<li><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<li><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_fat_chain.part.8
<li><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<li><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<li><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<li><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<li><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<li><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read.constprop.11
<li><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<li><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<li><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<li><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<li><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<li><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<li><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<li><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</ul>
<p><strong><a name="[1db]"></a>dir_sdi</strong>(180 bytes, Stack size 0 btyes, Obj/elmfat_ff.o(.text.dir_sdi))<br>
<br>[Stack]<ul><li>Max Depth = 48 + In Cycle
<li>Call Chain = dir_sdi &rArr; sync_window.part.5 &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
</ul>
<br>[Called By]<ul>
<li><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<li><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<li><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<li><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<li><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<li><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<li><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<li><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<li><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<li><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<li><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</ul>
<p><strong><a name="[1dc]"></a>sync_fs</strong>(190 bytes, Stack size 16 btyes, Obj/elmfat_ff.o(.text.sync_fs))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = sync_fs &rArr; disk_ioctl &rArr; rt_device_control  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<li><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</ul>
<br>[Called By]<ul>
<li><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<li><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<li><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<li><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</ul>
<p><strong><a name="[1dd]"></a>check_fs</strong>(194 bytes, Stack size 8 btyes, Obj/elmfat_ff.o(.text.check_fs))<br>
<br>[Stack]<ul><li>Max Depth = 56 + In Cycle
<li>Call Chain = check_fs &rArr; sync_window.part.5 &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
</ul>
<br>[Called By]<ul>
<li><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</ul>
<p><strong><a name="[1de]"></a>find_volume</strong>(1394 bytes, Stack size 36 btyes, Obj/elmfat_ff.o(.text.find_volume))<br>
<br>[Stack]<ul><li>Max Depth = 352 
<li>Call Chain = find_volume &rArr; ff_req_grant &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<li><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
<li><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<li><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<li><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<li><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
</ul>
<br>[Called By]<ul>
<li><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<li><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<li><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<li><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<li><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<li><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<li><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<li><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</ul>
<p><strong><a name="[1df]"></a>remove_chain</strong>(260 bytes, Stack size 0 btyes, Obj/elmfat_ff.o(.text.remove_chain))<br>
<br>[Stack]<ul><li>Max Depth = 48 + In Cycle
<li>Call Chain = remove_chain &rArr; sync_window.part.5 &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
</ul>
<br>[Called By]<ul>
<li><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<li><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<li><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</ul>
<p><strong><a name="[1e0]"></a>fill_fat_chain.part.8</strong>(76 bytes, Stack size 20 btyes, Obj/elmfat_ff.o(.text.fill_fat_chain.part.8))<br>
<br>[Stack]<ul><li>Max Depth = 68 + In Cycle
<li>Call Chain = fill_fat_chain.part.8 &rArr; sync_window.part.5 &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
</ul>
<br>[Called By]<ul>
<li><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<li><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</ul>
<p><strong><a name="[1e1]"></a>unlock_fs.part.9</strong>(14 bytes, Stack size 4 btyes, Obj/elmfat_ff.o(.text.unlock_fs.part.9))<br>
<br>[Stack]<ul><li>Max Depth = 296 
<li>Call Chain = unlock_fs.part.9 &rArr; ff_rel_grant &rArr; rt_mutex_release  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</ul>
<br>[Called By]<ul>
<li><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<li><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<li><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<li><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<li><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<li><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<li><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<li><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<li><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<li><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<li><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<li><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<li><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</ul>
<p><strong><a name="[1e2]"></a>get_fileinfo</strong>(526 bytes, Stack size 36 btyes, Obj/elmfat_ff.o(.text.get_fileinfo))<br>
<br>[Calls]<ul>
<li><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</ul>
<br>[Called By]<ul>
<li><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<li><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
</ul>
<p><strong><a name="[1e3]"></a>dir_next</strong>(332 bytes, Stack size 0 btyes, Obj/elmfat_ff.o(.text.dir_next))<br>
<br>[Stack]<ul><li>Max Depth = 48 + In Cycle
<li>Call Chain = dir_next &rArr; sync_window.part.5 &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<li><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<li><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<li><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<li><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read.constprop.11
<li><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<li><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<li><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<li><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
</ul>
<p><strong><a name="[1e4]"></a>load_xdir</strong>(226 bytes, Stack size 24 btyes, Obj/elmfat_ff.o(.text.load_xdir))<br>
<br>[Stack]<ul><li>Max Depth = 72 + In Cycle
<li>Call Chain = load_xdir &rArr; sync_window.part.5 &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</ul>
<br>[Called By]<ul>
<li><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read.constprop.11
<li><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<li><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</ul>
<p><strong><a name="[1e5]"></a>dir_alloc</strong>(112 bytes, Stack size 20 btyes, Obj/elmfat_ff.o(.text.dir_alloc))<br>
<br>[Stack]<ul><li>Max Depth = 68 + In Cycle
<li>Call Chain = dir_alloc &rArr; dir_sdi &rArr; sync_window.part.5  &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<li><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<li><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
</ul>
<br>[Called By]<ul>
<li><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</ul>
<p><strong><a name="[1e6]"></a>store_xdir</strong>(164 bytes, Stack size 28 btyes, Obj/elmfat_ff.o(.text.store_xdir))<br>
<br>[Stack]<ul><li>Max Depth = 76 + In Cycle
<li>Call Chain = store_xdir &rArr; dir_sdi &rArr; sync_window.part.5  &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<li><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
</ul>
<br>[Called By]<ul>
<li><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<li><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<li><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<li><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<li><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</ul>
<p><strong><a name="[1e7]"></a>dir_remove</strong>(106 bytes, Stack size 24 btyes, Obj/elmfat_ff.o(.text.dir_remove))<br>
<br>[Stack]<ul><li>Max Depth = 72 + In Cycle
<li>Call Chain = dir_remove &rArr; dir_sdi &rArr; sync_window.part.5  &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<li><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<li><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
</ul>
<br>[Called By]<ul>
<li><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<li><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</ul>
<p><strong><a name="[1e8]"></a>dir_read.constprop.11</strong>(328 bytes, Stack size 28 btyes, Obj/elmfat_ff.o(.text.dir_read.constprop.11))<br>
<br>[Stack]<ul><li>Max Depth = 100 + In Cycle
<li>Call Chain = dir_read.constprop.11 &rArr; load_xdir &rArr; sync_window.part.5  &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<li><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
<li><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
</ul>
<br>[Called By]<ul>
<li><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<li><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<li><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<li><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</ul>
<p><strong><a name="[1e9]"></a>dir_find</strong>(602 bytes, Stack size 56 btyes, Obj/elmfat_ff.o(.text.dir_find))<br>
<br>[Stack]<ul><li>Max Depth = 156 + In Cycle
<li>Call Chain = dir_find &rArr; dir_read.constprop.11 &rArr; load_xdir  &rArr; sync_window.part.5  &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<li><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<li><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
<li><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<li><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xname_sum
<li><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read.constprop.11
</ul>
<br>[Called By]<ul>
<li><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<li><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</ul>
<p><strong><a name="[1ea]"></a>follow_path</strong>(1156 bytes, Stack size 124 btyes, Obj/elmfat_ff.o(.text.follow_path))<br>
<br>[Stack]<ul><li>Max Depth = 280 + In Cycle
<li>Call Chain = follow_path &rArr; dir_find &rArr; dir_read.constprop.11  &rArr; load_xdir  &rArr; sync_window.part.5  &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<li><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<li><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</ul>
<br>[Called By]<ul>
<li><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<li><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<li><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<li><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<li><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<li><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</ul>
<p><strong><a name="[1eb]"></a>dir_register</strong>(1206 bytes, Stack size 128 btyes, Obj/elmfat_ff.o(.text.dir_register))<br>
<br>[Stack]<ul><li>Max Depth = 284 + In Cycle
<li>Call Chain = dir_register &rArr; dir_find &rArr; dir_read.constprop.11  &rArr; load_xdir  &rArr; sync_window.part.5  &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<li><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<li><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<li><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
<li><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<li><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<li><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xname_sum
<li><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_fat_chain.part.8
</ul>
<br>[Called By]<ul>
<li><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<li><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<li><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</ul>
<p><strong><a name="[1fd]"></a>move_window</strong>(70 bytes, Stack size 12 btyes, Obj/elmfat_ff.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 224 
<li>Call Chain = move_window &rArr; disk_read &rArr; rt_device_read  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<li><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
</ul>
<p><strong><a name="[1fe]"></a>change_bitmap</strong>(124 bytes, Stack size 32 btyes, Obj/elmfat_ff.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 80 + In Cycle
<li>Call Chain = change_bitmap &rArr; sync_window.part.5 &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
</ul>
<p><strong><a name="[1ff]"></a>get_fat</strong>(356 bytes, Stack size 20 btyes, Obj/elmfat_ff.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 68 + In Cycle
<li>Call Chain = get_fat &rArr; sync_window.part.5 &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
</ul>
<p><strong><a name="[200]"></a>put_fat.part.7</strong>(306 bytes, Stack size 36 btyes, Obj/elmfat_ff.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 84 + In Cycle
<li>Call Chain = put_fat.part.7 &rArr; sync_window.part.5 &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
</ul>
<p><strong><a name="[201]"></a>create_chain</strong>(448 bytes, Stack size 32 btyes, Obj/elmfat_ff.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 80 + In Cycle
<li>Call Chain = create_chain &rArr; sync_window.part.5 &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
</ul>
<p><strong><a name="[206]"></a>dfs_net_poll</strong>(94 bytes, Stack size 12 btyes, Obj/net_dfs_net.o(.text.dfs_net_poll))<br>
<br>[Calls]<ul>
<li><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tryget_socket
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</ul>
<p><strong><a name="[207]"></a>dfs_net_write</strong>(10 bytes, Stack size 4 btyes, Obj/net_dfs_net.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 44 + In Cycle
<li>Call Chain = dfs_net_write &rArr; lwip_write &rArr; lwip_send  &rArr; netconn_write_partly  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_write
</ul>
<p><strong><a name="[208]"></a>dfs_net_ioctl</strong>(10 bytes, Stack size 0 btyes, Obj/net_dfs_net.o(.text.dfs_net_ioctl))<br>
<br>[Stack]<ul><li>Max Depth = 220 
<li>Call Chain = dfs_net_ioctl &rArr; lwip_ioctl &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
</ul>
<p><strong><a name="[209]"></a>dfs_net_close</strong>(18 bytes, Stack size 4 btyes, Obj/net_dfs_net.o(.text.dfs_net_close))<br>
<br>[Stack]<ul><li>Max Depth = 416 
<li>Call Chain = dfs_net_close &rArr; lwip_close &rArr; netconn_delete  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</ul>
<p><strong><a name="[20b]"></a>dfs_net_read</strong>(10 bytes, Stack size 4 btyes, Obj/net_dfs_net.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 532 
<li>Call Chain = dfs_net_read &rArr; lwip_read &rArr; lwip_recvfrom  &rArr; netconn_recv  &rArr; netconn_recv_data  &rArr; netconn_close_shutdown  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_read
</ul>
<p><strong><a name="[211]"></a>event_callback</strong>(284 bytes, Stack size 20 btyes, Obj/net_net_sockets.o(.text.event_callback))<br>
<br>[Stack]<ul><li>Max Depth = 288 
<li>Call Chain = event_callback &rArr; rt_wqueue_wakeup &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tryget_socket
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<p><strong><a name="[242]"></a>rt_crypto_open</strong>(4 bytes, Stack size 0 btyes, Obj/crypto_crypto_dev.o(.text.rt_crypto_open))<br>
<p><strong><a name="[243]"></a>rt_crypto_close</strong>(4 bytes, Stack size 0 btyes, Obj/crypto_crypto_dev.o(.text.rt_crypto_close))<br>
<p><strong><a name="[244]"></a>rt_crypto_write</strong>(4 bytes, Stack size 0 btyes, Obj/crypto_crypto_dev.o(.text.rt_crypto_write))<br>
<p><strong><a name="[245]"></a>rt_crypto_ioctl</strong>(48 bytes, Stack size 16 btyes, Obj/crypto_crypto_dev.o(.text.rt_crypto_ioctl))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = rt_crypto_ioctl &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[246]"></a>rt_crypto_init</strong>(88 bytes, Stack size 8 btyes, Obj/crypto_crypto_dev.o(.text.rt_crypto_init))<br>
<br>[Stack]<ul><li>Max Depth = 228 
<li>Call Chain = rt_crypto_init &rArr; rt_mutex_init &rArr; rt_object_init  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[247]"></a>rt_crypto_read</strong>(4 bytes, Stack size 0 btyes, Obj/crypto_crypto_dev.o(.text.rt_crypto_read))<br>
<p><strong><a name="[249]"></a>rt_hwtimer_init</strong>(62 bytes, Stack size 8 btyes, Obj/hwtimer_hwtimer.o(.text.rt_hwtimer_init))<br>
<p><strong><a name="[24a]"></a>rt_hwtimer_open</strong>(28 bytes, Stack size 4 btyes, Obj/hwtimer_hwtimer.o(.text.rt_hwtimer_open))<br>
<p><strong><a name="[24b]"></a>rt_hwtimer_close</strong>(36 bytes, Stack size 8 btyes, Obj/hwtimer_hwtimer.o(.text.rt_hwtimer_close))<br>
<p><strong><a name="[24c]"></a>rt_hwtimer_write</strong>(342 bytes, Stack size 48 btyes, Obj/hwtimer_hwtimer.o(.text.rt_hwtimer_write))<br>
<br>[Stack]<ul><li>Max Depth = 132 
<li>Call Chain = rt_hwtimer_write &rArr; __fixunssfsi &rArr; __subsf3  &rArr; _fpadd_parts  </ul>
<br>[Calls]<ul>
<li><a href="#[cab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__floatsisf
<li><a href="#[ca5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__divsf3
<li><a href="#[ca2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__addsf3
<li><a href="#[caa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ltsf2
<li><a href="#[cae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__floatunsisf
<li><a href="#[ca9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gesf2
<li><a href="#[ca4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mulsf3
<li><a href="#[c9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fixunssfsi
<li><a href="#[ca3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subsf3
<li><a href="#[ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gtsf2
<li><a href="#[ca6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__eqsf2
</ul>
<p><strong><a name="[24d]"></a>rt_hwtimer_control</strong>(146 bytes, Stack size 12 btyes, Obj/hwtimer_hwtimer.o(.text.rt_hwtimer_control))<br>
<p><strong><a name="[24e]"></a>rt_hwtimer_read</strong>(144 bytes, Stack size 32 btyes, Obj/hwtimer_hwtimer.o(.text.rt_hwtimer_read))<br>
<br>[Stack]<ul><li>Max Depth = 108 
<li>Call Chain = rt_hwtimer_read &rArr; __mulsf3 &rArr; __muldi3  </ul>
<br>[Calls]<ul>
<li><a href="#[cab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__floatsisf
<li><a href="#[ca4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mulsf3
<li><a href="#[cae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__floatunsisf
<li><a href="#[ca5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__divsf3
<li><a href="#[ca2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__addsf3
<li><a href="#[cac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fixsfsi
<li><a href="#[ca3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subsf3
<li><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</ul>
<p><strong><a name="[257]"></a>i2c_bus_device_control</strong>(118 bytes, Stack size 16 btyes, Obj/i2c_i2c_dev.o(.text.i2c_bus_device_control))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = i2c_bus_device_control &rArr; rt_i2c_transfer &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[258]"></a>i2c_bus_device_write</strong>(68 bytes, Stack size 24 btyes, Obj/i2c_i2c_dev.o(.text.i2c_bus_device_write))<br>
<br>[Stack]<ul><li>Max Depth = 376 
<li>Call Chain = i2c_bus_device_write &rArr; rt_i2c_master_send &rArr; rt_i2c_transfer  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_send
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[259]"></a>i2c_bus_device_read</strong>(68 bytes, Stack size 24 btyes, Obj/i2c_i2c_dev.o(.text.i2c_bus_device_read))<br>
<br>[Stack]<ul><li>Max Depth = 392 
<li>Call Chain = i2c_bus_device_read &rArr; rt_i2c_master_recv &rArr; rt_i2c_transfer  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_recv
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[25b]"></a>i2c_start</strong>(32 bytes, Stack size 0 btyes, Obj/i2c_i2c-bit-ops.o(.text.i2c_start))<br>
<p><strong><a name="[25c]"></a>SCL_H</strong>(76 bytes, Stack size 0 btyes, Obj/i2c_i2c-bit-ops.o(.text.SCL_H))<br>
<p><strong><a name="[25d]"></a>i2c_restart</strong>(56 bytes, Stack size 0 btyes, Obj/i2c_i2c-bit-ops.o(.text.i2c_restart))<br>
<p><strong><a name="[25e]"></a>i2c_stop</strong>(54 bytes, Stack size 0 btyes, Obj/i2c_i2c-bit-ops.o(.text.i2c_stop))<br>
<p><strong><a name="[25f]"></a>i2c_writeb.isra.3</strong>(134 bytes, Stack size 0 btyes, Obj/i2c_i2c-bit-ops.o(.text.i2c_writeb.isra.3))<br>
<p><strong><a name="[260]"></a>i2c_send_address</strong>(74 bytes, Stack size 0 btyes, Obj/i2c_i2c-bit-ops.o(.text.i2c_send_address))<br>
<p><strong><a name="[261]"></a>i2c_bit_xfer</strong>(592 bytes, Stack size 0 btyes, Obj/i2c_i2c-bit-ops.o(.text.i2c_bit_xfer))<br>
<p><strong><a name="[263]"></a>i2c_eeprom_open</strong>(4 bytes, Stack size 0 btyes, Obj/i2c_i2c_eeprom.o(.text.i2c_eeprom_open))<br>
<p><strong><a name="[264]"></a>i2c_eeprom_close</strong>(4 bytes, Stack size 0 btyes, Obj/i2c_i2c_eeprom.o(.text.i2c_eeprom_close))<br>
<p><strong><a name="[265]"></a>i2c_eeprom_control</strong>(4 bytes, Stack size 0 btyes, Obj/i2c_i2c_eeprom.o(.text.i2c_eeprom_control))<br>
<p><strong><a name="[267]"></a>i2c_eeprom_read</strong>(162 bytes, Stack size 44 btyes, Obj/i2c_i2c_eeprom.o(.text.i2c_eeprom_read))<br>
<br>[Stack]<ul><li>Max Depth = 376 
<li>Call Chain = i2c_eeprom_read &rArr; rt_i2c_transfer &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[268]"></a>i2c_eeprom_write</strong>(566 bytes, Stack size 144 btyes, Obj/i2c_i2c_eeprom.o(.text.i2c_eeprom_write))<br>
<br>[Stack]<ul><li>Max Depth = 476 
<li>Call Chain = i2c_eeprom_write &rArr; rt_i2c_transfer &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[269]"></a>i2c_eeprom_init</strong>(4 bytes, Stack size 0 btyes, Obj/i2c_i2c_eeprom.o(.text.i2c_eeprom_init))<br>
<p><strong><a name="[26a]"></a>_pin_control</strong>(48 bytes, Stack size 12 btyes, Obj/misc_pin.o(.text._pin_control))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = _pin_control &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[26e]"></a>_pin_write</strong>(58 bytes, Stack size 16 btyes, Obj/misc_pin.o(.text._pin_write))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = _pin_write &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[26f]"></a>_pin_read</strong>(56 bytes, Stack size 16 btyes, Obj/misc_pin.o(.text._pin_read))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = _pin_read &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[276]"></a>ntp_sync_thread_enrty</strong>(28 bytes, Stack size 4 btyes, Obj/rtc_rtc.o(.text.ntp_sync_thread_enrty))<br>
<br>[Stack]<ul><li>Max Depth = 700 
<li>Call Chain = ntp_sync_thread_enrty &rArr; ntp_sync_to_rtc &rArr; ntp_get_time  &rArr; recvfrom  &rArr; lwip_recvfrom  &rArr; netconn_recv  &rArr; netconn_recv_data  &rArr; netconn_close_shutdown  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<li><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_to_rtc
</ul>
<p><strong><a name="[279]"></a>date</strong>(230 bytes, Stack size 36 btyes, Obj/rtc_rtc.o(.text.date))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = date &rArr; set_time &rArr; localtime  &rArr; localtime_r  &rArr; gettimeofday  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[cd5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<li><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
<li><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<li><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
</ul>
<p><strong><a name="[27b]"></a>soft_rtc_control</strong>(116 bytes, Stack size 56 btyes, Obj/rtc_soft_rtc.o(.text.soft_rtc_control))<br>
<br>[Stack]<ul><li>Max Depth = 240 
<li>Call Chain = soft_rtc_control &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[27c]"></a>rt_ata_open</strong>(4 bytes, Stack size 0 btyes, Obj/sata_sata.o(.fast))<br>
<p><strong><a name="[27d]"></a>rt_ata_init</strong>(74 bytes, Stack size 0 btyes, Obj/sata_sata.o(.text.rt_ata_init))<br>
<br>[Stack]<ul><li>Max Depth = 220 
<li>Call Chain = rt_ata_init &rArr; rt_mutex_init &rArr; rt_object_init  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[27f]"></a>rt_ata_close</strong>(4 bytes, Stack size 0 btyes, Obj/sata_sata.o(.fast))<br>
<p><strong><a name="[280]"></a>rt_ata_ioctl</strong>(162 bytes, Stack size 20 btyes, Obj/sata_sata.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 332 
<li>Call Chain = rt_ata_ioctl &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[281]"></a>rt_ata_write</strong>(86 bytes, Stack size 24 btyes, Obj/sata_sata.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 336 
<li>Call Chain = rt_ata_write &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[282]"></a>rt_ata_read</strong>(86 bytes, Stack size 24 btyes, Obj/sata_sata.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 336 
<li>Call Chain = rt_ata_read &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[283]"></a>_serial_fifo_calc_recved_len</strong>(66 bytes, Stack size 12 btyes, Obj/serial_serial.o(.text._serial_fifo_calc_recved_len))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<li><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<li><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</ul>
<p><strong><a name="[284]"></a>rt_serial_init</strong>(50 bytes, Stack size 8 btyes, Obj/serial_serial.o(.text.rt_serial_init))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = rt_serial_init &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[285]"></a>serial_fops_poll</strong>(100 bytes, Stack size 16 btyes, Obj/serial_serial.o(.text.serial_fops_poll))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = serial_fops_poll &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[286]"></a>rt_serial_control</strong>(178 bytes, Stack size 20 btyes, Obj/serial_serial.o(.text.rt_serial_control))<br>
<br>[Stack]<ul><li>Max Depth = 216 
<li>Call Chain = rt_serial_control &rArr; _serial_fifo_calc_recved_len &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_calc_recved_len
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[287]"></a>serial_fops_write</strong>(18 bytes, Stack size 4 btyes, Obj/serial_serial.o(.text.serial_fops_write))<br>
<br>[Stack]<ul><li>Max Depth = 24 + In Cycle
<li>Call Chain = serial_fops_write &rArr; rt_device_write &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</ul>
<p><strong><a name="[288]"></a>serial_fops_read</strong>(62 bytes, Stack size 24 btyes, Obj/serial_serial.o(.text.serial_fops_read))<br>
<br>[Stack]<ul><li>Max Depth = 316 
<li>Call Chain = serial_fops_read &rArr; rt_wqueue_wait &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<li><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
</ul>
<p><strong><a name="[289]"></a>serial_fops_ioctl</strong>(10 bytes, Stack size 4 btyes, Obj/serial_serial.o(.text.serial_fops_ioctl))<br>
<br>[Stack]<ul><li>Max Depth = 204 
<li>Call Chain = serial_fops_ioctl &rArr; rt_device_control &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</ul>
<p><strong><a name="[28a]"></a>serial_fops_close</strong>(22 bytes, Stack size 8 btyes, Obj/serial_serial.o(.text.serial_fops_close))<br>
<br>[Stack]<ul><li>Max Depth = 204 
<li>Call Chain = serial_fops_close &rArr; rt_device_set_rx_indicate &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<li><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
</ul>
<p><strong><a name="[28b]"></a>serial_fops_open</strong>(78 bytes, Stack size 12 btyes, Obj/serial_serial.o(.text.serial_fops_open))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = serial_fops_open &rArr; rt_device_open &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<li><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[28c]"></a>serial_fops_rx_ind</strong>(14 bytes, Stack size 4 btyes, Obj/serial_serial.o(.text.serial_fops_rx_ind))<br>
<br>[Stack]<ul><li>Max Depth = 272 
<li>Call Chain = serial_fops_rx_ind &rArr; rt_wqueue_wakeup &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
</ul>
<p><strong><a name="[28d]"></a>rt_serial_open</strong>(556 bytes, Stack size 24 btyes, Obj/serial_serial.o(.text.rt_serial_open))<br>
<br>[Stack]<ul><li>Max Depth = 352 
<li>Call Chain = rt_serial_open &rArr; rt_data_queue_init &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<li><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
</ul>
<p><strong><a name="[28e]"></a>rt_serial_write</strong>(244 bytes, Stack size 28 btyes, Obj/serial_serial.o(.text.rt_serial_write))<br>
<br>[Stack]<ul><li>Max Depth = 328 
<li>Call Chain = rt_serial_write &rArr; rt_data_queue_push &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[28f]"></a>rt_serial_read</strong>(566 bytes, Stack size 36 btyes, Obj/serial_serial.o(.text.rt_serial_read))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = rt_serial_read &rArr; _serial_fifo_calc_recved_len &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_calc_recved_len
<li><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<p><strong><a name="[290]"></a>rt_serial_close</strong>(304 bytes, Stack size 12 btyes, Obj/serial_serial.o(.text.rt_serial_close))<br>
<br>[Stack]<ul><li>Max Depth = 296 
<li>Call Chain = rt_serial_close &rArr; rt_free &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[29e]"></a>_spidev_device_control</strong>(4 bytes, Stack size 0 btyes, Obj/spi_spi_dev.o(.text._spidev_device_control))<br>
<p><strong><a name="[29f]"></a>_spi_bus_device_write</strong>(68 bytes, Stack size 16 btyes, Obj/spi_spi_dev.o(.text._spi_bus_device_write))<br>
<br>[Stack]<ul><li>Max Depth = 372 
<li>Call Chain = _spi_bus_device_write &rArr; rt_spi_transfer &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[2a0]"></a>_spi_bus_device_read</strong>(68 bytes, Stack size 16 btyes, Obj/spi_spi_dev.o(.text._spi_bus_device_read))<br>
<br>[Stack]<ul><li>Max Depth = 372 
<li>Call Chain = _spi_bus_device_read &rArr; rt_spi_transfer &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[2a1]"></a>_spidev_device_write</strong>(60 bytes, Stack size 16 btyes, Obj/spi_spi_dev.o(.text._spidev_device_write))<br>
<br>[Stack]<ul><li>Max Depth = 372 
<li>Call Chain = _spidev_device_write &rArr; rt_spi_transfer &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[2a2]"></a>_spidev_device_read</strong>(60 bytes, Stack size 16 btyes, Obj/spi_spi_dev.o(.text._spidev_device_read))<br>
<br>[Stack]<ul><li>Max Depth = 372 
<li>Call Chain = _spidev_device_read &rArr; rt_spi_transfer &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[2a3]"></a>_spi_bus_device_control</strong>(4 bytes, Stack size 0 btyes, Obj/spi_spi_dev.o(.text._spi_bus_device_control))<br>
<p><strong><a name="[2a6]"></a>mcp3202_adc_open</strong>(4 bytes, Stack size 0 btyes, Obj/spi_spi_adc.o(.text.mcp3202_adc_open))<br>
<p><strong><a name="[2a7]"></a>mcp3202_adc_close</strong>(4 bytes, Stack size 0 btyes, Obj/spi_spi_adc.o(.text.mcp3202_adc_close))<br>
<p><strong><a name="[2a8]"></a>mcp3202_adc_write</strong>(4 bytes, Stack size 0 btyes, Obj/spi_spi_adc.o(.text.mcp3202_adc_write))<br>
<p><strong><a name="[2aa]"></a>mcp3202_adc_control</strong>(46 bytes, Stack size 12 btyes, Obj/spi_spi_adc.o(.text.mcp3202_adc_control))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = mcp3202_adc_control &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[2ab]"></a>mcp3202_adc_read</strong>(142 bytes, Stack size 56 btyes, Obj/spi_spi_adc.o(.text.mcp3202_adc_read))<br>
<br>[Stack]<ul><li>Max Depth = 380 
<li>Call Chain = mcp3202_adc_read &rArr; rt_spi_transfer_message &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</ul>
<p><strong><a name="[2ac]"></a>mcp3202_adc_init</strong>(4 bytes, Stack size 0 btyes, Obj/spi_spi_adc.o(.text.mcp3202_adc_init))<br>
<p><strong><a name="[2ad]"></a>rt_watchdog_open</strong>(4 bytes, Stack size 0 btyes, Obj/watchdog_watchdog.o(.text.rt_watchdog_open))<br>
<p><strong><a name="[2ae]"></a>rt_watchdog_control</strong>(38 bytes, Stack size 16 btyes, Obj/watchdog_watchdog.o(.text.rt_watchdog_control))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = rt_watchdog_control &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[2af]"></a>rt_watchdog_init</strong>(40 bytes, Stack size 8 btyes, Obj/watchdog_watchdog.o(.text.rt_watchdog_init))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = rt_watchdog_init &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[2b0]"></a>rt_watchdog_close</strong>(50 bytes, Stack size 8 btyes, Obj/watchdog_watchdog.o(.text.rt_watchdog_close))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = rt_watchdog_close &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[2bd]"></a>pipe_fops_open</strong>(118 bytes, Stack size 0 btyes, Obj/src_pipe.o(.fast))<br>
<p><strong><a name="[2bf]"></a>pipe_fops_poll</strong>(152 bytes, Stack size 0 btyes, Obj/src_pipe.o(.fast))<br>
<p><strong><a name="[2c0]"></a>pipe_fops_ioctl</strong>(54 bytes, Stack size 0 btyes, Obj/src_pipe.o(.fast))<br>
<p><strong><a name="[2c1]"></a>pipe_fops_close</strong>(172 bytes, Stack size 0 btyes, Obj/src_pipe.o(.fast))<br>
<p><strong><a name="[2c2]"></a>pipe_fops_write</strong>(222 bytes, Stack size 0 btyes, Obj/src_pipe.o(.fast))<br>
<p><strong><a name="[2c3]"></a>pipe_fops_read</strong>(188 bytes, Stack size 0 btyes, Obj/src_pipe.o(.fast))<br>
<p><strong><a name="[2d9]"></a>_workqueue_thread_entry</strong>(128 bytes, Stack size 0 btyes, Obj/src_workqueue.o(.fast))<br>
<p><strong><a name="[2e1]"></a>finsh_rx_ind</strong>(38 bytes, Stack size 8 btyes, Obj/finsh_shell.o(.text.finsh_rx_ind))<br>
<br>[Stack]<ul><li>Max Depth = 264 
<li>Call Chain = finsh_rx_ind &rArr; rt_sem_release &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[2e5]"></a>shell_handle_history</strong>(30 bytes, Stack size 8 btyes, Obj/finsh_shell.o(.text.shell_handle_history))<br>
<br>[Stack]<ul><li>Max Depth = 180 
<li>Call Chain = shell_handle_history &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</ul>
<br>[Called By]<ul>
<li><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</ul>
<p><strong><a name="[2f0]"></a>show_wait_queue</strong>(44 bytes, Stack size 20 btyes, Obj/finsh_cmd.o(.text.show_wait_queue))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<li><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<li><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<li><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
</ul>
<p><strong><a name="[2f2]"></a>object_name_maxlen</strong>(66 bytes, Stack size 16 btyes, Obj/finsh_cmd.o(.text.object_name_maxlen))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = object_name_maxlen &rArr; rt_enter_critical </ul>
<br>[Calls]<ul>
<li><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<li><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
</ul>
<br>[Called By]<ul>
<li><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<li><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<li><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<li><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<li><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<li><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<li><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<li><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<li><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
</ul>
<p><strong><a name="[33b]"></a>clock_gettime.part.0</strong>(50 bytes, Stack size 0 btyes, Obj/time_clock_time.o(.fast))<br>
<p><strong><a name="[341]"></a>netif_device_init</strong>(36 bytes, Stack size 12 btyes, Obj/arch_sys_arch.o(.text.netif_device_init))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = netif_device_init &rArr; rt_device_init &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
</ul>
<p><strong><a name="[347]"></a>tcpip_init_done_callback</strong>(216 bytes, Stack size 60 btyes, Obj/arch_sys_arch.o(.text.tcpip_init_done_callback))<br>
<br>[Stack]<ul><li>Max Depth = 804 
<li>Call Chain = tcpip_init_done_callback &rArr; netif_add &rArr; netif_set_addr  &rArr; netif_set_ipaddr  &rArr; tcp_netif_ip_addr_changed  &rArr; tcp_netif_ip_addr_changed_pcblist  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<li><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<li><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<li><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<li><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<li><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<li><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<li><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[365]"></a>netconn_close_shutdown</strong>(66 bytes, Stack size 28 btyes, Obj/api_api_lib.o(.text.netconn_close_shutdown))<br>
<br>[Stack]<ul><li>Max Depth = 368 
<li>Call Chain = netconn_close_shutdown &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<li><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</ul>
<p><strong><a name="[366]"></a>netconn_recv_data</strong>(352 bytes, Stack size 44 btyes, Obj/api_api_lib.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 412 
<li>Call Chain = netconn_recv_data &rArr; netconn_close_shutdown &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</ul>
<br>[Called By]<ul>
<li><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<li><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
</ul>
<p><strong><a name="[378]"></a>recv_udp</strong>(202 bytes, Stack size 28 btyes, Obj/api_api_msg.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 352 
<li>Call Chain = recv_udp &rArr; netbuf_delete &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<li><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
</ul>
<br>[Called By]<ul>
<li><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<li><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<li><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
</ul>
<p><strong><a name="[379]"></a>setup_tcp</strong>(48 bytes, Stack size 0 btyes, Obj/api_api_msg.o(.text.setup_tcp))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = setup_tcp &rArr; tcp_poll &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<li><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<li><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<li><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<li><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
</ul>
<br>[Called By]<ul>
<li><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<li><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<li><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<li><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
</ul>
<p><strong><a name="[37a]"></a>lwip_netconn_do_connected</strong>(216 bytes, Stack size 0 btyes, Obj/api_api_msg.o(.text.lwip_netconn_do_connected))<br>
<br>[Stack]<ul><li>Max Depth = 260 
<li>Call Chain = lwip_netconn_do_connected &rArr; sys_sem_signal &rArr; rt_sem_release  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<li><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
</ul>
<p><strong><a name="[37b]"></a>lwip_netconn_do_dns_found</strong>(40 bytes, Stack size 4 btyes, Obj/api_api_msg.o(.text.lwip_netconn_do_dns_found))<br>
<br>[Stack]<ul><li>Max Depth = 264 
<li>Call Chain = lwip_netconn_do_dns_found &rArr; sys_sem_signal &rArr; rt_sem_release  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</ul>
<p><strong><a name="[37c]"></a>lwip_netconn_do_close_internal</strong>(626 bytes, Stack size 0 btyes, Obj/api_api_msg.o(.text.lwip_netconn_do_close_internal))<br>
<br>[Stack]<ul><li>Max Depth = 656 
<li>Call Chain = lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<li><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<li><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<li><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<li><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<li><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<li><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<li><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<li><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<li><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</ul>
<br>[Called By]<ul>
<li><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<li><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<li><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<li><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
</ul>
<p><strong><a name="[380]"></a>netconn_drain</strong>(194 bytes, Stack size 28 btyes, Obj/api_api_msg.o(.text.netconn_drain))<br>
<br>[Stack]<ul><li>Max Depth = 684 
<li>Call Chain = netconn_drain &rArr; tcp_abort &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<li><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<li><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<li><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<li><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<li><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<li><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<li><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</ul>
<br>[Called By]<ul>
<li><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<li><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<li><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
</ul>
<p><strong><a name="[381]"></a>accept_function</strong>(234 bytes, Stack size 24 btyes, Obj/api_api_msg.o(.text.accept_function))<br>
<br>[Stack]<ul><li>Max Depth = 420 
<li>Call Chain = accept_function &rArr; netconn_alloc &rArr; sys_mbox_new  &rArr; rt_mb_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<li><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<li><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<li><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<li><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<li><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<li><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<li><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<li><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<li><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<li><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<li><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</ul>
<p><strong><a name="[38b]"></a>recv_raw</strong>(164 bytes, Stack size 24 btyes, Obj/api_api_msg.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 384 
<li>Call Chain = recv_raw &rArr; pbuf_alloc &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<li><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
</ul>
<p><strong><a name="[38c]"></a>err_tcp</strong>(318 bytes, Stack size 20 btyes, Obj/api_api_msg.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 332 
<li>Call Chain = err_tcp &rArr; sys_mbox_trypost &rArr; rt_mb_send  &rArr; rt_mb_send_wait  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<li><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<li><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
</ul>
<p><strong><a name="[38d]"></a>lwip_netconn_do_writemore</strong>(628 bytes, Stack size 32 btyes, Obj/api_api_msg.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 632 
<li>Call Chain = lwip_netconn_do_writemore &rArr; tcp_output &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<li><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<li><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</ul>
<p><strong><a name="[38e]"></a>poll_tcp</strong>(116 bytes, Stack size 8 btyes, Obj/api_api_msg.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 664 
<li>Call Chain = poll_tcp &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<li><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<p><strong><a name="[38f]"></a>recv_tcp</strong>(216 bytes, Stack size 28 btyes, Obj/api_api_msg.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 640 
<li>Call Chain = recv_tcp &rArr; tcp_recved &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<li><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</ul>
<p><strong><a name="[390]"></a>sent_tcp</strong>(110 bytes, Stack size 12 btyes, Obj/api_api_msg.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 668 
<li>Call Chain = sent_tcp &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<li><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<p><strong><a name="[3a2]"></a>netifapi_do_netif_add</strong>(56 bytes, Stack size 16 btyes, Obj/api_netifapi.o(.text.netifapi_do_netif_add))<br>
<br>[Stack]<ul><li>Max Depth = 760 
<li>Call Chain = netifapi_do_netif_add &rArr; netif_add &rArr; netif_set_addr  &rArr; netif_set_ipaddr  &rArr; tcp_netif_ip_addr_changed  &rArr; tcp_netif_ip_addr_changed_pcblist  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</ul>
<p><strong><a name="[3a3]"></a>netifapi_do_netif_set_addr</strong>(18 bytes, Stack size 4 btyes, Obj/api_netifapi.o(.text.netifapi_do_netif_set_addr))<br>
<br>[Stack]<ul><li>Max Depth = 716 
<li>Call Chain = netifapi_do_netif_set_addr &rArr; netif_set_addr &rArr; netif_set_ipaddr  &rArr; tcp_netif_ip_addr_changed  &rArr; tcp_netif_ip_addr_changed_pcblist  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</ul>
<p><strong><a name="[3a4]"></a>netifapi_do_netif_common</strong>(24 bytes, Stack size 8 btyes, Obj/api_netifapi.o(.text.netifapi_do_netif_common))<br>
<p><strong><a name="[3a8]"></a>alloc_socket</strong>(110 bytes, Stack size 28 btyes, Obj/api_sockets.o(.text.alloc_socket))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = alloc_socket &rArr; sys_arch_unprotect </ul>
<br>[Calls]<ul>
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</ul>
<br>[Called By]<ul>
<li><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<li><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</ul>
<p><strong><a name="[3a9]"></a>lwip_selscan</strong>(332 bytes, Stack size 72 btyes, Obj/api_sockets.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 76 
<li>Call Chain = lwip_selscan &rArr; sys_arch_protect </ul>
<br>[Calls]<ul>
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</ul>
<br>[Called By]<ul>
<li><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<li><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<li><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<li><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<li><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<li><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<li><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<li><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<li><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<li><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<li><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<li><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<li><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<li><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
</ul>
<p><strong><a name="[3aa]"></a>lwip_getaddrname</strong>(128 bytes, Stack size 0 btyes, Obj/api_sockets.o(.text.lwip_getaddrname))<br>
<br>[Stack]<ul><li>Max Depth = 368 
<li>Call Chain = lwip_getaddrname &rArr; netconn_getaddr &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<li><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<li><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockname
</ul>
<p><strong><a name="[3bc]"></a>get_socket</strong>(48 bytes, Stack size 8 btyes, Obj/api_sockets.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = get_socket &rArr; _rt_errno </ul>
<br>[Calls]<ul>
<li><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
</ul>
<p><strong><a name="[3bd]"></a>event_callback</strong>(314 bytes, Stack size 40 btyes, Obj/api_sockets.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 300 
<li>Call Chain = event_callback &rArr; sys_sem_signal &rArr; rt_sem_release  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<p><strong><a name="[3c6]"></a>tcpip_thread</strong>(124 bytes, Stack size 24 btyes, Obj/api_tcpip.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 388 
<li>Call Chain = tcpip_thread &rArr; sys_timeouts_mbox_fetch &rArr; sys_arch_mbox_fetch  &rArr; rt_mb_recv  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<li><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<li><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<p><strong><a name="[3c7]"></a>pbuf_free_int</strong>(8 bytes, Stack size 0 btyes, Obj/api_tcpip.o(.text.pbuf_free_int))<br>
<p><strong><a name="[3d9]"></a>dns_call_found</strong>(148 bytes, Stack size 28 btyes, Obj/core_dns.o(.text.dns_call_found))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = dns_call_found &rArr; udp_remove &rArr; memp_free  &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
</ul>
<br>[Called By]<ul>
<li><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<li><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<li><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</ul>
<p><strong><a name="[3da]"></a>dns_send</strong>(362 bytes, Stack size 56 btyes, Obj/core_dns.o(.text.dns_send))<br>
<br>[Stack]<ul><li>Max Depth = 660 
<li>Call Chain = dns_send &rArr; udp_sendto &rArr; udp_sendto_if  &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<li><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_put_at
<li><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<li><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
</ul>
<br>[Called By]<ul>
<li><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</ul>
<p><strong><a name="[3db]"></a>dns_check_entry</strong>(240 bytes, Stack size 16 btyes, Obj/core_dns.o(.text.dns_check_entry))<br>
<br>[Stack]<ul><li>Max Depth = 676 
<li>Call Chain = dns_check_entry &rArr; dns_send &rArr; udp_sendto  &rArr; udp_sendto_if  &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[cce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<li><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
</ul>
<br>[Called By]<ul>
<li><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
<li><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</ul>
<p><strong><a name="[3dc]"></a>dns_recv</strong>(606 bytes, Stack size 72 btyes, Obj/core_dns.o(.text.dns_recv))<br>
<br>[Stack]<ul><li>Max Depth = 388 
<li>Call Chain = dns_recv &rArr; pbuf_free &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
<li><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<li><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</ul>
<p><strong><a name="[3ed]"></a>do_memp_malloc_pool.isra.0</strong>(62 bytes, Stack size 12 btyes, Obj/core_memp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = do_memp_malloc_pool.isra.0 &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</ul>
<br>[Called By]<ul>
<li><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_pool
<li><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free_pool
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</ul>
<p><strong><a name="[3f0]"></a>do_memp_free_pool.isra.1</strong>(48 bytes, Stack size 12 btyes, Obj/core_memp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = do_memp_free_pool.isra.1 &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</ul>
<p><strong><a name="[3f5]"></a>netif_issue_reports.part.0</strong>(46 bytes, Stack size 8 btyes, Obj/core_netif.o(.text.netif_issue_reports.part.0))<br>
<br>[Stack]<ul><li>Max Depth = 416 
<li>Call Chain = netif_issue_reports.part.0 &rArr; etharp_request &rArr; etharp_raw  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_report_groups
<li><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</ul>
<br>[Called By]<ul>
<li><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<li><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<li><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
</ul>
<p><strong><a name="[408]"></a>pbuf_header_impl</strong>(188 bytes, Stack size 8 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 204 
<li>Call Chain = pbuf_header_impl &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<li><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<li><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memcmp
<li><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memfind
</ul>
<p><strong><a name="[409]"></a>pbuf_memcmp.part.3</strong>(128 bytes, Stack size 8 btyes, Obj/core_pbuf.o(.fast))<br>
<p><strong><a name="[42d]"></a>tcp_close_shutdown</strong>(390 bytes, Stack size 20 btyes, Obj/core_tcp.o(.text.tcp_close_shutdown))<br>
<br>[Stack]<ul><li>Max Depth = 628 
<li>Call Chain = tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<li><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<li><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<li><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_trigger_input_pcb_close
<li><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
</ul>
<br>[Called By]<ul>
<li><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<li><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<li><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
</ul>
<p><strong><a name="[432]"></a>tcp_accept_null</strong>(16 bytes, Stack size 4 btyes, Obj/core_tcp.o(.text.tcp_accept_null))<br>
<br>[Stack]<ul><li>Max Depth = 656 
<li>Call Chain = tcp_accept_null &rArr; tcp_abandon &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</ul>
<p><strong><a name="[433]"></a>tcp_netif_ip_addr_changed_pcblist</strong>(38 bytes, Stack size 12 btyes, Obj/core_tcp.o(.text.tcp_netif_ip_addr_changed_pcblist))<br>
<br>[Stack]<ul><li>Max Depth = 664 
<li>Call Chain = tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abandon &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</ul>
<br>[Called By]<ul>
<li><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
</ul>
<p><strong><a name="[436]"></a>tcp_new_port</strong>(90 bytes, Stack size 8 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<li><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<li><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<li><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<li><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<li><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<li><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</ul>
<p><strong><a name="[437]"></a>tcp_close_shutdown_fin</strong>(104 bytes, Stack size 8 btyes, Obj/core_tcp.o(.text.tcp_close_shutdown_fin))<br>
<br>[Stack]<ul><li>Max Depth = 608 
<li>Call Chain = tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<li><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<li><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</ul>
<p><strong><a name="[44d]"></a>tcp_pcb_purge.part.1</strong>(72 bytes, Stack size 12 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 336 
<li>Call Chain = tcp_pcb_purge.part.1 &rArr; tcp_seg_free &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</ul>
<p><strong><a name="[457]"></a>tcp_kill_state</strong>(90 bytes, Stack size 8 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 660 
<li>Call Chain = tcp_kill_state &rArr; tcp_abandon &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</ul>
<p><strong><a name="[45a]"></a>tcp_receive</strong>(1856 bytes, Stack size 48 btyes, Obj/core_tcp_in.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 588 
<li>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<li><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<li><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<li><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<li><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<li><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
</ul>
<br>[Called By]<ul>
<li><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt.isra.1.part.2
<li><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</ul>
<p><strong><a name="[45b]"></a>tcp_getoptbyte</strong>(52 bytes, Stack size 0 btyes, Obj/core_tcp_in.o(.fast))<br>
<p><strong><a name="[45c]"></a>tcp_parseopt.isra.1.part.2</strong>(118 bytes, Stack size 28 btyes, Obj/core_tcp_in.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 616 
<li>Call Chain = tcp_parseopt.isra.1.part.2 &rArr; tcp_receive &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</ul>
<p><strong><a name="[45d]"></a>tcp_input_delayed_close.part.3</strong>(50 bytes, Stack size 8 btyes, Obj/core_tcp_in.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 616 
<li>Call Chain = tcp_input_delayed_close.part.3 &rArr; tcp_pcb_remove &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</ul>
<p><strong><a name="[460]"></a>tcp_pbuf_prealloc.isra.0</strong>(56 bytes, Stack size 16 btyes, Obj/core_tcp_out.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 376 
<li>Call Chain = tcp_pbuf_prealloc.isra.0 &rArr; pbuf_alloc &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<li><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<li><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<li><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<li><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</ul>
<p><strong><a name="[464]"></a>tcp_create_segment.isra.1</strong>(266 bytes, Stack size 36 btyes, Obj/core_tcp_out.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 360 
<li>Call Chain = tcp_create_segment.isra.1 &rArr; tcp_seg_free &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</ul>
<p><strong><a name="[465]"></a>tcp_output_alloc_header.constprop.2</strong>(180 bytes, Stack size 24 btyes, Obj/core_tcp_out.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 384 
<li>Call Chain = tcp_output_alloc_header.constprop.2 &rArr; pbuf_alloc &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<p><strong><a name="[471]"></a>tcpip_tcp_timer</strong>(40 bytes, Stack size 4 btyes, Obj/core_timeouts.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 692 
<li>Call Chain = tcpip_tcp_timer &rArr; tcp_tmr &rArr; tcp_fasttmr  &rArr; tcp_process_refused_data  &rArr; tcp_recv_null  &rArr; tcp_close_shutdown  &rArr; tcp_close_shutdown_fin  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<li><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</ul>
<p><strong><a name="[472]"></a>cyclic_timer</strong>(20 bytes, Stack size 8 btyes, Obj/core_timeouts.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 240 
<li>Call Chain = cyclic_timer &rArr; sys_timeout &rArr; memp_malloc  &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</ul>
<p><strong><a name="[486]"></a>eth_netif_device_init</strong>(86 bytes, Stack size 12 btyes, Obj/netif_ethernetif.o(.text.eth_netif_device_init))<br>
<br>[Stack]<ul><li>Max Depth = 640 
<li>Call Chain = eth_netif_device_init &rArr; netif_set_link_up &rArr; dhcp_network_changed  &rArr; dhcp_reboot  &rArr; udp_sendto_if  &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<li><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<li><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<li><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<li><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
</ul>
<p><strong><a name="[487]"></a>ethernetif_linkoutput</strong>(46 bytes, Stack size 12 btyes, Obj/netif_ethernetif.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = ethernetif_linkoutput &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[493]"></a>eth_rx_thread_entry</strong>(122 bytes, Stack size 28 btyes, Obj/netif_ethernetif.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 404 
<li>Call Chain = eth_rx_thread_entry &rArr; netifapi_netif_common &rArr; tcpip_api_call  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
</ul>
<p><strong><a name="[4a0]"></a>dhcp_check</strong>(50 bytes, Stack size 8 btyes, Obj/ipv4_dhcp.o(.text.dhcp_check))<br>
<br>[Stack]<ul><li>Max Depth = 416 
<li>Call Chain = dhcp_check &rArr; etharp_query &rArr; etharp_raw  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</ul>
<br>[Called By]<ul>
<li><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<li><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</ul>
<p><strong><a name="[4a1]"></a>dhcp_bind</strong>(354 bytes, Stack size 12 btyes, Obj/ipv4_dhcp.o(.text.dhcp_bind))<br>
<br>[Stack]<ul><li>Max Depth = 724 
<li>Call Chain = dhcp_bind &rArr; netif_set_addr &rArr; netif_set_ipaddr  &rArr; tcp_netif_ip_addr_changed  &rArr; tcp_netif_ip_addr_changed_pcblist  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<li><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</ul>
<p><strong><a name="[4a2]"></a>dhcp_inc_pcb_refcount</strong>(94 bytes, Stack size 12 btyes, Obj/ipv4_dhcp.o(.text.dhcp_inc_pcb_refcount))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = dhcp_inc_pcb_refcount &rArr; udp_new &rArr; memp_malloc  &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<li><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<li><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<li><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
</ul>
<br>[Called By]<ul>
<li><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</ul>
<p><strong><a name="[4a3]"></a>dhcp_option_short.isra.0</strong>(68 bytes, Stack size 16 btyes, Obj/ipv4_dhcp.o(.text.dhcp_option_short.isra.0))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = dhcp_option_short.isra.0 &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<li><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<li><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<li><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<li><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</ul>
<p><strong><a name="[4a4]"></a>dhcp_option.isra.1</strong>(78 bytes, Stack size 20 btyes, Obj/ipv4_dhcp.o(.text.dhcp_option.isra.1))<br>
<br>[Stack]<ul><li>Max Depth = 216 
<li>Call Chain = dhcp_option.isra.1 &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<li><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<li><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<li><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<li><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<li><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<li><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<li><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</ul>
<p><strong><a name="[4a5]"></a>dhcp_option_byte.isra.2</strong>(50 bytes, Stack size 16 btyes, Obj/ipv4_dhcp.o(.text.dhcp_option_byte.isra.2))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = dhcp_option_byte.isra.2 &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<li><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<li><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<li><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<li><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<li><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</ul>
<p><strong><a name="[4a6]"></a>dhcp_create_msg</strong>(496 bytes, Stack size 24 btyes, Obj/ipv4_dhcp.o(.text.dhcp_create_msg))<br>
<br>[Stack]<ul><li>Max Depth = 384 
<li>Call Chain = dhcp_create_msg &rArr; pbuf_alloc &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option.isra.1
<li><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte.isra.2
<li><a href="#[cce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</ul>
<br>[Called By]<ul>
<li><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<li><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<li><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<li><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<li><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<li><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<li><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</ul>
<p><strong><a name="[4a7]"></a>dhcp_option_trailer</strong>(124 bytes, Stack size 8 btyes, Obj/ipv4_dhcp.o(.text.dhcp_option_trailer))<br>
<br>[Stack]<ul><li>Max Depth = 204 
<li>Call Chain = dhcp_option_trailer &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<li><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<li><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<li><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<li><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<li><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<li><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</ul>
<p><strong><a name="[4a8]"></a>dhcp_option_long.isra.4</strong>(100 bytes, Stack size 16 btyes, Obj/ipv4_dhcp.o(.text.dhcp_option_long.isra.4))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = dhcp_option_long.isra.4 &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<li><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<li><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<li><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</ul>
<p><strong><a name="[4a9]"></a>dhcp_delete_msg</strong>(96 bytes, Stack size 8 btyes, Obj/ipv4_dhcp.o(.text.dhcp_delete_msg))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = dhcp_delete_msg &rArr; pbuf_free &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<li><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<li><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<li><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<li><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<li><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<li><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</ul>
<p><strong><a name="[4aa]"></a>dhcp_discover</strong>(224 bytes, Stack size 40 btyes, Obj/ipv4_dhcp.o(.text.dhcp_discover))<br>
<br>[Stack]<ul><li>Max Depth = 604 
<li>Call Chain = dhcp_discover &rArr; udp_sendto_if_src &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<li><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option.isra.1
<li><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short.isra.0
<li><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte.isra.2
<li><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<li><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<li><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
</ul>
<br>[Called By]<ul>
<li><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<li><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<li><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<li><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
<li><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</ul>
<p><strong><a name="[4ab]"></a>dhcp_select</strong>(280 bytes, Stack size 40 btyes, Obj/ipv4_dhcp.o(.text.dhcp_select))<br>
<br>[Stack]<ul><li>Max Depth = 604 
<li>Call Chain = dhcp_select &rArr; udp_sendto_if_src &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<li><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option.isra.1
<li><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short.isra.0
<li><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long.isra.4
<li><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte.isra.2
<li><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<li><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<li><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
</ul>
<br>[Called By]<ul>
<li><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<li><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</ul>
<p><strong><a name="[4ac]"></a>dhcp_reboot</strong>(250 bytes, Stack size 36 btyes, Obj/ipv4_dhcp.o(.text.dhcp_reboot))<br>
<br>[Stack]<ul><li>Max Depth = 616 
<li>Call Chain = dhcp_reboot &rArr; udp_sendto_if &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<li><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option.isra.1
<li><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short.isra.0
<li><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long.isra.4
<li><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte.isra.2
<li><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<li><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<li><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
</ul>
<br>[Called By]<ul>
<li><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<li><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</ul>
<p><strong><a name="[4ad]"></a>dhcp_dec_pcb_refcount</strong>(52 bytes, Stack size 12 btyes, Obj/ipv4_dhcp.o(.text.dhcp_dec_pcb_refcount))<br>
<br>[Stack]<ul><li>Max Depth = 228 
<li>Call Chain = dhcp_dec_pcb_refcount &rArr; udp_remove &rArr; memp_free  &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<li><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</ul>
<p><strong><a name="[4ae]"></a>dhcp_handle_ack.isra.8</strong>(184 bytes, Stack size 16 btyes, Obj/ipv4_dhcp.o(.text.unlikely.dhcp_handle_ack.isra.8))<br>
<br>[Calls]<ul>
<li><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
</ul>
<br>[Called By]<ul>
<li><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</ul>
<p><strong><a name="[4af]"></a>dhcp_recv</strong>(1402 bytes, Stack size 76 btyes, Obj/ipv4_dhcp.o(.text.dhcp_recv))<br>
<br>[Stack]<ul><li>Max Depth = 800 
<li>Call Chain = dhcp_recv &rArr; dhcp_bind &rArr; netif_set_addr  &rArr; netif_set_ipaddr  &rArr; tcp_netif_ip_addr_changed  &rArr; tcp_netif_ip_addr_changed_pcblist  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<li><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<li><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack.isra.8
<li><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<li><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<li><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<li><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
</ul>
<p><strong><a name="[4b1]"></a>free_etharp_q</strong>(100 bytes, Stack size 20 btyes, Obj/ipv4_etharp.o(.text.free_etharp_q))<br>
<br>[Stack]<ul><li>Max Depth = 336 
<li>Call Chain = free_etharp_q &rArr; pbuf_free &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry.isra.0
<li><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</ul>
<p><strong><a name="[4b2]"></a>etharp_raw</strong>(276 bytes, Stack size 48 btyes, Obj/ipv4_etharp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 408 
<li>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</ul>
<br>[Called By]<ul>
<li><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<li><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_addr
<li><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<li><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<li><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<li><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</ul>
<p><strong><a name="[4b3]"></a>etharp_output_to_arp_index</strong>(244 bytes, Stack size 44 btyes, Obj/ipv4_etharp.o(.text.etharp_output_to_arp_index))<br>
<br>[Stack]<ul><li>Max Depth = 452 
<li>Call Chain = etharp_output_to_arp_index &rArr; etharp_raw &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<li><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</ul>
<p><strong><a name="[4b7]"></a>etharp_find_entry.isra.0</strong>(326 bytes, Stack size 40 btyes, Obj/ipv4_etharp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 376 
<li>Call Chain = etharp_find_entry.isra.0 &rArr; free_etharp_q &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
</ul>
<p><strong><a name="[4bd]"></a>icmp_send_response.isra.0</strong>(166 bytes, Stack size 40 btyes, Obj/ipv4_icmp.o(.text.icmp_send_response.isra.0))<br>
<br>[Stack]<ul><li>Max Depth = 552 
<li>Call Chain = icmp_send_response.isra.0 &rArr; ip4_output_if &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<li><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<li><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<li><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
</ul>
<p><strong><a name="[4c1]"></a>igmp_send</strong>(208 bytes, Stack size 56 btyes, Obj/ipv4_igmp.o(.text.igmp_send))<br>
<br>[Stack]<ul><li>Max Depth = 576 
<li>Call Chain = igmp_send &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<li><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt
</ul>
<br>[Called By]<ul>
<li><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
<li><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<li><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_tmr
</ul>
<p><strong><a name="[4c2]"></a>igmp_delaying_member</strong>(70 bytes, Stack size 12 btyes, Obj/ipv4_igmp.o(.text.igmp_delaying_member))<br>
<br>[Calls]<ul>
<li><a href="#[cce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</ul>
<br>[Called By]<ul>
<li><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_report_groups
<li><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
</ul>
<p><strong><a name="[4c3]"></a>igmp_lookup_group.isra.3</strong>(138 bytes, Stack size 20 btyes, Obj/ipv4_igmp.o(.text.igmp_lookup_group.isra.3))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = igmp_lookup_group.isra.3 &rArr; memp_malloc &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start
<li><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
</ul>
<p><strong><a name="[4dd]"></a>ip_reass_dequeue_datagram</strong>(64 bytes, Stack size 12 btyes, Obj/ipv4_ip4_frag.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 224 
<li>Call Chain = ip_reass_dequeue_datagram &rArr; memp_free &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<li><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<li><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_tmr
<li><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</ul>
<p><strong><a name="[4de]"></a>ip_reass_free_complete_datagram</strong>(264 bytes, Stack size 32 btyes, Obj/ipv4_ip4_frag.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 588 
<li>Call Chain = ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response.isra.0  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<li><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
</ul>
<p><strong><a name="[4df]"></a>ip_reass_remove_oldest_datagram</strong>(188 bytes, Stack size 32 btyes, Obj/ipv4_ip4_frag.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 256 
<li>Call Chain = ip_reass_remove_oldest_datagram &rArr; ip_reass_dequeue_datagram &rArr; memp_free  &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
</ul>
<p><strong><a name="[4e4]"></a>utest_tc_list</strong>(2 bytes, Stack size 0 btyes, Obj/utest_utest.o(.text.utest_tc_list))<br>
<p><strong><a name="[4e5]"></a>utest_run</strong>(172 bytes, Stack size 36 btyes, Obj/utest_utest.o(.text.utest_run))<br>
<br>[Stack]<ul><li>Max Depth = 304 
<li>Call Chain = utest_run &rArr; rt_thread_mdelay &rArr; rt_thread_sleep  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
</ul>
<br>[Called By]<ul>
<li><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_testcase_run
</ul>
<p><strong><a name="[4e6]"></a>utest_help</strong>(140 bytes, Stack size 8 btyes, Obj/utest_utest.o(.text.utest_help))<br>
<br>[Stack]<ul><li>Max Depth = 180 
<li>Call Chain = utest_help &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_testcase_run
</ul>
<p><strong><a name="[4e7]"></a>utest_testcase_run</strong>(176 bytes, Stack size 24 btyes, Obj/utest_utest.o(.text.utest_testcase_run))<br>
<br>[Stack]<ul><li>Max Depth = 352 
<li>Call Chain = utest_testcase_run &rArr; rt_thread_create &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<li><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<li><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<li><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<li><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_help
<li><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<li><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_run
<li><a href="#[cd5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</ul>
<p><strong><a name="[4e8]"></a>utest_assert.part.0</strong>(14 bytes, Stack size 0 btyes, Obj/utest_utest.o(.text.utest_assert.part.0))<br>
<p><strong><a name="[4f0]"></a>_mbedtls_aes_crypt_cfb128</strong>(464 bytes, Stack size 156 btyes, Obj/library_aes_alt.o(.text._mbedtls_aes_crypt_cfb128))<br>
<br>[Stack]<ul><li>Max Depth = 524 
<li>Call Chain = _mbedtls_aes_crypt_cfb128 &rArr; tih_aes_crypt &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_aes_crypt
<li><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmove
<li><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_dtcm_addr_check
</ul>
<br>[Called By]<ul>
<li><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cfb128
</ul>
<p><strong><a name="[518]"></a>mbedtls_base64_encode.part.0</strong>(302 bytes, Stack size 24 btyes, Obj/library_base64.o(.text.mbedtls_base64_encode.part.0))<br>
<br>[Called By]<ul>
<li><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_self_test
</ul>
<p><strong><a name="[520]"></a>mpi_montmul.isra.2</strong>(238 bytes, Stack size 56 btyes, Obj/library_bignum.o(.text.mpi_montmul.isra.2))<br>
<br>[Stack]<ul><li>Max Depth = 108 
<li>Call Chain = mpi_montmul.isra.2 &rArr; mpi_mul_hlp &rArr; __muldi3  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<li><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
</ul>
<br>[Called By]<ul>
<li><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</ul>
<p><strong><a name="[530]"></a>mpi_sub_hlp</strong>(84 bytes, Stack size 12 btyes, Obj/library_bignum.o(.text.mpi_sub_hlp))<br>
<br>[Called By]<ul>
<li><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul.isra.2
<li><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
</ul>
<p><strong><a name="[531]"></a>mpi_mul_hlp</strong>(1002 bytes, Stack size 40 btyes, Obj/library_bignum.o(.text.mpi_mul_hlp))<br>
<br>[Stack]<ul><li>Max Depth = 52 
<li>Call Chain = mpi_mul_hlp &rArr; __muldi3 </ul>
<br>[Calls]<ul>
<li><a href="#[c9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__muldi3
</ul>
<br>[Called By]<ul>
<li><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul.isra.2
<li><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
</ul>
<p><strong><a name="[532]"></a>mbedtls_mpi_mod_int.part.3</strong>(98 bytes, Stack size 0 btyes, Obj/library_bignum.o(.text.mbedtls_mpi_mod_int.part.3))<br>
<p><strong><a name="[542]"></a>mpi_write_hlp</strong>(164 bytes, Stack size 0 btyes, Obj/library_bignum.o(.text.mpi_write_hlp))<br>
<p><strong><a name="[544]"></a>mpi_check_small_factors</strong>(98 bytes, Stack size 0 btyes, Obj/library_bignum.o(.text.mpi_check_small_factors))<br>
<p><strong><a name="[548]"></a>mpi_miller_rabin</strong>(670 bytes, Stack size 0 btyes, Obj/library_bignum.o(.text.mpi_miller_rabin))<br>
<p><strong><a name="[54d]"></a>ccm_update_mac.isra.0</strong>(88 bytes, Stack size 20 btyes, Obj/library_ccm.o(.text.ccm_update_mac.isra.0))<br>
<br>[Stack]<ul><li>Max Depth = 540 
<li>Call Chain = ccm_update_mac.isra.0 &rArr; mbedtls_aes_crypt_ctr &rArr; _mbedtls_aes_crypt_ctr  &rArr; tih_aes_crypt_ctr  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_crypt_ctr
<li><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ctr
</ul>
<br>[Called By]<ul>
<li><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
</ul>
<p><strong><a name="[54e]"></a>ccm_auth_crypt</strong>(762 bytes, Stack size 168 btyes, Obj/library_ccm.o(.text.ccm_auth_crypt))<br>
<br>[Stack]<ul><li>Max Depth = 708 
<li>Call Chain = ccm_auth_crypt &rArr; ccm_update_mac.isra.0 &rArr; mbedtls_aes_crypt_ctr  &rArr; _mbedtls_aes_crypt_ctr  &rArr; tih_aes_crypt_ctr  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_cmac_init
<li><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_cmac_update
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<li><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_cmac_final
<li><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_update_mac.isra.0
<li><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_dtcm_addr_check
</ul>
<br>[Called By]<ul>
<li><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_encrypt_and_tag
<li><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_auth_decrypt
<li><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_self_test
</ul>
<p><strong><a name="[55f]"></a>add_pkcs_padding</strong>(32 bytes, Stack size 0 btyes, Obj/library_cipher.o(.text.add_pkcs_padding))<br>
<p><strong><a name="[560]"></a>get_pkcs_padding</strong>(90 bytes, Stack size 8 btyes, Obj/library_cipher.o(.text.get_pkcs_padding))<br>
<p><strong><a name="[561]"></a>add_one_and_zeros_padding</strong>(42 bytes, Stack size 0 btyes, Obj/library_cipher.o(.text.add_one_and_zeros_padding))<br>
<p><strong><a name="[562]"></a>add_zeros_and_len_padding</strong>(48 bytes, Stack size 4 btyes, Obj/library_cipher.o(.text.add_zeros_and_len_padding))<br>
<p><strong><a name="[563]"></a>get_zeros_and_len_padding</strong>(92 bytes, Stack size 4 btyes, Obj/library_cipher.o(.text.get_zeros_and_len_padding))<br>
<p><strong><a name="[564]"></a>add_zeros_padding</strong>(20 bytes, Stack size 0 btyes, Obj/library_cipher.o(.text.add_zeros_padding))<br>
<p><strong><a name="[565]"></a>get_no_padding</strong>(22 bytes, Stack size 0 btyes, Obj/library_cipher.o(.text.get_no_padding))<br>
<p><strong><a name="[566]"></a>get_one_and_zeros_padding</strong>(106 bytes, Stack size 12 btyes, Obj/library_cipher.o(.text.get_one_and_zeros_padding))<br>
<p><strong><a name="[567]"></a>get_zeros_padding</strong>(86 bytes, Stack size 4 btyes, Obj/library_cipher.o(.text.get_zeros_padding))<br>
<p><strong><a name="[571]"></a>des3_ctx_free</strong>(16 bytes, Stack size 8 btyes, Obj/library_cipher_wrap.o(.text.des3_ctx_free))<br>
<br>[Calls]<ul>
<li><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_free
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<p><strong><a name="[572]"></a>des3_ctx_alloc</strong>(26 bytes, Stack size 8 btyes, Obj/library_cipher_wrap.o(.text.des3_ctx_alloc))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = des3_ctx_alloc &rArr; mbedtls_des3_init </ul>
<br>[Calls]<ul>
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<li><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_init
</ul>
<p><strong><a name="[573]"></a>des3_set3key_dec_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_cipher_wrap.o(.text.des3_set3key_dec_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 440 
<li>Call Chain = des3_set3key_dec_wrap &rArr; mbedtls_des3_set3key_dec &rArr; des3_set3key  &rArr; mbedtls_des_setkey  </ul>
<br>[Calls]<ul>
<li><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set3key_dec
</ul>
<p><strong><a name="[574]"></a>des3_set3key_enc_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_cipher_wrap.o(.text.des3_set3key_enc_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 440 
<li>Call Chain = des3_set3key_enc_wrap &rArr; mbedtls_des3_set3key_enc &rArr; des3_set3key  &rArr; mbedtls_des_setkey  </ul>
<br>[Calls]<ul>
<li><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set3key_enc
</ul>
<p><strong><a name="[575]"></a>des3_crypt_cbc_wrap</strong>(28 bytes, Stack size 12 btyes, Obj/library_cipher_wrap.o(.text.des3_crypt_cbc_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 68 
<li>Call Chain = des3_crypt_cbc_wrap &rArr; mbedtls_des3_crypt_cbc </ul>
<br>[Calls]<ul>
<li><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_crypt_cbc
</ul>
<p><strong><a name="[576]"></a>des3_crypt_ecb_wrap</strong>(12 bytes, Stack size 4 btyes, Obj/library_cipher_wrap.o(.text.des3_crypt_ecb_wrap))<br>
<br>[Calls]<ul>
<li><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_crypt_ecb
</ul>
<p><strong><a name="[577]"></a>des3_set2key_dec_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_cipher_wrap.o(.text.des3_set2key_dec_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 444 
<li>Call Chain = des3_set2key_dec_wrap &rArr; mbedtls_des3_set2key_dec &rArr; des3_set2key  &rArr; mbedtls_des_setkey  </ul>
<br>[Calls]<ul>
<li><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set2key_dec
</ul>
<p><strong><a name="[578]"></a>des3_set2key_enc_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_cipher_wrap.o(.text.des3_set2key_enc_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 444 
<li>Call Chain = des3_set2key_enc_wrap &rArr; mbedtls_des3_set2key_enc &rArr; des3_set2key  &rArr; mbedtls_des_setkey  </ul>
<br>[Calls]<ul>
<li><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set2key_enc
</ul>
<p><strong><a name="[579]"></a>des_ctx_free</strong>(16 bytes, Stack size 8 btyes, Obj/library_cipher_wrap.o(.text.des_ctx_free))<br>
<br>[Calls]<ul>
<li><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_free
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<p><strong><a name="[57a]"></a>des_ctx_alloc</strong>(24 bytes, Stack size 8 btyes, Obj/library_cipher_wrap.o(.text.des_ctx_alloc))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = des_ctx_alloc &rArr; mbedtls_des_init </ul>
<br>[Calls]<ul>
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<li><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_init
</ul>
<p><strong><a name="[57b]"></a>des_setkey_dec_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_cipher_wrap.o(.text.des_setkey_dec_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 44 
<li>Call Chain = des_setkey_dec_wrap &rArr; mbedtls_des_setkey_dec &rArr; mbedtls_des_setkey  </ul>
<br>[Calls]<ul>
<li><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_setkey_dec
</ul>
<p><strong><a name="[57c]"></a>des_setkey_enc_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_cipher_wrap.o(.text.des_setkey_enc_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 40 
<li>Call Chain = des_setkey_enc_wrap &rArr; mbedtls_des_setkey_enc &rArr; mbedtls_des_setkey  </ul>
<br>[Calls]<ul>
<li><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_setkey_enc
</ul>
<p><strong><a name="[57d]"></a>des_crypt_cbc_wrap</strong>(28 bytes, Stack size 12 btyes, Obj/library_cipher_wrap.o(.text.des_crypt_cbc_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 112 
<li>Call Chain = des_crypt_cbc_wrap &rArr; mbedtls_des_crypt_cbc &rArr; mbedtls_des_crypt_ecb  </ul>
<br>[Calls]<ul>
<li><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_crypt_cbc
</ul>
<p><strong><a name="[57e]"></a>des_crypt_ecb_wrap</strong>(12 bytes, Stack size 4 btyes, Obj/library_cipher_wrap.o(.text.des_crypt_ecb_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = des_crypt_ecb_wrap &rArr; mbedtls_des_crypt_ecb </ul>
<br>[Calls]<ul>
<li><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_crypt_ecb
</ul>
<p><strong><a name="[57f]"></a>sm4_ctx_free</strong>(16 bytes, Stack size 8 btyes, Obj/library_cipher_wrap.o(.text.sm4_ctx_free))<br>
<br>[Calls]<ul>
<li><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_free
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<p><strong><a name="[580]"></a>sm4_ctx_alloc</strong>(24 bytes, Stack size 8 btyes, Obj/library_cipher_wrap.o(.text.sm4_ctx_alloc))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = sm4_ctx_alloc &rArr; mbedtls_sm4_init </ul>
<br>[Calls]<ul>
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<li><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_init
</ul>
<p><strong><a name="[581]"></a>sm4_setkey_dec_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_cipher_wrap.o(.text.sm4_setkey_dec_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = sm4_setkey_dec_wrap &rArr; mbedtls_sm4_setkey_dec </ul>
<br>[Calls]<ul>
<li><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_setkey_dec
</ul>
<p><strong><a name="[582]"></a>sm4_setkey_enc_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_cipher_wrap.o(.text.sm4_setkey_enc_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = sm4_setkey_enc_wrap &rArr; mbedtls_sm4_setkey_enc &rArr; mbedtls_sm4_setkey_dec  </ul>
<br>[Calls]<ul>
<li><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_setkey_enc
</ul>
<p><strong><a name="[583]"></a>sm4_crypt_ctr_wrap</strong>(32 bytes, Stack size 20 btyes, Obj/library_cipher_wrap.o(.text.sm4_crypt_ctr_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 524 
<li>Call Chain = sm4_crypt_ctr_wrap &rArr; mbedtls_sm4_crypt_ctr &rArr; _mbedtls_sm4_crypt_ctr  &rArr; tih_sm4_crypt_ctr  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_crypt_ctr
</ul>
<p><strong><a name="[584]"></a>sm4_crypt_cfb128_wrap</strong>(32 bytes, Stack size 20 btyes, Obj/library_cipher_wrap.o(.text.sm4_crypt_cfb128_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 588 
<li>Call Chain = sm4_crypt_cfb128_wrap &rArr; mbedtls_sm4_crypt_cfb128 &rArr; _mbedtls_sm4_crypt_cfb128  &rArr; tih_sm4_crypt  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_crypt_cfb128
</ul>
<p><strong><a name="[585]"></a>sm4_crypt_cbc_wrap</strong>(28 bytes, Stack size 12 btyes, Obj/library_cipher_wrap.o(.text.sm4_crypt_cbc_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 524 
<li>Call Chain = sm4_crypt_cbc_wrap &rArr; mbedtls_sm4_crypt_cbc &rArr; tih_sm4_crypt  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_crypt_cbc
</ul>
<p><strong><a name="[586]"></a>sm4_crypt_ecb_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_cipher_wrap.o(.text.sm4_crypt_ecb_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 428 
<li>Call Chain = sm4_crypt_ecb_wrap &rArr; mbedtls_sm4_crypt_ecb &rArr; tih_sm4_crypt  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_crypt_ecb
</ul>
<p><strong><a name="[587]"></a>ccm_ctx_free</strong>(16 bytes, Stack size 8 btyes, Obj/library_cipher_wrap.o(.text.ccm_ctx_free))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = ccm_ctx_free &rArr; mbedtls_ccm_free &rArr; mbedtls_cipher_free  </ul>
<br>[Calls]<ul>
<li><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_free
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<p><strong><a name="[588]"></a>ccm_ctx_alloc</strong>(24 bytes, Stack size 8 btyes, Obj/library_cipher_wrap.o(.text.ccm_ctx_alloc))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = ccm_ctx_alloc &rArr; mbedtls_ccm_init </ul>
<br>[Calls]<ul>
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<li><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_init
</ul>
<p><strong><a name="[589]"></a>ccm_aes_setkey_wrap</strong>(14 bytes, Stack size 4 btyes, Obj/library_cipher_wrap.o(.text.ccm_aes_setkey_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = ccm_aes_setkey_wrap &rArr; mbedtls_ccm_setkey &rArr; mbedtls_cipher_setup  </ul>
<br>[Calls]<ul>
<li><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
</ul>
<p><strong><a name="[58a]"></a>gcm_ctx_free</strong>(16 bytes, Stack size 8 btyes, Obj/library_cipher_wrap.o(.text.gcm_ctx_free))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = gcm_ctx_free &rArr; mbedtls_gcm_free &rArr; mbedtls_cipher_free  </ul>
<br>[Calls]<ul>
<li><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<p><strong><a name="[58b]"></a>gcm_ctx_alloc</strong>(26 bytes, Stack size 8 btyes, Obj/library_cipher_wrap.o(.text.gcm_ctx_alloc))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = gcm_ctx_alloc &rArr; mbedtls_gcm_init </ul>
<br>[Calls]<ul>
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<li><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_init
</ul>
<p><strong><a name="[58c]"></a>gcm_aes_setkey_wrap</strong>(14 bytes, Stack size 4 btyes, Obj/library_cipher_wrap.o(.text.gcm_aes_setkey_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 312 
<li>Call Chain = gcm_aes_setkey_wrap &rArr; mbedtls_gcm_setkey &rArr; mbedtls_cipher_update  &rArr; mbedtls_gcm_update  &rArr; gcm_mult  </ul>
<br>[Calls]<ul>
<li><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</ul>
<p><strong><a name="[58d]"></a>aes_ctx_free</strong>(16 bytes, Stack size 8 btyes, Obj/library_cipher_wrap.o(.text.aes_ctx_free))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = aes_ctx_free &rArr; mbedtls_aes_free </ul>
<br>[Calls]<ul>
<li><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<p><strong><a name="[58e]"></a>aes_ctx_alloc</strong>(24 bytes, Stack size 8 btyes, Obj/library_cipher_wrap.o(.text.aes_ctx_alloc))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = aes_ctx_alloc &rArr; mbedtls_aes_init </ul>
<br>[Calls]<ul>
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<li><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
</ul>
<p><strong><a name="[58f]"></a>aes_setkey_dec_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_cipher_wrap.o(.text.aes_setkey_dec_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = aes_setkey_dec_wrap &rArr; mbedtls_aes_setkey_dec </ul>
<br>[Calls]<ul>
<li><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
</ul>
<p><strong><a name="[590]"></a>aes_setkey_enc_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_cipher_wrap.o(.text.aes_setkey_enc_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = aes_setkey_enc_wrap &rArr; mbedtls_aes_setkey_enc </ul>
<br>[Calls]<ul>
<li><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
</ul>
<p><strong><a name="[591]"></a>aes_crypt_ctr_wrap</strong>(32 bytes, Stack size 20 btyes, Obj/library_cipher_wrap.o(.text.aes_crypt_ctr_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 540 
<li>Call Chain = aes_crypt_ctr_wrap &rArr; mbedtls_aes_crypt_ctr &rArr; _mbedtls_aes_crypt_ctr  &rArr; tih_aes_crypt_ctr  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ctr
</ul>
<p><strong><a name="[592]"></a>aes_crypt_cfb128_wrap</strong>(32 bytes, Stack size 20 btyes, Obj/library_cipher_wrap.o(.text.aes_crypt_cfb128_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 604 
<li>Call Chain = aes_crypt_cfb128_wrap &rArr; mbedtls_aes_crypt_cfb128 &rArr; _mbedtls_aes_crypt_cfb128  &rArr; tih_aes_crypt  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cfb128
</ul>
<p><strong><a name="[593]"></a>aes_crypt_cbc_wrap</strong>(28 bytes, Stack size 12 btyes, Obj/library_cipher_wrap.o(.text.aes_crypt_cbc_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 540 
<li>Call Chain = aes_crypt_cbc_wrap &rArr; mbedtls_aes_crypt_cbc &rArr; tih_aes_crypt  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
</ul>
<p><strong><a name="[594]"></a>aes_crypt_ecb_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_cipher_wrap.o(.text.aes_crypt_ecb_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 440 
<li>Call Chain = aes_crypt_ecb_wrap &rArr; mbedtls_aes_crypt_ecb &rArr; tih_aes_crypt  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</ul>
<p><strong><a name="[595]"></a>cmac_multiply_by_u</strong>(88 bytes, Stack size 8 btyes, Obj/library_cmac.o(.text.cmac_multiply_by_u))<br>
<br>[Called By]<ul>
<li><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_generate_subkeys
</ul>
<p><strong><a name="[596]"></a>cmac_generate_subkeys</strong>(72 bytes, Stack size 40 btyes, Obj/library_cmac.o(.text.cmac_generate_subkeys))<br>
<br>[Stack]<ul><li>Max Depth = 260 
<li>Call Chain = cmac_generate_subkeys &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update  &rArr; gcm_mult  </ul>
<br>[Calls]<ul>
<li><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<li><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_multiply_by_u
</ul>
<br>[Called By]<ul>
<li><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_test_subkeys.constprop.2
<li><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_finish
</ul>
<p><strong><a name="[597]"></a>cmac_test_subkeys.constprop.2</strong>(234 bytes, Stack size 152 btyes, Obj/library_cmac.o(.text.cmac_test_subkeys.constprop.2))<br>
<br>[Stack]<ul><li>Max Depth = 412 
<li>Call Chain = cmac_test_subkeys.constprop.2 &rArr; cmac_generate_subkeys &rArr; mbedtls_cipher_update  &rArr; mbedtls_gcm_update  &rArr; gcm_mult  </ul>
<br>[Calls]<ul>
<li><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_type
<li><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<li><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<li><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<li><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_generate_subkeys
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</ul>
<br>[Called By]<ul>
<li><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cmac_self_test
</ul>
<p><strong><a name="[59d]"></a>cmac_test_wth_cipher.constprop.1</strong>(186 bytes, Stack size 84 btyes, Obj/library_cmac.o(.text.cmac_test_wth_cipher.constprop.1))<br>
<br>[Stack]<ul><li>Max Depth = 532 
<li>Call Chain = cmac_test_wth_cipher.constprop.1 &rArr; mbedtls_cipher_cmac &rArr; mbedtls_cipher_cmac_finish  &rArr; cmac_generate_subkeys  &rArr; mbedtls_cipher_update  &rArr; mbedtls_gcm_update  &rArr; gcm_mult  </ul>
<br>[Calls]<ul>
<li><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_type
<li><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</ul>
<br>[Called By]<ul>
<li><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cmac_self_test
</ul>
<p><strong><a name="[5a0]"></a>ctr_drbg_self_test_entropy</strong>(26 bytes, Stack size 16 btyes, Obj/library_ctr_drbg.o(.text.ctr_drbg_self_test_entropy))<br>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<p><strong><a name="[5a1]"></a>block_cipher_df</strong>(332 bytes, Stack size 592 btyes, Obj/library_ctr_drbg.o(.text.block_cipher_df))<br>
<br>[Stack]<ul><li>Max Depth = 1028 
<li>Call Chain = block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; tih_aes_crypt  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<li><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<li><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</ul>
<br>[Called By]<ul>
<li><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<li><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
</ul>
<p><strong><a name="[5a2]"></a>ctr_drbg_update_internal</strong>(144 bytes, Stack size 76 btyes, Obj/library_ctr_drbg.o(.text.ctr_drbg_update_internal))<br>
<br>[Stack]<ul><li>Max Depth = 512 
<li>Call Chain = ctr_drbg_update_internal &rArr; mbedtls_aes_crypt_ecb &rArr; tih_aes_crypt  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<li><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<li><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
</ul>
<p><strong><a name="[5af]"></a>mbedtls_debug_print_mpi.part.0</strong>(580 bytes, Stack size 1124 btyes, Obj/library_debug.o(.text.mbedtls_debug_print_mpi.part.0))<br>
<br>[Calls]<ul>
<li><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi
</ul>
<p><strong><a name="[5b5]"></a>mbedtls_debug_print_ecp.part.1</strong>(88 bytes, Stack size 552 btyes, Obj/library_debug.o(.text.mbedtls_debug_print_ecp.part.1))<br>
<br>[Stack]<ul><li>Max Depth = 1696 
<li>Call Chain = mbedtls_debug_print_ecp.part.1 &rArr; mbedtls_debug_print_mpi &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
<li><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi
</ul>
<br>[Called By]<ul>
<li><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp
</ul>
<p><strong><a name="[5c3]"></a>des3_set2key</strong>(116 bytes, Stack size 20 btyes, Obj/library_des.o(.text.des3_set2key))<br>
<br>[Stack]<ul><li>Max Depth = 52 
<li>Call Chain = des3_set2key &rArr; mbedtls_des_setkey </ul>
<br>[Calls]<ul>
<li><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_setkey
</ul>
<br>[Called By]<ul>
<li><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set2key_enc
<li><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set2key_dec
<li><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_self_test
</ul>
<p><strong><a name="[5c4]"></a>des3_set3key</strong>(116 bytes, Stack size 16 btyes, Obj/library_des.o(.text.des3_set3key))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = des3_set3key &rArr; mbedtls_des_setkey </ul>
<br>[Calls]<ul>
<li><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_setkey
</ul>
<br>[Called By]<ul>
<li><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set3key_enc
<li><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set3key_dec
<li><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des_self_test
</ul>
<p><strong><a name="[5d7]"></a>myrand</strong>(52 bytes, Stack size 0 btyes, Obj/library_ecdh_sm2.o(.text.myrand))<br>
<p><strong><a name="[5e6]"></a>derive_mpi</strong>(90 bytes, Stack size 20 btyes, Obj/library_ecdsa.o(.text.derive_mpi))<br>
<br>[Stack]<ul><li>Max Depth = 116 
<li>Call Chain = derive_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs  &rArr; mbedtls_mpi_copy  &rArr; mbedtls_mpi_grow  </ul>
<br>[Calls]<ul>
<li><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<li><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<li><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
</ul>
<br>[Called By]<ul>
<li><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<li><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
<li><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
</ul>
<p><strong><a name="[61e]"></a>entropy_dummy_source</strong>(20 bytes, Stack size 12 btyes, Obj/library_entropy.o(.text.entropy_dummy_source))<br>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<p><strong><a name="[61f]"></a>entropy_update</strong>(74 bytes, Stack size 56 btyes, Obj/library_entropy.o(.text.entropy_update))<br>
<br>[Stack]<ul><li>Max Depth = 600 
<li>Call Chain = entropy_update &rArr; mbedtls_sha256 &rArr; mbedtls_sha256_finish  &rArr; mbedtls_sha256_update  &rArr; mbedtls_sha256_process  </ul>
<br>[Calls]<ul>
<li><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<li><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
</ul>
<br>[Called By]<ul>
<li><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_gather_internal
<li><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_update_manual
</ul>
<p><strong><a name="[620]"></a>entropy_gather_internal</strong>(134 bytes, Stack size 164 btyes, Obj/library_entropy.o(.text.entropy_gather_internal))<br>
<br>[Stack]<ul><li>Max Depth = 764 
<li>Call Chain = entropy_gather_internal &rArr; entropy_update &rArr; mbedtls_sha256  &rArr; mbedtls_sha256_finish  &rArr; mbedtls_sha256_update  &rArr; mbedtls_sha256_process  </ul>
<br>[Calls]<ul>
<li><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
</ul>
<br>[Called By]<ul>
<li><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_gather
<li><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
</ul>
<p><strong><a name="[621]"></a>mbedtls_entropy_source_self_test_gather.constprop.0</strong>(62 bytes, Stack size 28 btyes, Obj/library_entropy.o(.text.mbedtls_entropy_source_self_test_gather.constprop.0))<br>
<br>[Stack]<ul><li>Max Depth = 368 
<li>Call Chain = mbedtls_entropy_source_self_test_gather.constprop.0 &rArr; mbedtls_hardware_poll &rArr; tih_rand_get  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hardware_poll
</ul>
<br>[Called By]<ul>
<li><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_source_self_test
</ul>
<p><strong><a name="[62c]"></a>gcm_mult</strong>(434 bytes, Stack size 108 btyes, Obj/library_gcm.o(.text.gcm_mult))<br>
<br>[Called By]<ul>
<li><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<li><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<li><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
</ul>
<p><strong><a name="[636]"></a>hmac_drbg_self_test_entropy</strong>(26 bytes, Stack size 16 btyes, Obj/library_hmac_drbg.o(.text.hmac_drbg_self_test_entropy))<br>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<p><strong><a name="[65d]"></a>mbedtls_md5_update.part.0</strong>(150 bytes, Stack size 28 btyes, Obj/library_md5.o(.text.mbedtls_md5_update.part.0))<br>
<br>[Stack]<ul><li>Max Depth = 104 
<li>Call Chain = mbedtls_md5_update.part.0 &rArr; mbedtls_md5_process </ul>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_process
</ul>
<br>[Called By]<ul>
<li><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
<li><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
<li><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5
</ul>
<p><strong><a name="[662]"></a>md5_process_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_md_wrap.o(.text.md5_process_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 80 
<li>Call Chain = md5_process_wrap &rArr; mbedtls_md5_process </ul>
<br>[Calls]<ul>
<li><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_process
</ul>
<p><strong><a name="[663]"></a>md5_clone_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_md_wrap.o(.text.md5_clone_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = md5_clone_wrap &rArr; mbedtls_md5_clone </ul>
<br>[Calls]<ul>
<li><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_clone
</ul>
<p><strong><a name="[664]"></a>md5_ctx_free</strong>(16 bytes, Stack size 8 btyes, Obj/library_md_wrap.o(.text.md5_ctx_free))<br>
<br>[Calls]<ul>
<li><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<p><strong><a name="[665]"></a>md5_ctx_alloc</strong>(24 bytes, Stack size 8 btyes, Obj/library_md_wrap.o(.text.md5_ctx_alloc))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = md5_ctx_alloc &rArr; mbedtls_md5_init </ul>
<br>[Calls]<ul>
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<li><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
</ul>
<p><strong><a name="[666]"></a>md5_finish_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_md_wrap.o(.text.md5_finish_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 128 
<li>Call Chain = md5_finish_wrap &rArr; mbedtls_md5_finish &rArr; mbedtls_md5_update.part.0  &rArr; mbedtls_md5_process  </ul>
<br>[Calls]<ul>
<li><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
</ul>
<p><strong><a name="[667]"></a>md5_update_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_md_wrap.o(.text.md5_update_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 112 
<li>Call Chain = md5_update_wrap &rArr; mbedtls_md5_update &rArr; mbedtls_md5_update.part.0  &rArr; mbedtls_md5_process  </ul>
<br>[Calls]<ul>
<li><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
</ul>
<p><strong><a name="[668]"></a>md5_starts_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_md_wrap.o(.text.md5_starts_wrap))<br>
<br>[Calls]<ul>
<li><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts
</ul>
<p><strong><a name="[669]"></a>sha1_offload_set_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_md_wrap.o(.text.sha1_offload_set_wrap))<br>
<br>[Calls]<ul>
<li><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_set
</ul>
<p><strong><a name="[66a]"></a>sha1_process_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_md_wrap.o(.text.sha1_process_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 128 
<li>Call Chain = sha1_process_wrap &rArr; mbedtls_sha1_process </ul>
<br>[Calls]<ul>
<li><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_process
</ul>
<p><strong><a name="[66b]"></a>sha1_clone_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_md_wrap.o(.text.sha1_clone_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = sha1_clone_wrap &rArr; mbedtls_sha1_clone </ul>
<br>[Calls]<ul>
<li><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
</ul>
<p><strong><a name="[66c]"></a>sha1_ctx_free</strong>(16 bytes, Stack size 8 btyes, Obj/library_md_wrap.o(.text.sha1_ctx_free))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = sha1_ctx_free &rArr; mbedtls_sha1_free </ul>
<br>[Calls]<ul>
<li><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<p><strong><a name="[66d]"></a>sha1_ctx_alloc</strong>(24 bytes, Stack size 8 btyes, Obj/library_md_wrap.o(.text.sha1_ctx_alloc))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = sha1_ctx_alloc &rArr; mbedtls_sha1_init &rArr; mbedtls_sha1_free  </ul>
<br>[Calls]<ul>
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<li><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
</ul>
<p><strong><a name="[66e]"></a>sha1_finish_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_md_wrap.o(.text.sha1_finish_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 320 
<li>Call Chain = sha1_finish_wrap &rArr; mbedtls_sha1_finish &rArr; tih_sha1_final  &rArr; rt_mutex_release  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
</ul>
<p><strong><a name="[66f]"></a>sha1_update_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_md_wrap.o(.text.sha1_update_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 152 
<li>Call Chain = sha1_update_wrap &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process  </ul>
<br>[Calls]<ul>
<li><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
</ul>
<p><strong><a name="[670]"></a>sha1_starts_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_md_wrap.o(.text.sha1_starts_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 328 
<li>Call Chain = sha1_starts_wrap &rArr; mbedtls_sha1_starts &rArr; tih_sha1_init  &rArr; drv_crypto_lock.part.0  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
</ul>
<p><strong><a name="[671]"></a>sha224_offload_set_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_md_wrap.o(.text.sha224_offload_set_wrap))<br>
<br>[Calls]<ul>
<li><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_set
</ul>
<p><strong><a name="[672]"></a>sha224_process_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_md_wrap.o(.text.sha224_process_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 372 
<li>Call Chain = sha224_process_wrap &rArr; mbedtls_sha256_process </ul>
<br>[Calls]<ul>
<li><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_process
</ul>
<p><strong><a name="[673]"></a>sha224_clone_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_md_wrap.o(.text.sha224_clone_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = sha224_clone_wrap &rArr; mbedtls_sha256_clone </ul>
<br>[Calls]<ul>
<li><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
</ul>
<p><strong><a name="[674]"></a>sha224_ctx_free</strong>(16 bytes, Stack size 8 btyes, Obj/library_md_wrap.o(.text.sha224_ctx_free))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = sha224_ctx_free &rArr; mbedtls_sha256_free </ul>
<br>[Calls]<ul>
<li><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<p><strong><a name="[675]"></a>sha224_ctx_alloc</strong>(24 bytes, Stack size 8 btyes, Obj/library_md_wrap.o(.text.sha224_ctx_alloc))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = sha224_ctx_alloc &rArr; mbedtls_sha256_init </ul>
<br>[Calls]<ul>
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<li><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
</ul>
<p><strong><a name="[676]"></a>sha224_wrap</strong>(10 bytes, Stack size 4 btyes, Obj/library_md_wrap.o(.text.sha224_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 548 
<li>Call Chain = sha224_wrap &rArr; mbedtls_sha256 &rArr; mbedtls_sha256_finish  &rArr; mbedtls_sha256_update  &rArr; mbedtls_sha256_process  </ul>
<br>[Calls]<ul>
<li><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
</ul>
<p><strong><a name="[677]"></a>sha256_wrap</strong>(10 bytes, Stack size 4 btyes, Obj/library_md_wrap.o(.text.sha256_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 548 
<li>Call Chain = sha256_wrap &rArr; mbedtls_sha256 &rArr; mbedtls_sha256_finish  &rArr; mbedtls_sha256_update  &rArr; mbedtls_sha256_process  </ul>
<br>[Calls]<ul>
<li><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
</ul>
<p><strong><a name="[678]"></a>sha224_finish_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_md_wrap.o(.text.sha224_finish_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 416 
<li>Call Chain = sha224_finish_wrap &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update  &rArr; mbedtls_sha256_process  </ul>
<br>[Calls]<ul>
<li><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
</ul>
<p><strong><a name="[679]"></a>sha224_update_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_md_wrap.o(.text.sha224_update_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 396 
<li>Call Chain = sha224_update_wrap &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process  </ul>
<br>[Calls]<ul>
<li><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</ul>
<p><strong><a name="[67a]"></a>sha224_starts_wrap</strong>(10 bytes, Stack size 4 btyes, Obj/library_md_wrap.o(.text.sha224_starts_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 328 
<li>Call Chain = sha224_starts_wrap &rArr; mbedtls_sha256_starts &rArr; tih_sha256_init  &rArr; drv_crypto_lock.part.0  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
</ul>
<p><strong><a name="[67b]"></a>sha256_starts_wrap</strong>(10 bytes, Stack size 4 btyes, Obj/library_md_wrap.o(.text.sha256_starts_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 328 
<li>Call Chain = sha256_starts_wrap &rArr; mbedtls_sha256_starts &rArr; tih_sha256_init  &rArr; drv_crypto_lock.part.0  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
</ul>
<p><strong><a name="[67c]"></a>sm3_offload_set_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_md_wrap.o(.text.sm3_offload_set_wrap))<br>
<br>[Calls]<ul>
<li><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_set
</ul>
<p><strong><a name="[67d]"></a>sm3_process_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_md_wrap.o(.text.sm3_process_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 600 
<li>Call Chain = sm3_process_wrap &rArr; mbedtls_sm3_process </ul>
<br>[Calls]<ul>
<li><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_process
</ul>
<p><strong><a name="[67e]"></a>sm3_clone_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_md_wrap.o(.text.sm3_clone_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = sm3_clone_wrap &rArr; mbedtls_sm3_clone </ul>
<br>[Calls]<ul>
<li><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_clone
</ul>
<p><strong><a name="[67f]"></a>sm3_ctx_free</strong>(16 bytes, Stack size 8 btyes, Obj/library_md_wrap.o(.text.sm3_ctx_free))<br>
<br>[Calls]<ul>
<li><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_free
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<p><strong><a name="[680]"></a>sm3_ctx_alloc</strong>(24 bytes, Stack size 8 btyes, Obj/library_md_wrap.o(.text.sm3_ctx_alloc))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = sm3_ctx_alloc &rArr; mbedtls_sm3_init </ul>
<br>[Calls]<ul>
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<li><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_init
</ul>
<p><strong><a name="[681]"></a>sm3_finish_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_md_wrap.o(.text.sm3_finish_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 644 
<li>Call Chain = sm3_finish_wrap &rArr; mbedtls_sm3_finish &rArr; mbedtls_sm3_update  &rArr; mbedtls_sm3_process  </ul>
<br>[Calls]<ul>
<li><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_finish
</ul>
<p><strong><a name="[682]"></a>sm3_update_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_md_wrap.o(.text.sm3_update_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 624 
<li>Call Chain = sm3_update_wrap &rArr; mbedtls_sm3_update &rArr; mbedtls_sm3_process  </ul>
<br>[Calls]<ul>
<li><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_update
</ul>
<p><strong><a name="[683]"></a>sm3_starts_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_md_wrap.o(.text.sm3_starts_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 328 
<li>Call Chain = sm3_starts_wrap &rArr; mbedtls_sm3_starts &rArr; tih_sm3_init  &rArr; drv_crypto_lock.part.0  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_starts
</ul>
<p><strong><a name="[684]"></a>oid_sig_alg_from_asn1</strong>(58 bytes, Stack size 16 btyes, Obj/library_oid.o(.text.oid_sig_alg_from_asn1))<br>
<br>[Calls]<ul>
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</ul>
<br>[Called By]<ul>
<li><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg_desc
<li><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg
</ul>
<p><strong><a name="[694]"></a>pem_get_iv</strong>(114 bytes, Stack size 16 btyes, Obj/library_pem.o(.text.pem_get_iv))<br>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</ul>
<p><strong><a name="[695]"></a>pem_pbkdf1</strong>(198 bytes, Stack size 132 btyes, Obj/library_pem.o(.text.pem_pbkdf1))<br>
<br>[Stack]<ul><li>Max Depth = 256 
<li>Call Chain = pem_pbkdf1 &rArr; mbedtls_md5_finish &rArr; mbedtls_md5_update.part.0  &rArr; mbedtls_md5_process  </ul>
<br>[Calls]<ul>
<li><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<li><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts
<li><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
<li><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
</ul>
<br>[Called By]<ul>
<li><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_des3_decrypt
<li><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
<li><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</ul>
<p><strong><a name="[696]"></a>pem_des3_decrypt</strong>(86 bytes, Stack size 444 btyes, Obj/library_pem.o(.text.pem_des3_decrypt))<br>
<br>[Stack]<ul><li>Max Depth = 880 
<li>Call Chain = pem_des3_decrypt &rArr; mbedtls_des3_set3key_dec &rArr; des3_set3key  &rArr; mbedtls_des_setkey  </ul>
<br>[Calls]<ul>
<li><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_init
<li><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<li><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_set3key_dec
<li><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_crypt_cbc
<li><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_des3_free
</ul>
<br>[Called By]<ul>
<li><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</ul>
<p><strong><a name="[697]"></a>pem_aes_decrypt</strong>(96 bytes, Stack size 104 btyes, Obj/library_pem.o(.text.pem_aes_decrypt))<br>
<br>[Stack]<ul><li>Max Depth = 632 
<li>Call Chain = pem_aes_decrypt &rArr; mbedtls_aes_crypt_cbc &rArr; tih_aes_crypt  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<li><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<li><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<li><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<li><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</ul>
<br>[Called By]<ul>
<li><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</ul>
<p><strong><a name="[6ad]"></a>ecdsa_sm2_verify_wrap</strong>(44 bytes, Stack size 0 btyes, Obj/library_pk_wrap.o(.text.ecdsa_sm2_verify_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 484 
<li>Call Chain = ecdsa_sm2_verify_wrap &rArr; mbedtls_ecdsa_sm2_read_signature &rArr; mbedtls_ecdsa_sm2_verify  &rArr; mbedtls_ecp_check_pubkey  &rArr; tih_ecp_check  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_read_signature
</ul>
<p><strong><a name="[6ae]"></a>rsa_can_do</strong>(12 bytes, Stack size 0 btyes, Obj/library_pk_wrap.o(.text.rsa_can_do))<br>
<p><strong><a name="[6af]"></a>rsa_get_bitlen</strong>(6 bytes, Stack size 0 btyes, Obj/library_pk_wrap.o(.text.rsa_get_bitlen))<br>
<p><strong><a name="[6b0]"></a>rsa_debug</strong>(24 bytes, Stack size 0 btyes, Obj/library_pk_wrap.o(.text.rsa_debug))<br>
<p><strong><a name="[6b1]"></a>eckey_can_do</strong>(20 bytes, Stack size 0 btyes, Obj/library_pk_wrap.o(.text.eckey_can_do))<br>
<p><strong><a name="[6b2]"></a>eckey_get_bitlen</strong>(4 bytes, Stack size 0 btyes, Obj/library_pk_wrap.o(.text.eckey_get_bitlen))<br>
<p><strong><a name="[6b3]"></a>eckey_debug</strong>(14 bytes, Stack size 0 btyes, Obj/library_pk_wrap.o(.text.eckey_debug))<br>
<p><strong><a name="[6b4]"></a>eckeydh_can_do</strong>(12 bytes, Stack size 0 btyes, Obj/library_pk_wrap.o(.text.eckeydh_can_do))<br>
<p><strong><a name="[6b5]"></a>ecdsa_can_do</strong>(6 bytes, Stack size 0 btyes, Obj/library_pk_wrap.o(.text.ecdsa_can_do))<br>
<p><strong><a name="[6b6]"></a>rsa_alt_can_do</strong>(6 bytes, Stack size 0 btyes, Obj/library_pk_wrap.o(.text.rsa_alt_can_do))<br>
<p><strong><a name="[6b7]"></a>rsa_alt_get_bitlen</strong>(12 bytes, Stack size 0 btyes, Obj/library_pk_wrap.o(.text.rsa_alt_get_bitlen))<br>
<p><strong><a name="[6b8]"></a>rsa_alt_sign_wrap</strong>(66 bytes, Stack size 0 btyes, Obj/library_pk_wrap.o(.text.rsa_alt_sign_wrap))<br>
<p><strong><a name="[6b9]"></a>rsa_alt_decrypt_wrap</strong>(104 bytes, Stack size 0 btyes, Obj/library_pk_wrap.o(.text.rsa_alt_decrypt_wrap))<br>
<p><strong><a name="[6ba]"></a>ecdsa_sm2_can_do</strong>(6 bytes, Stack size 0 btyes, Obj/library_pk_wrap.o(.text.ecdsa_sm2_can_do))<br>
<p><strong><a name="[6bb]"></a>rsa_free_wrap</strong>(16 bytes, Stack size 8 btyes, Obj/library_pk_wrap.o(.text.rsa_free_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = rsa_free_wrap &rArr; mbedtls_rsa_free &rArr; mbedtls_mpi_free  </ul>
<br>[Calls]<ul>
<li><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<p><strong><a name="[6bc]"></a>rsa_alt_free_wrap</strong>(24 bytes, Stack size 0 btyes, Obj/library_pk_wrap.o(.text.rsa_alt_free_wrap))<br>
<p><strong><a name="[6bd]"></a>rsa_alloc_wrap</strong>(28 bytes, Stack size 8 btyes, Obj/library_pk_wrap.o(.text.rsa_alloc_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = rsa_alloc_wrap &rArr; mbedtls_rsa_init </ul>
<br>[Calls]<ul>
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<li><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
</ul>
<p><strong><a name="[6be]"></a>rsa_check_pair_wrap</strong>(8 bytes, Stack size 4 btyes, Obj/library_pk_wrap.o(.text.rsa_check_pair_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 660 
<li>Call Chain = rsa_check_pair_wrap &rArr; mbedtls_rsa_check_pub_priv &rArr; mbedtls_rsa_check_privkey  &rArr; mbedtls_mpi_inv_mod  &rArr; mbedtls_mpi_mod_mpi  &rArr; mbedtls_mpi_div_mpi  &rArr; mbedtls_mpi_mul_mpi  &rArr; mpi_mul_hlp  &rArr; __muldi3  </ul>
<br>[Calls]<ul>
<li><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</ul>
<p><strong><a name="[6bf]"></a>rsa_encrypt_wrap</strong>(66 bytes, Stack size 28 btyes, Obj/library_pk_wrap.o(.text.rsa_encrypt_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 1016 
<li>Call Chain = rsa_encrypt_wrap &rArr; mbedtls_rsa_pkcs1_encrypt &rArr; mbedtls_rsa_rsaes_oaep_encrypt  &rArr; mbedtls_rsa_private  &rArr; tih_rsa_decrypt  &rArr; rsa_crt_decrypt  &rArr; RSA_CRTModExp  &rArr; pke_mod  &rArr; pke_modmul  </ul>
<br>[Calls]<ul>
<li><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
</ul>
<p><strong><a name="[6c0]"></a>rsa_decrypt_wrap</strong>(70 bytes, Stack size 32 btyes, Obj/library_pk_wrap.o(.text.rsa_decrypt_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 1316 
<li>Call Chain = rsa_decrypt_wrap &rArr; mbedtls_rsa_pkcs1_decrypt &rArr; mbedtls_rsa_rsaes_oaep_decrypt  &rArr; mbedtls_rsa_private  &rArr; tih_rsa_decrypt  &rArr; rsa_crt_decrypt  &rArr; RSA_CRTModExp  &rArr; pke_mod  &rArr; pke_modmul  </ul>
<br>[Calls]<ul>
<li><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
</ul>
<p><strong><a name="[6c1]"></a>rsa_sign_wrap</strong>(50 bytes, Stack size 32 btyes, Obj/library_pk_wrap.o(.text.rsa_sign_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 1044 
<li>Call Chain = rsa_sign_wrap &rArr; mbedtls_rsa_pkcs1_sign &rArr; mbedtls_rsa_rsassa_pss_sign  &rArr; mbedtls_rsa_private  &rArr; tih_rsa_decrypt  &rArr; rsa_crt_decrypt  &rArr; RSA_CRTModExp  &rArr; pke_mod  &rArr; pke_modmul  </ul>
<br>[Calls]<ul>
<li><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
</ul>
<p><strong><a name="[6c2]"></a>rsa_verify_wrap</strong>(72 bytes, Stack size 28 btyes, Obj/library_pk_wrap.o(.text.rsa_verify_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 1308 
<li>Call Chain = rsa_verify_wrap &rArr; mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext  &rArr; mbedtls_rsa_private  &rArr; tih_rsa_decrypt  &rArr; rsa_crt_decrypt  &rArr; RSA_CRTModExp  &rArr; pke_mod  &rArr; pke_modmul  </ul>
<br>[Calls]<ul>
<li><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
</ul>
<p><strong><a name="[6c3]"></a>eckey_free_wrap</strong>(16 bytes, Stack size 8 btyes, Obj/library_pk_wrap.o(.text.eckey_free_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = eckey_free_wrap &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free  &rArr; mbedtls_ecp_point_free  &rArr; mbedtls_mpi_free  </ul>
<br>[Calls]<ul>
<li><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<p><strong><a name="[6c4]"></a>eckey_alloc_wrap</strong>(24 bytes, Stack size 8 btyes, Obj/library_pk_wrap.o(.text.eckey_alloc_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = eckey_alloc_wrap &rArr; mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_point_init  </ul>
<br>[Calls]<ul>
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<li><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
</ul>
<p><strong><a name="[6c5]"></a>eckey_check_pair</strong>(8 bytes, Stack size 4 btyes, Obj/library_pk_wrap.o(.text.eckey_check_pair))<br>
<br>[Stack]<ul><li>Max Depth = 652 
<li>Call Chain = eckey_check_pair &rArr; mbedtls_ecp_check_pub_priv &rArr; mbedtls_ecp_mul  &rArr; mbedtls_ecp_check_pubkey  &rArr; tih_ecp_check  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
</ul>
<p><strong><a name="[6c6]"></a>ecdsa_alloc_wrap</strong>(24 bytes, Stack size 8 btyes, Obj/library_pk_wrap.o(.text.ecdsa_alloc_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = ecdsa_alloc_wrap &rArr; mbedtls_ecdsa_init &rArr; mbedtls_ecp_keypair_init  &rArr; mbedtls_ecp_point_init  </ul>
<br>[Calls]<ul>
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<li><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
</ul>
<p><strong><a name="[6c7]"></a>ecdsa_free_wrap</strong>(16 bytes, Stack size 8 btyes, Obj/library_pk_wrap.o(.text.ecdsa_free_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 52 
<li>Call Chain = ecdsa_free_wrap &rArr; mbedtls_ecdsa_free &rArr; mbedtls_ecp_keypair_free  &rArr; mbedtls_ecp_group_free  &rArr; mbedtls_ecp_point_free  &rArr; mbedtls_mpi_free  </ul>
<br>[Calls]<ul>
<li><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<p><strong><a name="[6c8]"></a>ecdsa_sign_wrap</strong>(36 bytes, Stack size 28 btyes, Obj/library_pk_wrap.o(.text.ecdsa_sign_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 1180 
<li>Call Chain = ecdsa_sign_wrap &rArr; mbedtls_ecdsa_write_signature &rArr; mbedtls_ecdsa_sign_det  &rArr; mbedtls_ecdsa_sign  &rArr; mbedtls_ecp_gen_keypair  &rArr; mbedtls_ecp_gen_keypair_base  &rArr; mbedtls_ecp_mul  &rArr; mbedtls_ecp_check_pubkey  &rArr; tih_ecp_check  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
</ul>
<p><strong><a name="[6c9]"></a>eckey_sign_wrap</strong>(140 bytes, Stack size 224 btyes, Obj/library_pk_wrap.o(.text.eckey_sign_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 1376 
<li>Call Chain = eckey_sign_wrap &rArr; mbedtls_ecdsa_write_signature &rArr; mbedtls_ecdsa_sign_det  &rArr; mbedtls_ecdsa_sign  &rArr; mbedtls_ecp_gen_keypair  &rArr; mbedtls_ecp_gen_keypair_base  &rArr; mbedtls_ecp_mul  &rArr; mbedtls_ecp_check_pubkey  &rArr; tih_ecp_check  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
<li><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<li><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
<li><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
</ul>
<p><strong><a name="[6ca]"></a>ecdsa_verify_wrap</strong>(44 bytes, Stack size 8 btyes, Obj/library_pk_wrap.o(.text.ecdsa_verify_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 664 
<li>Call Chain = ecdsa_verify_wrap &rArr; mbedtls_ecdsa_read_signature &rArr; mbedtls_ecdsa_verify  &rArr; mbedtls_mpi_inv_mod  &rArr; mbedtls_mpi_mod_mpi  &rArr; mbedtls_mpi_div_mpi  &rArr; mbedtls_mpi_mul_mpi  &rArr; mpi_mul_hlp  &rArr; __muldi3  </ul>
<br>[Calls]<ul>
<li><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
</ul>
<p><strong><a name="[6cb]"></a>eckey_verify_wrap</strong>(118 bytes, Stack size 200 btyes, Obj/library_pk_wrap.o(.text.eckey_verify_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 856 
<li>Call Chain = eckey_verify_wrap &rArr; mbedtls_ecdsa_read_signature &rArr; mbedtls_ecdsa_verify  &rArr; mbedtls_mpi_inv_mod  &rArr; mbedtls_mpi_mod_mpi  &rArr; mbedtls_mpi_div_mpi  &rArr; mbedtls_mpi_mul_mpi  &rArr; mpi_mul_hlp  &rArr; __muldi3  </ul>
<br>[Calls]<ul>
<li><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
<li><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<li><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
<li><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
</ul>
<p><strong><a name="[6cc]"></a>rsa_alt_alloc_wrap</strong>(12 bytes, Stack size 0 btyes, Obj/library_pk_wrap.o(.text.rsa_alt_alloc_wrap))<br>
<p><strong><a name="[6cd]"></a>rsa_alt_check_pair</strong>(124 bytes, Stack size 0 btyes, Obj/library_pk_wrap.o(.text.rsa_alt_check_pair))<br>
<p><strong><a name="[6ce]"></a>sm2_z_get_wrap</strong>(24 bytes, Stack size 12 btyes, Obj/library_pk_wrap.o(.text.sm2_z_get_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 428 
<li>Call Chain = sm2_z_get_wrap &rArr; mbedtls_sm2_z_get &rArr; mbedtls_ecp_check_pubkey  &rArr; tih_ecp_check  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm2_z_get
</ul>
<p><strong><a name="[6cf]"></a>ecdsa_sm2_free_wrap</strong>(16 bytes, Stack size 8 btyes, Obj/library_pk_wrap.o(.text.ecdsa_sm2_free_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 52 
<li>Call Chain = ecdsa_sm2_free_wrap &rArr; mbedtls_ecdsa_sm2_free &rArr; mbedtls_ecp_keypair_free  &rArr; mbedtls_ecp_group_free  &rArr; mbedtls_ecp_point_free  &rArr; mbedtls_mpi_free  </ul>
<br>[Calls]<ul>
<li><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_free
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<p><strong><a name="[6d0]"></a>ecdsa_sm2_alloc_wrap</strong>(24 bytes, Stack size 8 btyes, Obj/library_pk_wrap.o(.text.ecdsa_sm2_alloc_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = ecdsa_sm2_alloc_wrap &rArr; mbedtls_ecdsa_sm2_init &rArr; mbedtls_ecp_keypair_init  &rArr; mbedtls_ecp_point_init  </ul>
<br>[Calls]<ul>
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<li><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_init
</ul>
<p><strong><a name="[6d1]"></a>sm2_encrypt_wrap</strong>(366 bytes, Stack size 88 btyes, Obj/library_pk_wrap.o(.text.sm2_encrypt_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 616 
<li>Call Chain = sm2_encrypt_wrap &rArr; mbedtls_sm2_encrypt &rArr; tih_sm2_encrypt  &rArr; sm2_encrypt  &rArr; sm2_encrypt_osr  &rArr; sm2_encrypt_with_k  &rArr; sm2_pointMul_base  &rArr; pointMul_Shamir  &rArr; pke_pre_calc_mont_H  </ul>
<br>[Calls]<ul>
<li><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<li><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<li><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm2_encrypt
<li><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<li><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_raw_buffer
<li><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
<li><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<li><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<li><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<p><strong><a name="[6d2]"></a>sm2_decrypt_wrap</strong>(364 bytes, Stack size 168 btyes, Obj/library_pk_wrap.o(.text.sm2_decrypt_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 564 
<li>Call Chain = sm2_decrypt_wrap &rArr; mbedtls_sm2_decrypt &rArr; tih_sm2_decrypt  &rArr; sm2_decrypt  &rArr; sm2_decrypt_osr  &rArr; sm2_kdf  &rArr; sm3_final  &rArr; hash_final  &rArr; hash_update  </ul>
<br>[Calls]<ul>
<li><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<li><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<li><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<li><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<li><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<li><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm2_decrypt
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<p><strong><a name="[6d3]"></a>ecdsa_sm2_sign_wrap</strong>(38 bytes, Stack size 28 btyes, Obj/library_pk_wrap.o(.text.ecdsa_sm2_sign_wrap))<br>
<br>[Stack]<ul><li>Max Depth = 1024 
<li>Call Chain = ecdsa_sm2_sign_wrap &rArr; mbedtls_ecdsa_sm2_write_signature &rArr; mbedtls_ecdsa_sm2_sign_det  &rArr; mbedtls_ecdsa_sm2_sign  &rArr; tih_sm2_sign  &rArr; sm2_sign  &rArr; sm2_sign_osr  &rArr; sm2_sign_with_k  &rArr; sm2_pointMul_base  &rArr; pointMul_Shamir  &rArr; pke_pre_calc_mont_H  </ul>
<br>[Calls]<ul>
<li><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sm2_write_signature
</ul>
<p><strong><a name="[6da]"></a>pk_get_ecpubkey</strong>(40 bytes, Stack size 20 btyes, Obj/library_pkparse.o(.text.pk_get_ecpubkey))<br>
<br>[Stack]<ul><li>Max Depth = 408 
<li>Call Chain = pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey &rArr; tih_ecp_check  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<li><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</ul>
<br>[Called By]<ul>
<li><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<li><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gm_pk_parse_subpubkey
<li><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</ul>
<p><strong><a name="[6db]"></a>pk_parse_key_pkcs1_der</strong>(282 bytes, Stack size 28 btyes, Obj/library_pkparse.o(.text.pk_parse_key_pkcs1_der))<br>
<br>[Stack]<ul><li>Max Depth = 672 
<li>Call Chain = pk_parse_key_pkcs1_der &rArr; mbedtls_rsa_check_privkey &rArr; mbedtls_mpi_inv_mod  &rArr; mbedtls_mpi_mod_mpi  &rArr; mbedtls_mpi_div_mpi  &rArr; mbedtls_mpi_mul_mpi  &rArr; mpi_mul_hlp  &rArr; __muldi3  </ul>
<br>[Calls]<ul>
<li><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<li><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<li><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<li><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
<li><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<li><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</ul>
<br>[Called By]<ul>
<li><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<li><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gm_pk_parse_key
<li><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</ul>
<p><strong><a name="[6dc]"></a>pk_get_pk_alg</strong>(100 bytes, Stack size 24 btyes, Obj/library_pkparse.o(.text.pk_get_pk_alg))<br>
<br>[Stack]<ul><li>Max Depth = 56 
<li>Call Chain = pk_get_pk_alg &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_len  </ul>
<br>[Calls]<ul>
<li><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<li><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_pk_alg
</ul>
<br>[Called By]<ul>
<li><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<li><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gm_pk_parse_subpubkey
<li><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</ul>
<p><strong><a name="[6dd]"></a>pk_get_rsapubkey</strong>(126 bytes, Stack size 24 btyes, Obj/library_pkparse.o(.text.pk_get_rsapubkey))<br>
<br>[Stack]<ul><li>Max Depth = 104 
<li>Call Chain = pk_get_rsapubkey &rArr; mbedtls_asn1_get_mpi &rArr; mbedtls_mpi_read_binary  &rArr; mbedtls_mpi_lset  &rArr; mbedtls_mpi_grow  </ul>
<br>[Calls]<ul>
<li><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<li><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<li><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<li><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
</ul>
<br>[Called By]<ul>
<li><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gm_pk_parse_subpubkey
<li><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</ul>
<p><strong><a name="[6de]"></a>pk_use_ecparams</strong>(730 bytes, Stack size 280 btyes, Obj/library_pkparse.o(.text.pk_use_ecparams))<br>
<br>[Stack]<ul><li>Max Depth = 364 
<li>Call Chain = pk_use_ecparams &rArr; mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary  &rArr; mbedtls_mpi_lset  &rArr; mbedtls_mpi_grow  </ul>
<br>[Calls]<ul>
<li><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<li><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<li><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<li><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<li><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_grp_id_list
<li><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<li><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<li><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_ec_grp
<li><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<li><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<li><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<li><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<li><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</ul>
<br>[Called By]<ul>
<li><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<li><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<li><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gm_pk_parse_subpubkey
<li><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</ul>
<p><strong><a name="[6df]"></a>pk_parse_key_sec1_der</strong>(402 bytes, Stack size 52 btyes, Obj/library_pkparse.o(.text.pk_parse_key_sec1_der))<br>
<br>[Stack]<ul><li>Max Depth = 512 
<li>Call Chain = pk_parse_key_sec1_der &rArr; mbedtls_ecp_mul &rArr; mbedtls_ecp_check_pubkey  &rArr; tih_ecp_check  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<li><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<li><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<li><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<li><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<li><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<li><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<li><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<li><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
</ul>
<br>[Called By]<ul>
<li><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<li><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gm_pk_parse_key
<li><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</ul>
<p><strong><a name="[6e0]"></a>pk_parse_key_pkcs8_unencrypted_der</strong>(228 bytes, Stack size 40 btyes, Obj/library_pkparse.o(.text.pk_parse_key_pkcs8_unencrypted_der))<br>
<br>[Stack]<ul><li>Max Depth = 712 
<li>Call Chain = pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_pkcs1_der &rArr; mbedtls_rsa_check_privkey  &rArr; mbedtls_mpi_inv_mod  &rArr; mbedtls_mpi_mod_mpi  &rArr; mbedtls_mpi_div_mpi  &rArr; mbedtls_mpi_mul_mpi  &rArr; mpi_mul_hlp  &rArr; __muldi3  </ul>
<br>[Calls]<ul>
<li><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<li><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<li><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
<li><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<li><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<li><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<li><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<li><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<li><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
</ul>
<br>[Called By]<ul>
<li><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_encrypted_der
<li><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gm_pk_parse_key
<li><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</ul>
<p><strong><a name="[6e1]"></a>pk_parse_key_pkcs8_encrypted_der</strong>(326 bytes, Stack size 2132 btyes, Obj/library_pkparse.o(.text.pk_parse_key_pkcs8_encrypted_der))<br>
<br>[Stack]<ul><li>Max Depth = 3180 
<li>Call Chain = pk_parse_key_pkcs8_encrypted_der &rArr; mbedtls_pkcs12_pbe &rArr; mbedtls_pkcs12_derivation  &rArr; mbedtls_md_setup  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<li><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<li><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_pkcs12_pbe_alg
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe_sha1_rc4_128
<li><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<li><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs12_pbe
<li><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pkcs5_pbes2
</ul>
<br>[Called By]<ul>
<li><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gm_pk_parse_key
<li><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</ul>
<p><strong><a name="[6e7]"></a>pk_write_ec_pubkey</strong>(72 bytes, Stack size 0 btyes, Obj/library_pkwrite.o(.text.pk_write_ec_pubkey))<br>
<p><strong><a name="[6e8]"></a>pk_write_ec_param.isra.2</strong>(38 bytes, Stack size 0 btyes, Obj/library_pkwrite.o(.text.pk_write_ec_param.isra.2))<br>
<p><strong><a name="[6ee]"></a>mgf_mask</strong>(134 bytes, Stack size 68 btyes, Obj/library_rsa.o(.text.mgf_mask))<br>
<br>[Stack]<ul><li>Max Depth = 72 
<li>Call Chain = mgf_mask &rArr; mbedtls_md_starts </ul>
<br>[Calls]<ul>
<li><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<li><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<li><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<li><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
</ul>
<br>[Called By]<ul>
<li><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<li><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<li><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<li><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</ul>
<p><strong><a name="[6ef]"></a>myrand</strong>(26 bytes, Stack size 12 btyes, Obj/library_rsa.o(.text.myrand))<br>
<br>[Calls]<ul>
<li><a href="#[cce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</ul>
<p><strong><a name="[72c]"></a>_mbedtls_sm4_crypt_cfb128</strong>(442 bytes, Stack size 148 btyes, Obj/library_sm4.o(.text._mbedtls_sm4_crypt_cfb128))<br>
<br>[Stack]<ul><li>Max Depth = 508 
<li>Call Chain = _mbedtls_sm4_crypt_cfb128 &rArr; tih_sm4_crypt &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tih_sm4_crypt
<li><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmove
<li><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_dtcm_addr_check
</ul>
<br>[Called By]<ul>
<li><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm4_crypt_cfb128
</ul>
<p><strong><a name="[74a]"></a>ssl_write_client_hello</strong>(3272 bytes, Stack size 60 btyes, Obj/library_ssl_cli.o(.text.ssl_write_client_hello))<br>
<br>[Stack]<ul><li>Max Depth = 1496 
<li>Call Chain = ssl_write_client_hello &rArr; mbedtls_ssl_write_record &rArr; mbedtls_ssl_flush_output  &rArr; mbedtls_debug_print_msg  &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<li><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
<li><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<li><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<li><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<li><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_flight_completed
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_grp_id
<li><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hash_from_md_alg
</ul>
<br>[Called By]<ul>
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</ul>
<p><strong><a name="[74b]"></a>ssl_write_encrypted_pms</strong>(346 bytes, Stack size 52 btyes, Obj/library_ssl_cli.o(.text.ssl_write_encrypted_pms))<br>
<br>[Stack]<ul><li>Max Depth = 1356 
<li>Call Chain = ssl_write_encrypted_pms &rArr; mbedtls_debug_print_msg &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<li><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<li><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_encrypt
<li><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</ul>
<br>[Called By]<ul>
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</ul>
<p><strong><a name="[74c]"></a>ssl_check_server_ecdh_params</strong>(118 bytes, Stack size 20 btyes, Obj/library_ssl_cli.o(.text.ssl_check_server_ecdh_params))<br>
<br>[Stack]<ul><li>Max Depth = 1736 
<li>Call Chain = ssl_check_server_ecdh_params &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_grp_id
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_curve
<li><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp
</ul>
<br>[Called By]<ul>
<li><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</ul>
<p><strong><a name="[74d]"></a>ssl_parse_server_key_exchange</strong>(1826 bytes, Stack size 304 btyes, Obj/library_ssl_cli.o(.text.ssl_parse_server_key_exchange))<br>
<br>[Stack]<ul><li>Max Depth = 2040 
<li>Call Chain = ssl_parse_server_key_exchange &rArr; ssl_check_server_ecdh_params &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<li><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<li><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<li><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_get_params
<li><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
<li><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<li><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_sig_pk_alg
<li><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<li><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_params
<li><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<li><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<li><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts
<li><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
<li><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
<li><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
<li><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<li><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
<li><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
<li><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<li><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_md_alg_from_hash
<li><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_pk_alg_from_sig
<li><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_sig_hash
<li><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<li><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<li><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<li><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_z_get
<li><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
<li><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<li><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<li><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<li><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<li><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
</ul>
<br>[Called By]<ul>
<li><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</ul>
<p><strong><a name="[74f]"></a>ssl_cookie_hmac</strong>(148 bytes, Stack size 0 btyes, Obj/library_ssl_cookie.o(.text.ssl_cookie_hmac))<br>
<p><strong><a name="[756]"></a>ssl_parse_client_psk_identity</strong>(270 bytes, Stack size 36 btyes, Obj/library_ssl_srv.o(.text.ssl_parse_client_psk_identity))<br>
<br>[Stack]<ul><li>Max Depth = 1504 
<li>Call Chain = ssl_parse_client_psk_identity &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record  &rArr; mbedtls_ssl_flush_output  &rArr; mbedtls_debug_print_msg  &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<li><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</ul>
<br>[Called By]<ul>
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
</ul>
<p><strong><a name="[757]"></a>ssl_write_server_key_exchange</strong>(1640 bytes, Stack size 312 btyes, Obj/library_ssl_srv.o(.text.ssl_write_server_key_exchange))<br>
<br>[Stack]<ul><li>Max Depth = 2028 
<li>Call Chain = ssl_write_server_key_exchange &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<li><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_get_params
<li><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<li><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<li><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_params
<li><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp
<li><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_sig_pk_alg
<li><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<li><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<li><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts
<li><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
<li><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
<li><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
<li><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<li><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
<li><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
<li><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<li><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<li><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_sign
<li><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<li><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_sig_hash_set_find
<li><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<li><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<li><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<li><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_z_get
<li><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<li><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<li><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<li><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<li><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<li><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hash_from_md_alg
<li><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_sig_from_pk_alg
</ul>
<br>[Called By]<ul>
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
</ul>
<p><strong><a name="[758]"></a>ssl_parse_encrypted_pms</strong>(492 bytes, Stack size 156 btyes, Obj/library_ssl_srv.o(.text.ssl_parse_encrypted_pms))<br>
<br>[Stack]<ul><li>Max Depth = 1460 
<li>Call Chain = ssl_parse_encrypted_pms &rArr; mbedtls_debug_print_msg &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_bitlen
<li><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<li><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<li><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_decrypt
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</ul>
<br>[Called By]<ul>
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
</ul>
<p><strong><a name="[759]"></a>ssl_parse_client_hello</strong>(5554 bytes, Stack size 240 btyes, Obj/library_ssl_srv.o(.text.ssl_parse_client_hello))<br>
<br>[Stack]<ul><li>Max Depth = 4636 
<li>Call Chain = ssl_parse_client_hello &rArr; mbedtls_debug_print_crt &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<li><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_version
<li><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_dtls_replay_check
<li><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<li><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_init
<li><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<li><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_pk_alg_from_sig
<li><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_md_alg_from_hash
<li><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_sig_hash
<li><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_sig_hash_set_add
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<li><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_tls_id
<li><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_dtls_replay_update
<li><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
<li><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_uses_ec
<li><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_uses_psk
<li><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_sig_pk_alg
<li><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
<li><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<li><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_cert_usage
<li><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_sig_alg
<li><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_sig_hash_set_find
<li><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_sig_hash_set_const_hash
<li><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_recv_flight_completed
<li><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hash_from_md_alg
</ul>
<br>[Called By]<ul>
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_server_step
</ul>
<p><strong><a name="[75d]"></a>ssl_ticket_gen_key</strong>(88 bytes, Stack size 0 btyes, Obj/library_ssl_ticket.o(.text.ssl_ticket_gen_key))<br>
<p><strong><a name="[75e]"></a>ssl_ticket_update_keys.part.0</strong>(58 bytes, Stack size 0 btyes, Obj/library_ssl_ticket.o(.text.ssl_ticket_update_keys.part.0))<br>
<p><strong><a name="[764]"></a>ssl_cookie_write_dummy</strong>(8 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.ssl_cookie_write_dummy))<br>
<p><strong><a name="[765]"></a>ssl_cookie_check_dummy</strong>(8 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.ssl_cookie_check_dummy))<br>
<p><strong><a name="[766]"></a>ssl_set_timer</strong>(44 bytes, Stack size 20 btyes, Obj/library_ssl_tls.o(.text.ssl_set_timer))<br>
<br>[Stack]<ul><li>Max Depth = 1324 
<li>Call Chain = ssl_set_timer &rArr; mbedtls_debug_print_msg &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</ul>
<br>[Called By]<ul>
<li><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_recv_flight_completed
<li><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_flight_completed
<li><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_resend
<li><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<li><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<li><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<li><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
<li><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</ul>
<p><strong><a name="[767]"></a>ssl_swap_epochs</strong>(218 bytes, Stack size 32 btyes, Obj/library_ssl_tls.o(.text.ssl_swap_epochs))<br>
<br>[Stack]<ul><li>Max Depth = 1336 
<li>Call Chain = ssl_swap_epochs &rArr; mbedtls_debug_print_msg &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</ul>
<br>[Called By]<ul>
<li><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_resend
</ul>
<p><strong><a name="[768]"></a>ssl_calc_finished_tls_sha256</strong>(178 bytes, Stack size 184 btyes, Obj/library_ssl_tls.o(.text.ssl_calc_finished_tls_sha256))<br>
<br>[Stack]<ul><li>Max Depth = 1488 
<li>Call Chain = ssl_calc_finished_tls_sha256 &rArr; mbedtls_debug_print_msg &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
<li><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<li><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<li><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</ul>
<p><strong><a name="[769]"></a>ssl_calc_verify_tls_sha256</strong>(106 bytes, Stack size 140 btyes, Obj/library_ssl_tls.o(.text.ssl_calc_verify_tls_sha256))<br>
<br>[Stack]<ul><li>Max Depth = 1444 
<li>Call Chain = ssl_calc_verify_tls_sha256 &rArr; mbedtls_debug_print_msg &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
<li><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<li><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<li><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</ul>
<p><strong><a name="[76a]"></a>tls_prf_generic</strong>(360 bytes, Stack size 228 btyes, Obj/library_ssl_tls.o(.text.tls_prf_generic))<br>
<br>[Stack]<ul><li>Max Depth = 284 
<li>Call Chain = tls_prf_generic &rArr; mbedtls_md_hmac_starts </ul>
<br>[Calls]<ul>
<li><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<li><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<li><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<li><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<li><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<li><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<li><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<li><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
</ul>
<br>[Called By]<ul>
<li><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_sha256
<li><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_sm3
</ul>
<p><strong><a name="[76b]"></a>tls_prf_sha256</strong>(42 bytes, Stack size 24 btyes, Obj/library_ssl_tls.o(.text.tls_prf_sha256))<br>
<br>[Stack]<ul><li>Max Depth = 308 
<li>Call Chain = tls_prf_sha256 &rArr; tls_prf_generic &rArr; mbedtls_md_hmac_starts  </ul>
<br>[Calls]<ul>
<li><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</ul>
<p><strong><a name="[76c]"></a>tls_prf_sm3</strong>(42 bytes, Stack size 24 btyes, Obj/library_ssl_tls.o(.text.tls_prf_sm3))<br>
<br>[Stack]<ul><li>Max Depth = 308 
<li>Call Chain = tls_prf_sm3 &rArr; tls_prf_generic &rArr; mbedtls_md_hmac_starts  </ul>
<br>[Calls]<ul>
<li><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</ul>
<p><strong><a name="[76d]"></a>tls1_prf</strong>(546 bytes, Stack size 212 btyes, Obj/library_ssl_tls.o(.text.tls1_prf))<br>
<br>[Stack]<ul><li>Max Depth = 268 
<li>Call Chain = tls1_prf &rArr; mbedtls_md_hmac_starts </ul>
<br>[Calls]<ul>
<li><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<li><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<li><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<li><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<li><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<li><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<li><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
</ul>
<p><strong><a name="[76e]"></a>ssl_calc_finished_tls</strong>(236 bytes, Stack size 260 btyes, Obj/library_ssl_tls.o(.text.ssl_calc_finished_tls))<br>
<br>[Stack]<ul><li>Max Depth = 1564 
<li>Call Chain = ssl_calc_finished_tls &rArr; mbedtls_debug_print_msg &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<li><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<li><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_clone
<li><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
<li><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<li><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
<li><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
<li><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
<li><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
</ul>
<p><strong><a name="[76f]"></a>ssl_calc_verify_tls</strong>(138 bytes, Stack size 212 btyes, Obj/library_ssl_tls.o(.text.ssl_calc_verify_tls))<br>
<br>[Stack]<ul><li>Max Depth = 1516 
<li>Call Chain = ssl_calc_verify_tls &rArr; mbedtls_debug_print_msg &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<li><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<li><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_clone
<li><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
<li><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
<li><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
<li><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<li><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
<li><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
</ul>
<p><strong><a name="[770]"></a>ssl_calc_finished_tls_sm3</strong>(178 bytes, Stack size 180 btyes, Obj/library_ssl_tls.o(.text.ssl_calc_finished_tls_sm3))<br>
<br>[Stack]<ul><li>Max Depth = 1484 
<li>Call Chain = ssl_calc_finished_tls_sm3 &rArr; mbedtls_debug_print_msg &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_init
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_clone
<li><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_finish
<li><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<li><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_free
</ul>
<p><strong><a name="[771]"></a>ssl_calc_verify_tls_sm3</strong>(106 bytes, Stack size 136 btyes, Obj/library_ssl_tls.o(.text.ssl_calc_verify_tls_sm3))<br>
<br>[Stack]<ul><li>Max Depth = 1440 
<li>Call Chain = ssl_calc_verify_tls_sm3 &rArr; mbedtls_debug_print_msg &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_init
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_clone
<li><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_finish
<li><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<li><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_free
</ul>
<p><strong><a name="[772]"></a>ssl_flight_free</strong>(30 bytes, Stack size 12 btyes, Obj/library_ssl_tls.o(.text.ssl_flight_free))<br>
<br>[Calls]<ul>
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<br>[Called By]<ul>
<li><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_recv_flight_completed
<li><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</ul>
<p><strong><a name="[773]"></a>ssl_append_key_cert</strong>(64 bytes, Stack size 16 btyes, Obj/library_ssl_tls.o(.text.ssl_append_key_cert))<br>
<br>[Calls]<ul>
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</ul>
<br>[Called By]<ul>
<li><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_own_cert
<li><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gmssl_conf_own_cert
</ul>
<p><strong><a name="[774]"></a>ssl_update_checksum_sm3</strong>(14 bytes, Stack size 4 btyes, Obj/library_ssl_tls.o(.text.ssl_update_checksum_sm3))<br>
<br>[Stack]<ul><li>Max Depth = 624 
<li>Call Chain = ssl_update_checksum_sm3 &rArr; mbedtls_sm3_update &rArr; mbedtls_sm3_process  </ul>
<br>[Calls]<ul>
<li><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_update
</ul>
<p><strong><a name="[775]"></a>ssl_update_checksum_md5sha1</strong>(34 bytes, Stack size 16 btyes, Obj/library_ssl_tls.o(.text.ssl_update_checksum_md5sha1))<br>
<br>[Stack]<ul><li>Max Depth = 164 
<li>Call Chain = ssl_update_checksum_md5sha1 &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process  </ul>
<br>[Calls]<ul>
<li><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
<li><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
</ul>
<p><strong><a name="[7a7]"></a>ssl_handshake_wrapup_free_hs_transform</strong>(84 bytes, Stack size 12 btyes, Obj/library_ssl_tls.o(.text.ssl_handshake_wrapup_free_hs_transform))<br>
<br>[Stack]<ul><li>Max Depth = 1316 
<li>Call Chain = ssl_handshake_wrapup_free_hs_transform &rArr; mbedtls_debug_print_msg &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<li><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
</ul>
<br>[Called By]<ul>
<li><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<li><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
</ul>
<p><strong><a name="[7aa]"></a>ssl_session_copy</strong>(122 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.ssl_session_copy))<br>
<p><strong><a name="[7ad]"></a>ssl_handshake_init</strong>(368 bytes, Stack size 24 btyes, Obj/library_ssl_tls.o(.text.ssl_handshake_init))<br>
<br>[Stack]<ul><li>Max Depth = 1348 
<li>Call Chain = ssl_handshake_init &rArr; ssl_set_timer &rArr; mbedtls_debug_print_msg  &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<li><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<li><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<li><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<li><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<li><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<li><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts
<li><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
<li><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<li><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
<li><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_init
<li><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_starts
<li><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_init
<li><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<br>[Called By]<ul>
<li><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<li><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
<li><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
</ul>
<p><strong><a name="[7af]"></a>ssl_update_checksum_start</strong>(68 bytes, Stack size 16 btyes, Obj/library_ssl_tls.o(.text.ssl_update_checksum_start))<br>
<br>[Stack]<ul><li>Max Depth = 636 
<li>Call Chain = ssl_update_checksum_start &rArr; mbedtls_sm3_update &rArr; mbedtls_sm3_process  </ul>
<br>[Calls]<ul>
<li><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_update
<li><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
<li><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<li><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</ul>
<p><strong><a name="[7b0]"></a>ssl_update_checksum_sha256</strong>(14 bytes, Stack size 4 btyes, Obj/library_ssl_tls.o(.text.ssl_update_checksum_sha256))<br>
<br>[Stack]<ul><li>Max Depth = 396 
<li>Call Chain = ssl_update_checksum_sha256 &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process  </ul>
<br>[Calls]<ul>
<li><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</ul>
<p><strong><a name="[7b1]"></a>ssl_check_timer</strong>(48 bytes, Stack size 12 btyes, Obj/library_ssl_tls.o(.text.ssl_check_timer))<br>
<br>[Stack]<ul><li>Max Depth = 1316 
<li>Call Chain = ssl_check_timer &rArr; mbedtls_debug_print_msg &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</ul>
<br>[Called By]<ul>
<li><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
</ul>
<p><strong><a name="[7b2]"></a>mbedtls_ssl_write_version.part.12</strong>(32 bytes, Stack size 0 btyes, Obj/library_ssl_tls.o(.text.mbedtls_ssl_write_version.part.12))<br>
<br>[Called By]<ul>
<li><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<li><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<li><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
</ul>
<p><strong><a name="[7ba]"></a>ssl_write_hello_request</strong>(104 bytes, Stack size 20 btyes, Obj/library_ssl_tls.o(.text.ssl_write_hello_request))<br>
<br>[Stack]<ul><li>Max Depth = 1456 
<li>Call Chain = ssl_write_hello_request &rArr; mbedtls_ssl_write_record &rArr; mbedtls_ssl_flush_output  &rArr; mbedtls_debug_print_msg  &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<li><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
</ul>
<br>[Called By]<ul>
<li><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_resend_hello_request
<li><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_renegotiate
</ul>
<p><strong><a name="[7bb]"></a>ssl_resend_hello_request</strong>(82 bytes, Stack size 8 btyes, Obj/library_ssl_tls.o(.text.ssl_resend_hello_request))<br>
<br>[Stack]<ul><li>Max Depth = 1464 
<li>Call Chain = ssl_resend_hello_request &rArr; ssl_write_hello_request &rArr; mbedtls_ssl_write_record  &rArr; mbedtls_ssl_flush_output  &rArr; mbedtls_debug_print_msg  &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_hello_request
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</ul>
<br>[Called By]<ul>
<li><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<li><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</ul>
<p><strong><a name="[7be]"></a>ssl_write_real</strong>(206 bytes, Stack size 28 btyes, Obj/library_ssl_tls.o(.text.ssl_write_real))<br>
<br>[Stack]<ul><li>Max Depth = 1464 
<li>Call Chain = ssl_write_real &rArr; mbedtls_ssl_write_record &rArr; mbedtls_ssl_flush_output  &rArr; mbedtls_debug_print_msg  &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<li><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<li><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</ul>
<br>[Called By]<ul>
<li><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
</ul>
<p><strong><a name="[7e1]"></a>ssl_start_renegotiation</strong>(152 bytes, Stack size 24 btyes, Obj/library_ssl_tls.o(.text.ssl_start_renegotiation))<br>
<br>[Stack]<ul><li>Max Depth = 4808 
<li>Call Chain = ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<li><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<li><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
</ul>
<br>[Called By]<ul>
<li><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_renegotiate
<li><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</ul>
<p><strong><a name="[7e3]"></a>ssl_check_ctr_renegotiate</strong>(128 bytes, Stack size 28 btyes, Obj/library_ssl_tls.o(.text.ssl_check_ctr_renegotiate))<br>
<br>[Stack]<ul><li>Max Depth = 4860 
<li>Call Chain = ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<li><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_renegotiate
</ul>
<br>[Called By]<ul>
<li><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<li><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</ul>
<p><strong><a name="[7e5]"></a>ssl_session_reset_int</strong>(338 bytes, Stack size 16 btyes, Obj/library_ssl_tls.o(.text.ssl_session_reset_int))<br>
<br>[Stack]<ul><li>Max Depth = 1364 
<li>Call Chain = ssl_session_reset_int &rArr; ssl_handshake_init &rArr; ssl_set_timer  &rArr; mbedtls_debug_print_msg  &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<li><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<li><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</ul>
<br>[Called By]<ul>
<li><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<li><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_reset
</ul>
<p><strong><a name="[7f7]"></a>threading_mutex_fail</strong>(6 bytes, Stack size 0 btyes, Obj/library_threading.o(.text.threading_mutex_fail))<br>
<p><strong><a name="[7f8]"></a>threading_mutex_dummy</strong>(2 bytes, Stack size 0 btyes, Obj/library_threading.o(.text.threading_mutex_dummy))<br>
<p><strong><a name="[7fb]"></a>busy_msleep</strong>(40 bytes, Stack size 48 btyes, Obj/library_timing.o(.text.busy_msleep))<br>
<br>[Stack]<ul><li>Max Depth = 64 
<li>Call Chain = busy_msleep &rArr; mbedtls_timing_get_timer &rArr; rt_hw_hardclock_get  </ul>
<br>[Calls]<ul>
<li><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_timing_get_timer
</ul>
<br>[Called By]<ul>
<li><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_timing_self_test
</ul>
<p><strong><a name="[801]"></a>x509_check_time</strong>(92 bytes, Stack size 0 btyes, Obj/library_x509.o(.text.x509_check_time))<br>
<br>[Called By]<ul>
<li><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<li><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
</ul>
<p><strong><a name="[802]"></a>x509_get_current_time</strong>(100 bytes, Stack size 16 btyes, Obj/library_x509.o(.text.x509_get_current_time))<br>
<br>[Stack]<ul><li>Max Depth = 236 
<li>Call Chain = x509_get_current_time &rArr; time &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<li><a href="#[cdb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime
</ul>
<br>[Called By]<ul>
<li><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<li><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
</ul>
<p><strong><a name="[81e]"></a>x509_name_cmp</strong>(242 bytes, Stack size 32 btyes, Obj/library_x509_crt.o(.text.x509_name_cmp))<br>
<br>[Calls]<ul>
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</ul>
<br>[Called By]<ul>
<li><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<li><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</ul>
<p><strong><a name="[81f]"></a>x509_get_uid</strong>(56 bytes, Stack size 12 btyes, Obj/library_x509_crt.o(.text.unlikely.x509_get_uid))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = x509_get_uid &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len  </ul>
<br>[Calls]<ul>
<li><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</ul>
<br>[Called By]<ul>
<li><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</ul>
<p><strong><a name="[820]"></a>x509_profile_check_key.isra.4</strong>(74 bytes, Stack size 8 btyes, Obj/library_x509_crt.o(.text.x509_profile_check_key.isra.4))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = x509_profile_check_key.isra.4 &rArr; mbedtls_pk_get_bitlen </ul>
<br>[Calls]<ul>
<li><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_bitlen
</ul>
<br>[Called By]<ul>
<li><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<li><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<li><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<li><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</ul>
<p><strong><a name="[821]"></a>x509_check_wildcard.isra.6</strong>(150 bytes, Stack size 16 btyes, Obj/library_x509_crt.o(.text.x509_check_wildcard.isra.6))<br>
<br>[Calls]<ul>
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</ul>
<br>[Called By]<ul>
<li><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</ul>
<p><strong><a name="[822]"></a>mbedtls_x509_crt_check_key_usage.part.7</strong>(58 bytes, Stack size 0 btyes, Obj/library_x509_crt.o(.text.mbedtls_x509_crt_check_key_usage.part.7))<br>
<br>[Called By]<ul>
<li><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<li><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_key_usage
<li><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
</ul>
<p><strong><a name="[823]"></a>x509_crt_check_parent</strong>(112 bytes, Stack size 24 btyes, Obj/library_x509_crt.o(.text.x509_crt_check_parent))<br>
<br>[Stack]<ul><li>Max Depth = 56 
<li>Call Chain = x509_crt_check_parent &rArr; x509_name_cmp </ul>
<br>[Calls]<ul>
<li><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<li><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_key_usage.part.7
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</ul>
<br>[Called By]<ul>
<li><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<li><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<li><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</ul>
<p><strong><a name="[829]"></a>x509_crt_verifycrl</strong>(316 bytes, Stack size 104 btyes, Obj/library_x509_crt.o(.text.x509_crt_verifycrl))<br>
<br>[Stack]<ul><li>Max Depth = 1400 
<li>Call Chain = x509_crt_verifycrl &rArr; mbedtls_pk_verify_ext &rArr; mbedtls_rsa_rsassa_pss_verify_ext  &rArr; mbedtls_rsa_private  &rArr; tih_rsa_decrypt  &rArr; rsa_crt_decrypt  &rArr; RSA_CRTModExp  &rArr; pke_mod  &rArr; pke_modmul  </ul>
<br>[Calls]<ul>
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_key_usage.part.7
<li><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<li><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<li><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key.isra.4
<li><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<li><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<li><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<li><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
<li><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_is_revoked
</ul>
<br>[Called By]<ul>
<li><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<li><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</ul>
<p><strong><a name="[82a]"></a>x509_crt_verify_top</strong>(658 bytes, Stack size 232 btyes, Obj/library_x509_crt.o(.text.x509_crt_verify_top))<br>
<br>[Stack]<ul><li>Max Depth = 1632 
<li>Call Chain = x509_crt_verify_top &rArr; x509_crt_verifycrl &rArr; mbedtls_pk_verify_ext  &rArr; mbedtls_rsa_rsassa_pss_verify_ext  &rArr; mbedtls_rsa_private  &rArr; tih_rsa_decrypt  &rArr; rsa_crt_decrypt  &rArr; RSA_CRTModExp  &rArr; pke_mod  &rArr; pke_modmul  </ul>
<br>[Calls]<ul>
<li><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<li><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
<li><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<li><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<li><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<li><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<li><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_z_get
<li><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_starts
<li><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_update
<li><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_finish
<li><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sm3_free
<li><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key.isra.4
<li><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
</ul>
<br>[Called By]<ul>
<li><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<li><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</ul>
<p><strong><a name="[82b]"></a>x509_crt_verify_child</strong>(604 bytes, Stack size 128 btyes, Obj/library_x509_crt.o(.text.x509_crt_verify_child))<br>
<br>[Stack]<ul><li>Max Depth = 128 
<li>Call Chain = x509_crt_verify_child &rArr; x509_crt_verify_top &rArr; x509_crt_verifycrl  &rArr; mbedtls_pk_verify_ext  &rArr; mbedtls_rsa_rsassa_pss_verify_ext  &rArr; mbedtls_rsa_private  &rArr; tih_rsa_decrypt  &rArr; rsa_crt_decrypt  &rArr; RSA_CRTModExp  &rArr; pke_mod  &rArr; pke_modmul  </ul>
<br>[Calls]<ul>
<li><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<li><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
<li><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<li><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<li><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key.isra.4
<li><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<li><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<li><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<li><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<li><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<li><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<li><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</ul>
<br>[Called By]<ul>
<li><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<li><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</ul>
<p><strong><a name="[838]"></a>x509_write_time.constprop.0</strong>(128 bytes, Stack size 0 btyes, Obj/library_x509write_crt.o(.text.x509_write_time.constprop.0))<br>
<p><strong><a name="[858]"></a>mbedtls_alarm_entry</strong>(8 bytes, Stack size 0 btyes, Obj/src_timing_alt.o(.text.mbedtls_alarm_entry))<br>
<p><strong><a name="[873]"></a>my_debug</strong>(2 bytes, Stack size 0 btyes, Obj/src_tls_server.o(.text.my_debug))<br>
<p><strong><a name="[87e]"></a>test_snprintf</strong>(114 bytes, Stack size 44 btyes, Obj/samples_crypto_app_test.o(.text.test_snprintf))<br>
<br>[Calls]<ul>
<li><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
<li><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</ul>
<br>[Called By]<ul>
<li><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_crypto_test
</ul>
<p><strong><a name="[881]"></a>mbedlts_client_entry</strong>(248 bytes, Stack size 24 btyes, Obj/samples_tls_app_test.o(.text.mbedlts_client_entry))<br>
<br>[Stack]<ul><li>Max Depth = 4920 
<li>Call Chain = mbedlts_client_entry &rArr; tls_cli_session_write &rArr; mbedtls_ssl_write  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_init
<li><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_config
<li><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_connect
<li><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_write
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_close
<li><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_destroy
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_read
</ul>
<p><strong><a name="[885]"></a>iperf_client</strong>(480 bytes, Stack size 116 btyes, Obj/iperf_iperf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 788 
<li>Call Chain = iperf_client &rArr; setsockopt &rArr; lwip_setsockopt  &rArr; igmp_leavegroup  &rArr; igmp_leavegroup_netif  &rArr; igmp_send  &rArr; ip4_output_if_opt  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<li><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<li><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<li><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<li><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<li><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<li><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<li><a href="#[c9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__muldi3
<li><a href="#[c9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivdi3
<li><a href="#[c9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__floatundisf
<li><a href="#[ca5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__divsf3
<li><a href="#[cad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__extendsfdf2
<li><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</ul>
<p><strong><a name="[886]"></a>iperf_udp_server</strong>(380 bytes, Stack size 176 btyes, Obj/iperf_iperf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 848 
<li>Call Chain = iperf_udp_server &rArr; setsockopt &rArr; lwip_setsockopt  &rArr; igmp_leavegroup  &rArr; igmp_leavegroup_netif  &rArr; igmp_send  &rArr; ip4_output_if_opt  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<li><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<li><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<li><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<li><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<li><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<li><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[c9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__muldi3
<li><a href="#[c9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivdi3
<li><a href="#[c9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__floatundisf
<li><a href="#[ca5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__divsf3
<li><a href="#[cad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__extendsfdf2
<li><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<li><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
</ul>
<p><strong><a name="[887]"></a>iperf_udp_client</strong>(128 bytes, Stack size 48 btyes, Obj/iperf_iperf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 500 
<li>Call Chain = iperf_udp_client &rArr; sendto &rArr; lwip_sendto  &rArr; netbuf_alloc  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<li><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<li><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<p><strong><a name="[888]"></a>sendto_ntp_server</strong>(82 bytes, Stack size 28 btyes, Obj/ntp_ntp.o(.text.sendto_ntp_server))<br>
<br>[Stack]<ul><li>Max Depth = 480 
<li>Call Chain = sendto_ntp_server &rArr; sendto &rArr; lwip_sendto  &rArr; netbuf_alloc  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</ul>
<br>[Called By]<ul>
<li><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
</ul>
<p><strong><a name="[88c]"></a>ntp_sync</strong>(40 bytes, Stack size 8 btyes, Obj/ntp_ntp.o(.text.ntp_sync))<br>
<br>[Stack]<ul><li>Max Depth = 704 
<li>Call Chain = ntp_sync &rArr; ntp_sync_to_rtc &rArr; ntp_get_time  &rArr; recvfrom  &rArr; lwip_recvfrom  &rArr; netconn_recv  &rArr; netconn_recv_data  &rArr; netconn_close_shutdown  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_to_rtc
<li><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ntp_sync
</ul>
<p><strong><a name="[88d]"></a>cmd_ntp_sync</strong>(22 bytes, Stack size 4 btyes, Obj/ntp_ntp.o(.text.cmd_ntp_sync))<br>
<br>[Stack]<ul><li>Max Depth = 708 
<li>Call Chain = cmd_ntp_sync &rArr; ntp_sync &rArr; ntp_sync_to_rtc  &rArr; ntp_get_time  &rArr; recvfrom  &rArr; lwip_recvfrom  &rArr; netconn_recv  &rArr; netconn_recv_data  &rArr; netconn_close_shutdown  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync
</ul>
<p><strong><a name="[890]"></a>tftp_server</strong>(44 bytes, Stack size 4 btyes, Obj/tftp_tftp_port.o(.text.tftp_server))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = tftp_server &rArr; tftp_init &rArr; udp_new_ip_type  &rArr; udp_new  &rArr; memp_malloc  &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_init
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[891]"></a>tftp_write</strong>(12 bytes, Stack size 4 btyes, Obj/tftp_tftp_port.o(.text.tftp_write))<br>
<br>[Stack]<ul><li>Max Depth = 360 
<li>Call Chain = tftp_write &rArr; write &rArr; fd_put  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
</ul>
<p><strong><a name="[892]"></a>tftp_open</strong>(62 bytes, Stack size 16 btyes, Obj/tftp_tftp_port.o(.text.tftp_open))<br>
<br>[Stack]<ul><li>Max Depth = 460 
<li>Call Chain = tftp_open &rArr; open &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<li><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[893]"></a>resend_data</strong>(54 bytes, Stack size 12 btyes, Obj/tftp_tftp_server.o(.text.resend_data))<br>
<br>[Stack]<ul><li>Max Depth = 616 
<li>Call Chain = resend_data &rArr; udp_sendto &rArr; udp_sendto_if  &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<li><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</ul>
<br>[Called By]<ul>
<li><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<li><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_tmr
</ul>
<p><strong><a name="[894]"></a>send_ack</strong>(60 bytes, Stack size 16 btyes, Obj/tftp_tftp_server.o(.text.send_ack))<br>
<br>[Stack]<ul><li>Max Depth = 620 
<li>Call Chain = send_ack &rArr; udp_sendto &rArr; udp_sendto_if  &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</ul>
<br>[Called By]<ul>
<li><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</ul>
<p><strong><a name="[895]"></a>close_handle</strong>(50 bytes, Stack size 12 btyes, Obj/tftp_tftp_server.o(.text.close_handle))<br>
<br>[Stack]<ul><li>Max Depth = 328 
<li>Call Chain = close_handle &rArr; pbuf_free &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
</ul>
<br>[Called By]<ul>
<li><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<li><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<li><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_tmr
</ul>
<p><strong><a name="[896]"></a>send_error</strong>(84 bytes, Stack size 32 btyes, Obj/tftp_tftp_server.o(.text.send_error))<br>
<br>[Stack]<ul><li>Max Depth = 636 
<li>Call Chain = send_error &rArr; udp_sendto &rArr; udp_sendto_if  &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</ul>
<br>[Called By]<ul>
<li><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<li><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</ul>
<p><strong><a name="[897]"></a>send_data</strong>(100 bytes, Stack size 12 btyes, Obj/tftp_tftp_server.o(.text.send_data))<br>
<br>[Stack]<ul><li>Max Depth = 648 
<li>Call Chain = send_data &rArr; send_error &rArr; udp_sendto  &rArr; udp_sendto_if  &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<li><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resend_data
<li><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error
<li><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_handle
</ul>
<br>[Called By]<ul>
<li><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</ul>
<p><strong><a name="[898]"></a>recv</strong>(556 bytes, Stack size 304 btyes, Obj/tftp_tftp_server.o(.text.recv))<br>
<br>[Stack]<ul><li>Max Depth = 952 
<li>Call Chain = recv &rArr; send_data &rArr; send_error  &rArr; udp_sendto  &rArr; udp_sendto_if  &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_handle
<li><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<li><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack
<li><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<li><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memfind
<li><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<li><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
</ul>
<p><strong><a name="[899]"></a>tftp_tmr</strong>(74 bytes, Stack size 8 btyes, Obj/tftp_tftp_server.o(.text.tftp_tmr))<br>
<br>[Stack]<ul><li>Max Depth = 624 
<li>Call Chain = tftp_tmr &rArr; resend_data &rArr; udp_sendto  &rArr; udp_sendto_if  &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<li><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_handle
<li><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resend_data
</ul>
<p><strong><a name="[89b]"></a>webclient_connect</strong>(1030 bytes, Stack size 84 btyes, Obj/src_webclient.o(.text.webclient_connect))<br>
<br>[Stack]<ul><li>Max Depth = 4892 
<li>Call Chain = webclient_connect &rArr; tls_cli_session_connect &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<li><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<li><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<li><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getaddrinfo
<li><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_config
<li><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeaddrinfo
<li><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_connect
<li><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_create
<li><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_init
<li><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<li><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<li><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
<li><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post
</ul>
<p><strong><a name="[89c]"></a>webclient_recv.isra.0.constprop.7</strong>(28 bytes, Stack size 4 btyes, Obj/src_webclient.o(.text.webclient_recv.isra.0.constprop.7))<br>
<br>[Stack]<ul><li>Max Depth = 4896 
<li>Call Chain = webclient_recv.isra.0.constprop.7 &rArr; tls_cli_session_read &rArr; mbedtls_ssl_read  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cli_session_read
<li><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</ul>
<br>[Called By]<ul>
<li><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read_line
<li><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
</ul>
<p><strong><a name="[89d]"></a>webclient_read_line</strong>(168 bytes, Stack size 32 btyes, Obj/src_webclient.o(.text.webclient_read_line))<br>
<br>[Stack]<ul><li>Max Depth = 4928 
<li>Call Chain = webclient_read_line &rArr; webclient_recv.isra.0.constprop.7 &rArr; tls_cli_session_read  &rArr; mbedtls_ssl_read  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_recv.isra.0.constprop.7
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<li><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
</ul>
<p><strong><a name="[8a7]"></a>webclient_send_header</strong>(430 bytes, Stack size 24 btyes, Obj/src_webclient.o(.text.webclient_send_header))<br>
<br>[Stack]<ul><li>Max Depth = 4948 
<li>Call Chain = webclient_send_header &rArr; webclient_write &rArr; tls_cli_session_write  &rArr; mbedtls_ssl_write  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_write
<li><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_add
<li><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
<li><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post
</ul>
<p><strong><a name="[8b3]"></a>webnet_thread</strong>(230 bytes, Stack size 72 btyes, Obj/src_webnet.o(.text.webnet_thread))<br>
<br>[Stack]<ul><li>Max Depth = 5416 
<li>Call Chain = webnet_thread &rArr; webnet_sessions_handle_fds &rArr; _webnet_session_handle  &rArr; webnet_module_handle_uri  &rArr; _webnet_module_system_uri_post  &rArr; webnet_module_dirindex  &rArr; webnet_session_set_header  &rArr; webnet_module_handle_event  &rArr; _webnet_module_system_uri_physical  &rArr; webnet_module_upload  &rArr; webnet_module_upload_open.part.3  &rArr; _webnet_module_upload_handle.part.2  &rArr; webnet_session_read  &rArr; tls_srv_session_read  &rArr; mbedtls_ssl_read  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<li><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_create
<li><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_listen
<li><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_handle_event
<li><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_sessions_set_fds
<li><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<li><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_sessions_handle_fds
<li><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_create
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_destroy
</ul>
<p><strong><a name="[8ba]"></a>_webnet_request_copy_str</strong>(192 bytes, Stack size 0 btyes, Obj/src_wn_request.o(.text._webnet_request_copy_str))<br>
<p><strong><a name="[8bb]"></a>_webnet_request_parse_query</strong>(270 bytes, Stack size 36 btyes, Obj/src_wn_request.o(.text._webnet_request_parse_query))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = _webnet_request_parse_query &rArr; rt_malloc &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urldecode
</ul>
<br>[Called By]<ul>
<li><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_request_parse_method
<li><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_request_parse_post
</ul>
<p><strong><a name="[8c4]"></a>list_webnet</strong>(100 bytes, Stack size 44 btyes, Obj/src_wn_session.o(.text.list_webnet))<br>
<br>[Stack]<ul><li>Max Depth = 216 
<li>Call Chain = list_webnet &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<li><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
</ul>
<p><strong><a name="[8c5]"></a>_webnet_session_handle</strong>(264 bytes, Stack size 16 btyes, Obj/src_wn_session.o(.text._webnet_session_handle))<br>
<br>[Stack]<ul><li>Max Depth = 5284 
<li>Call Chain = _webnet_session_handle &rArr; webnet_module_handle_uri &rArr; _webnet_module_system_uri_post  &rArr; webnet_module_dirindex  &rArr; webnet_session_set_header  &rArr; webnet_module_handle_event  &rArr; _webnet_module_system_uri_physical  &rArr; webnet_module_upload  &rArr; webnet_module_upload_open.part.3  &rArr; _webnet_module_upload_handle.part.2  &rArr; webnet_session_read  &rArr; tls_srv_session_read  &rArr; mbedtls_ssl_read  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_srv_session_read
<li><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_handle_uri
<li><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_request_parse_post
<li><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_request_parse_method
<li><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_request_parse_header
<li><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmove
</ul>
<br>[Called By]<ul>
<li><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_sessions_handle_fds
</ul>
<p><strong><a name="[8da]"></a>_webnet_dofile_handle</strong>(124 bytes, Stack size 16 btyes, Obj/src_wn_module.o(.text._webnet_dofile_handle))<br>
<br>[Stack]<ul><li>Max Depth = 4932 
<li>Call Chain = _webnet_dofile_handle &rArr; webnet_session_write &rArr; tls_srv_session_write  &rArr; mbedtls_ssl_write  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<li><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<li><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<li><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_write
</ul>
<p><strong><a name="[8db]"></a>_webnet_module_system_uri_physical</strong>(52 bytes, Stack size 12 btyes, Obj/src_wn_module.o(.text._webnet_module_system_uri_physical))<br>
<br>[Stack]<ul><li>Max Depth = 5060 
<li>Call Chain = _webnet_module_system_uri_physical &rArr; webnet_module_upload &rArr; webnet_module_upload_open.part.3  &rArr; _webnet_module_upload_handle.part.2  &rArr; webnet_session_read  &rArr; tls_srv_session_read  &rArr; mbedtls_ssl_read  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_alias
<li><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_auth
<li><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_cgi
<li><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_upload
</ul>
<br>[Called By]<ul>
<li><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_handle_event
<li><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_handle_uri
</ul>
<p><strong><a name="[8dd]"></a>_webnet_module_system_uri_post</strong>(54 bytes, Stack size 12 btyes, Obj/src_wn_module.o(.text._webnet_module_system_uri_post))<br>
<br>[Stack]<ul><li>Max Depth = 5228 
<li>Call Chain = _webnet_module_system_uri_post &rArr; webnet_module_dirindex &rArr; webnet_session_set_header  &rArr; webnet_module_handle_event  &rArr; _webnet_module_system_uri_physical  &rArr; webnet_module_upload  &rArr; webnet_module_upload_open.part.3  &rArr; _webnet_module_upload_handle.part.2  &rArr; webnet_session_read  &rArr; tls_srv_session_read  &rArr; mbedtls_ssl_read  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_asp
<li><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_ssi
<li><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_dirindex
<li><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_system_dofile
</ul>
<br>[Called By]<ul>
<li><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_handle_event
<li><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_handle_uri
</ul>
<p><strong><a name="[8e0]"></a>_webnet_asp_dofile</strong>(692 bytes, Stack size 60 btyes, Obj/module_wn_module_asp.o(.text._webnet_asp_dofile))<br>
<br>[Stack]<ul><li>Max Depth = 5168 
<li>Call Chain = _webnet_asp_dofile &rArr; webnet_session_set_header &rArr; webnet_module_handle_event  &rArr; _webnet_module_system_uri_physical  &rArr; webnet_module_upload  &rArr; webnet_module_upload_open.part.3  &rArr; _webnet_module_upload_handle.part.2  &rArr; webnet_session_read  &rArr; tls_srv_session_read  &rArr; mbedtls_ssl_read  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_set_header
<li><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<li><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<li><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_write
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_begin_with
<li><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<li><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<li><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_printf
<li><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_get_root
<li><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</ul>
<br>[Called By]<ul>
<li><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_asp
</ul>
<p><strong><a name="[8eb]"></a>_webnet_module_upload_close</strong>(150 bytes, Stack size 20 btyes, Obj/module_wn_module_upload.o(.text._webnet_module_upload_close))<br>
<br>[Stack]<ul><li>Max Depth = 304 
<li>Call Chain = _webnet_module_upload_close &rArr; rt_free &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<p><strong><a name="[8ec]"></a>str_begin_with_strs</strong>(94 bytes, Stack size 40 btyes, Obj/module_wn_module_upload.o(.text.str_begin_with_strs))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = str_begin_with_strs &rArr; strncasecmp </ul>
<br>[Calls]<ul>
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</ul>
<br>[Called By]<ul>
<li><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_next_possible_boundary.isra.0
<li><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_module_upload_handle.part.2
</ul>
<p><strong><a name="[8ed]"></a>memstr</strong>(72 bytes, Stack size 24 btyes, Obj/module_wn_module_upload.o(.text.memstr))<br>
<br>[Calls]<ul>
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</ul>
<br>[Called By]<ul>
<li><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memstrs
<li><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_section
<li><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_module_upload_handle.part.2
</ul>
<p><strong><a name="[8ee]"></a>memstrs</strong>(178 bytes, Stack size 48 btyes, Obj/module_wn_module_upload.o(.text.memstrs))<br>
<br>[Stack]<ul><li>Max Depth = 356 
<li>Call Chain = memstrs &rArr; rt_malloc &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memstr
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<br>[Called By]<ul>
<li><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_next_possible_boundary.isra.0
<li><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_module_upload_handle.part.2
</ul>
<p><strong><a name="[8ef]"></a>_handle_section</strong>(132 bytes, Stack size 24 btyes, Obj/module_wn_module_upload.o(.text._handle_section))<br>
<br>[Stack]<ul><li>Max Depth = 332 
<li>Call Chain = _handle_section &rArr; rt_malloc &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memstr
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_module_upload_handle.part.2
</ul>
<p><strong><a name="[8f0]"></a>_next_possible_boundary.isra.0</strong>(140 bytes, Stack size 24 btyes, Obj/module_wn_module_upload.o(.text._next_possible_boundary.isra.0))<br>
<br>[Stack]<ul><li>Max Depth = 380 
<li>Call Chain = _next_possible_boundary.isra.0 &rArr; memstrs &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_begin_with_strs
<li><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memstrs
<li><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</ul>
<br>[Called By]<ul>
<li><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_module_upload_handle.part.2
</ul>
<p><strong><a name="[8f1]"></a>_webnet_module_upload_handle.part.2</strong>(1232 bytes, Stack size 96 btyes, Obj/module_wn_module_upload.o(.text._webnet_module_upload_handle.part.2))<br>
<br>[Stack]<ul><li>Max Depth = 5020 
<li>Call Chain = _webnet_module_upload_handle.part.2 &rArr; webnet_session_read &rArr; tls_srv_session_read  &rArr; mbedtls_ssl_read  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memstrs
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_next_possible_boundary.isra.0
<li><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_section
<li><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_begin_with_strs
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_begin_with
<li><a href="#[cd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
<li><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memstr
<li><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<li><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<li><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memmove
<li><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_read
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</ul>
<br>[Called By]<ul>
<li><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_module_upload_handle
<li><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_upload_open.part.3
</ul>
<p><strong><a name="[8f2]"></a>_webnet_module_upload_handle</strong>(16 bytes, Stack size 4 btyes, Obj/module_wn_module_upload.o(.text._webnet_module_upload_handle))<br>
<br>[Stack]<ul><li>Max Depth = 5024 
<li>Call Chain = _webnet_module_upload_handle &rArr; _webnet_module_upload_handle.part.2 &rArr; webnet_session_read  &rArr; tls_srv_session_read  &rArr; mbedtls_ssl_read  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_module_upload_handle.part.2
</ul>
<p><strong><a name="[8f3]"></a>webnet_module_upload_open.part.3</strong>(190 bytes, Stack size 24 btyes, Obj/module_wn_module_upload.o(.text.webnet_module_upload_open.part.3))<br>
<br>[Stack]<ul><li>Max Depth = 5044 
<li>Call Chain = webnet_module_upload_open.part.3 &rArr; _webnet_module_upload_handle.part.2 &rArr; webnet_session_read  &rArr; tls_srv_session_read  &rArr; mbedtls_ssl_read  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_begin_with
<li><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<li><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_module_upload_handle.part.2
</ul>
<br>[Called By]<ul>
<li><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_upload
</ul>
<p><strong><a name="[8fe]"></a>_webnet_ssi_sendfile</strong>(102 bytes, Stack size 28 btyes, Obj/module_wn_module_ssi.o(.text._webnet_ssi_sendfile))<br>
<br>[Stack]<ul><li>Max Depth = 4944 
<li>Call Chain = _webnet_ssi_sendfile &rArr; webnet_session_write &rArr; tls_srv_session_write  &rArr; mbedtls_ssl_write  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<li><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<li><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<li><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_write
<li><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</ul>
<br>[Called By]<ul>
<li><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_ssi_dofile
</ul>
<p><strong><a name="[8ff]"></a>_webnet_ssi_dofile</strong>(324 bytes, Stack size 52 btyes, Obj/module_wn_module_ssi.o(.text._webnet_ssi_dofile))<br>
<br>[Stack]<ul><li>Max Depth = 5160 
<li>Call Chain = _webnet_ssi_dofile &rArr; webnet_session_set_header &rArr; webnet_module_handle_event  &rArr; _webnet_module_system_uri_physical  &rArr; webnet_module_upload  &rArr; webnet_module_upload_open.part.3  &rArr; _webnet_module_upload_handle.part.2  &rArr; webnet_session_read  &rArr; tls_srv_session_read  &rArr; mbedtls_ssl_read  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_set_header
<li><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<li><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<li><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_get_physical_path
<li><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<li><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_write
<li><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_webnet_ssi_sendfile
</ul>
<br>[Called By]<ul>
<li><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_module_ssi
</ul>
<p><strong><a name="[902]"></a>asp_var_version</strong>(42 bytes, Stack size 12 btyes, Obj/samples_wn_sample.o(.text.asp_var_version))<br>
<br>[Stack]<ul><li>Max Depth = 4944 
<li>Call Chain = asp_var_version &rArr; webnet_session_printf &rArr; tls_srv_session_write  &rArr; mbedtls_ssl_write  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_printf
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[903]"></a>cgi_calc_handler</strong>(154 bytes, Stack size 20 btyes, Obj/samples_wn_sample.o(.text.cgi_calc_handler))<br>
<br>[Stack]<ul><li>Max Depth = 5128 
<li>Call Chain = cgi_calc_handler &rArr; webnet_session_set_header &rArr; webnet_module_handle_event  &rArr; _webnet_module_system_uri_physical  &rArr; webnet_module_upload  &rArr; webnet_module_upload_open.part.3  &rArr; _webnet_module_upload_handle.part.2  &rArr; webnet_session_read  &rArr; tls_srv_session_read  &rArr; mbedtls_ssl_read  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mime_get_type
<li><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_set_header
<li><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<li><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_write
<li><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_printf
<li><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_request_get_query
<li><a href="#[cd5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[904]"></a>cgi_hello_handler</strong>(68 bytes, Stack size 12 btyes, Obj/samples_wn_sample.o(.text.cgi_hello_handler))<br>
<br>[Stack]<ul><li>Max Depth = 5120 
<li>Call Chain = cgi_hello_handler &rArr; webnet_session_set_header &rArr; webnet_module_handle_event  &rArr; _webnet_module_system_uri_physical  &rArr; webnet_module_upload  &rArr; webnet_module_upload_open.part.3  &rArr; _webnet_module_upload_handle.part.2  &rArr; webnet_session_read  &rArr; tls_srv_session_read  &rArr; mbedtls_ssl_read  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mime_get_type
<li><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_set_header
<li><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<li><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_write
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[905]"></a>upload_done</strong>(60 bytes, Stack size 24 btyes, Obj/samples_wn_sample_upload.o(.text.upload_done))<br>
<br>[Stack]<ul><li>Max Depth = 5132 
<li>Call Chain = upload_done &rArr; webnet_session_set_header &rArr; webnet_module_handle_event  &rArr; _webnet_module_system_uri_physical  &rArr; webnet_module_upload  &rArr; webnet_module_upload_open.part.3  &rArr; _webnet_module_upload_handle.part.2  &rArr; webnet_session_read  &rArr; tls_srv_session_read  &rArr; mbedtls_ssl_read  &rArr; ssl_check_ctr_renegotiate  &rArr; mbedtls_ssl_renegotiate  &rArr; ssl_start_renegotiation  &rArr; mbedtls_ssl_handshake  &rArr; mbedtls_ssl_handshake_step  &rArr; mbedtls_ssl_handshake_server_step  &rArr; ssl_parse_client_hello  &rArr; mbedtls_debug_print_crt  &rArr; mbedtls_debug_print_ecp  &rArr; mbedtls_debug_print_ecp.part.1  &rArr; mbedtls_debug_print_mpi  &rArr; mbedtls_debug_print_mpi.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mime_get_type
<li><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<li><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_set_header
<li><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_printf
</ul>
<p><strong><a name="[906]"></a>upload_write</strong>(52 bytes, Stack size 16 btyes, Obj/samples_wn_sample_upload.o(.text.upload_write))<br>
<br>[Stack]<ul><li>Max Depth = 372 
<li>Call Chain = upload_write &rArr; write &rArr; fd_put  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_upload_get_userdata
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
</ul>
<p><strong><a name="[907]"></a>upload_close</strong>(28 bytes, Stack size 4 btyes, Obj/samples_wn_sample_upload.o(.text.upload_close))<br>
<br>[Stack]<ul><li>Max Depth = 356 
<li>Call Chain = upload_close &rArr; close &rArr; fd_put  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_upload_get_userdata
<li><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[909]"></a>upload_open</strong>(150 bytes, Stack size 20 btyes, Obj/samples_wn_sample_upload.o(.text.upload_open))<br>
<br>[Stack]<ul><li>Max Depth = 1528 
<li>Call Chain = upload_open &rArr; webnet_session_close &rArr; tls_srv_session_close  &rArr; mbedtls_ssl_close_notify  &rArr; mbedtls_ssl_send_alert_message  &rArr; mbedtls_ssl_write_record  &rArr; mbedtls_ssl_flush_output  &rArr; mbedtls_debug_print_msg  &rArr; vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_name
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_upload_get_content_type
<li><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_upload_get_filename
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<li><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webnet_session_close
</ul>
<p><strong><a name="[90a]"></a>dma_channel_intr_enable</strong>(68 bytes, Stack size 0 btyes, bsp_dma.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_intr_status_get
<li><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_intr_status
<li><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_intr_enable
</ul>
<p><strong><a name="[90f]"></a>dma_channel_intr_status_get.part.0</strong>(44 bytes, Stack size 0 btyes, bsp_dma.o(.fast))<br>
<p><strong><a name="[915]"></a>gpio_pull_mode_set.part.0</strong>(54 bytes, Stack size 0 btyes, bsp_gpio.o(.text.gpio_pull_mode_set.part.0))<br>
<br>[Called By]<ul>
<li><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_hw_init
</ul>
<p><strong><a name="[92d]"></a>clock_source_set.part.0</strong>(172 bytes, Stack size 0 btyes, bsp_scu.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_set
<li><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_source_set
<li><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_normal
</ul>
<p><strong><a name="[935]"></a>scu_emmc_clock_set.constprop.1</strong>(124 bytes, Stack size 0 btyes, bsp_scu.o(.fast))<br>
<p><strong><a name="[9a6]"></a>hash_dma_write</strong>(96 bytes, Stack size 0 btyes, crypto_hash.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_update
</ul>
<p><strong><a name="[9b1]"></a>get_valid_bits.part.1</strong>(104 bytes, Stack size 0 btyes, crypto_pke.o(.text.get_valid_bits.part.1))<br>
<br>[Called By]<ul>
<li><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_mul
<li><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_pre_calc_mont_H
<li><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_mod
</ul>
<p><strong><a name="[9b2]"></a>Bigint_Check_1.part.3</strong>(36 bytes, Stack size 0 btyes, crypto_pke.o(.text.Bigint_Check_1.part.3))<br>
<br>[Called By]<ul>
<li><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prime_Test_Miller_Rabin
</ul>
<p><strong><a name="[9b3]"></a>Bigint_Check_p_1.part.4</strong>(46 bytes, Stack size 0 btyes, crypto_pke.o(.text.Bigint_Check_p_1.part.4))<br>
<br>[Called By]<ul>
<li><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prime_Test_Miller_Rabin
</ul>
<p><strong><a name="[9e9]"></a>RSA_Get_E2.part.0</strong>(144 bytes, Stack size 36 btyes, crypto_rsa_osr.o(.text.RSA_Get_E2.part.0))<br>
<br>[Stack]<ul><li>Max Depth = 88 
<li>Call Chain = RSA_Get_E2.part.0 &rArr; RSA_Get_E1 &rArr; rand_get  &rArr; get_rand  </ul>
<br>[Calls]<ul>
<li><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_Get_E1
<li><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_BigNumCmp
</ul>
<br>[Called By]<ul>
<li><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GetKey
<li><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GetCRTKey
<li><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_pq_GetKey
</ul>
<p><strong><a name="[a14]"></a>symm_param_cfg</strong>(162 bytes, Stack size 4 btyes, crypto_crypto.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</ul>
<br>[Called By]<ul>
<li><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_fifo_enable
<li><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bridge_enable
<li><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bridge_prd_enable
<li><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_dma_start
</ul>
<p><strong><a name="[a35]"></a>norc_port_switch_cmd.part.0</strong>(48 bytes, Stack size 4 btyes, norflash_norflash.o(.text.norc_port_switch_cmd.part.0))<br>
<br>[Calls]<ul>
<li><a href="#[c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_irq_save
</ul>
<br>[Called By]<ul>
<li><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_hw_init
<li><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_byte_write
<li><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_write
<li><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_sector_erase
</ul>
<p><strong><a name="[a36]"></a>norc_port_switch_xip.part.1</strong>(48 bytes, Stack size 4 btyes, norflash_norflash.o(.text.norc_port_switch_xip.part.1))<br>
<br>[Calls]<ul>
<li><a href="#[c81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_irq_restore
</ul>
<br>[Called By]<ul>
<li><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_hw_init
<li><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_byte_write
<li><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_write
<li><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_sector_erase
</ul>
<p><strong><a name="[a42]"></a>nftl_get_free</strong>(108 bytes, Stack size 0 btyes, norflash_nftl.o(.fast))<br>
<p><strong><a name="[a44]"></a>nftl_garbage_collection</strong>(854 bytes, Stack size 0 btyes, norflash_nftl.o(.fast))<br>
<p><strong><a name="[a45]"></a>nftl_rebuild</strong>(1368 bytes, Stack size 0 btyes, norflash_nftl.o(.fast))<br>
<p><strong><a name="[a4d]"></a>usb_fifo_read</strong>(136 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_fifo_read))<br>
<p><strong><a name="[a4e]"></a>usb_fifo_write</strong>(150 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[a4f]"></a>gpio_set1.part.0</strong>(14 bytes, Stack size 0 btyes, usb_usb.o(.text.gpio_set1.part.0))<br>
<p><strong><a name="[a50]"></a>writex</strong>(140 bytes, Stack size 0 btyes, usb_usb.o(.text.writex))<br>
<p><strong><a name="[a51]"></a>clock</strong>(64 bytes, Stack size 0 btyes, usb_usb.o(.text.clock))<br>
<p><strong><a name="[a52]"></a>i2c_write</strong>(184 bytes, Stack size 0 btyes, usb_usb.o(.text.i2c_write))<br>
<p><strong><a name="[b13]"></a>ascii_to_dec</strong>(210 bytes, Stack size 60 btyes, common_log.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_st_data
</ul>
<p><strong><a name="[b17]"></a>log_st_data.part.0</strong>(138 bytes, Stack size 184 btyes, common_log.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 288 
<li>Call Chain = log_st_data.part.0 &rArr; log_write &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<li><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_write
</ul>
<p><strong><a name="[b1c]"></a>mem_hw_internal</strong>(110 bytes, Stack size 4 btyes, common_memcpy_hw.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = mem_hw_internal &rArr; dma_intr_status </ul>
<br>[Calls]<ul>
<li><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_intr_status
<li><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_intr_clear
</ul>
<br>[Called By]<ul>
<li><a href="#[b1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<li><a href="#[b1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_hw
</ul>
<p><strong><a name="[b20]"></a>perf_timer_handler</strong>(92 bytes, Stack size 0 btyes, common_perf.o(.text.perf_timer_handler))<br>
<p><strong><a name="[b25]"></a>mp_setup_update</strong>(418 bytes, Stack size 0 btyes, component_mp.o(.text.mp_setup_update))<br>
<p><strong><a name="[b2a]"></a>snfc_port_switch.part.0</strong>(46 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.snfc_port_switch.part.0))<br>
<p><strong><a name="[b3e]"></a>sata_is_busy.part.2</strong>(34 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[b60]"></a>sata_sdb_send_manual</strong>(386 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[bbb]"></a>xhci_halt.part.1</strong>(24 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_halt.part.1))<br>
<p><strong><a name="[bbc]"></a>xhci_configure_endpoint.constprop.4</strong>(198 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_configure_endpoint.constprop.4))<br>
<p><strong><a name="[be2]"></a>xhci_link_segments.part.1</strong>(62 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.text.xhci_link_segments.part.1))<br>
<p><strong><a name="[c39]"></a>show_chunk_snapshot</strong>(32 bytes, Stack size 0 btyes, cklib_mm_leak.o(.text.show_chunk_snapshot))<br>
<p><strong><a name="[c3a]"></a>traverse_one_list</strong>(104 bytes, Stack size 0 btyes, cklib_mm_leak.o(.text.traverse_one_list))<br>
<p><strong><a name="[c3b]"></a>search_nearest</strong>(34 bytes, Stack size 0 btyes, cklib_mm_leak.o(.text.search_nearest))<br>
<p><strong><a name="[c3c]"></a>show_corrupted_chunk</strong>(114 bytes, Stack size 0 btyes, cklib_mm_leak.o(.text.show_corrupted_chunk))<br>
<p><strong><a name="[c4e]"></a>print_number</strong>(524 bytes, Stack size 108 btyes, cklib_printf.o(.text.print_number))<br>
<br>[Stack]<ul><li>Max Depth = 132 
<li>Call Chain = print_number &rArr; __umoddi3 </ul>
<br>[Calls]<ul>
<li><a href="#[ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__umoddi3
<li><a href="#[c9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivdi3
</ul>
<br>[Called By]<ul>
<li><a href="#[c4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</ul>
<p><strong><a name="[c8d]"></a>intr_cache_flush.part.0</strong>(30 bytes, Stack size 4 btyes, ck803_interrupt.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[c7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_dcache_clean_invalid_range
<li><a href="#[c7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_dcache_invalid_range
</ul>
<br>[Called By]<ul>
<li><a href="#[c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_isr_connect
<li><a href="#[c93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_connect
<li><a href="#[c94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_disconnect
<li><a href="#[c8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_hw_init
</ul>
<p><strong><a name="[c90]"></a>intr_isr_connect</strong>(40 bytes, Stack size 4 btyes, ck803_interrupt.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = intr_isr_connect &rArr; intr_cache_flush.part.0 </ul>
<br>[Calls]<ul>
<li><a href="#[c8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_cache_flush.part.0
</ul>
<p><strong><a name="[ca1]"></a>_fpadd_parts</strong>(324 bytes, Stack size 16 btyes, _addsub_sf.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[ca2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__addsf3
<li><a href="#[ca3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subsf3
</ul>
<p><strong><a name="[caf]"></a>_fpadd_parts</strong>(706 bytes, Stack size 44 btyes, _addsub_df.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__adddf3
<li><a href="#[cb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subdf3
</ul>
</body>
</html>
