<!DOCTYPE html PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
<title>Static Call Graph - [Obj/rt-thread.elf]</title>
</head>
<body><hr>
<h1>Static Call Graph for image Obj/rt-thread.elf</h1><hr>
<br>
<p>#&#060CALLGRAPH&#062# Csky GNU Linker<br>
<h3>Maximum Stack Usage = 864 bytes + Unknown(Cycles, Untraceable Function Pointers)</h3>
<h3>Call Chain for Maximum Stack Depth:</h3>
cmd_ping &rArr; ping &rArr; lwip_setsockopt  &rArr; igmp_leavegroup  &rArr; igmp_leavegroup_netif  &rArr; igmp_send  &rArr; ip4_output_if_opt  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<h3>Mutually Recursive functions</h3><ul>
<li><a href="#[112]">rt_assert_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f4]">rt_kprintf</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b2]">rt_device_write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[112]">rt_assert_handler</a><br><li><a href="#[136]">rt_schedule</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f5]">list_thread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f4]">object_name_maxlen</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13a]">rt_exit_critical</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[136]">rt_schedule</a><br><li><a href="#[3c4]">lwip_sendto</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c5]">lwip_send</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c4]">lwip_sendto</a><br><li><a href="#[301]">msh_exec</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[315]">msh_exec_script</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[301]">msh_exec</a><br><li><a href="#[6ae]">ahci_hba_reset</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6c7]">ahci_error_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6c6]">ahci_error_recover</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6ae]">ahci_hba_reset</a><br><li><a href="#[185]">copydir</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[185]">copydir</a><br><li><a href="#[383]">netconn_drain</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[383]">netconn_drain</a><br></ul><h3>Function Pointers</h3><ul>
<li><a href="#[0]">data_print.constprop.1</a> from Obj/entry_ipraw.o(.text.data_print.constprop.1) referenced from Obj/entry_ipraw.o(.text.iprawtest)
<li><a href="#[3]">main</a> from Obj/entry_main.o(.text.startup.main) referenced from Obj/src_components.o(.text.main_thread_entry)
<li><a href="#[3c]">core_timer_init</a> from Obj/drivers_drv_ctimer.o(.text.core_timer_init) referenced from Obj/drivers_system.o(.fast)
<li><a href="#[54]">rt_hw_interrupt_init</a> from Obj/drivers_drv_intr.o(.text.rt_hw_interrupt_init) referenced from Obj/drivers_system.o(.text.sys_hw_init)
<li><a href="#[55]">rt_hw_interrupt_mask</a> from Obj/drivers_drv_intr.o(.fast) referenced from Obj/drivers_drv_ctimer.o(.text.core_timer_init)
<li><a href="#[56]">rt_hw_interrupt_umask</a> from Obj/drivers_drv_intr.o(.fast) referenced from Obj/drivers_drv_ctimer.o(.text.core_timer_init)
<li><a href="#[57]">rt_hw_interrupt_clear</a> from Obj/drivers_drv_intr.o(.fast) referenced from Obj/drivers_drv_ctimer.o(.fast)
<li><a href="#[58]">rt_hw_interrupt_install</a> from Obj/drivers_drv_intr.o(.fast) referenced from Obj/drivers_drv_ctimer.o(.text.core_timer_init)
<li><a href="#[5b]">drv_ata_trim</a> from Obj/drivers_drv_sata.o(.fast) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[5d]">drv_ata_init</a> from Obj/drivers_drv_sata.o(.text.drv_ata_init) referenced from Obj/drivers_drv_sata.o(.text.drv_ata_reset)
<li><a href="#[5e]">drv_ata_reset</a> from Obj/drivers_drv_sata.o(.text.drv_ata_reset) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[79]">os_critical_enter</a> from critical.o(.text) referenced from fputs.o(.text)
<li><a href="#[7a]">fputc</a> from Obj/drivers_retarget.o(.text.fputc) referenced from perror.o(.text)
<li><a href="#[7c]">rt_hw_console_output</a> from Obj/src_kservice.o(.text.rt_hw_console_output) referenced from Obj/src_kservice.o(.text.rt_kputs)
<li><a href="#[7f]">os_critical_exit</a> from critical.o(.text) referenced from fputs.o(.text)
<li><a href="#[83]">sys_hw_init</a> from Obj/drivers_system.o(.text.sys_hw_init) referenced from Obj/drivers_system.o(.fast)
<li><a href="#[84]">rt_hw_board_init</a> from Obj/drivers_system.o(.text.rt_hw_board_init) referenced from Obj/src_components.o(.text.rtthread_startup)
<li><a href="#[85]">system_init</a> from Obj/drivers_system.o(.fast) referenced from Obj/ck803_startup_gcc.o(.text)
<li><a href="#[8b]">marvell_phy_init</a> from Obj/src_tih_phy_m88e1512.o(.text.marvell_phy_init) referenced from Obj/src_tih_phy_m88e1512.o(.text.marvell_phy_speed_duplex_change)
<li><a href="#[97]">rtl8211_phy_speed_duplex_change</a> from Obj/src_tih_phy_rtl8211.o(.text.rtl8211_phy_speed_duplex_change) referenced from Obj/src_tih_phy_rtl8211.o(.text.rtl8211_phy_init)
<li><a href="#[9a]">rt_tick_get</a> from Obj/src_clock.o(.fast) referenced from Obj/src_ipc.o(.fast)
<li><a href="#[9c]">rt_tick_increase</a> from Obj/src_clock.o(.fast) referenced from Obj/drivers_drv_ctimer.o(.fast)
<li><a href="#[9d]">rt_tick_from_millisecond</a> from Obj/src_clock.o(.fast) referenced from Obj/src_thread.o(.fast)
<li><a href="#[a3]">rt_components_board_init</a> from Obj/src_components.o(.text.rt_components_board_init) referenced from Obj/drivers_system.o(.text.rt_hw_board_init)
<li><a href="#[a5]">rt_application_init</a> from Obj/src_components.o(.text.rt_application_init) referenced from Obj/src_components.o(.text.rtthread_startup)
<li><a href="#[a6]">rtthread_startup</a> from Obj/src_components.o(.text.rtthread_startup) referenced from Obj/src_components.o(.text.entry)
<li><a href="#[a7]">entry</a> from Obj/src_components.o(.text.entry) referenced from Obj/ck803_startup_gcc.o(.text)
<li><a href="#[aa]">rt_device_find</a> from Obj/src_device.o(.fast) referenced from Obj/src_device.o(.text.rt_device_register)
<li><a href="#[ab]">rt_device_register</a> from Obj/src_device.o(.text.rt_device_register) referenced from Obj/sata_sata.o(.text.rt_ata_register)
<li><a href="#[ae]">rt_device_init</a> from Obj/src_device.o(.text.rt_device_init) referenced from Obj/arch_sys_arch.o(.text.netif_device_init)
<li><a href="#[af]">rt_device_open</a> from Obj/src_device.o(.fast) referenced from Obj/src_kservice.o(.text.rt_console_set_device)
<li><a href="#[b0]">rt_device_close</a> from Obj/src_device.o(.fast) referenced from Obj/src_kservice.o(.text.rt_console_set_device)
<li><a href="#[b1]">rt_device_read</a> from Obj/src_device.o(.fast) referenced from Obj/elmfat_dfs_elm.o(.fast)
<li><a href="#[b2]">rt_device_write</a> from Obj/src_device.o(.fast) referenced from Obj/drivers_retarget.o(.text.fputc)
<li><a href="#[b3]">rt_device_control</a> from Obj/src_device.o(.fast) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[b4]">rt_device_set_rx_indicate</a> from Obj/src_device.o(.fast) referenced from Obj/serial_serial.o(.text.serial_fops_close)
<li><a href="#[b7]">rt_thread_idle_init</a> from Obj/src_idle.o(.text.rt_thread_idle_init) referenced from Obj/src_components.o(.text.rtthread_startup)
<li><a href="#[b9]">rt_thread_idle_excute</a> from Obj/src_idle.o(.fast) referenced from Obj/src_idle.o(.fast)
<li><a href="#[bc]">rt_sem_init</a> from Obj/src_ipc.o(.fast) referenced from Obj/src_mem.o(.text.rt_system_heap_init)
<li><a href="#[bd]">rt_sem_detach</a> from Obj/src_ipc.o(.fast) referenced from Obj/arch_sys_arch.o(.text.lwip_system_init)
<li><a href="#[be]">rt_sem_create</a> from Obj/src_ipc.o(.fast) referenced from Obj/arch_sys_arch.o(.fast)
<li><a href="#[bf]">rt_sem_delete</a> from Obj/src_ipc.o(.fast) referenced from Obj/arch_sys_arch.o(.fast)
<li><a href="#[c0]">rt_sem_take</a> from Obj/src_ipc.o(.fast) referenced from Obj/src_ipc.o(.fast)
<li><a href="#[c2]">rt_sem_release</a> from Obj/src_ipc.o(.fast) referenced from Obj/src_mem.o(.fast)
<li><a href="#[c4]">rt_mutex_init</a> from Obj/src_ipc.o(.fast) referenced from Obj/src_dfs.o(.text.dfs_init)
<li><a href="#[c6]">rt_mutex_create</a> from Obj/src_ipc.o(.fast) referenced from Obj/elmfat_dfs_elm.o(.text.ff_cre_syncobj)
<li><a href="#[c7]">rt_mutex_delete</a> from Obj/src_ipc.o(.fast) referenced from Obj/elmfat_dfs_elm.o(.text.ff_del_syncobj)
<li><a href="#[c8]">rt_mutex_take</a> from Obj/src_ipc.o(.fast) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[c9]">rt_mutex_release</a> from Obj/src_ipc.o(.fast) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[d2]">rt_mb_init</a> from Obj/src_ipc.o(.fast) referenced from Obj/netif_ethernetif.o(.text.eth_system_device_init_private)
<li><a href="#[d4]">rt_mb_create</a> from Obj/src_ipc.o(.fast) referenced from Obj/arch_sys_arch.o(.fast)
<li><a href="#[d5]">rt_mb_delete</a> from Obj/src_ipc.o(.fast) referenced from Obj/arch_sys_arch.o(.fast)
<li><a href="#[d6]">rt_mb_send_wait</a> from Obj/src_ipc.o(.fast) referenced from Obj/src_ipc.o(.fast)
<li><a href="#[d7]">rt_mb_send</a> from Obj/src_ipc.o(.fast) referenced from Obj/arch_sys_arch.o(.fast)
<li><a href="#[d8]">rt_mb_recv</a> from Obj/src_ipc.o(.fast) referenced from Obj/arch_sys_arch.o(.fast)
<li><a href="#[dc]">rt_mq_delete</a> from Obj/src_ipc.o(.fast) referenced from Obj/src_ipc.o(.fast)
<li><a href="#[e6]">rt_interrupt_get_nest</a> from Obj/src_irq.o(.fast) referenced from Obj/src_idle.o(.fast)
<li><a href="#[e7]">print_number</a> from Obj/src_kservice.o(.text.print_number) referenced from Obj/src_kservice.o(.text.rt_vsnprintf)
<li><a href="#[e9]">rt_vsnprintf</a> from Obj/src_kservice.o(.text.rt_vsnprintf) referenced from Obj/src_kservice.o(.text.rt_snprintf)
<li><a href="#[ea]">rt_snprintf</a> from Obj/src_kservice.o(.text.rt_snprintf) referenced from Obj/src_dfs.o(.text.dfs_normalize_path)
<li><a href="#[ed]">vsprintf</a> from cklib_printf.o(.text.vsprintf) referenced from common_log.o(.fast)
<li><a href="#[ef]">sprintf</a> from cklib_printf.o(.text.sprintf) referenced from common_log.o(.fast)
<li><a href="#[f0]">rt_console_get_device</a> from Obj/src_kservice.o(.text.rt_console_get_device) referenced from Obj/drivers_retarget.o(.text.fputc)
<li><a href="#[f1]">rt_console_set_device</a> from Obj/src_kservice.o(.text.rt_console_set_device) referenced from Obj/drivers_system.o(.text.rt_hw_board_init)
<li><a href="#[7c]">rt_hw_console_output</a> from Obj/src_kservice.o(.text.rt_hw_console_output) referenced from Obj/src_kservice.o(.text.rt_kputs)
<li><a href="#[f3]">puts</a> from Obj/src_kservice.o(.text.rt_kputs) referenced from sata_host_ahci.o(.fast)
<li><a href="#[f4]">rt_kprintf</a> from Obj/src_kservice.o(.text.rt_kprintf) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth0_init)
<li><a href="#[f5]">printf</a> from cklib_printf.o(.text.printf) referenced from crypto_crypto.o(.fast)
<li><a href="#[f6]">rt_show_version</a> from Obj/src_kservice.o(.text.rt_show_version) referenced from Obj/src_components.o(.text.rtthread_startup)
<li><a href="#[f7]">xmem_init</a> from Obj/src_kservice.o(.text.xmem_init) referenced from Obj/drivers_system.o(.text.sys_hw_init)
<li><a href="#[f8]">rt_set_errno</a> from Obj/src_kservice.o(.fast) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_write)
<li><a href="#[f9]">_rt_errno</a> from Obj/src_kservice.o(.fast) referenced from Obj/api_sockets.o(.fast)
<li><a href="#[fa]">rt_memset</a> from Obj/src_kservice.o(.fast) referenced from Obj/drivers_drv_i2c.o(.text.drv_i2c_init)
<li><a href="#[fb]">rt_memcpy</a> from Obj/src_kservice.o(.fast) referenced from Obj/src_ipc.o(.fast)
<li><a href="#[fc]">rt_memmove</a> from Obj/src_kservice.o(.fast) referenced from Obj/finsh_shell.o(.text.finsh_thread_entry)
<li><a href="#[fe]">rt_memcmp</a> from Obj/src_kservice.o(.fast) referenced from Obj/ntp_ntp.o(.text.ntp_get_time)
<li><a href="#[ff]">memcmp</a> from Obj/src_kservice.o(.fast) referenced from Obj/netif_ethernet.o(.fast)
<li><a href="#[101]">strstr</a> from Obj/src_kservice.o(.fast) referenced from Obj/finsh_msh_file.o(.text.msh_exec_script)
<li><a href="#[104]">rt_strncpy</a> from Obj/src_kservice.o(.fast) referenced from Obj/src_object.o(.fast)
<li><a href="#[105]">strncpy</a> from Obj/minilibc_string.o(.fast) referenced from Obj/src_dfs_posix.o(.fast)
<li><a href="#[106]">rt_strncmp</a> from Obj/src_kservice.o(.fast) referenced from Obj/src_device.o(.fast)
<li><a href="#[107]">strncmp</a> from Obj/minilibc_string.o(.fast) referenced from Obj/netif_ethernetif.o(.text.set_if)
<li><a href="#[108]">rt_strcmp</a> from Obj/src_kservice.o(.fast) referenced from Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_lookup)
<li><a href="#[10a]">rt_strlen</a> from Obj/src_kservice.o(.fast) referenced from Obj/elmfat_dfs_elm.o(.text.dfs_elm_getdents)
<li><a href="#[10b]">strlen</a> from Obj/src_kservice.o(.fast) referenced from Obj/drivers_drv_eth.o(.fast)
<li><a href="#[10c]">rt_strdup</a> from Obj/src_kservice.o(.fast) referenced from Obj/src_dfs.o(.text.dfs_normalize_path)
<li><a href="#[110]">__rt_ffs</a> from Obj/src_kservice.o(.fast) referenced from Obj/src_scheduler.o(.fast)
<li><a href="#[112]">rt_assert_handler</a> from Obj/src_kservice.o(.fast) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[114]">memset</a> from Obj/src_kservice.o(.fast) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth0_init)
<li><a href="#[116]">memcpy</a> from Obj/src_kservice.o(.fast) referenced from Obj/elmfat_dfs_elm.o(.text.get_fattime)
<li><a href="#[117]">list_mem</a> from Obj/src_mem.o(.text.list_mem) referenced from Obj/finsh_msh_cmd.o(.text.cmd_free)
<li><a href="#[118]">plug_holes</a> from Obj/src_mem.o(.fast) referenced from Obj/src_mem.o(.fast)
<li><a href="#[119]">rt_system_heap_init</a> from Obj/src_mem.o(.text.rt_system_heap_init) referenced from Obj/drivers_system.o(.text.rt_hw_board_init)
<li><a href="#[11c]">rt_malloc</a> from Obj/src_mem.o(.fast) referenced from Obj/src_ipc.o(.fast)
<li><a href="#[11d]">rt_calloc</a> from Obj/src_mem.o(.fast) referenced from Obj/src_select.o(.fast)
<li><a href="#[11e]">rt_free</a> from Obj/src_mem.o(.fast) referenced from Obj/src_idle.o(.fast)
<li><a href="#[11f]">rt_realloc</a> from Obj/src_mem.o(.fast) referenced from Obj/src_dfs.o(.text.fd_new)
<li><a href="#[123]">rt_memheap_alloc</a> from Obj/src_memheap.o(.fast) referenced from Obj/src_memheap.o(.fast)
<li><a href="#[124]">rt_memheap_free</a> from Obj/src_memheap.o(.fast) referenced from Obj/src_memheap.o(.fast)
<li><a href="#[125]">rt_memheap_realloc</a> from Obj/src_memheap.o(.fast) referenced from Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_write)
<li><a href="#[12c]">rt_object_get_information</a> from Obj/src_object.o(.fast) referenced from Obj/src_device.o(.fast)
<li><a href="#[12d]">rt_object_init</a> from Obj/src_object.o(.fast) referenced from Obj/src_device.o(.text.rt_device_register)
<li><a href="#[12e]">rt_object_detach</a> from Obj/src_object.o(.fast) referenced from Obj/src_ipc.o(.fast)
<li><a href="#[12f]">rt_object_allocate</a> from Obj/src_object.o(.fast) referenced from Obj/src_ipc.o(.fast)
<li><a href="#[130]">rt_object_delete</a> from Obj/src_object.o(.fast) referenced from Obj/src_idle.o(.fast)
<li><a href="#[131]">rt_object_is_systemobject</a> from Obj/src_object.o(.fast) referenced from Obj/src_idle.o(.fast)
<li><a href="#[134]">rt_system_scheduler_init</a> from Obj/src_scheduler.o(.text.rt_system_scheduler_init) referenced from Obj/src_components.o(.text.rtthread_startup)
<li><a href="#[135]">rt_system_scheduler_start</a> from Obj/src_scheduler.o(.text.rt_system_scheduler_start) referenced from Obj/src_components.o(.text.rtthread_startup)
<li><a href="#[136]">rt_schedule</a> from Obj/src_scheduler.o(.fast) referenced from Obj/src_ipc.o(.fast)
<li><a href="#[137]">rt_schedule_insert_thread</a> from Obj/src_scheduler.o(.fast) referenced from Obj/src_thread.o(.fast)
<li><a href="#[138]">rt_schedule_remove_thread</a> from Obj/src_scheduler.o(.fast) referenced from Obj/src_thread.o(.text.rt_thread_exit)
<li><a href="#[139]">rt_enter_critical</a> from Obj/src_scheduler.o(.fast) referenced from Obj/src_device.o(.fast)
<li><a href="#[13a]">rt_exit_critical</a> from Obj/src_scheduler.o(.fast) referenced from Obj/src_device.o(.fast)
<li><a href="#[13e]">_rt_thread_init.isra.0</a> from Obj/src_thread.o(.text._rt_thread_init.isra.0) referenced from Obj/src_thread.o(.text.rt_thread_init)
<li><a href="#[13f]">rt_thread_init</a> from Obj/src_thread.o(.text.rt_thread_init) referenced from Obj/src_idle.o(.text.rt_thread_idle_init)
<li><a href="#[140]">rt_thread_create</a> from Obj/src_thread.o(.text.rt_thread_create) referenced from Obj/arch_sys_arch.o(.text.sys_thread_new)
<li><a href="#[144]">rt_thread_self</a> from Obj/src_thread.o(.fast) referenced from Obj/src_clock.o(.fast)
<li><a href="#[146]">rt_thread_delete</a> from Obj/src_thread.o(.fast) referenced from Obj/src_thread.o(.fast)
<li><a href="#[147]">rt_thread_yield</a> from Obj/src_thread.o(.fast) referenced from Obj/src_clock.o(.fast)
<li><a href="#[148]">rt_thread_suspend</a> from Obj/src_thread.o(.fast) referenced from Obj/src_ipc.o(.fast)
<li><a href="#[149]">rt_thread_sleep</a> from Obj/src_thread.o(.fast) referenced from Obj/src_thread.o(.fast)
<li><a href="#[14a]">rt_thread_delay</a> from Obj/src_thread.o(.fast) referenced from Obj/rtc_rtc.o(.text.ntp_sync_thread_enrty)
<li><a href="#[14b]">rt_thread_mdelay</a> from Obj/src_thread.o(.fast) referenced from Obj/entry_ipraw.o(.text.iprawtest)
<li><a href="#[14c]">rt_thread_resume</a> from Obj/src_thread.o(.fast) referenced from Obj/src_ipc.o(.fast)
<li><a href="#[14d]">rt_thread_startup</a> from Obj/src_thread.o(.fast) referenced from Obj/src_idle.o(.text.rt_thread_idle_init)
<li><a href="#[14e]">rt_thread_control</a> from Obj/src_thread.o(.fast) referenced from Obj/src_ipc.o(.fast)
<li><a href="#[14f]">rt_thread_find</a> from Obj/src_thread.o(.fast) referenced from Obj/netif_ethernetif.o(.text.eth_device_init_with_flag)
<li><a href="#[151]">rt_system_timer_thread_init</a> from Obj/src_timer.o(.text.rt_system_timer_thread_init) referenced from Obj/src_components.o(.text.rtthread_startup)
<li><a href="#[152]">rt_timer_init</a> from Obj/src_timer.o(.fast) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth0_init)
<li><a href="#[153]">rt_timer_detach</a> from Obj/src_timer.o(.fast) referenced from Obj/src_thread.o(.text.rt_thread_exit)
<li><a href="#[156]">rt_timer_start</a> from Obj/src_timer.o(.fast) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth0_init)
<li><a href="#[157]">rt_timer_stop</a> from Obj/src_timer.o(.fast) referenced from Obj/src_thread.o(.fast)
<li><a href="#[158]">rt_timer_control</a> from Obj/src_timer.o(.fast) referenced from Obj/src_ipc.o(.fast)
<li><a href="#[159]">rt_timer_check</a> from Obj/src_timer.o(.fast) referenced from Obj/src_clock.o(.fast)
<li><a href="#[15b]">rt_system_timer_init</a> from Obj/src_timer.o(.fast) referenced from Obj/src_components.o(.text.rtthread_startup)
<li><a href="#[161]">rt_hw_stack_init</a> from Obj/ck803_stack_ck803.o(.fast) referenced from Obj/src_thread.o(.text._rt_thread_init.isra.0)
<li><a href="#[162]">rt_hw_interrupt_disable</a> from Obj/ck803_contex_ck803_gcc.o(.text) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[163]">rt_hw_interrupt_enable</a> from Obj/ck803_contex_ck803_gcc.o(.text) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[165]">rt_hw_context_switch_to</a> from Obj/ck803_contex_ck803_gcc.o(.text) referenced from Obj/src_scheduler.o(.text.rt_system_scheduler_start)
<li><a href="#[166]">rt_hw_context_switch_interrupt</a> from Obj/ck803_contex_ck803_gcc.o(.text) referenced from Obj/src_scheduler.o(.fast)
<li><a href="#[167]">rt_hw_context_switch</a> from Obj/ck803_contex_ck803_gcc.o(.text) referenced from Obj/src_scheduler.o(.fast)
<li><a href="#[16e]">rt_hw_show_memory</a> from Obj/common_showmem.o(.text.rt_hw_show_memory) referenced from Obj/common_showmem.o(.text.rt_show_memory)
<li><a href="#[172]">dfs_lock</a> from Obj/src_dfs.o(.fast) referenced from Obj/src_dfs.o(.fast)
<li><a href="#[173]">fd_new</a> from Obj/src_dfs.o(.text.fd_new) referenced from Obj/src_dfs_posix.o(.text.mkdir)
<li><a href="#[174]">dfs_subdir</a> from Obj/src_dfs.o(.text.dfs_subdir) referenced from Obj/src_dfs_file.o(.text.dfs_file_open)
<li><a href="#[175]">dfs_normalize_path</a> from Obj/src_dfs.o(.text.dfs_normalize_path) referenced from Obj/src_dfs.o(.fast)
<li><a href="#[176]">dfs_unlock</a> from Obj/src_dfs.o(.fast) referenced from Obj/src_dfs_posix.o(.text.chdir)
<li><a href="#[177]">fd_get</a> from Obj/src_dfs.o(.fast) referenced from Obj/src_dfs_posix.o(.text.mkdir)
<li><a href="#[178]">fd_put</a> from Obj/src_dfs.o(.fast) referenced from Obj/src_dfs_posix.o(.text.mkdir)
<li><a href="#[179]">fd_is_open</a> from Obj/src_dfs.o(.fast) referenced from Obj/src_dfs_file.o(.text.dfs_file_open)
<li><a href="#[17b]">dfs_file_open</a> from Obj/src_dfs_file.o(.text.dfs_file_open) referenced from Obj/src_dfs_file.o(.text.cat)
<li><a href="#[17c]">dfs_file_close</a> from Obj/src_dfs_file.o(.text.dfs_file_close) referenced from Obj/src_dfs_file.o(.text.cat)
<li><a href="#[17d]">cat</a> from Obj/src_dfs_file.o(.text.cat) referenced from Obj/finsh_msh_cmd.o(.text.cmd_cat)
<li><a href="#[17e]">copyfile</a> from Obj/src_dfs_file.o(.text.copyfile) referenced from Obj/src_dfs_file.o(.text.copydir)
<li><a href="#[180]">dfs_file_read</a> from Obj/src_dfs_file.o(.fast) referenced from Obj/src_dfs_posix.o(.fast)
<li><a href="#[181]">dfs_file_unlink</a> from Obj/src_dfs_file.o(.text.dfs_file_unlink) referenced from Obj/src_dfs_file.o(.text.rm)
<li><a href="#[183]">dfs_file_stat</a> from Obj/src_dfs_file.o(.text.dfs_file_stat) referenced from Obj/src_dfs_file.o(.text.ls)
<li><a href="#[184]">ls</a> from Obj/src_dfs_file.o(.text.ls) referenced from Obj/finsh_msh_cmd.o(.text.cmd_ls)
<li><a href="#[185]">copydir</a> from Obj/src_dfs_file.o(.text.copydir) referenced from Obj/src_dfs_file.o(.text.copydir)
<li><a href="#[186]">copy</a> from Obj/src_dfs_file.o(.text.copy) referenced from Obj/finsh_msh_cmd.o(.text.cmd_cp)
<li><a href="#[187]">dfs_file_rename</a> from Obj/src_dfs_file.o(.text.dfs_file_rename) referenced from Obj/src_dfs_posix.o(.text.rename)
<li><a href="#[188]">dfs_file_getdents</a> from Obj/src_dfs_file.o(.fast) referenced from Obj/src_dfs_posix.o(.fast)
<li><a href="#[189]">dfs_file_write</a> from Obj/src_dfs_file.o(.fast) referenced from Obj/src_dfs_posix.o(.fast)
<li><a href="#[18a]">dfs_file_flush</a> from Obj/src_dfs_file.o(.fast) referenced from Obj/src_dfs_posix.o(.fast)
<li><a href="#[18b]">dfs_file_lseek</a> from Obj/src_dfs_file.o(.fast) referenced from Obj/src_dfs_posix.o(.fast)
<li><a href="#[18c]">dfs_register</a> from Obj/src_dfs_fs.o(.text.dfs_register) referenced from Obj/elmfat_dfs_elm.o(.text.elm_init)
<li><a href="#[18d]">dfs_filesystem_lookup</a> from Obj/src_dfs_fs.o(.text.dfs_filesystem_lookup) referenced from Obj/src_dfs.o(.fast)
<li><a href="#[190]">dfs_mount</a> from Obj/src_dfs_fs.o(.text.dfs_mount) referenced from Obj/src_dfs.o(.text.dfs_init)
<li><a href="#[192]">dfs_mkfs</a> from Obj/src_dfs_fs.o(.text.dfs_mkfs) referenced from Obj/src_dfs_fs.o(.text.mkfs)
<li><a href="#[194]">dfs_statfs</a> from Obj/src_dfs_fs.o(.text.dfs_statfs) referenced from Obj/src_dfs_fs.o(.text.df)
<li><a href="#[195]">df</a> from Obj/src_dfs_fs.o(.text.df) referenced from Obj/finsh_msh_cmd.o(.text.cmd_df)
<li><a href="#[196]">mkdir</a> from Obj/src_dfs_posix.o(.text.mkdir) referenced from Obj/src_dfs_file.o(.text.copydir)
<li><a href="#[197]">open</a> from Obj/src_dfs_posix.o(.text.open) referenced from Obj/finsh_msh_cmd.o(.text.cmd_mv)
<li><a href="#[198]">close</a> from Obj/src_dfs_posix.o(.text.close) referenced from Obj/finsh_msh_cmd.o(.text.cmd_mv)
<li><a href="#[199]">read</a> from Obj/src_dfs_posix.o(.fast) referenced from Obj/finsh_msh_file.o(.text.msh_exec_script)
<li><a href="#[19a]">rename</a> from Obj/src_dfs_posix.o(.text.rename) referenced from Obj/finsh_msh_cmd.o(.text.cmd_mv)
<li><a href="#[1a0]">rmdir</a> from Obj/src_dfs_posix.o(.text.rmdir) referenced from Obj/src_dfs_posix.o(.text.unlink)
<li><a href="#[1a1]">unlink</a> from Obj/src_dfs_posix.o(.text.unlink) referenced from Obj/finsh_msh_cmd.o(.text.cmd_rm)
<li><a href="#[1a2]">opendir</a> from Obj/src_dfs_posix.o(.text.opendir) referenced from Obj/src_dfs_posix.o(.text.chdir)
<li><a href="#[1a4]">rewinddir</a> from Obj/src_dfs_posix.o(.text.rewinddir) referenced from Obj/finsh_msh.o(.text.msh_auto_complete_path)
<li><a href="#[1a5]">closedir</a> from Obj/src_dfs_posix.o(.text.closedir) referenced from Obj/src_dfs_posix.o(.text.chdir)
<li><a href="#[1a6]">chdir</a> from Obj/src_dfs_posix.o(.text.chdir) referenced from Obj/finsh_msh.o(.text.msh_exec)
<li><a href="#[1a8]">write</a> from Obj/src_dfs_posix.o(.fast) referenced from Obj/finsh_msh_cmd.o(.text.cmd_echo)
<li><a href="#[1ab]">readdir</a> from Obj/src_dfs_posix.o(.fast) referenced from Obj/finsh_msh.o(.text.msh_auto_complete_path)
<li><a href="#[1ad]">getcwd</a> from Obj/src_dfs_posix.o(.fast) referenced from Obj/finsh_shell.o(.text.finsh_get_prompt)
<li><a href="#[1b0]">poll</a> from Obj/src_poll.o(.fast) referenced from Obj/src_select.o(.fast)
<li><a href="#[1b1]">select</a> from Obj/src_select.o(.fast) referenced from Obj/entry_ipraw.o(.text.iprawtest)
<li><a href="#[1bb]">devfs_init</a> from Obj/devfs_devfs.o(.text.devfs_init) referenced from Obj/src_dfs.o(.text.dfs_init)
<li><a href="#[1cc]">disk_initialize</a> from Obj/elmfat_dfs_elm.o(.text.disk_initialize) referenced from Obj/elmfat_ff.o(.text.find_volume)
<li><a href="#[1cd]">disk_status</a> from Obj/elmfat_dfs_elm.o(.text.disk_status) referenced from Obj/elmfat_ff.o(.text.validate)
<li><a href="#[1ce]">get_fattime</a> from Obj/elmfat_dfs_elm.o(.text.get_fattime) referenced from Obj/elmfat_ff.o(.text.f_open)
<li><a href="#[1cf]">ff_cre_syncobj</a> from Obj/elmfat_dfs_elm.o(.text.ff_cre_syncobj) referenced from Obj/elmfat_ff.o(.text.f_mount)
<li><a href="#[1d0]">ff_del_syncobj</a> from Obj/elmfat_dfs_elm.o(.text.ff_del_syncobj) referenced from Obj/elmfat_ff.o(.text.f_mount)
<li><a href="#[1d1]">ff_memalloc</a> from Obj/elmfat_dfs_elm.o(.text.ff_memalloc) referenced from Obj/elmfat_ff.o(.text.f_open)
<li><a href="#[1d2]">ff_memfree</a> from Obj/elmfat_dfs_elm.o(.text.ff_memfree) referenced from Obj/elmfat_ff.o(.text.f_open)
<li><a href="#[1d4]">disk_read</a> from Obj/elmfat_dfs_elm.o(.fast) referenced from Obj/elmfat_ff.o(.fast)
<li><a href="#[1d5]">disk_write</a> from Obj/elmfat_dfs_elm.o(.fast) referenced from Obj/elmfat_ff.o(.fast)
<li><a href="#[1d6]">disk_ioctl</a> from Obj/elmfat_dfs_elm.o(.fast) referenced from Obj/elmfat_ff.o(.text.sync_fs)
<li><a href="#[1d7]">ff_req_grant</a> from Obj/elmfat_dfs_elm.o(.fast) referenced from Obj/elmfat_ff.o(.text.validate)
<li><a href="#[1d8]">ff_rel_grant</a> from Obj/elmfat_dfs_elm.o(.fast) referenced from Obj/elmfat_ff.o(.fast)
<li><a href="#[1d9]">get_ldnumber</a> from Obj/elmfat_ff.o(.text.get_ldnumber) referenced from Obj/elmfat_ff.o(.text.find_volume)
<li><a href="#[1da]">xname_sum</a> from Obj/elmfat_ff.o(.text.xname_sum) referenced from Obj/elmfat_ff.o(.text.dir_find)
<li><a href="#[1db]">validate</a> from Obj/elmfat_ff.o(.text.validate) referenced from Obj/elmfat_ff.o(.fast)
<li><a href="#[1dc]">sync_window.part.5</a> from Obj/elmfat_ff.o(.fast) referenced from Obj/elmfat_ff.o(.fast)
<li><a href="#[1dd]">dir_sdi</a> from Obj/elmfat_ff.o(.text.dir_sdi) referenced from Obj/elmfat_ff.o(.text.dir_alloc)
<li><a href="#[1de]">sync_fs</a> from Obj/elmfat_ff.o(.text.sync_fs) referenced from Obj/elmfat_ff.o(.text.f_sync)
<li><a href="#[1df]">check_fs</a> from Obj/elmfat_ff.o(.text.check_fs) referenced from Obj/elmfat_ff.o(.text.find_volume)
<li><a href="#[1e0]">find_volume</a> from Obj/elmfat_ff.o(.text.find_volume) referenced from Obj/elmfat_ff.o(.text.f_mount)
<li><a href="#[1e1]">remove_chain</a> from Obj/elmfat_ff.o(.text.remove_chain) referenced from Obj/elmfat_ff.o(.text.f_open)
<li><a href="#[1e2]">fill_fat_chain.part.8</a> from Obj/elmfat_ff.o(.text.fill_fat_chain.part.8) referenced from Obj/elmfat_ff.o(.text.dir_register)
<li><a href="#[1e3]">unlock_fs.part.9</a> from Obj/elmfat_ff.o(.text.unlock_fs.part.9) referenced from Obj/elmfat_ff.o(.fast)
<li><a href="#[1e4]">get_fileinfo</a> from Obj/elmfat_ff.o(.text.get_fileinfo) referenced from Obj/elmfat_ff.o(.text.f_readdir)
<li><a href="#[1e5]">dir_next</a> from Obj/elmfat_ff.o(.text.dir_next) referenced from Obj/elmfat_ff.o(.text.load_xdir)
<li><a href="#[1e6]">load_xdir</a> from Obj/elmfat_ff.o(.text.load_xdir) referenced from Obj/elmfat_ff.o(.text.dir_read.constprop.11)
<li><a href="#[1e7]">dir_alloc</a> from Obj/elmfat_ff.o(.text.dir_alloc) referenced from Obj/elmfat_ff.o(.text.dir_register)
<li><a href="#[1e8]">store_xdir</a> from Obj/elmfat_ff.o(.text.store_xdir) referenced from Obj/elmfat_ff.o(.text.dir_register)
<li><a href="#[1e9]">dir_remove</a> from Obj/elmfat_ff.o(.text.dir_remove) referenced from Obj/elmfat_ff.o(.text.f_unlink)
<li><a href="#[1ea]">dir_read.constprop.11</a> from Obj/elmfat_ff.o(.text.dir_read.constprop.11) referenced from Obj/elmfat_ff.o(.text.dir_find)
<li><a href="#[1eb]">dir_find</a> from Obj/elmfat_ff.o(.text.dir_find) referenced from Obj/elmfat_ff.o(.text.follow_path)
<li><a href="#[1ec]">follow_path</a> from Obj/elmfat_ff.o(.text.follow_path) referenced from Obj/elmfat_ff.o(.text.f_open)
<li><a href="#[1ed]">dir_register</a> from Obj/elmfat_ff.o(.text.dir_register) referenced from Obj/elmfat_ff.o(.text.f_open)
<li><a href="#[1ee]">f_mount</a> from Obj/elmfat_ff.o(.text.f_mount) referenced from Obj/elmfat_dfs_elm.o(.text.dfs_elm_mount)
<li><a href="#[1ef]">f_open</a> from Obj/elmfat_ff.o(.text.f_open) referenced from Obj/elmfat_dfs_elm.o(.text.dfs_elm_open)
<li><a href="#[1f0]">f_sync</a> from Obj/elmfat_ff.o(.text.f_sync) referenced from Obj/elmfat_dfs_elm.o(.text.dfs_elm_flush)
<li><a href="#[1f1]">f_close</a> from Obj/elmfat_ff.o(.text.f_close) referenced from Obj/elmfat_dfs_elm.o(.text.dfs_elm_close)
<li><a href="#[1f2]">f_lseek</a> from Obj/elmfat_ff.o(.text.f_lseek) referenced from Obj/elmfat_dfs_elm.o(.text.dfs_elm_open)
<li><a href="#[1f3]">f_opendir</a> from Obj/elmfat_ff.o(.text.f_opendir) referenced from Obj/elmfat_dfs_elm.o(.text.dfs_elm_mount)
<li><a href="#[1f5]">f_readdir</a> from Obj/elmfat_ff.o(.text.f_readdir) referenced from Obj/elmfat_dfs_elm.o(.text.dfs_elm_getdents)
<li><a href="#[1f6]">f_seekdir</a> from Obj/elmfat_ff.o(.text.f_seekdir) referenced from Obj/elmfat_dfs_elm.o(.text.dfs_elm_lseek)
<li><a href="#[1f7]">f_stat</a> from Obj/elmfat_ff.o(.text.f_stat) referenced from Obj/elmfat_dfs_elm.o(.text.dfs_elm_stat)
<li><a href="#[1f8]">f_getfree</a> from Obj/elmfat_ff.o(.text.f_getfree) referenced from Obj/elmfat_dfs_elm.o(.text.dfs_elm_statfs)
<li><a href="#[1fa]">f_unlink</a> from Obj/elmfat_ff.o(.text.f_unlink) referenced from Obj/elmfat_dfs_elm.o(.text.dfs_elm_unlink)
<li><a href="#[1fb]">f_mkdir</a> from Obj/elmfat_ff.o(.text.f_mkdir) referenced from Obj/elmfat_dfs_elm.o(.text.dfs_elm_open)
<li><a href="#[1fc]">f_rename</a> from Obj/elmfat_ff.o(.text.f_rename) referenced from Obj/elmfat_dfs_elm.o(.text.dfs_elm_rename)
<li><a href="#[1fd]">f_mkfs</a> from Obj/elmfat_ff.o(.text.f_mkfs) referenced from Obj/elmfat_dfs_elm.o(.text.dfs_elm_mkfs)
<li><a href="#[1fe]">elm_get_vol</a> from Obj/elmfat_ff.o(.text.elm_get_vol) referenced from Obj/elmfat_dfs_elm.o(.text.dfs_elm_open)
<li><a href="#[204]">f_read</a> from Obj/elmfat_ff.o(.fast) referenced from Obj/elmfat_dfs_elm.o(.fast)
<li><a href="#[205]">f_write</a> from Obj/elmfat_ff.o(.fast) referenced from Obj/elmfat_dfs_elm.o(.fast)
<li><a href="#[206]">ff_convert</a> from Obj/option_ccsbcs.o(.text.ff_convert) referenced from Obj/elmfat_ff.o(.text.get_fileinfo)
<li><a href="#[207]">ff_wtoupper</a> from Obj/option_ccsbcs.o(.text.ff_wtoupper) referenced from Obj/elmfat_ff.o(.text.xname_sum)
<li><a href="#[20c]">dfs_net_get_fops</a> from Obj/net_dfs_net.o(.text.dfs_net_get_fops) referenced from Obj/net_net_sockets.o(.text.socket)
<li><a href="#[20e]">dfs_net_getsocket</a> from Obj/net_dfs_net.o(.fast) referenced from Obj/net_net_sockets.o(.fast)
<li><a href="#[20f]">gethostbyname</a> from Obj/net_net_netdb.o(.text.gethostbyname) referenced from Obj/ntp_ntp.o(.text.sendto_ntp_server)
<li><a href="#[211]">freeaddrinfo</a> from Obj/net_net_netdb.o(.text.freeaddrinfo) referenced from Obj/entry_ipraw.o(.text.iprawtest)
<li><a href="#[212]">getaddrinfo</a> from Obj/net_net_netdb.o(.text.getaddrinfo) referenced from Obj/entry_ipraw.o(.text.iprawtest)
<li><a href="#[21d]">recv</a> from Obj/net_net_sockets.o(.fast) referenced from Obj/entry_ipraw.o(.text.iprawtest)
<li><a href="#[21e]">socket</a> from Obj/net_net_sockets.o(.text.socket) referenced from Obj/entry_ipraw.o(.text.iprawtest)
<li><a href="#[21f]">closesocket</a> from Obj/net_net_sockets.o(.text.closesocket) referenced from Obj/entry_ipraw.o(.text.iprawtest)
<li><a href="#[221]">recvfrom</a> from Obj/net_net_sockets.o(.fast) referenced from Obj/entry_ipraw.o(.text.iprawtest)
<li><a href="#[223]">sendto</a> from Obj/net_net_sockets.o(.fast) referenced from Obj/entry_ipraw.o(.text.iprawtest)
<li><a href="#[22e]">dfs_ramfs_lookup</a> from Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_lookup) referenced from Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_open)
<li><a href="#[23c]">dfs_romfs_lookup</a> from Obj/romfs_dfs_romfs.o(.text.dfs_romfs_lookup) referenced from Obj/romfs_dfs_romfs.o(.text.dfs_romfs_open)
<li><a href="#[243]">clock_cpu_setops</a> from Obj/cputime_cputime.o(.text.clock_cpu_setops) referenced from Obj/drivers_drv_cputime.o(.text.drv_cputime_init)
<li><a href="#[24a]">rt_crypto_register</a> from Obj/crypto_crypto_dev.o(.text.rt_crypto_register) referenced from Obj/drivers_drv_crypto.o(.text.drv_crypto_init)
<li><a href="#[251]">rt_device_hwtimer_isr</a> from Obj/hwtimer_hwtimer.o(.text.rt_device_hwtimer_isr) referenced from Obj/drivers_drv_timer.o(.fast)
<li><a href="#[252]">rt_device_hwtimer_register</a> from Obj/hwtimer_hwtimer.o(.text.rt_device_hwtimer_register) referenced from Obj/drivers_drv_timer.o(.text.drv_timers_init)
<li><a href="#[254]">rt_i2c_bus_device_register</a> from Obj/i2c_i2c_core.o(.text.rt_i2c_bus_device_register) referenced from Obj/drivers_drv_i2c.o(.text.drv_i2c_init)
<li><a href="#[255]">rt_i2c_bus_device_find</a> from Obj/i2c_i2c_core.o(.text.rt_i2c_bus_device_find) referenced from Obj/i2c_i2c_eeprom.o(.text.eeprom_24aa128_init)
<li><a href="#[256]">rt_i2c_transfer</a> from Obj/i2c_i2c_core.o(.text.rt_i2c_transfer) referenced from Obj/i2c_i2c_core.o(.text.rt_i2c_master_send)
<li><a href="#[257]">rt_i2c_master_send</a> from Obj/i2c_i2c_core.o(.text.rt_i2c_master_send) referenced from Obj/i2c_i2c_dev.o(.text.i2c_bus_device_write)
<li><a href="#[258]">rt_i2c_master_recv</a> from Obj/i2c_i2c_core.o(.text.rt_i2c_master_recv) referenced from Obj/i2c_i2c_dev.o(.text.i2c_bus_device_read)
<li><a href="#[25c]">rt_i2c_bus_device_device_init</a> from Obj/i2c_i2c_dev.o(.text.rt_i2c_bus_device_device_init) referenced from Obj/i2c_i2c_core.o(.text.rt_i2c_bus_device_register)
<li><a href="#[272]">rt_device_pin_register</a> from Obj/misc_pin.o(.text.rt_device_pin_register) referenced from Obj/drivers_drv_gpio.o(.text.drv_pin_init)
<li><a href="#[276]">set_date</a> from Obj/rtc_rtc.o(.text.set_date) referenced from Obj/rtc_rtc.o(.text.date)
<li><a href="#[277]">set_time</a> from Obj/rtc_rtc.o(.text.set_time) referenced from Obj/rtc_rtc.o(.text.date)
<li><a href="#[280]">rt_ata_register</a> from Obj/sata_sata.o(.text.rt_ata_register) referenced from Obj/drivers_drv_sata.o(.text.drv_ata_register)
<li><a href="#[285]">_serial_fifo_calc_recved_len</a> from Obj/serial_serial.o(.text._serial_fifo_calc_recved_len) referenced from Obj/serial_serial.o(.text.rt_serial_control)
<li><a href="#[293]">rt_hw_serial_register</a> from Obj/serial_serial.o(.text.rt_hw_serial_register) referenced from Obj/drivers_drv_uart.o(.text.drv_uart_init)
<li><a href="#[294]">rt_hw_serial_isr</a> from Obj/serial_serial.o(.text.rt_hw_serial_isr) referenced from Obj/drivers_drv_uart.o(.fast)
<li><a href="#[295]">rt_spi_bus_register</a> from Obj/spi_spi_core.o(.text.rt_spi_bus_register) referenced from Obj/drivers_drv_spi.o(.text.drv_spi_init)
<li><a href="#[296]">rt_spi_bus_attach_device</a> from Obj/spi_spi_core.o(.text.rt_spi_bus_attach_device) referenced from Obj/spi_spi_adc.o(.text.mcp3202_init)
<li><a href="#[297]">rt_spi_configure</a> from Obj/spi_spi_core.o(.text.rt_spi_configure) referenced from Obj/spi_spi_adc.o(.text.mcp3202_init)
<li><a href="#[29a]">rt_spi_transfer</a> from Obj/spi_spi_core.o(.text.rt_spi_transfer) referenced from Obj/spi_spi_dev.o(.text._spi_bus_device_write)
<li><a href="#[29b]">rt_spi_transfer_message</a> from Obj/spi_spi_core.o(.text.rt_spi_transfer_message) referenced from Obj/spi_spi_adc.o(.text.mcp3202_adc_read)
<li><a href="#[2a6]">rt_spi_bus_device_init</a> from Obj/spi_spi_dev.o(.text.rt_spi_bus_device_init) referenced from Obj/spi_spi_core.o(.text.rt_spi_bus_register)
<li><a href="#[2a7]">rt_spidev_device_init</a> from Obj/spi_spi_dev.o(.text.rt_spidev_device_init) referenced from Obj/spi_spi_core.o(.text.rt_spi_bus_attach_device)
<li><a href="#[2b3]">rt_hw_watchdog_register</a> from Obj/watchdog_watchdog.o(.text.rt_hw_watchdog_register) referenced from Obj/drivers_drv_wdt.o(.text.drv_wdt_init)
<li><a href="#[2b4]">rt_completion_init</a> from Obj/src_completion.o(.text.rt_completion_init) referenced from Obj/serial_serial.o(.text.rt_serial_open)
<li><a href="#[2b5]">rt_completion_wait</a> from Obj/src_completion.o(.fast) referenced from Obj/serial_serial.o(.text.rt_serial_write)
<li><a href="#[2b6]">rt_completion_done</a> from Obj/src_completion.o(.fast) referenced from Obj/serial_serial.o(.text.rt_hw_serial_isr)
<li><a href="#[2b7]">rt_data_queue_init</a> from Obj/src_dataqueue.o(.text.rt_data_queue_init) referenced from Obj/serial_serial.o(.text.rt_serial_open)
<li><a href="#[2b8]">rt_data_queue_push</a> from Obj/src_dataqueue.o(.fast) referenced from Obj/serial_serial.o(.text.rt_serial_write)
<li><a href="#[2b9]">rt_data_queue_pop</a> from Obj/src_dataqueue.o(.fast) referenced from Obj/serial_serial.o(.text.rt_hw_serial_isr)
<li><a href="#[2ba]">rt_data_queue_peak</a> from Obj/src_dataqueue.o(.fast) referenced from Obj/serial_serial.o(.text.rt_hw_serial_isr)
<li><a href="#[2d6]">__wqueue_default_wake</a> from Obj/src_waitqueue.o(.fast) referenced from Obj/src_poll.o(.fast)
<li><a href="#[2d7]">rt_wqueue_add</a> from Obj/src_waitqueue.o(.fast) referenced from Obj/src_poll.o(.fast)
<li><a href="#[2d8]">rt_wqueue_remove</a> from Obj/src_waitqueue.o(.fast) referenced from Obj/src_poll.o(.fast)
<li><a href="#[2d9]">rt_wqueue_wakeup</a> from Obj/src_waitqueue.o(.fast) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[2da]">rt_wqueue_wait</a> from Obj/src_waitqueue.o(.fast) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[2e6]">finsh_get_prompt</a> from Obj/finsh_shell.o(.text.finsh_get_prompt) referenced from Obj/finsh_shell.o(.text.shell_handle_history)
<li><a href="#[2e7]">shell_handle_history</a> from Obj/finsh_shell.o(.text.shell_handle_history) referenced from Obj/finsh_shell.o(.text.finsh_thread_entry)
<li><a href="#[2ea]">finsh_set_device</a> from Obj/finsh_shell.o(.text.finsh_set_device) referenced from Obj/finsh_shell.o(.text.finsh_thread_entry)
<li><a href="#[2f2]">show_wait_queue</a> from Obj/finsh_cmd.o(.text.show_wait_queue) referenced from Obj/finsh_cmd.o(.text.list_sem)
<li><a href="#[2f4]">object_name_maxlen</a> from Obj/finsh_cmd.o(.text.object_name_maxlen) referenced from Obj/finsh_cmd.o(.text.list_thread)
<li><a href="#[2f5]">list_thread</a> from Obj/finsh_cmd.o(.text.list_thread) referenced from Obj/src_scheduler.o(.fast)
<li><a href="#[2ff]">msh_help</a> from Obj/finsh_msh.o(.text.msh_help) referenced from Obj/finsh_msh.o(.text.msh_auto_complete)
<li><a href="#[300]">msh_is_used</a> from Obj/finsh_msh.o(.text.msh_is_used) referenced from Obj/finsh_shell.o(.text.finsh_get_prompt)
<li><a href="#[301]">msh_exec</a> from Obj/finsh_msh.o(.text.msh_exec) referenced from Obj/finsh_shell.o(.text.finsh_thread_entry)
<li><a href="#[302]">msh_auto_complete_path</a> from Obj/finsh_msh.o(.text.msh_auto_complete_path) referenced from Obj/finsh_msh.o(.text.msh_auto_complete)
<li><a href="#[303]">msh_auto_complete</a> from Obj/finsh_msh.o(.text.msh_auto_complete) referenced from Obj/finsh_shell.o(.text.finsh_thread_entry)
<li><a href="#[315]">msh_exec_script</a> from Obj/finsh_msh_file.o(.text.msh_exec_script) referenced from Obj/finsh_msh.o(.text.msh_exec)
<li><a href="#[317]">free</a> from cklib_malloc.o(.text.free) referenced from sata_host_ahci.o(.text.ahci_hba_reset)
<li><a href="#[319]">calloc</a> from cklib_malloc.o(.text.calloc) referenced from sata_host_ahci.o(.text.ahci_hba_reset)
<li><a href="#[31a]">strcpy</a> from Obj/minilibc_string.o(.fast) referenced from Obj/netif_ethernetif.o(.text.list_udps)
<li><a href="#[105]">strncpy</a> from Obj/minilibc_string.o(.fast) referenced from Obj/src_dfs_posix.o(.fast)
<li><a href="#[31c]">strcmp</a> from Obj/minilibc_string.o(.fast) referenced from Obj/src_dfs.o(.fast)
<li><a href="#[107]">strncmp</a> from Obj/minilibc_string.o(.fast) referenced from Obj/netif_ethernetif.o(.text.set_if)
<li><a href="#[31f]">strrchr</a> from Obj/minilibc_string.o(.fast) referenced from Obj/src_dfs_file.o(.text.copy)
<li><a href="#[323]">simple_strtoul</a> from Obj/minilibc_string.o(.fast) referenced from Obj/minilibc_string.o(.fast)
<li><a href="#[324]">simple_strtol</a> from Obj/minilibc_string.o(.fast) referenced from Obj/minilibc_string.o(.fast)
<li><a href="#[325]">simple_strtoull</a> from Obj/minilibc_string.o(.fast) referenced from Obj/minilibc_string.o(.fast)
<li><a href="#[326]">simple_strtoll</a> from Obj/minilibc_string.o(.fast) referenced from Obj/minilibc_string.o(.fast)
<li><a href="#[327]">vsscanf</a> from Obj/minilibc_string.o(.fast) referenced from Obj/minilibc_string.o(.fast)
<li><a href="#[329]">strspn</a> from Obj/minilibc_string.o(.fast) referenced from Obj/minilibc_string.o(.fast)
<li><a href="#[32a]">strcspn</a> from Obj/minilibc_string.o(.fast) referenced from Obj/minilibc_string.o(.fast)
<li><a href="#[32b]">strtok_r</a> from Obj/minilibc_string.o(.fast) referenced from Obj/minilibc_string.o(.fast)
<li><a href="#[32d]">strchr</a> from Obj/minilibc_string.o(.fast) referenced from Obj/netif_ethernetif.o(.text.set_if)
<li><a href="#[32e]">strtol</a> from Obj/minilibc_string.o(.fast) referenced from atoi.o(.text)
<li><a href="#[331]">gmtime_r</a> from Obj/minilibc_time.o(.fast) referenced from Obj/minilibc_time.o(.fast)
<li><a href="#[332]">mktime</a> from Obj/minilibc_time.o(.fast) referenced from Obj/elmfat_dfs_elm.o(.text.dfs_elm_stat)
<li><a href="#[333]">asctime_r</a> from Obj/minilibc_time.o(.fast) referenced from Obj/minilibc_time.o(.fast)
<li><a href="#[335]">gettimeofday</a> from Obj/minilibc_time.o(.fast) referenced from Obj/minilibc_time.o(.fast)
<li><a href="#[336]">localtime_r</a> from Obj/minilibc_time.o(.fast) referenced from Obj/minilibc_time.o(.fast)
<li><a href="#[337]">localtime</a> from Obj/minilibc_time.o(.fast) referenced from Obj/elmfat_dfs_elm.o(.text.get_fattime)
<li><a href="#[338]">ctime</a> from Obj/minilibc_time.o(.fast) referenced from Obj/rtc_rtc.o(.text.list_date)
<li><a href="#[33a]">time</a> from Obj/minilibc_time.o(.fast) referenced from Obj/elmfat_dfs_elm.o(.text.get_fattime)
<li><a href="#[344]">sys_init</a> from Obj/arch_sys_arch.o(.text.sys_init) referenced from Obj/core_init.o(.text.lwip_init)
<li><a href="#[345]">sys_sem_new</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/api_api_lib.o(.text.netconn_gethostbyname)
<li><a href="#[346]">sys_thread_new</a> from Obj/arch_sys_arch.o(.text.sys_thread_new) referenced from Obj/api_tcpip.o(.text.tcpip_init)
<li><a href="#[34a]">mem_init</a> from Obj/arch_sys_arch.o(.text.mem_init) referenced from Obj/core_init.o(.text.lwip_init)
<li><a href="#[34c]">mem_trim</a> from Obj/arch_sys_arch.o(.text.mem_trim) referenced from Obj/core_pbuf.o(.fast)
<li><a href="#[34d]">sys_sem_free</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/api_api_lib.o(.text.netconn_new_with_proto_and_callback)
<li><a href="#[34e]">sys_sem_signal</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/api_api_msg.o(.fast)
<li><a href="#[34f]">sys_arch_sem_wait</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/api_api_lib.o(.text.netconn_gethostbyname)
<li><a href="#[350]">sys_sem_valid</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/api_api_lib.o(.text.netconn_new_with_proto_and_callback)
<li><a href="#[351]">sys_sem_set_invalid</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/api_api_msg.o(.text.netconn_free)
<li><a href="#[352]">sys_mutex_new</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/api_tcpip.o(.text.tcpip_init)
<li><a href="#[353]">sys_mutex_lock</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/arch_sys_arch.o(.text.tcpip_init_done_callback)
<li><a href="#[354]">sys_mutex_unlock</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/api_api_msg.o(.fast)
<li><a href="#[358]">sys_mbox_new</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/api_api_msg.o(.text.netconn_alloc)
<li><a href="#[359]">sys_mbox_free</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/api_api_lib.o(.text.netconn_new_with_proto_and_callback)
<li><a href="#[35a]">sys_mbox_post</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/api_tcpip.o(.fast)
<li><a href="#[35b]">sys_mbox_trypost</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/api_api_msg.o(.fast)
<li><a href="#[35c]">sys_arch_mbox_tryfetch</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/api_api_msg.o(.text.netconn_drain)
<li><a href="#[35d]">sys_mbox_valid</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/api_api_lib.o(.fast)
<li><a href="#[35e]">sys_mbox_set_invalid</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/api_api_msg.o(.text.netconn_alloc)
<li><a href="#[35f]">sys_arch_protect</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/drivers_drv_eth.o(.fast)
<li><a href="#[360]">sys_arch_unprotect</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/drivers_drv_eth.o(.fast)
<li><a href="#[361]">sys_arch_assert</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_init)
<li><a href="#[362]">sys_arch_mbox_fetch</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/api_api_lib.o(.fast)
<li><a href="#[364]">sys_now</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/api_api_lib.o(.text.netconn_close_shutdown)
<li><a href="#[365]">mem_malloc</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/core_pbuf.o(.fast)
<li><a href="#[366]">mem_free</a> from Obj/arch_sys_arch.o(.fast) referenced from Obj/core_pbuf.o(.fast)
<li><a href="#[367]">netconn_close_shutdown</a> from Obj/api_api_lib.o(.text.netconn_close_shutdown) referenced from Obj/api_api_lib.o(.fast)
<li><a href="#[368]">netconn_recv_data</a> from Obj/api_api_lib.o(.fast) referenced from Obj/api_api_lib.o(.fast)
<li><a href="#[369]">netconn_new_with_proto_and_callback</a> from Obj/api_api_lib.o(.text.netconn_new_with_proto_and_callback) referenced from Obj/api_sockets.o(.text.lwip_socket)
<li><a href="#[36a]">netconn_delete</a> from Obj/api_api_lib.o(.text.netconn_delete) referenced from Obj/api_sockets.o(.text.lwip_close)
<li><a href="#[36b]">netconn_getaddr</a> from Obj/api_api_lib.o(.text.netconn_getaddr) referenced from Obj/api_sockets.o(.fast)
<li><a href="#[373]">netconn_join_leave_group</a> from Obj/api_api_lib.o(.text.netconn_join_leave_group) referenced from Obj/api_sockets.o(.text.lwip_close)
<li><a href="#[374]">netconn_gethostbyname</a> from Obj/api_api_lib.o(.text.netconn_gethostbyname) referenced from Obj/api_netdb.o(.text.lwip_gethostbyname)
<li><a href="#[375]">netconn_recv_tcp_pbuf</a> from Obj/api_api_lib.o(.fast) referenced from Obj/api_sockets.o(.fast)
<li><a href="#[376]">netconn_recv</a> from Obj/api_api_lib.o(.fast) referenced from Obj/api_sockets.o(.fast)
<li><a href="#[377]">netconn_send</a> from Obj/api_api_lib.o(.fast) referenced from Obj/api_api_lib.o(.fast)
<li><a href="#[379]">netconn_write_partly</a> from Obj/api_api_lib.o(.fast) referenced from Obj/api_sockets.o(.fast)
<li><a href="#[37b]">recv_udp</a> from Obj/api_api_msg.o(.fast) referenced from Obj/api_api_msg.o(.fast)
<li><a href="#[37c]">setup_tcp</a> from Obj/api_api_msg.o(.text.setup_tcp) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_newconn)
<li><a href="#[37f]">lwip_netconn_do_close_internal</a> from Obj/api_api_msg.o(.text.lwip_netconn_do_close_internal) referenced from Obj/api_api_msg.o(.fast)
<li><a href="#[381]">netconn_alloc</a> from Obj/api_api_msg.o(.text.netconn_alloc) referenced from Obj/api_api_lib.o(.text.netconn_new_with_proto_and_callback)
<li><a href="#[382]">netconn_free</a> from Obj/api_api_msg.o(.text.netconn_free) referenced from Obj/api_api_lib.o(.text.netconn_delete)
<li><a href="#[383]">netconn_drain</a> from Obj/api_api_msg.o(.text.netconn_drain) referenced from Obj/api_api_msg.o(.text.netconn_drain)
<li><a href="#[396]">err_to_errno</a> from Obj/api_err.o(.text.err_to_errno) referenced from Obj/api_sockets.o(.fast)
<li><a href="#[397]">netbuf_new</a> from Obj/api_netbuf.o(.fast) referenced from Obj/api_sockets.o(.fast)
<li><a href="#[39b]">netbuf_delete</a> from Obj/api_netbuf.o(.fast) referenced from Obj/api_api_msg.o(.fast)
<li><a href="#[39c]">netbuf_alloc</a> from Obj/api_netbuf.o(.fast) referenced from Obj/api_sockets.o(.fast)
<li><a href="#[39d]">netbuf_free</a> from Obj/api_netbuf.o(.fast) referenced from Obj/api_sockets.o(.fast)
<li><a href="#[3a0]">lwip_gethostbyname</a> from Obj/api_netdb.o(.text.lwip_gethostbyname) referenced from Obj/net_net_netdb.o(.text.gethostbyname)
<li><a href="#[3a2]">lwip_freeaddrinfo</a> from Obj/api_netdb.o(.text.lwip_freeaddrinfo) referenced from Obj/net_net_netdb.o(.text.freeaddrinfo)
<li><a href="#[3a3]">lwip_getaddrinfo</a> from Obj/api_netdb.o(.text.lwip_getaddrinfo) referenced from Obj/net_net_netdb.o(.text.getaddrinfo)
<li><a href="#[3a7]">netifapi_netif_add</a> from Obj/api_netifapi.o(.text.netifapi_netif_add) referenced from Obj/netif_ethernetif.o(.text.eth_device_init_with_flag)
<li><a href="#[3a8]">netifapi_netif_set_addr</a> from Obj/api_netifapi.o(.text.netifapi_netif_set_addr) referenced from Obj/netif_ethernetif.o(.text.set_if)
<li><a href="#[3a9]">netifapi_netif_common</a> from Obj/api_netifapi.o(.text.netifapi_netif_common) referenced from Obj/netif_ethernetif.o(.fast)
<li><a href="#[3aa]">alloc_socket</a> from Obj/api_sockets.o(.text.alloc_socket) referenced from Obj/api_sockets.o(.text.lwip_socket)
<li><a href="#[3ab]">lwip_selscan</a> from Obj/api_sockets.o(.fast) referenced from Obj/api_sockets.o(.fast)
<li><a href="#[3af]">lwip_tryget_socket</a> from Obj/api_sockets.o(.text.lwip_tryget_socket) referenced from Obj/net_dfs_net.o(.text.dfs_net_poll)
<li><a href="#[3b2]">lwip_close</a> from Obj/api_sockets.o(.text.lwip_close) referenced from Obj/net_dfs_net.o(.text.dfs_net_close)
<li><a href="#[3b5]">lwip_socket</a> from Obj/api_sockets.o(.text.lwip_socket) referenced from Obj/net_net_sockets.o(.text.socket)
<li><a href="#[3bb]">lwip_setsockopt</a> from Obj/api_sockets.o(.text.lwip_setsockopt) referenced from Obj/ping_ping.o(.text.ping)
<li><a href="#[3bc]">lwip_ioctl</a> from Obj/api_sockets.o(.text.lwip_ioctl) referenced from Obj/net_dfs_net.o(.text.dfs_net_ioctl)
<li><a href="#[3c0]">lwip_recvfrom</a> from Obj/api_sockets.o(.fast) referenced from Obj/net_net_sockets.o(.fast)
<li><a href="#[3c1]">lwip_read</a> from Obj/api_sockets.o(.fast) referenced from Obj/net_dfs_net.o(.fast)
<li><a href="#[3c2]">lwip_recv</a> from Obj/api_sockets.o(.fast) referenced from Obj/net_net_sockets.o(.fast)
<li><a href="#[3c3]">lwip_sendmsg</a> from Obj/api_sockets.o(.fast) referenced from Obj/api_sockets.o(.fast)
<li><a href="#[3c4]">lwip_sendto</a> from Obj/api_sockets.o(.fast) referenced from Obj/net_net_sockets.o(.fast)
<li><a href="#[3c5]">lwip_send</a> from Obj/api_sockets.o(.fast) referenced from Obj/net_net_sockets.o(.fast)
<li><a href="#[3c6]">lwip_write</a> from Obj/api_sockets.o(.fast) referenced from Obj/net_dfs_net.o(.fast)
<li><a href="#[3cd]">tcpip_init</a> from Obj/api_tcpip.o(.text.tcpip_init) referenced from Obj/arch_sys_arch.o(.text.lwip_system_init)
<li><a href="#[3d0]">tcpip_inpkt</a> from Obj/api_tcpip.o(.fast) referenced from Obj/api_tcpip.o(.fast)
<li><a href="#[3d2]">tcpip_callback_with_block</a> from Obj/api_tcpip.o(.fast) referenced from Obj/api_api_lib.o(.text.netconn_gethostbyname)
<li><a href="#[3d3]">tcpip_send_msg_wait_sem</a> from Obj/api_tcpip.o(.fast) referenced from Obj/api_api_lib.o(.text.netconn_close_shutdown)
<li><a href="#[3d4]">tcpip_api_call</a> from Obj/api_tcpip.o(.fast) referenced from Obj/api_netifapi.o(.text.netifapi_netif_add)
<li><a href="#[3d5]">lwip_htons</a> from Obj/core_def.o(.fast) referenced from Obj/api_sockets.o(.fast)
<li><a href="#[3d8]">lwip_strnicmp</a> from Obj/core_def.o(.text.lwip_strnicmp) referenced from Obj/core_dns.o(.text.dns_gethostbyname_addrtype)
<li><a href="#[3da]">lwip_htonl</a> from Obj/core_def.o(.fast) referenced from Obj/core_tcp_in.o(.fast)
<li><a href="#[3db]">dns_call_found</a> from Obj/core_dns.o(.text.dns_call_found) referenced from Obj/core_dns.o(.text.dns_send)
<li><a href="#[3dc]">dns_send</a> from Obj/core_dns.o(.text.dns_send) referenced from Obj/core_dns.o(.text.dns_check_entry)
<li><a href="#[3dd]">dns_check_entry</a> from Obj/core_dns.o(.text.dns_check_entry) referenced from Obj/core_dns.o(.text.dns_tmr)
<li><a href="#[3df]">dns_init</a> from Obj/core_dns.o(.text.dns_init) referenced from Obj/core_init.o(.text.lwip_init)
<li><a href="#[3e0]">dns_setserver</a> from Obj/core_dns.o(.text.dns_setserver) referenced from Obj/netif_ethernetif.o(.text.set_dns)
<li><a href="#[3e1]">dns_getserver</a> from Obj/core_dns.o(.text.dns_getserver) referenced from Obj/netif_ethernetif.o(.text.list_if)
<li><a href="#[3e3]">dns_gethostbyname_addrtype</a> from Obj/core_dns.o(.text.dns_gethostbyname_addrtype) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_gethostbyname)
<li><a href="#[3e5]">lwip_standard_chksum</a> from Obj/core_inet_chksum.o(.fast) referenced from Obj/core_inet_chksum.o(.fast)
<li><a href="#[3e6]">inet_chksum_pseudo</a> from Obj/core_inet_chksum.o(.fast) referenced from Obj/core_inet_chksum.o(.fast)
<li><a href="#[3e7]">ip_chksum_pseudo</a> from Obj/core_inet_chksum.o(.fast) referenced from Obj/core_udp.o(.fast)
<li><a href="#[3e8]">inet_chksum_pseudo_partial</a> from Obj/core_inet_chksum.o(.fast) referenced from Obj/core_inet_chksum.o(.fast)
<li><a href="#[3ea]">inet_chksum</a> from Obj/core_inet_chksum.o(.fast) referenced from Obj/ipv4_icmp.o(.text.icmp_send_response.isra.0)
<li><a href="#[3eb]">inet_chksum_pbuf</a> from Obj/core_inet_chksum.o(.fast) referenced from Obj/ipv4_icmp.o(.text.icmp_input)
<li><a href="#[3ec]">lwip_init</a> from Obj/core_init.o(.text.lwip_init) referenced from Obj/api_tcpip.o(.text.tcpip_init)
<li><a href="#[3ef]">do_memp_malloc_pool.isra.0</a> from Obj/core_memp.o(.fast) referenced from Obj/core_memp.o(.fast)
<li><a href="#[3f1]">memp_init</a> from Obj/core_memp.o(.text.memp_init) referenced from Obj/core_init.o(.text.lwip_init)
<li><a href="#[3f4]">memp_malloc</a> from Obj/core_memp.o(.fast) referenced from Obj/api_api_lib.o(.fast)
<li><a href="#[3f6]">memp_free</a> from Obj/core_memp.o(.fast) referenced from Obj/api_api_lib.o(.fast)
<li><a href="#[3f7]">netif_issue_reports.part.0</a> from Obj/core_netif.o(.text.netif_issue_reports.part.0) referenced from Obj/core_netif.o(.text.netif_set_ipaddr)
<li><a href="#[3f8]">netif_init</a> from Obj/core_netif.o(.text.netif_init) referenced from Obj/core_init.o(.text.lwip_init)
<li><a href="#[3fe]">netif_set_ipaddr</a> from Obj/core_netif.o(.text.netif_set_ipaddr) referenced from Obj/core_netif.o(.text.netif_set_addr)
<li><a href="#[3ff]">netif_set_addr</a> from Obj/core_netif.o(.text.netif_set_addr) referenced from Obj/api_netifapi.o(.text.netifapi_do_netif_set_addr)
<li><a href="#[400]">netif_add</a> from Obj/core_netif.o(.text.netif_add) referenced from Obj/arch_sys_arch.o(.text.tcpip_init_done_callback)
<li><a href="#[403]">netif_set_default</a> from Obj/core_netif.o(.text.netif_set_default) referenced from Obj/arch_sys_arch.o(.text.tcpip_init_done_callback)
<li><a href="#[404]">netif_set_up</a> from Obj/core_netif.o(.text.netif_set_up) referenced from Obj/arch_sys_arch.o(.text.tcpip_init_done_callback)
<li><a href="#[408]">netif_set_link_up</a> from Obj/core_netif.o(.text.netif_set_link_up) referenced from Obj/arch_sys_arch.o(.text.tcpip_init_done_callback)
<li><a href="#[40a]">pbuf_header_impl</a> from Obj/core_pbuf.o(.fast) referenced from Obj/core_pbuf.o(.fast)
<li><a href="#[40c]">pbuf_header</a> from Obj/core_pbuf.o(.fast) referenced from Obj/core_raw.o(.fast)
<li><a href="#[40d]">pbuf_header_force</a> from Obj/core_pbuf.o(.fast) referenced from Obj/core_udp.o(.fast)
<li><a href="#[40e]">pbuf_free</a> from Obj/core_pbuf.o(.fast) referenced from Obj/drivers_drv_eth.o(.fast)
<li><a href="#[40f]">pbuf_alloc</a> from Obj/core_pbuf.o(.fast) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth0_init)
<li><a href="#[410]">pbuf_realloc</a> from Obj/core_pbuf.o(.fast) referenced from Obj/core_tcp_in.o(.fast)
<li><a href="#[411]">pbuf_clen</a> from Obj/core_pbuf.o(.fast) referenced from Obj/core_tcp_in.o(.fast)
<li><a href="#[412]">pbuf_ref</a> from Obj/core_pbuf.o(.fast) referenced from Obj/drivers_drv_eth.o(.fast)
<li><a href="#[413]">pbuf_cat</a> from Obj/core_pbuf.o(.fast) referenced from Obj/api_netbuf.o(.fast)
<li><a href="#[414]">pbuf_chain</a> from Obj/core_pbuf.o(.fast) referenced from Obj/core_raw.o(.fast)
<li><a href="#[416]">pbuf_copy</a> from Obj/core_pbuf.o(.fast) referenced from Obj/drivers_drv_eth.o(.fast)
<li><a href="#[417]">pbuf_copy_partial</a> from Obj/core_pbuf.o(.fast) referenced from Obj/api_sockets.o(.fast)
<li><a href="#[419]">pbuf_take</a> from Obj/core_pbuf.o(.fast) referenced from Obj/core_pbuf.o(.fast)
<li><a href="#[41a]">pbuf_take_at</a> from Obj/core_pbuf.o(.fast) referenced from Obj/core_dns.o(.text.dns_send)
<li><a href="#[41d]">pbuf_try_get_at</a> from Obj/core_pbuf.o(.fast) referenced from Obj/core_dns.o(.text.dns_recv)
<li><a href="#[41e]">pbuf_put_at</a> from Obj/core_pbuf.o(.fast) referenced from Obj/core_dns.o(.text.dns_send)
<li><a href="#[420]">pbuf_memfind</a> from Obj/core_pbuf.o(.fast) referenced from Obj/core_pbuf.o(.fast)
<li><a href="#[422]">raw_input</a> from Obj/core_raw.o(.fast) referenced from Obj/ipv4_ip4.o(.fast)
<li><a href="#[425]">raw_recv</a> from Obj/core_raw.o(.text.raw_recv) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_newconn)
<li><a href="#[426]">raw_remove</a> from Obj/core_raw.o(.text.raw_remove) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_delconn)
<li><a href="#[427]">raw_new</a> from Obj/core_raw.o(.text.raw_new) referenced from Obj/core_raw.o(.fast)
<li><a href="#[428]">raw_netif_ip_addr_changed</a> from Obj/core_raw.o(.text.raw_netif_ip_addr_changed) referenced from Obj/core_netif.o(.text.netif_set_ipaddr)
<li><a href="#[429]">raw_sendto</a> from Obj/core_raw.o(.fast) referenced from Obj/api_api_msg.o(.fast)
<li><a href="#[42a]">raw_send</a> from Obj/core_raw.o(.fast) referenced from Obj/api_api_msg.o(.fast)
<li><a href="#[42b]">raw_new_ip_type</a> from Obj/core_raw.o(.fast) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_newconn)
<li><a href="#[42d]">tcp_new_port</a> from Obj/core_tcp.o(.fast) referenced from Obj/core_tcp.o(.fast)
<li><a href="#[42e]">tcp_close_shutdown_fin</a> from Obj/core_tcp.o(.text.tcp_close_shutdown_fin) referenced from Obj/core_tcp.o(.fast)
<li><a href="#[42f]">tcp_init</a> from Obj/core_tcp.o(.text.tcp_init) referenced from Obj/core_init.o(.text.lwip_init)
<li><a href="#[434]">tcp_arg</a> from Obj/core_tcp.o(.text.tcp_arg) referenced from Obj/api_api_msg.o(.text.setup_tcp)
<li><a href="#[435]">tcp_recv</a> from Obj/core_tcp.o(.text.tcp_recv) referenced from Obj/api_api_msg.o(.text.setup_tcp)
<li><a href="#[436]">tcp_sent</a> from Obj/core_tcp.o(.text.tcp_sent) referenced from Obj/api_api_msg.o(.text.setup_tcp)
<li><a href="#[437]">tcp_err</a> from Obj/core_tcp.o(.text.tcp_err) referenced from Obj/api_api_msg.o(.text.setup_tcp)
<li><a href="#[438]">tcp_accept</a> from Obj/core_tcp.o(.text.tcp_accept) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_close_internal)
<li><a href="#[439]">tcp_poll</a> from Obj/core_tcp.o(.text.tcp_poll) referenced from Obj/api_api_msg.o(.text.setup_tcp)
<li><a href="#[43a]">tcp_debug_state_str</a> from Obj/core_tcp.o(.text.tcp_debug_state_str) referenced from Obj/netif_ethernetif.o(.text.list_tcps)
<li><a href="#[43f]">tcp_pcbs_sane</a> from Obj/core_tcp.o(.text.tcp_pcbs_sane) referenced from Obj/core_tcp.o(.text.tcp_pcb_remove)
<li><a href="#[440]">tcp_pcb_remove</a> from Obj/core_tcp.o(.text.tcp_pcb_remove) referenced from Obj/core_tcp.o(.text.tcp_close_shutdown)
<li><a href="#[441]">tcp_close_shutdown</a> from Obj/core_tcp.o(.text.tcp_close_shutdown) referenced from Obj/core_tcp.o(.fast)
<li><a href="#[442]">tcp_close</a> from Obj/core_tcp.o(.text.tcp_close) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_close_internal)
<li><a href="#[443]">tcp_shutdown</a> from Obj/core_tcp.o(.text.tcp_shutdown) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_close_internal)
<li><a href="#[444]">tcp_abandon</a> from Obj/core_tcp.o(.text.tcp_abandon) referenced from Obj/core_tcp.o(.fast)
<li><a href="#[445]">tcp_abort</a> from Obj/core_tcp.o(.text.tcp_abort) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_close_internal)
<li><a href="#[447]">tcp_netif_ip_addr_changed_pcblist</a> from Obj/core_tcp.o(.text.tcp_netif_ip_addr_changed_pcblist) referenced from Obj/core_tcp.o(.text.tcp_netif_ip_addr_changed)
<li><a href="#[448]">tcp_netif_ip_addr_changed</a> from Obj/core_tcp.o(.text.tcp_netif_ip_addr_changed) referenced from Obj/core_netif.o(.text.netif_set_ipaddr)
<li><a href="#[44a]">tcp_update_rcv_ann_wnd</a> from Obj/core_tcp.o(.fast) referenced from Obj/core_tcp.o(.fast)
<li><a href="#[44b]">tcp_recved</a> from Obj/core_tcp.o(.fast) referenced from Obj/api_api_msg.o(.fast)
<li><a href="#[44d]">tcp_seg_free</a> from Obj/core_tcp.o(.fast) referenced from Obj/core_tcp.o(.fast)
<li><a href="#[44e]">tcp_segs_free</a> from Obj/core_tcp.o(.fast) referenced from Obj/core_tcp_out.o(.fast)
<li><a href="#[450]">tcp_slowtmr</a> from Obj/core_tcp.o(.fast) referenced from Obj/core_tcp.o(.fast)
<li><a href="#[452]">tcp_pcb_purge</a> from Obj/core_tcp.o(.fast) referenced from Obj/core_tcp_in.o(.fast)
<li><a href="#[453]">tcp_next_iss</a> from Obj/core_tcp.o(.fast) referenced from Obj/core_tcp_in.o(.fast)
<li><a href="#[454]">tcp_eff_send_mss_impl</a> from Obj/core_tcp.o(.fast) referenced from Obj/core_tcp_in.o(.fast)
<li><a href="#[455]">tcp_recv_null</a> from Obj/core_tcp.o(.fast) referenced from Obj/core_tcp.o(.fast)
<li><a href="#[456]">tcp_process_refused_data</a> from Obj/core_tcp.o(.fast) referenced from Obj/core_tcp.o(.fast)
<li><a href="#[457]">tcp_fasttmr</a> from Obj/core_tcp.o(.fast) referenced from Obj/core_tcp.o(.fast)
<li><a href="#[458]">tcp_tmr</a> from Obj/core_tcp.o(.fast) referenced from Obj/core_timeouts.o(.fast)
<li><a href="#[45a]">tcp_alloc</a> from Obj/core_tcp.o(.fast) referenced from Obj/core_tcp.o(.fast)
<li><a href="#[45b]">tcp_new_ip_type</a> from Obj/core_tcp.o(.fast) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_newconn)
<li><a href="#[45c]">tcp_receive</a> from Obj/core_tcp_in.o(.fast) referenced from Obj/core_tcp_in.o(.fast)
<li><a href="#[460]">tcp_input</a> from Obj/core_tcp_in.o(.fast) referenced from Obj/ipv4_ip4.o(.fast)
<li><a href="#[461]">tcp_trigger_input_pcb_close</a> from Obj/core_tcp_in.o(.fast) referenced from Obj/core_tcp.o(.text.tcp_close_shutdown)
<li><a href="#[462]">tcp_pbuf_prealloc.isra.0</a> from Obj/core_tcp_out.o(.fast) referenced from Obj/core_tcp_out.o(.fast)
<li><a href="#[463]">tcp_send_fin</a> from Obj/core_tcp_out.o(.text.tcp_send_fin) referenced from Obj/core_tcp.o(.text.tcp_close_shutdown_fin)
<li><a href="#[464]">tcp_rst</a> from Obj/core_tcp_out.o(.text.tcp_rst) referenced from Obj/core_tcp.o(.fast)
<li><a href="#[465]">tcp_keepalive</a> from Obj/core_tcp_out.o(.text.tcp_keepalive) referenced from Obj/core_tcp.o(.fast)
<li><a href="#[468]">tcp_write</a> from Obj/core_tcp_out.o(.fast) referenced from Obj/api_api_msg.o(.fast)
<li><a href="#[469]">tcp_enqueue_flags</a> from Obj/core_tcp_out.o(.fast) referenced from Obj/core_tcp_in.o(.fast)
<li><a href="#[46a]">tcp_send_empty_ack</a> from Obj/core_tcp_out.o(.fast) referenced from Obj/core_tcp_in.o(.fast)
<li><a href="#[46b]">tcp_output</a> from Obj/core_tcp_out.o(.fast) referenced from Obj/api_api_msg.o(.fast)
<li><a href="#[46c]">tcp_rexmit_rto</a> from Obj/core_tcp_out.o(.fast) referenced from Obj/core_tcp.o(.fast)
<li><a href="#[46d]">tcp_rexmit</a> from Obj/core_tcp_out.o(.fast) referenced from Obj/core_tcp_in.o(.fast)
<li><a href="#[46e]">tcp_rexmit_fast</a> from Obj/core_tcp_out.o(.fast) referenced from Obj/core_tcp_in.o(.fast)
<li><a href="#[46f]">tcp_zero_window_probe</a> from Obj/core_tcp_out.o(.fast) referenced from Obj/core_tcp.o(.fast)
<li><a href="#[470]">sys_timeout</a> from Obj/core_timeouts.o(.text.sys_timeout) referenced from Obj/core_timeouts.o(.fast)
<li><a href="#[471]">tcp_timer_needed</a> from Obj/core_timeouts.o(.fast) referenced from Obj/core_tcp.o(.text.tcp_close_shutdown)
<li><a href="#[472]">sys_timeouts_init</a> from Obj/core_timeouts.o(.text.sys_timeouts_init) referenced from Obj/core_init.o(.text.lwip_init)
<li><a href="#[477]">sys_timeouts_mbox_fetch</a> from Obj/core_timeouts.o(.fast) referenced from Obj/api_tcpip.o(.fast)
<li><a href="#[478]">udp_init</a> from Obj/core_udp.o(.text.udp_init) referenced from Obj/core_init.o(.text.lwip_init)
<li><a href="#[479]">udp_input</a> from Obj/core_udp.o(.fast) referenced from Obj/ipv4_ip4.o(.fast)
<li><a href="#[47a]">udp_bind</a> from Obj/core_udp.o(.text.udp_bind) referenced from Obj/core_udp.o(.fast)
<li><a href="#[47b]">udp_connect</a> from Obj/core_udp.o(.text.udp_connect) referenced from Obj/ipv4_dhcp.o(.text.dhcp_inc_pcb_refcount)
<li><a href="#[47d]">udp_remove</a> from Obj/core_udp.o(.text.udp_remove) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_delconn)
<li><a href="#[47e]">udp_new</a> from Obj/core_udp.o(.text.udp_new) referenced from Obj/core_udp.o(.text.udp_new_ip_type)
<li><a href="#[47f]">udp_new_ip_type</a> from Obj/core_udp.o(.text.udp_new_ip_type) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_newconn)
<li><a href="#[480]">udp_netif_ip_addr_changed</a> from Obj/core_udp.o(.text.udp_netif_ip_addr_changed) referenced from Obj/core_netif.o(.text.netif_set_ipaddr)
<li><a href="#[481]">udp_sendto_if_src</a> from Obj/core_udp.o(.fast) referenced from Obj/core_udp.o(.fast)
<li><a href="#[482]">udp_sendto_if</a> from Obj/core_udp.o(.fast) referenced from Obj/core_udp.o(.fast)
<li><a href="#[483]">udp_sendto</a> from Obj/core_udp.o(.fast) referenced from Obj/api_api_msg.o(.fast)
<li><a href="#[484]">udp_send</a> from Obj/core_udp.o(.fast) referenced from Obj/api_api_msg.o(.fast)
<li><a href="#[485]">udp_recv</a> from Obj/core_udp.o(.fast) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_newconn)
<li><a href="#[487]">ethernet_output</a> from Obj/netif_ethernet.o(.fast) referenced from Obj/ipv4_etharp.o(.fast)
<li><a href="#[48a]">set_if</a> from Obj/netif_ethernetif.o(.text.set_if) referenced from Obj/finsh_msh_cmd.o(.text.cmd_ifconfig)
<li><a href="#[48b]">set_dns</a> from Obj/netif_ethernetif.o(.text.set_dns) referenced from Obj/finsh_msh_cmd.o(.text.cmd_dns)
<li><a href="#[48c]">list_if</a> from Obj/netif_ethernetif.o(.text.list_if) referenced from Obj/finsh_msh_cmd.o(.text.cmd_ifconfig)
<li><a href="#[48d]">list_udps</a> from Obj/netif_ethernetif.o(.text.list_udps) referenced from Obj/finsh_msh_cmd.o(.text.cmd_netstat)
<li><a href="#[48e]">list_tcps</a> from Obj/netif_ethernetif.o(.text.list_tcps) referenced from Obj/finsh_msh_cmd.o(.text.cmd_netstat)
<li><a href="#[48f]">eth_device_init_with_flag</a> from Obj/netif_ethernetif.o(.text.eth_device_init_with_flag) referenced from Obj/netif_ethernetif.o(.text.eth_device_init)
<li><a href="#[490]">eth_device_init</a> from Obj/netif_ethernetif.o(.text.eth_device_init) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth0_init)
<li><a href="#[491]">eth_device_linkchange</a> from Obj/netif_ethernetif.o(.text.eth_device_linkchange) referenced from Obj/drivers_drv_eth.o(.fast)
<li><a href="#[493]">eth_system_device_init_private</a> from Obj/netif_ethernetif.o(.text.eth_system_device_init_private) referenced from Obj/arch_sys_arch.o(.text.lwip_system_init)
<li><a href="#[494]">eth_get_ipv4</a> from Obj/netif_ethernetif.o(.text.eth_get_ipv4) referenced from Obj/api_sockets.o(.text.lwip_ioctl)
<li><a href="#[496]">eth_device_ready</a> from Obj/netif_ethernetif.o(.fast) referenced from Obj/drivers_drv_eth.o(.fast)
<li><a href="#[499]">dhcp_network_changed</a> from Obj/ipv4_dhcp.o(.text.dhcp_network_changed) referenced from Obj/core_netif.o(.text.netif_set_link_up)
<li><a href="#[49a]">dhcp_arp_reply</a> from Obj/ipv4_dhcp.o(.text.dhcp_arp_reply) referenced from Obj/ipv4_etharp.o(.fast)
<li><a href="#[49b]">dhcp_renew</a> from Obj/ipv4_dhcp.o(.text.dhcp_renew) referenced from Obj/ipv4_dhcp.o(.text.dhcp_coarse_tmr)
<li><a href="#[49c]">dhcp_release</a> from Obj/ipv4_dhcp.o(.text.dhcp_release) referenced from Obj/ipv4_dhcp.o(.text.dhcp_coarse_tmr)
<li><a href="#[49f]">dhcp_stop</a> from Obj/ipv4_dhcp.o(.text.dhcp_stop) referenced from Obj/ipv4_dhcp.o(.text.dhcp_start)
<li><a href="#[4a0]">dhcp_start</a> from Obj/ipv4_dhcp.o(.text.dhcp_start) referenced from Obj/arch_sys_arch.o(.text.tcpip_init_done_callback)
<li><a href="#[4a2]">dhcp_check</a> from Obj/ipv4_dhcp.o(.text.dhcp_check) referenced from Obj/ipv4_dhcp.o(.text.dhcp_recv)
<li><a href="#[4a3]">dhcp_bind</a> from Obj/ipv4_dhcp.o(.text.dhcp_bind) referenced from Obj/ipv4_dhcp.o(.text.dhcp_recv)
<li><a href="#[4a4]">dhcp_inc_pcb_refcount</a> from Obj/ipv4_dhcp.o(.text.dhcp_inc_pcb_refcount) referenced from Obj/ipv4_dhcp.o(.text.dhcp_start)
<li><a href="#[4a5]">dhcp_option_short.isra.0</a> from Obj/ipv4_dhcp.o(.text.dhcp_option_short.isra.0) referenced from Obj/ipv4_dhcp.o(.text.dhcp_discover)
<li><a href="#[4a6]">dhcp_option.isra.1</a> from Obj/ipv4_dhcp.o(.text.dhcp_option.isra.1) referenced from Obj/ipv4_dhcp.o(.text.dhcp_create_msg)
<li><a href="#[4a7]">dhcp_option_byte.isra.2</a> from Obj/ipv4_dhcp.o(.text.dhcp_option_byte.isra.2) referenced from Obj/ipv4_dhcp.o(.text.dhcp_create_msg)
<li><a href="#[4a8]">dhcp_create_msg</a> from Obj/ipv4_dhcp.o(.text.dhcp_create_msg) referenced from Obj/ipv4_dhcp.o(.text.dhcp_discover)
<li><a href="#[4a9]">dhcp_option_trailer</a> from Obj/ipv4_dhcp.o(.text.dhcp_option_trailer) referenced from Obj/ipv4_dhcp.o(.text.dhcp_discover)
<li><a href="#[4aa]">dhcp_option_long.isra.4</a> from Obj/ipv4_dhcp.o(.text.dhcp_option_long.isra.4) referenced from Obj/ipv4_dhcp.o(.text.dhcp_select)
<li><a href="#[4ab]">dhcp_delete_msg</a> from Obj/ipv4_dhcp.o(.text.dhcp_delete_msg) referenced from Obj/ipv4_dhcp.o(.text.dhcp_discover)
<li><a href="#[4ac]">dhcp_discover</a> from Obj/ipv4_dhcp.o(.text.dhcp_discover) referenced from Obj/ipv4_dhcp.o(.text.dhcp_recv)
<li><a href="#[4ad]">dhcp_select</a> from Obj/ipv4_dhcp.o(.text.dhcp_select) referenced from Obj/ipv4_dhcp.o(.text.dhcp_recv)
<li><a href="#[4ae]">dhcp_reboot</a> from Obj/ipv4_dhcp.o(.text.dhcp_reboot) referenced from Obj/ipv4_dhcp.o(.text.dhcp_network_changed)
<li><a href="#[4af]">dhcp_dec_pcb_refcount</a> from Obj/ipv4_dhcp.o(.text.dhcp_dec_pcb_refcount) referenced from Obj/ipv4_dhcp.o(.text.dhcp_stop)
<li><a href="#[4b0]">dhcp_handle_ack.isra.8</a> from Obj/ipv4_dhcp.o(.text.unlikely.dhcp_handle_ack.isra.8) referenced from Obj/ipv4_dhcp.o(.text.dhcp_recv)
<li><a href="#[4b3]">free_etharp_q</a> from Obj/ipv4_etharp.o(.text.free_etharp_q) referenced from Obj/ipv4_etharp.o(.fast)
<li><a href="#[4b4]">etharp_raw</a> from Obj/ipv4_etharp.o(.fast) referenced from Obj/ipv4_etharp.o(.fast)
<li><a href="#[4b5]">etharp_output_to_arp_index</a> from Obj/ipv4_etharp.o(.text.etharp_output_to_arp_index) referenced from Obj/ipv4_etharp.o(.fast)
<li><a href="#[4b7]">etharp_query</a> from Obj/ipv4_etharp.o(.text.etharp_query) referenced from Obj/ipv4_etharp.o(.fast)
<li><a href="#[4b8]">etharp_request</a> from Obj/ipv4_etharp.o(.text.etharp_request) referenced from Obj/core_netif.o(.text.netif_issue_reports.part.0)
<li><a href="#[4bd]">etharp_input</a> from Obj/ipv4_etharp.o(.fast) referenced from Obj/netif_ethernet.o(.fast)
<li><a href="#[4bf]">icmp_send_response.isra.0</a> from Obj/ipv4_icmp.o(.text.icmp_send_response.isra.0) referenced from Obj/ipv4_icmp.o(.text.icmp_dest_unreach)
<li><a href="#[4c0]">icmp_input</a> from Obj/ipv4_icmp.o(.text.icmp_input) referenced from Obj/ipv4_ip4.o(.fast)
<li><a href="#[4c1]">icmp_dest_unreach</a> from Obj/ipv4_icmp.o(.text.icmp_dest_unreach) referenced from Obj/core_udp.o(.fast)
<li><a href="#[4c2]">icmp_time_exceeded</a> from Obj/ipv4_icmp.o(.text.icmp_time_exceeded) referenced from Obj/ipv4_ip4.o(.fast)
<li><a href="#[4c3]">igmp_send</a> from Obj/ipv4_igmp.o(.text.igmp_send) referenced from Obj/ipv4_igmp.o(.text.igmp_joingroup_netif)
<li><a href="#[4c4]">igmp_delaying_member</a> from Obj/ipv4_igmp.o(.text.igmp_delaying_member) referenced from Obj/ipv4_igmp.o(.text.igmp_report_groups)
<li><a href="#[4c5]">igmp_lookup_group.isra.3</a> from Obj/ipv4_igmp.o(.text.igmp_lookup_group.isra.3) referenced from Obj/ipv4_igmp.o(.text.igmp_start)
<li><a href="#[4c6]">igmp_init</a> from Obj/ipv4_igmp.o(.text.igmp_init) referenced from Obj/core_init.o(.text.lwip_init)
<li><a href="#[4c7]">igmp_start</a> from Obj/ipv4_igmp.o(.text.igmp_start) referenced from Obj/core_netif.o(.text.netif_add)
<li><a href="#[4c9]">igmp_report_groups</a> from Obj/ipv4_igmp.o(.text.igmp_report_groups) referenced from Obj/core_netif.o(.text.netif_issue_reports.part.0)
<li><a href="#[4ca]">igmp_lookfor_group</a> from Obj/ipv4_igmp.o(.text.igmp_lookfor_group) referenced from Obj/ipv4_ip4.o(.fast)
<li><a href="#[4cb]">igmp_input</a> from Obj/ipv4_igmp.o(.text.igmp_input) referenced from Obj/ipv4_ip4.o(.fast)
<li><a href="#[4cc]">igmp_joingroup_netif</a> from Obj/ipv4_igmp.o(.text.igmp_joingroup_netif) referenced from Obj/ipv4_igmp.o(.text.igmp_joingroup)
<li><a href="#[4cd]">igmp_joingroup</a> from Obj/ipv4_igmp.o(.text.igmp_joingroup) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_join_leave_group)
<li><a href="#[4ce]">igmp_leavegroup_netif</a> from Obj/ipv4_igmp.o(.text.igmp_leavegroup_netif) referenced from Obj/ipv4_igmp.o(.text.igmp_leavegroup)
<li><a href="#[4cf]">igmp_leavegroup</a> from Obj/ipv4_igmp.o(.text.igmp_leavegroup) referenced from Obj/api_api_msg.o(.text.lwip_netconn_do_join_leave_group)
<li><a href="#[4d2]">ip4_route</a> from Obj/ipv4_ip4.o(.fast) referenced from Obj/core_raw.o(.fast)
<li><a href="#[4d3]">ip4_input</a> from Obj/ipv4_ip4.o(.fast) referenced from Obj/netif_ethernet.o(.fast)
<li><a href="#[4d4]">ip4_output_if_opt_src</a> from Obj/ipv4_ip4.o(.fast) referenced from Obj/ipv4_ip4.o(.fast)
<li><a href="#[4d5]">ip4_output_if_opt</a> from Obj/ipv4_ip4.o(.fast) referenced from Obj/ipv4_igmp.o(.text.igmp_send)
<li><a href="#[4d6]">ip4_output_if</a> from Obj/ipv4_ip4.o(.fast) referenced from Obj/core_raw.o(.fast)
<li><a href="#[4d7]">ip4_output_if_src</a> from Obj/ipv4_ip4.o(.fast) referenced from Obj/core_udp.o(.fast)
<li><a href="#[4d9]">ip4_addr_isbroadcast_u32</a> from Obj/ipv4_ip4_addr.o(.fast) referenced from Obj/core_raw.o(.fast)
<li><a href="#[4db]">ip4addr_aton</a> from Obj/ipv4_ip4_addr.o(.fast) referenced from Obj/netif_ethernetif.o(.text.set_dns)
<li><a href="#[4dc]">ipaddr_addr</a> from Obj/ipv4_ip4_addr.o(.fast) referenced from Obj/netif_ethernetif.o(.text.set_if)
<li><a href="#[4dd]">ip4addr_ntoa_r</a> from Obj/ipv4_ip4_addr.o(.fast) referenced from Obj/ipv4_ip4_addr.o(.fast)
<li><a href="#[4de]">ip4addr_ntoa</a> from Obj/ipv4_ip4_addr.o(.fast) referenced from Obj/netif_ethernetif.o(.text.list_if)
<li><a href="#[4df]">ip_reass_dequeue_datagram</a> from Obj/ipv4_ip4_frag.o(.fast) referenced from Obj/ipv4_ip4_frag.o(.fast)
<li><a href="#[4e3]">ip4_reass</a> from Obj/ipv4_ip4_frag.o(.fast) referenced from Obj/ipv4_ip4.o(.fast)
<li><a href="#[4e4]">ip4_frag</a> from Obj/ipv4_ip4_frag.o(.fast) referenced from Obj/ipv4_ip4.o(.fast)
<li><a href="#[4e5]">sendto_ntp_server</a> from Obj/ntp_ntp.o(.text.sendto_ntp_server) referenced from Obj/ntp_ntp.o(.text.ntp_get_time)
<li><a href="#[4e6]">ntp_get_time</a> from Obj/ntp_ntp.o(.text.ntp_get_time) referenced from Obj/ntp_ntp.o(.text.ntp_sync_to_rtc)
<li><a href="#[4e8]">ntp_sync_to_rtc</a> from Obj/ntp_ntp.o(.text.ntp_sync_to_rtc) referenced from Obj/rtc_rtc.o(.text.ntp_sync_thread_enrty)
<li><a href="#[4e9]">ntp_sync</a> from Obj/ntp_ntp.o(.text.ntp_sync) referenced from Obj/ntp_ntp.o(.text.cmd_ntp_sync)
<li><a href="#[4eb]">ping</a> from Obj/ping_ping.o(.text.ping) referenced from Obj/ping_ping.o(.text.cmd_ping)
<li><a href="#[4ed]">dma_channel_intr_enable</a> from bsp_dma.o(.fast) referenced from bsp_dma.o(.fast)
<li><a href="#[4ef]">dma_intr_enable</a> from bsp_dma.o(.text.dma_intr_enable) referenced from common_memcpy_hw.o(.text.mem_hw_init)
<li><a href="#[4f4]">dma_intr_status</a> from bsp_dma.o(.fast) referenced from common_memcpy_hw.o(.fast)
<li><a href="#[4f5]">dma_intr_clear</a> from bsp_dma.o(.fast) referenced from common_memcpy_hw.o(.fast)
<li><a href="#[4f8]">gpio_pull_mode_set.part.0</a> from bsp_gpio.o(.text.gpio_pull_mode_set.part.0) referenced from bsp_gpio.o(.text.gpio_hw_init)
<li><a href="#[4f9]">gpio_intr_enable</a> from bsp_gpio.o(.text.gpio_intr_enable) referenced from Obj/drivers_drv_gpio.o(.text.drv_pin_irq_enable)
<li><a href="#[4fa]">gpio_intr_disable</a> from bsp_gpio.o(.text.gpio_intr_disable) referenced from Obj/drivers_drv_gpio.o(.text.drv_pin_detach_irq)
<li><a href="#[4fe]">gpio_hw_init</a> from bsp_gpio.o(.text.gpio_hw_init) referenced from Obj/drivers_drv_gpio.o(.text.drv_pin_mode)
<li><a href="#[4ff]">gpio_set</a> from bsp_gpio.o(.text.gpio_set) referenced from Obj/drivers_drv_gpio.o(.text.drv_pin_write)
<li><a href="#[500]">gpio_get</a> from bsp_gpio.o(.text.gpio_get) referenced from Obj/drivers_drv_gpio.o(.text.drv_pin_read)
<li><a href="#[502]">h2x_hw_init</a> from bsp_h2x.o(.text.h2x_hw_init) referenced from Obj/drivers_system.o(.text.sys_hw_init)
<li><a href="#[509]">i2c_recv</a> from bsp_i2c.o(.text.i2c_recv) referenced from Obj/drivers_drv_i2c.o(.fast)
<li><a href="#[50a]">i2c_send</a> from bsp_i2c.o(.text.i2c_send) referenced from Obj/drivers_drv_i2c.o(.fast)
<li><a href="#[50b]">i2c_is_busy</a> from bsp_i2c.o(.text.i2c_is_busy) referenced from Obj/drivers_drv_i2c.o(.fast)
<li><a href="#[50c]">i2c_hw_init</a> from bsp_i2c.o(.text.i2c_hw_init) referenced from Obj/drivers_drv_i2c.o(.text.drv_i2c_init)
<li><a href="#[510]">clock_source_set.part.0</a> from bsp_scu.o(.fast) referenced from bsp_scu.o(.fast)
<li><a href="#[514]">scu_pin_mux_set</a> from bsp_scu.o(.text.scu_pin_mux_set) referenced from Obj/drivers_drv_gpio.o(.text.drv_pin_mode)
<li><a href="#[519]">scu_sw_cnt_get</a> from bsp_scu.o(.fast) referenced from Obj/drivers_system.o(.fast)
<li><a href="#[51a]">scu_sw_cnt_enable</a> from bsp_scu.o(.fast) referenced from Obj/drivers_system.o(.fast)
<li><a href="#[51e]">multi_module_reset</a> from bsp_scu.o(.fast) referenced from Obj/drivers_drv_sata.o(.text.drv_ata_reset)
<li><a href="#[51f]">module_enable</a> from bsp_scu.o(.fast) referenced from Obj/drivers_system.o(.text.sys_hw_init)
<li><a href="#[521]">clock_freq_get</a> from bsp_scu.o(.fast) referenced from Obj/drivers_drv_sata.o(.text.drv_ata_init)
<li><a href="#[522]">clock_freq_set</a> from bsp_scu.o(.fast) referenced from Obj/drivers_system.o(.text.sys_hw_init)
<li><a href="#[523]">clock_source_set</a> from bsp_scu.o(.fast) referenced from Obj/drivers_system.o(.text.sys_hw_init)
<li><a href="#[525]">clock_enable</a> from bsp_scu.o(.fast) referenced from Obj/drivers_system.o(.text.sys_hw_init)
<li><a href="#[527]">clock_reset</a> from bsp_scu.o(.fast) referenced from Obj/drivers_system.o(.text.sys_hw_init)
<li><a href="#[52b]">spi_hw_init</a> from bsp_spi.o(.text.spi_hw_init) referenced from Obj/drivers_drv_spi.o(.text.drv_spi_configure)
<li><a href="#[52c]">spi_send_recv</a> from bsp_spi.o(.text.spi_send_recv) referenced from Obj/drivers_drv_spi.o(.fast)
<li><a href="#[531]">spi_frame_output_port_set</a> from bsp_spi.o(.text.spi_frame_output_port_set) referenced from Obj/drivers_drv_spi.o(.text.drv_spi_init)
<li><a href="#[532]">spi_frame_output_low</a> from bsp_spi.o(.text.spi_frame_output_low) referenced from Obj/drivers_drv_spi.o(.fast)
<li><a href="#[533]">spi_frame_output_high</a> from bsp_spi.o(.text.spi_frame_output_high) referenced from Obj/drivers_drv_spi.o(.fast)
<li><a href="#[53d]">spi_tx_rx_fifo</a> from bsp_spi.o(.text.spi_tx_rx_fifo) referenced from bsp_spi.o(.text.spi_send_recv)
<li><a href="#[540]">timer_count_get</a> from bsp_timer.o(.fast) referenced from Obj/drivers_drv_timer.o(.fast)
<li><a href="#[541]">timer_hw_init</a> from bsp_timer.o(.text.timer_hw_init) referenced from Obj/drivers_drv_timer.o(.fast)
<li><a href="#[548]">timer_intr_status</a> from bsp_timer.o(.fast) referenced from Obj/drivers_drv_timer.o(.fast)
<li><a href="#[549]">timer_intr_clear</a> from bsp_timer.o(.fast) referenced from Obj/drivers_drv_timer.o(.fast)
<li><a href="#[54a]">timer_start</a> from bsp_timer.o(.fast) referenced from Obj/drivers_drv_timer.o(.fast)
<li><a href="#[54b]">timer_stop</a> from bsp_timer.o(.fast) referenced from Obj/drivers_drv_timer.o(.fast)
<li><a href="#[54e]">tic_us_get</a> from bsp_timer.o(.fast) referenced from Obj/drivers_drv_timer.o(.fast)
<li><a href="#[558]">uart_hw_init</a> from bsp_uart.o(.text.uart_hw_init) referenced from Obj/drivers_drv_uart.o(.fast)
<li><a href="#[559]">uart_intr_enable</a> from bsp_uart.o(.text.uart_intr_enable) referenced from Obj/drivers_drv_uart.o(.fast)
<li><a href="#[55a]">uart_intr_disable</a> from bsp_uart.o(.text.uart_intr_disable) referenced from Obj/drivers_drv_uart.o(.fast)
<li><a href="#[55b]">uart_intr_status</a> from bsp_uart.o(.fast) referenced from Obj/drivers_drv_uart.o(.fast)
<li><a href="#[55c]">console_putc</a> from bsp_uart.o(.text.console_putc) referenced from Obj/drivers_retarget.o(.text.fputc)
<li><a href="#[55e]">uart_putc</a> from bsp_uart.o(.text.uart_putc) referenced from Obj/drivers_drv_uart.o(.fast)
<li><a href="#[564]">uart_rx_ready</a> from bsp_uart.o(.text.uart_rx_ready) referenced from Obj/drivers_drv_uart.o(.fast)
<li><a href="#[565]">uart_ndelay_getc</a> from bsp_uart.o(.text.uart_ndelay_getc) referenced from Obj/drivers_drv_uart.o(.fast)
<li><a href="#[566]">uart_intr_clear</a> from bsp_uart.o(.fast) referenced from Obj/drivers_drv_uart.o(.fast)
<li><a href="#[56b]">wdt_hw_init</a> from bsp_wdt.o(.text.wdt_hw_init) referenced from Obj/drivers_drv_wdt.o(.fast)
<li><a href="#[56c]">wdt_start</a> from bsp_wdt.o(.text.wdt_start) referenced from Obj/drivers_drv_wdt.o(.fast)
<li><a href="#[56d]">wdt_stop</a> from bsp_wdt.o(.text.wdt_stop) referenced from Obj/drivers_drv_wdt.o(.fast)
<li><a href="#[56e]">chip_reset</a> from bsp_wdt.o(.text.chip_reset) referenced from Obj/ck803_cpuport.o(.text.rt_hw_hard_fault_exception)
<li><a href="#[572]">wdt_feed</a> from bsp_wdt.o(.fast) referenced from Obj/drivers_drv_wdt.o(.fast)
<li><a href="#[597]">pke_init</a> from crypto_pke.o(.text.pke_init) referenced from Obj/drivers_drv_crypto.o(.text.drv_crypto_reset)
<li><a href="#[5c0]">get_rand</a> from crypto_rng.o(.fast) referenced from crypto_rng.o(.fast)
<li><a href="#[5c2]">rand_get</a> from crypto_rng.o(.fast) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth0_init)
<li><a href="#[5f7]">symm_param_cfg</a> from crypto_crypto.o(.fast) referenced from crypto_crypto.o(.fast)
<li><a href="#[5f8]">crypto_hw_init</a> from crypto_crypto.o(.text.crypto_hw_init) referenced from Obj/drivers_drv_crypto.o(.text.drv_crypto_ioctl)
<li><a href="#[5f9]">crypto_reset</a> from crypto_crypto.o(.text.crypto_reset) referenced from Obj/drivers_drv_sata.o(.text.drv_ata_reset)
<li><a href="#[5fb]">crypto_data_pad</a> from crypto_crypto.o(.text.crypto_data_pad) referenced from Obj/drivers_drv_sata.o(.text.drv_ata_reset)
<li><a href="#[5fc]">crypto_data_discard</a> from crypto_crypto.o(.text.crypto_data_discard) referenced from Obj/drivers_drv_sata.o(.text.drv_ata_reset)
<li><a href="#[601]">crypto_is_busy</a> from crypto_crypto.o(.fast) referenced from Obj/drivers_drv_sata.o(.text.drv_ata_reset)
<li><a href="#[602]">crypto_bridge_is_required</a> from crypto_crypto.o(.fast) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[603]">crypto_frontend_port_addr</a> from crypto_crypto.o(.fast) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[606]">crypto_bridge_enable</a> from crypto_crypto.o(.fast) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[618]">norc_port_switch_cmd.part.0</a> from norflash_norflash.o(.text.norc_port_switch_cmd.part.0) referenced from norflash_norflash.o(.text.norflash_hw_init)
<li><a href="#[619]">norc_port_switch_xip.part.1</a> from norflash_norflash.o(.text.norc_port_switch_xip.part.1) referenced from norflash_norflash.o(.text.norflash_hw_init)
<li><a href="#[61c]">norflash_hw_init</a> from norflash_norflash.o(.text.norflash_hw_init) referenced from Obj/drivers_system.o(.fast)
<li><a href="#[61e]">norflash_byte_write</a> from norflash_norflash.o(.text.norflash_byte_write) referenced from common_log.o(.fast)
<li><a href="#[61f]">norflash_read</a> from norflash_norflash.o(.text.norflash_read) referenced from common_log.o(.fast)
<li><a href="#[620]">norflash_write</a> from norflash_norflash.o(.text.norflash_write) referenced from common_log.o(.fast)
<li><a href="#[621]">norflash_sector_erase</a> from norflash_norflash.o(.text.norflash_sector_erase) referenced from common_log.o(.fast)
<li><a href="#[67c]">ahci_intr_enable</a> from sata_host_ahci.o(.text.ahci_intr_enable) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[67d]">ahci_intr_disable</a> from sata_host_ahci.o(.text.ahci_intr_disable) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[67e]">ahci_intr_status</a> from sata_host_ahci.o(.text.ahci_intr_status) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[67f]">ahci_intr_clear</a> from sata_host_ahci.o(.text.ahci_intr_clear) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[681]">ahci_port_init</a> from sata_host_ahci.o(.text.ahci_port_init) referenced from sata_host_ahci.o(.text.ahci_hba_reset)
<li><a href="#[690]">ahci_hex_print</a> from sata_host_ahci.o(.text.ahci_hex_print) referenced from sata_host_ahci_cmd.o(.fast)
<li><a href="#[693]">ahci_port_serr_clear</a> from sata_host_ahci.o(.text.ahci_port_serr_clear) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[696]">ahci_reg_is_flush</a> from sata_host_ahci.o(.text.ahci_reg_is_flush) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[698]">ahci_reg_ci_get</a> from sata_host_ahci.o(.text.ahci_reg_ci_get) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[69e]">ahci_ccs_get</a> from sata_host_ahci.o(.text.ahci_ccs_get) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[6a3]">ahci_xfer_mode_set</a> from sata_host_ahci.o(.text.ahci_xfer_mode_set) referenced from Obj/drivers_drv_sata.o(.text.drv_ata_probe)
<li><a href="#[6a5]">identify_revise</a> from sata_host_ahci.o(.text.identify_revise) referenced from sata_host_ahci.o(.text.ahci_identify_read)
<li><a href="#[6a6]">ahci_identify_read</a> from sata_host_ahci.o(.text.ahci_identify_read) referenced from Obj/drivers_drv_sata.o(.text.drv_ata_probe)
<li><a href="#[6ad]">ahci_passthru</a> from sata_host_ahci.o(.text.ahci_passthru) referenced from sata_host_ahci.o(.text.ahci_hba_reset)
<li><a href="#[6ae]">ahci_hba_reset</a> from sata_host_ahci.o(.text.ahci_hba_reset) referenced from Obj/drivers_drv_sata.o(.text.drv_ata_probe)
<li><a href="#[6b1]">ahci_hw_init</a> from sata_host_ahci.o(.text.ahci_hw_init) referenced from Obj/drivers_drv_sata.o(.text.drv_ata_init)
<li><a href="#[6b2]">ahci_clock_set</a> from sata_host_ahci.o(.text.ahci_clock_set) referenced from Obj/drivers_drv_sata.o(.text.drv_ata_init)
<li><a href="#[6b4]">ahci_wait_timeout_set</a> from sata_host_ahci.o(.text.ahci_wait_timeout_set) referenced from Obj/drivers_drv_sata.o(.text.drv_ata_init)
<li><a href="#[6b5]">ahci_speed_set</a> from sata_host_ahci.o(.text.ahci_speed_set) referenced from Obj/drivers_drv_sata.o(.text.drv_ata_init)
<li><a href="#[6b6]">ahci_prdt_setup</a> from sata_host_ahci.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[6b7]">ahci_prdt_setup2</a> from sata_host_ahci.o(.fast) referenced from sata_host_ahci_cmd.o(.fast)
<li><a href="#[6b8]">ahci_prdt_pre_setup</a> from sata_host_ahci.o(.fast) referenced from sata_host_ahci_cmd.o(.fast)
<li><a href="#[6b9]">ahci_hba_get</a> from sata_host_ahci.o(.fast) referenced from Obj/drivers_drv_sata.o(.text.drv_ata_register)
<li><a href="#[6bb]">ahci_reg_sact_get</a> from sata_host_ahci.o(.fast) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[6bc]">ahci_link_change_handler</a> from sata_host_ahci.o(.fast) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[6bd]">ahci_port_reset</a> from sata_host_ahci.o(.fast) referenced from sata_host_ahci.o(.text.ahci_hba_reset)
<li><a href="#[6be]">ahci_cmd_complete_wait</a> from sata_host_ahci.o(.fast) referenced from sata_host_ahci_cmd.o(.fast)
<li><a href="#[6bf]">ahci_cache_flush</a> from sata_host_ahci.o(.fast) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[6c0]">ahci_data_set_trim</a> from sata_host_ahci.o(.fast) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[6c2]">ahci_sector_read</a> from sata_host_ahci.o(.fast) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[6c3]">ahci_sector_write</a> from sata_host_ahci.o(.fast) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[6c6]">ahci_error_recover</a> from sata_host_ahci.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[6c7]">ahci_error_handler</a> from sata_host_ahci.o(.fast) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[6c8]">ahci_cmd_slot_is_empty</a> from sata_host_ahci_cmd.o(.fast) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[6ca]">ahci_cmd_identify</a> from sata_host_ahci_cmd.o(.text.ahci_cmd_identify) referenced from sata_host_ahci.o(.text.ahci_identify_read)
<li><a href="#[6ce]">ahci_cmd_set_features</a> from sata_host_ahci_cmd.o(.text.ahci_cmd_set_features) referenced from sata_host_ahci.o(.text.ahci_xfer_mode_set)
<li><a href="#[6d4]">ahci_cmd_slot_free</a> from sata_host_ahci_cmd.o(.fast) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[6d7]">ahci_fis_rx</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[6d8]">ahci_cmd_issue</a> from sata_host_ahci_cmd.o(.fast) referenced from Obj/drivers_drv_sata.o(.fast)
<li><a href="#[6d9]">ahci_non_data_lba</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.text.ahci_passthru)
<li><a href="#[6da]">ahci_inout_data_lba</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.text.ahci_passthru)
<li><a href="#[6db]">ahci_dma_ncq_lba</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci_cmd.o(.fast)
<li><a href="#[6dc]">ahci_cmd_flush_cache</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[6dd]">ahci_cmd_flush_cache_ext</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[6de]">ahci_cmd_read_sector_lba28</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[6df]">ahci_cmd_read_sector_lba48</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[6e0]">ahci_cmd_write_sector_lba28</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[6e1]">ahci_cmd_write_sector_lba48</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[6e2]">ahci_cmd_ncq_queue_mgmt</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[6e3]">ahci_cmd_rw_ncq</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[6e4]">ahci_cmd_rw_dma</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[6e7]">ahci_cmd_read_ncq</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[6e8]">ahci_cmd_write_ncq</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[6e9]">ahci_cmd_read_multi_lba28</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[6ea]">ahci_cmd_read_multi_lba48</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[6eb]">ahci_cmd_write_multi_lba28</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[6ec]">ahci_cmd_write_multi_lba48</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[6ed]">ahci_cmd_data_set_management_trim</a> from sata_host_ahci_cmd.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[6f6]">ascii_to_dec</a> from common_log.o(.fast) referenced from common_log.o(.fast)
<li><a href="#[6f9]">log_write</a> from common_log.o(.fast) referenced from common_log.o(.fast)
<li><a href="#[6fc]">log_nonvolatile</a> from common_log.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[6fd]">log_error_id</a> from common_log.o(.fast) referenced from sata_host_ahci.o(.fast)
<li><a href="#[6ff]">mem_hw_internal</a> from common_memcpy_hw.o(.fast) referenced from common_memcpy_hw.o(.fast)
<li><a href="#[700]">mem_hw_init</a> from common_memcpy_hw.o(.text.mem_hw_init) referenced from Obj/src_kservice.o(.text.xmem_init)
<li><a href="#[701]">memcpy_hw</a> from common_memcpy_hw.o(.fast) referenced from Obj/src_kservice.o(.fast)
<li><a href="#[702]">memset_hw</a> from common_memcpy_hw.o(.fast) referenced from Obj/src_kservice.o(.fast)
<li><a href="#[774]">gmac_wol_wakeup_event_set</a> from gmac_gmac.o(.text.gmac_wol_wakeup_event_set) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[776]">gmac_wol_mode_enter</a> from gmac_gmac.o(.text.gmac_wol_mode_enter) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[777]">gmac_wol_mode_exit</a> from gmac_gmac.o(.text.gmac_wol_mode_exit) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[778]">gmac_wol_state_poll</a> from gmac_gmac.o(.text.gmac_wol_state_poll) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[779]">gmac_speed_duplex_set</a> from gmac_gmac.o(.text.gmac_speed_duplex_set) referenced from Obj/drivers_drv_eth.o(.fast)
<li><a href="#[77a]">gmac_statistics_get</a> from gmac_gmac.o(.text.gmac_statistics_get) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[77b]">gmac_tx_queue_init</a> from gmac_gmac.o(.text.gmac_tx_queue_init) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth0_init)
<li><a href="#[77c]">gmac_rx_queue_init</a> from gmac_gmac.o(.text.gmac_rx_queue_init) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth0_init)
<li><a href="#[77d]">gmac_hw_init</a> from gmac_gmac.o(.text.gmac_hw_init) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth0_init)
<li><a href="#[77e]">gmac_hw_deinit</a> from gmac_gmac.o(.text.gmac_hw_deinit) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[77f]">gmac_phy_addr_set</a> from gmac_gmac.o(.fast) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth0_init)
<li><a href="#[780]">gmac_addr_filter_set</a> from gmac_gmac.o(.text.gmac_addr_filter_set) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth0_init)
<li><a href="#[781]">gmac_addr_filter_get</a> from gmac_gmac.o(.text.gmac_addr_filter_get) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[782]">gmac_hash_filter_set</a> from gmac_gmac.o(.text.gmac_hash_filter_set) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[783]">gmac_hash_filter_get</a> from gmac_gmac.o(.text.gmac_hash_filter_get) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[784]">gmac_mac_addr_set</a> from gmac_gmac.o(.text.gmac_mac_addr_set) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth0_init)
<li><a href="#[785]">gmac_mac_addr_get</a> from gmac_gmac.o(.text.gmac_mac_addr_get) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[786]">gmac_flow_ctrl_enable</a> from gmac_gmac.o(.text.gmac_flow_ctrl_enable) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth0_init)
<li><a href="#[787]">gmac_flow_ctrl_disable</a> from gmac_gmac.o(.text.gmac_flow_ctrl_disable) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[788]">gmac_tx_enable</a> from gmac_gmac.o(.text.gmac_tx_enable) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth0_init)
<li><a href="#[789]">gmac_tx_disable</a> from gmac_gmac.o(.text.gmac_tx_disable) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[78a]">gmac_rx_enable</a> from gmac_gmac.o(.text.gmac_rx_enable) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth0_init)
<li><a href="#[78b]">gmac_rx_disable</a> from gmac_gmac.o(.text.gmac_rx_disable) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[78c]">gmac_jumbo_frame_enable</a> from gmac_gmac.o(.text.gmac_jumbo_frame_enable) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[78d]">gmac_jumbo_frame_disable</a> from gmac_gmac.o(.text.gmac_jumbo_frame_disable) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[78e]">gmac_chksum_offload_set</a> from gmac_gmac.o(.text.gmac_chksum_offload_set) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth0_init)
<li><a href="#[790]">gmac_wol_wakeup_frame_filter_set</a> from gmac_gmac.o(.text.gmac_wol_wakeup_frame_filter_set) referenced from Obj/drivers_drv_eth.o(.text.eth_dev_control)
<li><a href="#[791]">gmac_phy_mmd_clk_set</a> from gmac_gmac.o(.fast) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth0_init)
<li><a href="#[792]">gmac_phy_mmd_read16</a> from gmac_gmac.o(.fast) referenced from Obj/src_tih_phy_m88e1512.o(.text.marvell_phy_init)
<li><a href="#[793]">gmac_phy_mmd_write16</a> from gmac_gmac.o(.fast) referenced from Obj/src_tih_phy_m88e1512.o(.text.marvell_phy_intr_enable)
<li><a href="#[794]">gmac_intr_enable</a> from gmac_gmac.o(.fast) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth0_init)
<li><a href="#[795]">gmac_intr_disable</a> from gmac_gmac.o(.fast) referenced from Obj/drivers_drv_eth.o(.fast)
<li><a href="#[796]">gmac_intr_status</a> from gmac_gmac.o(.fast) referenced from Obj/drivers_drv_eth.o(.fast)
<li><a href="#[797]">gmac_intr_clear</a> from gmac_gmac.o(.fast) referenced from Obj/drivers_drv_eth.o(.fast)
<li><a href="#[798]">gmac_frame_transmit</a> from gmac_gmac.o(.fast) referenced from Obj/drivers_drv_eth.o(.fast)
<li><a href="#[799]">gmac_frame_transmitted_buf_poll</a> from gmac_gmac.o(.fast) referenced from Obj/drivers_drv_eth.o(.fast)
<li><a href="#[79a]">gmac_frame_recv_poll</a> from gmac_gmac.o(.fast) referenced from Obj/drivers_drv_eth.o(.fast)
<li><a href="#[79b]">gmac_rx_buf_attach</a> from gmac_gmac.o(.fast) referenced from Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth0_init)
<li><a href="#[79c]">gmac_rx_valid_buf</a> from gmac_gmac.o(.fast) referenced from Obj/drivers_drv_eth.o(.fast)
<li><a href="#[79d]">gmac_rx_buf_processed</a> from gmac_gmac.o(.fast) referenced from Obj/drivers_drv_eth.o(.fast)
<li><a href="#[317]">free</a> from cklib_malloc.o(.text.free) referenced from sata_host_ahci.o(.text.ahci_hba_reset)
<li><a href="#[319]">calloc</a> from cklib_malloc.o(.text.calloc) referenced from sata_host_ahci.o(.text.ahci_hba_reset)
<li><a href="#[ed]">vsprintf</a> from cklib_printf.o(.text.vsprintf) referenced from common_log.o(.fast)
<li><a href="#[ef]">sprintf</a> from cklib_printf.o(.text.sprintf) referenced from common_log.o(.fast)
<li><a href="#[f5]">printf</a> from cklib_printf.o(.text.printf) referenced from crypto_crypto.o(.fast)
<li><a href="#[83a]">csi_vic_init</a> from ck803_core_ck803.o(.fast) referenced from ck803_interrupt.o(.text.intr_hw_init)
<li><a href="#[83c]">csi_cache_set_range</a> from ck803_core_ck803.o(.text.csi_cache_set_range) referenced from Obj/drivers_system.o(.text.sys_hw_init)
<li><a href="#[848]">csi_vic_enable_irq</a> from ck803_core_ck803.o(.fast) referenced from ck803_interrupt.o(.fast)
<li><a href="#[849]">csi_vic_disable_irq</a> from ck803_core_ck803.o(.fast) referenced from ck803_interrupt.o(.fast)
<li><a href="#[84c]">csi_vic_clear_pending_irq</a> from ck803_core_ck803.o(.fast) referenced from Obj/drivers_drv_intr.o(.fast)
<li><a href="#[852]">csi_vic_set_prio</a> from ck803_core_ck803.o(.fast) referenced from Obj/drivers_drv_intr.o(.text.rt_hw_interrupt_init)
<li><a href="#[854]">csi_vic_set_vector</a> from ck803_core_ck803.o(.fast) referenced from ck803_interrupt.o(.text.intr_hw_init)
<li><a href="#[858]">csi_icache_enable</a> from ck803_core_ck803.o(.fast) referenced from Obj/drivers_system.o(.text.sys_hw_init)
<li><a href="#[85c]">csi_dcache_invalid</a> from ck803_core_ck803.o(.fast) referenced from ck803_core_ck803.o(.fast)
<li><a href="#[860]">csi_dcache_invalid_range</a> from ck803_core_ck803.o(.fast) referenced from ck803_interrupt.o(.fast)
<li><a href="#[862]">csi_dcache_clean_invalid_range</a> from ck803_core_ck803.o(.fast) referenced from ck803_interrupt.o(.fast)
<li><a href="#[863]">csi_irq_save</a> from ck803_core_ck803.o(.fast) referenced from norflash_norflash.o(.text.norc_port_switch_cmd.part.0)
<li><a href="#[864]">csi_irq_restore</a> from ck803_core_ck803.o(.fast) referenced from norflash_norflash.o(.text.norc_port_switch_xip.part.1)
<li><a href="#[865]">irq_enable</a> from ck803_core_ck803.o(.fast) referenced from Obj/drivers_system.o(.fast)
<li><a href="#[867]">core_timer_hw_init</a> from ck803_core_timer.o(.text.core_timer_hw_init) referenced from Obj/drivers_drv_ctimer.o(.text.core_timer_init)
<li><a href="#[869]">core_timer_intr_enable</a> from ck803_core_timer.o(.text.core_timer_intr_enable) referenced from Obj/drivers_drv_ctimer.o(.text.core_timer_init)
<li><a href="#[86a]">core_timer_intr_disable</a> from ck803_core_timer.o(.text.core_timer_intr_disable) referenced from Obj/drivers_drv_ctimer.o(.text.core_timer_init)
<li><a href="#[86c]">core_timer_intr_clear</a> from ck803_core_timer.o(.fast) referenced from Obj/drivers_drv_ctimer.o(.fast)
<li><a href="#[86d]">core_timer_start</a> from ck803_core_timer.o(.fast) referenced from Obj/drivers_drv_ctimer.o(.text.core_timer_init)
<li><a href="#[870]">intr_cache_flush.part.0</a> from ck803_interrupt.o(.fast) referenced from ck803_interrupt.o(.fast)
<li><a href="#[871]">intr_hw_init</a> from ck803_interrupt.o(.text.intr_hw_init) referenced from Obj/drivers_drv_intr.o(.text.rt_hw_interrupt_init)
<li><a href="#[876]">intr_connect</a> from ck803_interrupt.o(.fast) referenced from Obj/drivers_drv_intr.o(.fast)
<li><a href="#[877]">intr_disconnect</a> from ck803_interrupt.o(.fast) referenced from Obj/drivers_drv_intr.o(.fast)
<li><a href="#[879]">intr_enable</a> from ck803_interrupt.o(.fast) referenced from Obj/drivers_drv_intr.o(.fast)
<li><a href="#[87a]">intr_disable</a> from ck803_interrupt.o(.fast) referenced from Obj/drivers_drv_intr.o(.fast)
<li><a href="#[87d]">__muldi3</a> from _muldi3.o(.text) referenced from _mul_sf.o(.text)
<li><a href="#[87e]">__fixunssfsi</a> from _fixunssfsi.o(.text) referenced from bsp_timer.o(.text.timer_hw_init)
<li><a href="#[881]">__udivdi3</a> from _udivdi3.o(.text) referenced from Obj/src_kservice.o(.text.print_number)
<li><a href="#[882]">__umoddi3</a> from _umoddi3.o(.text) referenced from Obj/src_kservice.o(.text.print_number)
<li><a href="#[883]">_fpadd_parts</a> from _addsub_sf.o(.text) referenced from _addsub_sf.o(.text)
<li><a href="#[884]">__addsf3</a> from _addsub_sf.o(.text) referenced from Obj/hwtimer_hwtimer.o(.text.rt_hwtimer_write)
<li><a href="#[885]">__subsf3</a> from _addsub_sf.o(.text) referenced from bsp_timer.o(.text.timer_hw_init)
<li><a href="#[886]">__mulsf3</a> from _mul_sf.o(.text) referenced from bsp_timer.o(.text.timer_hw_init)
<li><a href="#[887]">__divsf3</a> from _div_sf.o(.text) referenced from Obj/drivers_drv_cputime.o(.text.drv_cputime_getres)
<li><a href="#[888]">__eqsf2</a> from _eq_sf.o(.text) referenced from Obj/hwtimer_hwtimer.o(.text.rt_hwtimer_write)
<li><a href="#[88a]">__gtsf2</a> from _gt_sf.o(.text) referenced from Obj/hwtimer_hwtimer.o(.text.rt_hwtimer_write)
<li><a href="#[88b]">__gesf2</a> from _ge_sf.o(.text) referenced from _fixunssfsi.o(.text)
<li><a href="#[88c]">__ltsf2</a> from _lt_sf.o(.text) referenced from Obj/hwtimer_hwtimer.o(.text.rt_hwtimer_write)
<li><a href="#[88d]">__floatsisf</a> from _si_to_sf.o(.text) referenced from Obj/hwtimer_hwtimer.o(.text.rt_hwtimer_write)
<li><a href="#[88e]">__fixsfsi</a> from _sf_to_si.o(.text) referenced from _fixunssfsi.o(.text)
<li><a href="#[890]">__floatunsisf</a> from _usi_to_sf.o(.text) referenced from bsp_timer.o(.text.timer_hw_init)
<li><a href="#[891]">_fpadd_parts</a> from _addsub_df.o(.text) referenced from _addsub_df.o(.text)
<li><a href="#[893]">__subdf3</a> from _addsub_df.o(.text) referenced from Obj/src_kservice.o(.text.rt_vsnprintf)
<li><a href="#[894]">__muldf3</a> from _mul_df.o(.text) referenced from Obj/src_kservice.o(.text.rt_vsnprintf)
<li><a href="#[896]">__eqdf2</a> from _eq_df.o(.text) referenced from Obj/src_kservice.o(.text.rt_vsnprintf)
<li><a href="#[897]">__floatsidf</a> from _si_to_df.o(.text) referenced from Obj/src_kservice.o(.text.rt_vsnprintf)
<li><a href="#[898]">__fixdfsi</a> from _df_to_si.o(.text) referenced from Obj/src_kservice.o(.text.rt_vsnprintf)
<li><a href="#[89c]">__pack_f</a> from _pack_sf.o(.text) referenced from _addsub_sf.o(.text)
<li><a href="#[89d]">__unpack_f</a> from _unpack_sf.o(.text) referenced from _addsub_sf.o(.text)
<li><a href="#[89e]">__fpcmp_parts_f</a> from _fpcmp_parts_sf.o(.text) referenced from _eq_sf.o(.text)
<li><a href="#[8a0]">__pack_d</a> from _pack_df.o(.text) referenced from _addsub_df.o(.text)
<li><a href="#[8a1]">__unpack_d</a> from _unpack_df.o(.text) referenced from _addsub_df.o(.text)
<li><a href="#[8a2]">__fpcmp_parts_d</a> from _fpcmp_parts_df.o(.text) referenced from _eq_df.o(.text)
<li><a href="#[8a4]">putchar</a> from putchar.o(.text) referenced from Obj/entry_ipraw.o(.text.data_print.constprop.1)
<li><a href="#[8a6]">perror</a> from perror.o(.text) referenced from Obj/entry_ipraw.o(.text.iprawtest)
<li><a href="#[8a8]">fputs</a> from fputs.o(.text) referenced from perror.o(.text)
<li><a href="#[8aa]">rand</a> from rand.o(.text) referenced from Obj/core_dns.o(.text.dns_check_entry)
<li><a href="#[8ae]">strtoul</a> from strtoul.o(.text) referenced from Obj/entry_ipraw.o(.text.iprawtest)
<li><a href="#[8af]">atoi</a> from atoi.o(.text) referenced from Obj/rtc_rtc.o(.text.date)
<li><a href="#[8b1]">strerror</a> from strerror.o(.text) referenced from perror.o(.text)
<li><a href="#[8b3]">isdigit</a> from isdigit.o(.text) referenced from strtoul.o(.text)
<li><a href="#[8b5]">isupper</a> from isupper.o(.text) referenced from strtoul.o(.text)
<li><a href="#[8b7]">isalpha</a> from isalpha.o(.text) referenced from strtoul.o(.text)
<li><a href="#[8b9]">isspace</a> from isspace.o(.text) referenced from strtoul.o(.text)
<li><a href="#[79]">os_critical_enter</a> from critical.o(.text) referenced from fputs.o(.text)
<li><a href="#[7f]">os_critical_exit</a> from critical.o(.text) referenced from fputs.o(.text)
<li><a href="#[8c2]">putc</a> from putc.o(.text) referenced from putchar.o(.text)
</ul>
<h3>Global Symbols</h3>
<p><strong><a name="[1]"></a>iprawtest</strong>(502 bytes, Stack size 136 btyes, Obj/entry_ipraw.o(.text.iprawtest))<br>
<br>[Stack]<ul><li>Max Depth = 684 
<li>Call Chain = iprawtest &rArr; recvfrom &rArr; lwip_recvfrom  &rArr; netconn_recv  &rArr; netconn_recv_data  &rArr; netconn_close_shutdown  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<li><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getaddrinfo
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<li><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<li><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<li><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<li><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<li><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_print.constprop.1
<li><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<li><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeaddrinfo
<li><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<li><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<li><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</ul>
<p><strong><a name="[3]"></a>main</strong>(48 bytes, Stack size 24 btyes, Obj/entry_main.o(.text.startup.main))<br>
<br>[Stack]<ul><li>Max Depth = 328 
<li>Call Chain = main &rArr; rt_thread_init &rArr; _rt_thread_init.isra.0  &rArr; rt_timer_init  &rArr; rt_object_init  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<li><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</ul>
<br>[Called By]<ul>
<li><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</ul>
<p><strong><a name="[4]"></a>drv_cputime_init</strong>(16 bytes, Stack size 4 btyes, Obj/drivers_drv_cputime.o(.text.drv_cputime_init))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = drv_cputime_init &rArr; clock_cpu_setops &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_sw_cnt_enable
<li><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_cpu_setops
</ul>
<p><strong><a name="[b]"></a>tih_aes_crypt</strong>(80 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[c]"></a>tih_aes_crypt_ctr</strong>(88 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[d]"></a>tih_aes_crypt_xts</strong>(88 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[e]"></a>tih_sm4_crypt</strong>(72 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[f]"></a>tih_sm4_crypt_ctr</strong>(80 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[10]"></a>tih_sm4_crypt_xts</strong>(80 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[11]"></a>tih_rsa_keypair_gen</strong>(102 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[12]"></a>tih_rsa_encrypt</strong>(98 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[13]"></a>tih_rsa_decrypt</strong>(80 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[14]"></a>tih_sm2_keypair_gen</strong>(58 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[15]"></a>tih_sm2_e_get</strong>(52 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[16]"></a>tih_sm2_z_get</strong>(38 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[17]"></a>tih_sm2_sign</strong>(96 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[18]"></a>tih_sm2_verify</strong>(42 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[19]"></a>tih_sm2_encrypt</strong>(90 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[1a]"></a>tih_sm2_decrypt</strong>(110 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[1b]"></a>tih_sm2_key_exchange</strong>(124 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[1c]"></a>tih_sha1_init</strong>(12 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[1d]"></a>tih_sha1_update</strong>(8 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[1e]"></a>tih_sha1_final</strong>(18 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[1f]"></a>tih_sha224_init</strong>(12 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[20]"></a>tih_sha224_update</strong>(8 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[21]"></a>tih_sha224_final</strong>(18 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[22]"></a>tih_sha256_init</strong>(12 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[23]"></a>tih_sha256_update</strong>(8 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[24]"></a>tih_sha256_final</strong>(18 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[25]"></a>tih_sm3_init</strong>(12 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[26]"></a>tih_sm3_update</strong>(8 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[27]"></a>tih_sm3_final</strong>(18 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[28]"></a>tih_cmac_init</strong>(28 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[29]"></a>tih_cmac_update</strong>(42 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[2a]"></a>tih_cmac_final</strong>(8 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[2b]"></a>tih_rand_get</strong>(38 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[2c]"></a>tih_ecp_mul</strong>(60 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[2d]"></a>tih_ecp_muladd</strong>(96 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[2e]"></a>tih_ecp_add</strong>(64 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[2f]"></a>tih_ecp_double</strong>(54 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[30]"></a>tih_ecp_check</strong>(42 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[31]"></a>tih_mpi_add</strong>(82 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[32]"></a>tih_mpi_sub</strong>(82 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[33]"></a>tih_mpi_mul</strong>(82 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[34]"></a>tih_mpi_cmp</strong>(82 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[35]"></a>tih_mpi_mod_mpi</strong>(60 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[36]"></a>tih_mpi_add_mod</strong>(100 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[37]"></a>tih_mpi_sub_mod</strong>(100 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[38]"></a>tih_mpi_mul_mod</strong>(100 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[39]"></a>tih_mpi_inv_mod</strong>(104 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[3a]"></a>tih_mpi_exp_mod</strong>(66 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[3c]"></a>core_timer_init</strong>(44 bytes, Stack size 4 btyes, Obj/drivers_drv_ctimer.o(.text.core_timer_init))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = core_timer_init &rArr; rt_hw_interrupt_install &rArr; intr_disconnect  &rArr; intr_cache_flush.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_hw_init
<li><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_mask
<li><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_intr_disable
<li><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_install
<li><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_intr_enable
<li><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_umask
<li><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_start
</ul>
<br>[Called By]<ul>
<li><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</ul>
<p><strong><a name="[4a]"></a>drv_pin_write</strong>(44 bytes, Stack size 4 btyes, Obj/drivers_drv_gpio.o(.text.drv_pin_write))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = drv_pin_write &rArr; gpio_set </ul>
<br>[Calls]<ul>
<li><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</ul>
<p><strong><a name="[4b]"></a>drv_pin_read</strong>(48 bytes, Stack size 4 btyes, Obj/drivers_drv_gpio.o(.text.drv_pin_read))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = drv_pin_read &rArr; gpio_get </ul>
<br>[Calls]<ul>
<li><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
</ul>
<p><strong><a name="[4c]"></a>drv_pin_mode</strong>(138 bytes, Stack size 16 btyes, Obj/drivers_drv_gpio.o(.text.drv_pin_mode))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = drv_pin_mode &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_hw_init
<li><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pin_mux_set
</ul>
<p><strong><a name="[4d]"></a>drv_pin_irq_enable</strong>(46 bytes, Stack size 4 btyes, Obj/drivers_drv_gpio.o(.text.drv_pin_irq_enable))<br>
<br>[Calls]<ul>
<li><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_intr_enable
</ul>
<p><strong><a name="[4e]"></a>drv_pin_attach_irq</strong>(202 bytes, Stack size 36 btyes, Obj/drivers_drv_gpio.o(.text.drv_pin_attach_irq))<br>
<br>[Stack]<ul><li>Max Depth = 220 
<li>Call Chain = drv_pin_attach_irq &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_hw_init
<li><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pin_mux_set
<li><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_intr_enable
<li><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_install
<li><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_umask
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[4f]"></a>drv_pin_detach_irq</strong>(46 bytes, Stack size 4 btyes, Obj/drivers_drv_gpio.o(.text.drv_pin_detach_irq))<br>
<br>[Calls]<ul>
<li><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_intr_disable
</ul>
<p><strong><a name="[51]"></a>get_pin</strong>(36 bytes, Stack size 0 btyes, Obj/drivers_drv_gpio.o(.text.get_pin))<br>
<p><strong><a name="[54]"></a>rt_hw_interrupt_init</strong>(46 bytes, Stack size 16 btyes, Obj/drivers_drv_intr.o(.text.rt_hw_interrupt_init))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = rt_hw_interrupt_init &rArr; rt_memset </ul>
<br>[Calls]<ul>
<li><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_hw_init
<li><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_vic_set_prio
<li><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</ul>
<br>[Called By]<ul>
<li><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_init
</ul>
<p><strong><a name="[55]"></a>rt_hw_interrupt_mask</strong>(8 bytes, Stack size 4 btyes, Obj/drivers_drv_intr.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = rt_hw_interrupt_mask &rArr; intr_disable </ul>
<br>[Calls]<ul>
<li><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_disable
</ul>
<br>[Called By]<ul>
<li><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_init
<li><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_ioctl
<li><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_init
</ul>
<p><strong><a name="[56]"></a>rt_hw_interrupt_umask</strong>(8 bytes, Stack size 4 btyes, Obj/drivers_drv_intr.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = rt_hw_interrupt_umask &rArr; intr_enable </ul>
<br>[Calls]<ul>
<li><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_enable
</ul>
<br>[Called By]<ul>
<li><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_init
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth0_init
<li><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_ioctl
<li><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_init
<li><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_hwtimer_start
<li><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_control
<li><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_attach_irq
</ul>
<p><strong><a name="[57]"></a>rt_hw_interrupt_clear</strong>(8 bytes, Stack size 4 btyes, Obj/drivers_drv_intr.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_vic_clear_pending_irq
</ul>
<br>[Called By]<ul>
<li><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_isr
<li><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth0_isr
<li><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth1_isr
<li><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_isr
<li><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_isr
<li><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_irq_handler
<li><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_irq_handler
</ul>
<p><strong><a name="[58]"></a>rt_hw_interrupt_install</strong>(62 bytes, Stack size 12 btyes, Obj/drivers_drv_intr.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = rt_hw_interrupt_install &rArr; intr_disconnect &rArr; intr_cache_flush.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_disconnect
<li><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_connect
<li><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_vic_set_prio
</ul>
<br>[Called By]<ul>
<li><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_init
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth0_init
<li><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_init
<li><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_hwtimer_start
<li><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_hwtimer_init
<li><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_control
<li><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_attach_irq
</ul>
<p><strong><a name="[59]"></a>rt_hw_interrupt_dispatch</strong>(28 bytes, Stack size 4 btyes, Obj/drivers_drv_intr.o(.fast))<br>
<p><strong><a name="[68]"></a>hwtimer_isr</strong>(116 bytes, Stack size 8 btyes, Obj/drivers_drv_timer.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = hwtimer_isr &rArr; rt_device_hwtimer_isr &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_intr_status
<li><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_intr_clear
<li><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_clear
<li><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_hwtimer_isr
</ul>
<p><strong><a name="[69]"></a>drv_hwtimer_init</strong>(84 bytes, Stack size 24 btyes, Obj/drivers_drv_timer.o(.text.drv_hwtimer_init))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = drv_hwtimer_init &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_hw_init
<li><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_install
</ul>
<p><strong><a name="[6f]"></a>uart0_irq_handler</strong>(32 bytes, Stack size 4 btyes, Obj/drivers_drv_uart.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 340 
<li>Call Chain = uart0_irq_handler &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_intr_status
<li><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_intr_clear
<li><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_clear
<li><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</ul>
<p><strong><a name="[71]"></a>uart1_irq_handler</strong>(32 bytes, Stack size 4 btyes, Obj/drivers_drv_uart.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 340 
<li>Call Chain = uart1_irq_handler &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_intr_status
<li><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_intr_clear
<li><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_clear
<li><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</ul>
<p><strong><a name="[79]"></a>os_critical_enter</strong>(4 bytes, Stack size 0 btyes, critical.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_fputs
</ul>
<p><strong><a name="[7a]"></a>fputc</strong>(64 bytes, Stack size 16 btyes, Obj/drivers_retarget.o(.text.fputc))<br>
<br>[Stack]<ul><li>Max Depth = 36 + In Cycle
<li>Call Chain = fputc &rArr; rt_device_write &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<li><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<li><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_putc
</ul>
<br>[Called By]<ul>
<li><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_perror
<li><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_fputs
<li><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_putc
</ul>
<p><strong><a name="[7b]"></a>fgetc</strong>(62 bytes, Stack size 0 btyes, Obj/drivers_retarget.o(.text.fgetc))<br>
<p><strong><a name="[7c]"></a>rt_hw_console_output</strong>(2 bytes, Stack size 0 btyes, Obj/src_kservice.o(.text.rt_hw_console_output))<br>
<br>[Called By]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kputs
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[7d]"></a>__stack_chk_fail</strong>(20 bytes, Stack size 0 btyes, Obj/drivers_retarget.o(.text.__stack_chk_fail))<br>
<p><strong><a name="[7e]"></a>__stack_chk_guard</strong>(16 bytes, Stack size 0 btyes, Obj/drivers_retarget.o(.text.__stack_chk_guard))<br>
<p><strong><a name="[7f]"></a>os_critical_exit</strong>(4 bytes, Stack size 0 btyes, critical.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_fputs
</ul>
<p><strong><a name="[80]"></a>rtos_init</strong>(18 bytes, Stack size 0 btyes, Obj/drivers_system.o(.text.rtos_init))<br>
<p><strong><a name="[81]"></a>console_init</strong>(32 bytes, Stack size 0 btyes, Obj/drivers_system.o(.text.console_init))<br>
<p><strong><a name="[82]"></a>norflash_init</strong>(8 bytes, Stack size 4 btyes, Obj/drivers_system.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = norflash_init &rArr; norflash_hw_init &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_hw_init
</ul>
<p><strong><a name="[83]"></a>sys_hw_init</strong>(262 bytes, Stack size 4 btyes, Obj/drivers_system.o(.text.sys_hw_init))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = sys_hw_init &rArr; rt_hw_interrupt_init &rArr; rt_memset  </ul>
<br>[Calls]<ul>
<li><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_reset
<li><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_source_set
<li><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_set
<li><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_enable
<li><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_enable
<li><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_init
<li><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h2x_hw_init
<li><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmem_init
<li><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_cache_set_range
<li><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_icache_enable
</ul>
<br>[Called By]<ul>
<li><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</ul>
<p><strong><a name="[84]"></a>rt_hw_board_init</strong>(22 bytes, Stack size 0 btyes, Obj/drivers_system.o(.text.rt_hw_board_init))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = rt_hw_board_init &rArr; rt_system_heap_init &rArr; rt_sem_init  &rArr; rt_object_init  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<li><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
</ul>
<br>[Called By]<ul>
<li><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</ul>
<p><strong><a name="[85]"></a>system_init</strong>(66 bytes, Stack size 20 btyes, Obj/drivers_system.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = system_init &rArr; sys_hw_init &rArr; rt_hw_interrupt_init  &rArr; rt_memset  </ul>
<br>[Calls]<ul>
<li><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_hw_init
<li><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_init
<li><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init
<li><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_init
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_get
<li><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_sw_cnt_enable
<li><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_enable
</ul>
<br>[Called By]<ul>
<li><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_handler
</ul>
<p><strong><a name="[86]"></a>rt_hw_us_delay</strong>(38 bytes, Stack size 12 btyes, Obj/drivers_system.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_sw_cnt_get
</ul>
<p><strong><a name="[87]"></a>rt_hw_hardclock_get</strong>(8 bytes, Stack size 4 btyes, Obj/drivers_system.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_sw_cnt_get
</ul>
<p><strong><a name="[88]"></a>rt_hw_dtcm_addr_check</strong>(38 bytes, Stack size 0 btyes, Obj/drivers_system.o(.fast))<br>
<p><strong><a name="[89]"></a>marvell_phy_mmd_fre_get</strong>(4 bytes, Stack size 0 btyes, Obj/src_tih_phy_m88e1512.o(.text.marvell_phy_mmd_fre_get))<br>
<p><strong><a name="[8a]"></a>marvell_phy_intr_enable</strong>(48 bytes, Stack size 8 btyes, Obj/src_tih_phy_m88e1512.o(.text.marvell_phy_intr_enable))<br>
<br>[Calls]<ul>
<li><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_write16
</ul>
<p><strong><a name="[8b]"></a>marvell_phy_init</strong>(304 bytes, Stack size 12 btyes, Obj/src_tih_phy_m88e1512.o(.text.marvell_phy_init))<br>
<br>[Calls]<ul>
<li><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_write16
<li><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_read16
</ul>
<br>[Called By]<ul>
<li><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvell_phy_speed_duplex_change
</ul>
<p><strong><a name="[8c]"></a>marvell_phy_intr_disable</strong>(72 bytes, Stack size 8 btyes, Obj/src_tih_phy_m88e1512.o(.text.marvell_phy_intr_disable))<br>
<br>[Calls]<ul>
<li><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_write16
<li><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_read16
</ul>
<p><strong><a name="[8d]"></a>marvell_phy_intr_status</strong>(46 bytes, Stack size 12 btyes, Obj/src_tih_phy_m88e1512.o(.text.marvell_phy_intr_status))<br>
<br>[Calls]<ul>
<li><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_write16
<li><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_read16
</ul>
<p><strong><a name="[8e]"></a>marvell_phy_intr_clear</strong>(40 bytes, Stack size 8 btyes, Obj/src_tih_phy_m88e1512.o(.text.marvell_phy_intr_clear))<br>
<br>[Calls]<ul>
<li><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_write16
<li><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_read16
</ul>
<p><strong><a name="[8f]"></a>marvell_phy_link_status_get</strong>(86 bytes, Stack size 12 btyes, Obj/src_tih_phy_m88e1512.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_write16
<li><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_read16
</ul>
<p><strong><a name="[90]"></a>marvell_phy_speed_duplex_change</strong>(388 bytes, Stack size 16 btyes, Obj/src_tih_phy_m88e1512.o(.text.marvell_phy_speed_duplex_change))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = marvell_phy_speed_duplex_change &rArr; marvell_phy_init </ul>
<br>[Calls]<ul>
<li><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_write16
<li><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_read16
<li><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvell_phy_init
</ul>
<p><strong><a name="[91]"></a>rtl8211_phy_mmd_fre_get</strong>(4 bytes, Stack size 0 btyes, Obj/src_tih_phy_rtl8211.o(.text.rtl8211_phy_mmd_fre_get))<br>
<p><strong><a name="[92]"></a>rtl8211_phy_intr_enable</strong>(26 bytes, Stack size 8 btyes, Obj/src_tih_phy_rtl8211.o(.text.rtl8211_phy_intr_enable))<br>
<br>[Calls]<ul>
<li><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_write16
</ul>
<p><strong><a name="[93]"></a>rtl8211_phy_intr_disable</strong>(28 bytes, Stack size 8 btyes, Obj/src_tih_phy_rtl8211.o(.text.rtl8211_phy_intr_disable))<br>
<br>[Calls]<ul>
<li><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_read16
<li><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_write16
</ul>
<p><strong><a name="[94]"></a>rtl8211_phy_intr_status</strong>(10 bytes, Stack size 4 btyes, Obj/src_tih_phy_rtl8211.o(.text.rtl8211_phy_intr_status))<br>
<br>[Calls]<ul>
<li><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_read16
</ul>
<p><strong><a name="[95]"></a>rtl8211_phy_intr_clear</strong>(10 bytes, Stack size 4 btyes, Obj/src_tih_phy_rtl8211.o(.text.rtl8211_phy_intr_clear))<br>
<br>[Calls]<ul>
<li><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_read16
</ul>
<p><strong><a name="[96]"></a>rtl8211_phy_link_status_get</strong>(74 bytes, Stack size 8 btyes, Obj/src_tih_phy_rtl8211.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_read16
</ul>
<p><strong><a name="[97]"></a>rtl8211_phy_speed_duplex_change</strong>(386 bytes, Stack size 16 btyes, Obj/src_tih_phy_rtl8211.o(.text.rtl8211_phy_speed_duplex_change))<br>
<br>[Calls]<ul>
<li><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_read16
<li><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_write16
</ul>
<br>[Called By]<ul>
<li><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtl8211_phy_init
</ul>
<p><strong><a name="[98]"></a>rtl8211_phy_init</strong>(12 bytes, Stack size 4 btyes, Obj/src_tih_phy_rtl8211.o(.text.rtl8211_phy_init))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = rtl8211_phy_init &rArr; rtl8211_phy_speed_duplex_change </ul>
<br>[Calls]<ul>
<li><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtl8211_phy_speed_duplex_change
</ul>
<p><strong><a name="[99]"></a>rt_system_tick_init</strong>(2 bytes, Stack size 0 btyes, Obj/src_clock.o(.text.rt_system_tick_init))<br>
<p><strong><a name="[9a]"></a>rt_tick_get</strong>(6 bytes, Stack size 0 btyes, Obj/src_clock.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<li><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<li><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<li><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<li><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock
<li><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<li><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<li><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_jiffies
<li><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<li><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
<li><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_rtc_init
<li><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_rtc_control
<li><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<li><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time_system_init
<li><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<li><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</ul>
<p><strong><a name="[9b]"></a>rt_tick_set</strong>(18 bytes, Stack size 8 btyes, Obj/src_clock.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</ul>
<p><strong><a name="[9c]"></a>rt_tick_increase</strong>(38 bytes, Stack size 4 btyes, Obj/src_clock.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 252 
<li>Call Chain = rt_tick_increase &rArr; rt_thread_yield &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<li><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<li><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</ul>
<br>[Called By]<ul>
<li><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_isr
</ul>
<p><strong><a name="[9d]"></a>rt_tick_from_millisecond</strong>(28 bytes, Stack size 0 btyes, Obj/src_clock.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<li><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
<li><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
</ul>
<p><strong><a name="[9f]"></a>main_thread_entry</strong>(40 bytes, Stack size 16 btyes, Obj/src_components.o(.text.main_thread_entry))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = main_thread_entry &rArr; main &rArr; rt_thread_init  &rArr; _rt_thread_init.isra.0  &rArr; rt_timer_init  &rArr; rt_object_init  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</ul>
<p><strong><a name="[a3]"></a>rt_components_board_init</strong>(36 bytes, Stack size 16 btyes, Obj/src_components.o(.text.rt_components_board_init))<br>
<br>[Called By]<ul>
<li><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</ul>
<p><strong><a name="[a4]"></a>rt_components_init</strong>(36 bytes, Stack size 0 btyes, Obj/src_components.o(.text.rt_components_init))<br>
<p><strong><a name="[a5]"></a>rt_application_init</strong>(62 bytes, Stack size 16 btyes, Obj/src_components.o(.text.rt_application_init))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<li><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</ul>
<p><strong><a name="[a6]"></a>rtthread_startup</strong>(42 bytes, Stack size 4 btyes, Obj/src_components.o(.text.rtthread_startup))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<li><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<li><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<li><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<li><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<li><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<li><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</ul>
<br>[Called By]<ul>
<li><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry
</ul>
<p><strong><a name="[a7]"></a>entry</strong>(14 bytes, Stack size 4 btyes, Obj/src_components.o(.text.entry))<br>
<br>[Stack]<ul><li>Max Depth = 352 
<li>Call Chain = entry &rArr; rtthread_startup &rArr; rt_application_init  &rArr; rt_thread_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</ul>
<br>[Called By]<ul>
<li><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_handler
</ul>
<p><strong><a name="[a8]"></a>rt_device_unregister</strong>(38 bytes, Stack size 0 btyes, Obj/src_device.o(.text.rt_device_unregister))<br>
<p><strong><a name="[a9]"></a>rt_device_init_all</strong>(4 bytes, Stack size 0 btyes, Obj/src_device.o(.text.rt_device_init_all))<br>
<p><strong><a name="[aa]"></a>rt_device_find</strong>(110 bytes, Stack size 20 btyes, Obj/src_device.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 204 
<li>Call Chain = rt_device_find &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<li><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<li><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<li><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<li><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<li><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<li><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<li><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<li><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<li><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<li><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_stat
<li><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_find
<li><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<li><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<li><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_rtc_init
<li><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
<li><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp3202_init
<li><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<li><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time_system_init
</ul>
<p><strong><a name="[ab]"></a>rt_device_register</strong>(62 bytes, Stack size 20 btyes, Obj/src_device.o(.text.rt_device_register))<br>
<br>[Stack]<ul><li>Max Depth = 224 
<li>Call Chain = rt_device_register &rArr; rt_device_find &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</ul>
<br>[Called By]<ul>
<li><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ata_register
<li><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<li><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_crypto_register
<li><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_hwtimer_register
<li><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_device_init
<li><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_24aa128_init
<li><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
<li><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_rtc_init
<li><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<li><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
<li><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spidev_device_init
<li><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp3202_init
<li><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_watchdog_register
</ul>
<p><strong><a name="[ac]"></a>rt_device_create</strong>(40 bytes, Stack size 0 btyes, Obj/src_device.o(.text.rt_device_create))<br>
<p><strong><a name="[ad]"></a>rt_device_destroy</strong>(16 bytes, Stack size 0 btyes, Obj/src_device.o(.text.rt_device_destroy))<br>
<p><strong><a name="[ae]"></a>rt_device_init</strong>(76 bytes, Stack size 12 btyes, Obj/src_device.o(.text.rt_device_init))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = rt_device_init &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_device_init
<li><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</ul>
<p><strong><a name="[af]"></a>rt_device_open</strong>(164 bytes, Stack size 16 btyes, Obj/src_device.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = rt_device_open &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<li><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<li><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<li><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<li><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<li><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<li><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_open
<li><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</ul>
<p><strong><a name="[b0]"></a>rt_device_close</strong>(80 bytes, Stack size 8 btyes, Obj/src_device.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = rt_device_close &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<li><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<li><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<li><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<li><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_close
<li><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_close
<li><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</ul>
<p><strong><a name="[b1]"></a>rt_device_read</strong>(76 bytes, Stack size 20 btyes, Obj/src_device.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 204 
<li>Call Chain = rt_device_read &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<li><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_read
<li><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_read
<li><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</ul>
<p><strong><a name="[b2]"></a>rt_device_write</strong>(76 bytes, Stack size 20 btyes, Obj/src_device.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = rt_device_write &rArr; rt_set_errno </ul>
<br>[Calls]<ul>
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kputs
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<li><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_write
<li><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_write
</ul>
<p><strong><a name="[b3]"></a>rt_device_control</strong>(48 bytes, Stack size 16 btyes, Obj/src_device.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = rt_device_control &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
<li><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<li><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<li><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<li><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<li><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<li><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<li><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_ioctl
<li><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<li><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<li><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_ioctl
<li><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time_system_init
</ul>
<p><strong><a name="[b4]"></a>rt_device_set_rx_indicate</strong>(34 bytes, Stack size 12 btyes, Obj/src_device.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = rt_device_set_rx_indicate &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_close
<li><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_open
<li><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</ul>
<p><strong><a name="[b5]"></a>rt_device_set_tx_complete</strong>(34 bytes, Stack size 12 btyes, Obj/src_device.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = rt_device_set_tx_complete &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[b6]"></a>rt_thread_idle_sethook</strong>(6 bytes, Stack size 0 btyes, Obj/src_idle.o(.fast))<br>
<p><strong><a name="[b7]"></a>rt_thread_idle_init</strong>(46 bytes, Stack size 0 btyes, Obj/src_idle.o(.text.rt_thread_idle_init))<br>
<br>[Stack]<ul><li>Max Depth = 304 
<li>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init.isra.0  &rArr; rt_timer_init  &rArr; rt_object_init  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<li><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</ul>
<br>[Called By]<ul>
<li><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</ul>
<p><strong><a name="[b8]"></a>rt_thread_idle_delhook</strong>(8 bytes, Stack size 0 btyes, Obj/src_idle.o(.fast))<br>
<p><strong><a name="[b9]"></a>rt_thread_idle_excute</strong>(164 bytes, Stack size 28 btyes, Obj/src_idle.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 320 
<li>Call Chain = rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<li><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</ul>
<p><strong><a name="[bb]"></a>rt_thread_idle_gethandler</strong>(4 bytes, Stack size 0 btyes, Obj/src_idle.o(.fast))<br>
<p><strong><a name="[bc]"></a>rt_sem_init</strong>(52 bytes, Stack size 20 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 224 
<li>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<li><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
<li><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<li><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</ul>
<p><strong><a name="[bd]"></a>rt_sem_detach</strong>(72 bytes, Stack size 20 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 224 
<li>Call Chain = rt_sem_detach &rArr; rt_thread_resume &rArr; rt_timer_stop  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
</ul>
<p><strong><a name="[be]"></a>rt_sem_create</strong>(76 bytes, Stack size 20 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
</ul>
<p><strong><a name="[bf]"></a>rt_sem_delete</strong>(124 bytes, Stack size 20 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 312 
<li>Call Chain = rt_sem_delete &rArr; rt_object_delete &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
</ul>
<p><strong><a name="[c0]"></a>rt_sem_take</strong>(326 bytes, Stack size 28 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 272 
<li>Call Chain = rt_sem_take &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<li><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<li><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_trytake
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<li><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<li><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<li><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<li><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<li><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
<li><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</ul>
<p><strong><a name="[c1]"></a>rt_sem_trytake</strong>(10 bytes, Stack size 4 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 276 
<li>Call Chain = rt_sem_trytake &rArr; rt_sem_take &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</ul>
<p><strong><a name="[c2]"></a>rt_sem_release</strong>(114 bytes, Stack size 12 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 256 
<li>Call Chain = rt_sem_release &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</ul>
<br>[Called By]<ul>
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<li><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<li><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<li><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<li><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<li><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<li><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_rx_ind
</ul>
<p><strong><a name="[c3]"></a>rt_sem_control</strong>(100 bytes, Stack size 28 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 272 
<li>Call Chain = rt_sem_control &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[c4]"></a>rt_mutex_init</strong>(64 bytes, Stack size 16 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 220 
<li>Call Chain = rt_mutex_init &rArr; rt_object_init &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<li><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ata_init
<li><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_crypto_init
<li><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_register
<li><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_24aa128_init
<li><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
<li><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp3202_init
</ul>
<p><strong><a name="[c5]"></a>rt_mutex_detach</strong>(74 bytes, Stack size 20 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 224 
<li>Call Chain = rt_mutex_detach &rArr; rt_thread_resume &rArr; rt_timer_stop  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[c6]"></a>rt_mutex_create</strong>(88 bytes, Stack size 16 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<li><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
</ul>
<p><strong><a name="[c7]"></a>rt_mutex_delete</strong>(124 bytes, Stack size 20 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 312 
<li>Call Chain = rt_mutex_delete &rArr; rt_object_delete &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
<li><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_free
</ul>
<p><strong><a name="[c8]"></a>rt_mutex_take</strong>(444 bytes, Stack size 40 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 312 
<li>Call Chain = rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<li><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<li><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_write
<li><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_read
<li><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<li><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
<li><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ata_ioctl
<li><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ata_write
<li><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ata_read
<li><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<li><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
<li><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_eeprom_read
<li><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_eeprom_write
<li><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<li><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<li><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
<li><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp3202_adc_read
</ul>
<p><strong><a name="[c9]"></a>rt_mutex_release</strong>(238 bytes, Stack size 16 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 288 
<li>Call Chain = rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_write
<li><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_read
<li><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<li><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<li><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<li><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<li><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ata_ioctl
<li><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ata_write
<li><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ata_read
<li><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<li><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<li><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
<li><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_eeprom_read
<li><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_eeprom_write
<li><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<li><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<li><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
<li><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp3202_adc_read
</ul>
<p><strong><a name="[ca]"></a>rt_mutex_control</strong>(6 bytes, Stack size 0 btyes, Obj/src_ipc.o(.fast))<br>
<p><strong><a name="[cb]"></a>rt_event_init</strong>(52 bytes, Stack size 16 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 220 
<li>Call Chain = rt_event_init &rArr; rt_object_init &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[cc]"></a>rt_event_detach</strong>(74 bytes, Stack size 20 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 224 
<li>Call Chain = rt_event_detach &rArr; rt_thread_resume &rArr; rt_timer_stop  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[cd]"></a>rt_event_create</strong>(76 bytes, Stack size 16 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = rt_event_create &rArr; rt_object_allocate &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[ce]"></a>rt_event_delete</strong>(114 bytes, Stack size 20 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 312 
<li>Call Chain = rt_event_delete &rArr; rt_object_delete &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</ul>
<p><strong><a name="[cf]"></a>rt_event_send</strong>(236 bytes, Stack size 24 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 268 
<li>Call Chain = rt_event_send &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[d0]"></a>rt_event_recv</strong>(436 bytes, Stack size 36 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 280 
<li>Call Chain = rt_event_recv &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<li><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<li><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</ul>
<p><strong><a name="[d1]"></a>rt_event_control</strong>(100 bytes, Stack size 24 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 268 
<li>Call Chain = rt_event_control &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[d2]"></a>rt_mb_init</strong>(76 bytes, Stack size 24 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 228 
<li>Call Chain = rt_mb_init &rArr; rt_object_init &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init_private
</ul>
<p><strong><a name="[d3]"></a>rt_mb_detach</strong>(162 bytes, Stack size 20 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 224 
<li>Call Chain = rt_mb_detach &rArr; rt_thread_resume &rArr; rt_timer_stop  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[d4]"></a>rt_mb_create</strong>(124 bytes, Stack size 20 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</ul>
<br>[Called By]<ul>
<li><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</ul>
<p><strong><a name="[d5]"></a>rt_mb_delete</strong>(172 bytes, Stack size 20 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 312 
<li>Call Chain = rt_mb_delete &rArr; rt_object_delete &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</ul>
<p><strong><a name="[d6]"></a>rt_mb_send_wait</strong>(522 bytes, Stack size 60 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 304 
<li>Call Chain = rt_mb_send_wait &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<li><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<li><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<li><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
<li><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</ul>
<p><strong><a name="[d7]"></a>rt_mb_send</strong>(10 bytes, Stack size 4 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 308 
<li>Call Chain = rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</ul>
<br>[Called By]<ul>
<li><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<li><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_ready
<li><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_linkchange
</ul>
<p><strong><a name="[d8]"></a>rt_mb_recv</strong>(526 bytes, Stack size 60 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 304 
<li>Call Chain = rt_mb_recv &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<li><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<li><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<li><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<li><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<li><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
</ul>
<p><strong><a name="[d9]"></a>rt_mb_control</strong>(180 bytes, Stack size 24 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 268 
<li>Call Chain = rt_mb_control &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[da]"></a>rt_mq_init</strong>(130 bytes, Stack size 28 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = rt_mq_init &rArr; rt_object_init &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[db]"></a>rt_mq_detach</strong>(74 bytes, Stack size 20 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 224 
<li>Call Chain = rt_mq_detach &rArr; rt_thread_resume &rArr; rt_timer_stop  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[dc]"></a>rt_mq_delete</strong>(130 bytes, Stack size 20 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 312 
<li>Call Chain = rt_mq_delete &rArr; rt_object_delete &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
</ul>
<p><strong><a name="[dd]"></a>rt_mq_create</strong>(176 bytes, Stack size 24 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 352 
<li>Call Chain = rt_mq_create &rArr; rt_object_allocate &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
</ul>
<p><strong><a name="[de]"></a>rt_mq_send</strong>(248 bytes, Stack size 20 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 264 
<li>Call Chain = rt_mq_send &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[df]"></a>rt_mq_urgent</strong>(190 bytes, Stack size 20 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 264 
<li>Call Chain = rt_mq_urgent &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[e0]"></a>rt_mq_recv</strong>(610 bytes, Stack size 64 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 308 
<li>Call Chain = rt_mq_recv &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<li><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<li><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<li><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[e1]"></a>rt_mq_control</strong>(148 bytes, Stack size 24 btyes, Obj/src_ipc.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 268 
<li>Call Chain = rt_mq_control &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[e2]"></a>rt_interrupt_enter_sethook</strong>(6 bytes, Stack size 0 btyes, Obj/src_irq.o(.fast))<br>
<p><strong><a name="[e3]"></a>rt_interrupt_leave_sethook</strong>(6 bytes, Stack size 0 btyes, Obj/src_irq.o(.fast))<br>
<p><strong><a name="[e4]"></a>rt_interrupt_enter</strong>(36 bytes, Stack size 8 btyes, Obj/src_irq.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</ul>
<p><strong><a name="[e5]"></a>rt_interrupt_leave</strong>(36 bytes, Stack size 8 btyes, Obj/src_irq.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</ul>
<p><strong><a name="[e6]"></a>rt_interrupt_get_nest</strong>(6 bytes, Stack size 0 btyes, Obj/src_irq.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<li><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<li><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<li><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<li><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<li><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<li><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<li><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<li><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<li><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<li><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<li><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<li><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<li><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<li><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_errno
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<li><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<li><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<li><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<li><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<li><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<li><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<li><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<li><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
<li><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<li><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<li><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<li><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<li><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<li><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_free
<li><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<li><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<li><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<li><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<li><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
</ul>
<p><strong><a name="[e8]"></a>rt_get_errno</strong>(28 bytes, Stack size 4 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</ul>
<p><strong><a name="[e9]"></a>rt_vsnprintf</strong>(1382 bytes, Stack size 0 btyes, Obj/src_kservice.o(.text.rt_vsnprintf))<br>
<br>[Stack]<ul><li>Max Depth = 144 
<li>Call Chain = rt_vsnprintf &rArr; __muldf3 &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<li><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fixdfsi
<li><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__floatsidf
<li><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subdf3
<li><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__eqdf2
<li><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__muldf3
</ul>
<br>[Called By]<ul>
<li><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
<li><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[ea]"></a>rt_snprintf</strong>(24 bytes, Stack size 12 btyes, Obj/src_kservice.o(.text.rt_snprintf))<br>
<br>[Stack]<ul><li>Max Depth = 156 
<li>Call Chain = rt_snprintf &rArr; rt_vsnprintf &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<li><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<li><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
<li><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<li><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<li><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<li><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<li><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<li><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<li><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<li><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<li><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<li><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
</ul>
<p><strong><a name="[eb]"></a>snprintf</strong>(24 bytes, Stack size 0 btyes, cklib_printf.o(.text.snprintf))<br>
<p><strong><a name="[ec]"></a>rt_vsprintf</strong>(16 bytes, Stack size 4 btyes, Obj/src_kservice.o(.text.rt_vsprintf))<br>
<br>[Stack]<ul><li>Max Depth = 148 
<li>Call Chain = rt_vsprintf &rArr; rt_vsnprintf &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</ul>
<p><strong><a name="[ed]"></a>vsprintf</strong>(16 bytes, Stack size 0 btyes, cklib_printf.o(.text.vsprintf))<br>
<br>[Called By]<ul>
<li><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_nonvolatile
</ul>
<p><strong><a name="[ee]"></a>rt_sprintf</strong>(30 bytes, Stack size 16 btyes, Obj/src_kservice.o(.text.rt_sprintf))<br>
<br>[Stack]<ul><li>Max Depth = 160 
<li>Call Chain = rt_sprintf &rArr; rt_vsnprintf &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</ul>
<p><strong><a name="[ef]"></a>sprintf</strong>(26 bytes, Stack size 0 btyes, cklib_printf.o(.text.sprintf))<br>
<br>[Called By]<ul>
<li><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_st_data.part.0
<li><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_nonvolatile
</ul>
<p><strong><a name="[f0]"></a>rt_console_get_device</strong>(6 bytes, Stack size 0 btyes, Obj/src_kservice.o(.text.rt_console_get_device))<br>
<br>[Called By]<ul>
<li><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<li><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</ul>
<p><strong><a name="[f1]"></a>rt_console_set_device</strong>(40 bytes, Stack size 16 btyes, Obj/src_kservice.o(.text.rt_console_set_device))<br>
<br>[Stack]<ul><li>Max Depth = 220 
<li>Call Chain = rt_console_set_device &rArr; rt_device_find &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<li><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
</ul>
<br>[Called By]<ul>
<li><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</ul>
<p><strong><a name="[7c]"></a>rt_hw_console_output</strong>(2 bytes, Stack size 0 btyes, Obj/src_kservice.o(.text.rt_hw_console_output))<br>
<br>[Called By]<ul>
<li><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kputs
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[f2]"></a>rt_kputs</strong>(80 bytes, Stack size 12 btyes, Obj/src_kservice.o(.text.rt_kputs))<br>
<br>[Stack]<ul><li>Max Depth = 32 + In Cycle
<li>Call Chain = rt_kputs &rArr; rt_device_write &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<li><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</ul>
<p><strong><a name="[f3]"></a>puts</strong>(80 bytes, Stack size 0 btyes, Obj/src_kservice.o(.text.rt_kputs))<br>
<br>[Called By]<ul>
<li><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_port_reset
<li><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_complete_wait
<li><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cache_flush
<li><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_data_set_trim
<li><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_error_handler
<li><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_identify_read
<li><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hba_reset
<li><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hw_init
<li><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_inout_data_lba
<li><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
<li><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread1_entry
<li><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_hw_init
</ul>
<p><strong><a name="[f4]"></a>rt_kprintf</strong>(80 bytes, Stack size 28 btyes, Obj/src_kservice.o(.text.rt_kprintf))<br>
<br>[Stack]<ul><li>Max Depth = 172 
<li>Call Chain = rt_kprintf &rArr; rt_vsnprintf &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<li><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<li><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</ul>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth0_init
<li><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_link_update
<li><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth0_isr
<li><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth1_isr
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_init
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
<li><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_trim
<li><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_sync
<li><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_ioctl
<li><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_write
<li><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_read
<li><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_isr
<li><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_init
<li><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<li><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<li><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<li><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<li><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<li><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<li><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<li><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<li><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<li><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<li><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<li><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<li><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<li><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<li><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<li><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<li><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mem
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<li><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<li><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<li><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<li><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<li><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<li><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<li><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
<li><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<li><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<li><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<li><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<li><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<li><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<li><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_elm_ata
<li><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<li><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<li><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<li><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<li><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
<li><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<li><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<li><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<li><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<li><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<li><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_free
<li><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<li><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<li><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<li><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<li><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
<li><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<li><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<li><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<li><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<li><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<li><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<li><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<li><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<li><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<li><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
<li><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<li><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<li><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<li><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<li><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<li><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<li><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<li><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<li><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<li><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<li><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<li><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<li><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<li><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<li><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<li><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<li><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<li><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<li><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<li><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<li><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<li><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<li><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<li><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<li><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<li><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<li><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<li><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<li><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool.isra.0
<li><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool.isra.1
<li><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_pool
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free_pool
<li><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<li><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<li><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<li><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<li><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dechain
<li><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<li><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<li><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<li><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<li><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<li><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<li><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<li><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<li><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<li><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<li><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<li><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<li><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<li><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<li><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<li><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcbs_sane
<li><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<li><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<li><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<li><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<li><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc.isra.0
<li><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment.isra.1
<li><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header.constprop.2
<li><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<li><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<li><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<li><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<li><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<li><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<li><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<li><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<li><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
<li><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
<li><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
<li><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<li><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<li><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<li><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<li><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry.isra.0
<li><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_addr
<li><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_get_entry
<li><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<li><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<li><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<li><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<li><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<li><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output
<li><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<li><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<li><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<li><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<li><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<li><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<li><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_show_memory
<li><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_memory
<li><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<li><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
<li><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_init
<li><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_24aa128_init
<li><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_eeprom_write
<li><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_date
<li><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<li><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp3202_init
<li><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_watchdog_close
<li><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<li><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<li><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<li><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<li><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hello
<li><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<li><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<li><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<li><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<li><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<li><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<li><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<li><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<li><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<li><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<li><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
<li><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<li><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<li><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<li><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<li><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_pwd
<li><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkfs
<li><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ifconfig
<li><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cp
<li><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rm
<li><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<li><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cat
<li><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cd
<li><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkdir
<li><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_df
<li><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<li><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dns
<li><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<li><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<li><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<li><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<li><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<li><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short.isra.0
<li><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option.isra.1
<li><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte.isra.2
<li><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<li><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<li><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long.isra.4
<li><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<li><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
<li><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<li><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<li><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<li><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<li><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response.isra.0
<li><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<li><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group.isra.3
<li><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
<li><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<li><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<li><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<li><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync
<li><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<li><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ping
</ul>
<p><strong><a name="[f5]"></a>printf</strong>(70 bytes, Stack size 0 btyes, cklib_printf.o(.text.printf))<br>
<br>[Called By]<ul>
<li><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symm_param_cfg
<li><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_fifo_enable
<li><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bridge_enable
<li><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_dma_start
<li><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_link_change_handler
<li><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_complete_wait
<li><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_error_handler
<li><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_passthru
<li><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_slot_is_empty
<li><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_ncq_queue_mgmt
<li><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_print.constprop.1
<li><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
<li><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<li><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
<li><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_rx_fifo
</ul>
<p><strong><a name="[f6]"></a>rt_show_version</strong>(42 bytes, Stack size 8 btyes, Obj/src_kservice.o(.text.rt_show_version))<br>
<br>[Stack]<ul><li>Max Depth = 180 
<li>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<li><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version
</ul>
<p><strong><a name="[f7]"></a>xmem_init</strong>(8 bytes, Stack size 0 btyes, Obj/src_kservice.o(.text.xmem_init))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = xmem_init &rArr; mem_hw_init &rArr; intr_disconnect  &rArr; intr_cache_flush.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_hw_init
</ul>
<br>[Called By]<ul>
<li><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_init
</ul>
<p><strong><a name="[f8]"></a>rt_set_errno</strong>(30 bytes, Stack size 8 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</ul>
<br>[Called By]<ul>
<li><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_write
<li><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_read
<li><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<li><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<li><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<li><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<li><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<li><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<li><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<li><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<li><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<li><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<li><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<li><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
<li><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<li><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekdir
<li><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<li><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rmdir
<li><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<li><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<li><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<li><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<li><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<li><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<li><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<li><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<li><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_write
<li><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<li><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<li><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<li><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
</ul>
<p><strong><a name="[f9]"></a>_rt_errno</strong>(26 bytes, Stack size 4 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</ul>
<br>[Called By]<ul>
<li><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<li><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<li><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<li><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<li><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<li><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<li><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<li><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<li><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
</ul>
<p><strong><a name="[fa]"></a>rt_memset</strong>(176 bytes, Stack size 8 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_i2c_init
<li><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_init
<li><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemset
<li><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<li><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init.isra.0
<li><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<li><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<li><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<li><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<li><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
</ul>
<p><strong><a name="[fb]"></a>rt_memcpy</strong>(176 bytes, Stack size 12 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<li><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<li><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<li><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<li><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy
<li><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<li><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<li><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_read
<li><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<li><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
</ul>
<p><strong><a name="[fc]"></a>rt_memmove</strong>(62 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</ul>
<p><strong><a name="[fd]"></a>memmove</strong>(62 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<p><strong><a name="[fe]"></a>rt_memcmp</strong>(54 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
</ul>
<p><strong><a name="[ff]"></a>memcmp</strong>(54 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<li><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</ul>
<p><strong><a name="[100]"></a>rt_strstr</strong>(112 bytes, Stack size 16 btyes, Obj/src_kservice.o(.fast))<br>
<p><strong><a name="[101]"></a>strstr</strong>(112 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
</ul>
<p><strong><a name="[102]"></a>rt_strcasecmp</strong>(60 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<p><strong><a name="[103]"></a>strcasecmp</strong>(60 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<p><strong><a name="[104]"></a>rt_strncpy</strong>(54 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<li><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<li><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<li><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<li><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<li><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_getdents
<li><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_getdents
<li><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_getdents
<li><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</ul>
<p><strong><a name="[105]"></a>strncpy</strong>(8 bytes, Stack size 4 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</ul>
<br>[Called By]<ul>
<li><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<li><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<li><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_open
<li><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_rename
<li><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<li><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname
</ul>
<p><strong><a name="[106]"></a>rt_strncmp</strong>(70 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<li><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<li><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_lookup
</ul>
<p><strong><a name="[107]"></a>strncmp</strong>(70 bytes, Stack size 0 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
<li><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_get_ipv4
<li><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<li><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
<li><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<li><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<li><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<li><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</ul>
<p><strong><a name="[108]"></a>rt_strcmp</strong>(34 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_lookup
</ul>
<p><strong><a name="[109]"></a>rt_strnlen</strong>(38 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<p><strong><a name="[10a]"></a>rt_strlen</strong>(24 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<li><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<li><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_getdents
<li><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_lookup
<li><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<li><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
<li><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<li><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<li><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
</ul>
<p><strong><a name="[10b]"></a>strlen</strong>(24 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_link_update
<li><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<li><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<li><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<li><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<li><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
<li><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_strstr
<li><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
<li><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_st_data.part.0
<li><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_nonvolatile
<li><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<li><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<li><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<li><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<li><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<li><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<li><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<li><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<li><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</ul>
<p><strong><a name="[10c]"></a>rt_strdup</strong>(52 bytes, Stack size 16 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = rt_strdup &rArr; rt_malloc &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<li><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<li><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
</ul>
<p><strong><a name="[10d]"></a>strdup</strong>(52 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<p><strong><a name="[10e]"></a>rt_malloc_align</strong>(56 bytes, Stack size 8 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 316 
<li>Call Chain = rt_malloc_align &rArr; rt_malloc &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</ul>
<p><strong><a name="[10f]"></a>rt_free_align</strong>(12 bytes, Stack size 4 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 288 
<li>Call Chain = rt_free_align &rArr; rt_free &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<p><strong><a name="[110]"></a>__rt_ffs</strong>(82 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</ul>
<p><strong><a name="[111]"></a>rt_assert_set_hook</strong>(6 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<p><strong><a name="[112]"></a>rt_assert_handler</strong>(54 bytes, Stack size 12 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 184 
<li>Call Chain = rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
<li><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_xfer
<li><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_hwtimer_control
<li><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_hwtimer_count_get
<li><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_hwtimer_stop
<li><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_hwtimer_start
<li><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_hwtimer_init
<li><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_getc
<li><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_putc
<li><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_control
<li><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_configure
<li><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<li><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<li><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<li><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<li><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<li><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<li><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_tx_complete
<li><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<li><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<li><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<li><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<li><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<li><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<li><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<li><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<li><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<li><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<li><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<li><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<li><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<li><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<li><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<li><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<li><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<li><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<li><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<li><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<li><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<li><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<li><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<li><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
<li><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_detach
<li><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<li><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<li><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<li><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<li><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<li><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<li><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<li><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<li><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_detach
<li><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<li><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<li><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<li><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<li><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<li><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<li><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<li><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<li><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<li><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<li><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<li><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<li><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<li><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<li><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<li><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<li><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<li><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init.isra.0
<li><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<li><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<li><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<li><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<li><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<li><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<li><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<li><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<li><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<li><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<li><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
<li><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
<li><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_read
<li><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_write
<li><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_flush
<li><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
<li><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<li><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<li><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ata_ioctl
<li><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ata_write
<li><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ata_read
<li><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ata_init
<li><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ata_register
<li><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<li><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<li><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<li><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<li><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<li><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<li><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<li><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
<li><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<li><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<li><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<li><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<li><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<li><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_free
<li><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<li><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<li><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<li><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<li><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<li><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_linkoutput
<li><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_linkchange
<li><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init_private
<li><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cputime_getres
<li><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_mode
<li><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_attach_irq
<li><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<li><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<li><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_ioctl
<li><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_read
<li><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_write
<li><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<li><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_getdents
<li><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_close
<li><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_statfs
<li><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_read
<li><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_write
<li><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_getdents
<li><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_open
<li><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_unlink
<li><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_rename
<li><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_read
<li><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_getdents
<li><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_cpu_setops
<li><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_crypto_ioctl
<li><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_crypto_init
<li><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_crypto_register
<li><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_hwtimer_isr
<li><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_hwtimer_register
<li><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_recv
<li><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_control
<li><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_write
<li><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_read
<li><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_device_init
<li><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_eeprom_read
<li><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_eeprom_write
<li><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_control
<li><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<li><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<li><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_read
<li><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_write
<li><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_read
<li><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_rtc_init
<li><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_rtc_control
<li><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_calc_recved_len
<li><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_init
<li><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_poll
<li><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<li><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_open
<li><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<li><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<li><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<li><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<li><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<li><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<li><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<li><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<li><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
<li><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_write
<li><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_read
<li><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_write
<li><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_read
<li><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
<li><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spidev_device_init
<li><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp3202_adc_control
<li><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_watchdog_control
<li><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_watchdog_init
<li><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_watchdog_close
<li><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_watchdog_register
<li><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_rx_ind
<li><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<li><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<li><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</ul>
<p><strong><a name="[113]"></a>xmemset</strong>(48 bytes, Stack size 20 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 60 
<li>Call Chain = xmemset &rArr; memset_hw &rArr; mem_hw_internal  &rArr; dma_intr_status  </ul>
<br>[Calls]<ul>
<li><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_hw
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</ul>
<p><strong><a name="[114]"></a>memset</strong>(48 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth0_init
<li><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_tx
<li><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<li><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<li><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<li><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<li><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<li><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<li><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<li><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<li><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<li><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<li><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<li><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_new
<li><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<li><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<li><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<li><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<li><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<li><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_port_init
<li><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;identify_revise
<li><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_identify_read
<li><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hw_init
<li><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_non_data_lba
<li><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_tx_queue_init
<li><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_rx_queue_init
<li><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
<li><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<li><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<li><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<li><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</ul>
<p><strong><a name="[115]"></a>xmemcpy</strong>(48 bytes, Stack size 20 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 56 
<li>Call Chain = xmemcpy &rArr; memcpy_hw &rArr; mem_hw_internal  &rArr; dma_intr_status  </ul>
<br>[Calls]<ul>
<li><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</ul>
<p><strong><a name="[116]"></a>memcpy</strong>(48 bytes, Stack size 0 btyes, Obj/src_kservice.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<li><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<li><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<li><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<li><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<li><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<li><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<li><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<li><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<li><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<li><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<li><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<li><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<li><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<li><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<li><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<li><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<li><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<li><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<li><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<li><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rand
<li><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;identify_revise
<li><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_read
<li><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_write
<li><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_read
<li><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<li><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<li><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<li><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<li><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<li><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<li><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<li><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response.isra.0
<li><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto_ntp_server
</ul>
<p><strong><a name="[117]"></a>list_mem</strong>(34 bytes, Stack size 4 btyes, Obj/src_mem.o(.text.list_mem))<br>
<br>[Stack]<ul><li>Max Depth = 176 
<li>Call Chain = list_mem &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_free
</ul>
<p><strong><a name="[119]"></a>rt_system_heap_init</strong>(154 bytes, Stack size 20 btyes, Obj/src_mem.o(.text.rt_system_heap_init))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = rt_system_heap_init &rArr; rt_sem_init &rArr; rt_object_init  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</ul>
<br>[Called By]<ul>
<li><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</ul>
<p><strong><a name="[11a]"></a>rt_malloc_sethook</strong>(6 bytes, Stack size 0 btyes, Obj/src_mem.o(.fast))<br>
<p><strong><a name="[11b]"></a>rt_free_sethook</strong>(6 bytes, Stack size 0 btyes, Obj/src_mem.o(.fast))<br>
<p><strong><a name="[11c]"></a>rt_malloc</strong>(452 bytes, Stack size 36 btyes, Obj/src_mem.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 308 
<li>Call Chain = rt_malloc &rArr; rt_sem_take &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<li><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<li><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<li><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc_align
<li><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<li><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<li><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<li><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<li><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<li><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<li><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<li><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_poll_add
<li><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<li><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<li><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<li><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<li><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<li><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<li><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<li><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<li><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<li><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<li><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<li><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<li><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<li><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<li><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</ul>
<p><strong><a name="[11d]"></a>rt_calloc</strong>(74 bytes, Stack size 16 btyes, Obj/src_mem.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = rt_calloc &rArr; rt_malloc &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<li><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</ul>
<p><strong><a name="[11e]"></a>rt_free</strong>(356 bytes, Stack size 12 btyes, Obj/src_mem.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 284 
<li>Call Chain = rt_free &rArr; rt_sem_take &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<li><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</ul>
<br>[Called By]<ul>
<li><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<li><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<li><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<li><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_align
<li><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<li><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<li><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<li><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<li><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<li><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<li><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<li><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<li><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<li><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<li><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<li><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<li><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<li><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<li><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
<li><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<li><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<li><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<li><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<li><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<li><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
<li><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<li><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<li><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<li><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<li><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<li><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<li><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_close
<li><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<li><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<li><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<li><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</ul>
<p><strong><a name="[11f]"></a>rt_realloc</strong>(260 bytes, Stack size 20 btyes, Obj/src_mem.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 328 
<li>Call Chain = rt_realloc &rArr; rt_malloc &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<li><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<br>[Called By]<ul>
<li><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
</ul>
<p><strong><a name="[120]"></a>rt_memory_info</strong>(32 bytes, Stack size 0 btyes, Obj/src_mem.o(.fast))<br>
<p><strong><a name="[121]"></a>rt_memheap_init</strong>(138 bytes, Stack size 0 btyes, Obj/src_memheap.o(.text.rt_memheap_init))<br>
<p><strong><a name="[122]"></a>rt_memheap_detach</strong>(38 bytes, Stack size 8 btyes, Obj/src_memheap.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = rt_memheap_detach &rArr; rt_object_detach &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[123]"></a>rt_memheap_alloc</strong>(244 bytes, Stack size 20 btyes, Obj/src_memheap.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 292 
<li>Call Chain = rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<li><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_open
</ul>
<p><strong><a name="[124]"></a>rt_memheap_free</strong>(216 bytes, Stack size 20 btyes, Obj/src_memheap.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 292 
<li>Call Chain = rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<li><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_open
<li><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_unlink
</ul>
<p><strong><a name="[125]"></a>rt_memheap_realloc</strong>(470 bytes, Stack size 32 btyes, Obj/src_memheap.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = rt_memheap_realloc &rArr; rt_memheap_alloc &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<li><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<li><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<li><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_write
</ul>
<p><strong><a name="[126]"></a>rt_object_attach_sethook</strong>(6 bytes, Stack size 0 btyes, Obj/src_object.o(.fast))<br>
<p><strong><a name="[127]"></a>rt_object_detach_sethook</strong>(6 bytes, Stack size 0 btyes, Obj/src_object.o(.fast))<br>
<p><strong><a name="[128]"></a>rt_object_trytake_sethook</strong>(6 bytes, Stack size 0 btyes, Obj/src_object.o(.fast))<br>
<p><strong><a name="[129]"></a>rt_object_take_sethook</strong>(6 bytes, Stack size 0 btyes, Obj/src_object.o(.fast))<br>
<p><strong><a name="[12a]"></a>rt_object_put_sethook</strong>(6 bytes, Stack size 0 btyes, Obj/src_object.o(.fast))<br>
<p><strong><a name="[12b]"></a>rt_system_object_init</strong>(2 bytes, Stack size 0 btyes, Obj/src_object.o(.fast))<br>
<p><strong><a name="[12c]"></a>rt_object_get_information</strong>(34 bytes, Stack size 0 btyes, Obj/src_object.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<li><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<li><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<li><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<li><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<li><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<li><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<li><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<li><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<li><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<li><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<li><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
</ul>
<p><strong><a name="[12d]"></a>rt_object_init</strong>(104 bytes, Stack size 20 btyes, Obj/src_object.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 204 
<li>Call Chain = rt_object_init &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</ul>
<br>[Called By]<ul>
<li><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<li><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<li><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<li><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<li><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<li><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
<li><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<li><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</ul>
<p><strong><a name="[12e]"></a>rt_object_detach</strong>(62 bytes, Stack size 8 btyes, Obj/src_object.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = rt_object_detach &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<li><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<li><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<li><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<li><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_detach
<li><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_detach
<li><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<li><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<li><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
</ul>
<p><strong><a name="[12f]"></a>rt_object_allocate</strong>(154 bytes, Stack size 20 btyes, Obj/src_object.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 328 
<li>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<li><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<li><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<li><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<li><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<li><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
</ul>
<p><strong><a name="[130]"></a>rt_object_delete</strong>(90 bytes, Stack size 8 btyes, Obj/src_object.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 292 
<li>Call Chain = rt_object_delete &rArr; rt_free &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<li><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<li><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<li><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<li><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<li><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<li><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<li><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
</ul>
<p><strong><a name="[131]"></a>rt_object_is_systemobject</strong>(30 bytes, Stack size 8 btyes, Obj/src_object.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = rt_object_is_systemobject &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<li><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</ul>
<p><strong><a name="[132]"></a>rt_object_find</strong>(158 bytes, Stack size 20 btyes, Obj/src_object.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 204 
<li>Call Chain = rt_object_find &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<li><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[133]"></a>rt_scheduler_sethook</strong>(6 bytes, Stack size 0 btyes, Obj/src_scheduler.o(.fast))<br>
<p><strong><a name="[134]"></a>rt_system_scheduler_init</strong>(46 bytes, Stack size 0 btyes, Obj/src_scheduler.o(.text.rt_system_scheduler_init))<br>
<br>[Called By]<ul>
<li><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</ul>
<p><strong><a name="[135]"></a>rt_system_scheduler_start</strong>(34 bytes, Stack size 4 btyes, Obj/src_scheduler.o(.text.rt_system_scheduler_start))<br>
<br>[Calls]<ul>
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
<li><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
</ul>
<br>[Called By]<ul>
<li><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</ul>
<p><strong><a name="[136]"></a>rt_schedule</strong>(212 bytes, Stack size 16 btyes, Obj/src_scheduler.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = rt_schedule &rArr; list_thread &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<li><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<li><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<li><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<li><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<li><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<li><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<li><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<li><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<li><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<li><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<li><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<li><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<li><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<li><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<li><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<li><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<li><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<li><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<li><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
<li><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<li><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<li><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<li><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<li><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<li><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<li><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
</ul>
<p><strong><a name="[137]"></a>rt_schedule_insert_thread</strong>(98 bytes, Stack size 8 btyes, Obj/src_scheduler.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = rt_schedule_insert_thread &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</ul>
<p><strong><a name="[138]"></a>rt_schedule_remove_thread</strong>(86 bytes, Stack size 8 btyes, Obj/src_scheduler.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = rt_schedule_remove_thread &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<li><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<li><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<li><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<li><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</ul>
<p><strong><a name="[139]"></a>rt_enter_critical</strong>(20 bytes, Stack size 4 btyes, Obj/src_scheduler.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</ul>
<br>[Called By]<ul>
<li><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<li><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<li><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<li><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<li><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<li><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<li><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<li><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<li><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
<li><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
<li><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<li><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_get_ipv4
<li><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<li><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<li><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<li><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
</ul>
<p><strong><a name="[13a]"></a>rt_exit_critical</strong>(40 bytes, Stack size 4 btyes, Obj/src_scheduler.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</ul>
<br>[Called By]<ul>
<li><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<li><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<li><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<li><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<li><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<li><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<li><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<li><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<li><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
<li><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
<li><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<li><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_get_ipv4
<li><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<li><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<li><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<li><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
</ul>
<p><strong><a name="[13b]"></a>rt_critical_level</strong>(6 bytes, Stack size 0 btyes, Obj/src_scheduler.o(.fast))<br>
<p><strong><a name="[13c]"></a>rt_thread_exit</strong>(84 bytes, Stack size 12 btyes, Obj/src_thread.o(.text.rt_thread_exit))<br>
<br>[Stack]<ul><li>Max Depth = 256 
<li>Call Chain = rt_thread_exit &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<li><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<li><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</ul>
<p><strong><a name="[13d]"></a>rt_thread_timeout</strong>(82 bytes, Stack size 8 btyes, Obj/src_thread.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 252 
<li>Call Chain = rt_thread_timeout &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</ul>
<p><strong><a name="[13f]"></a>rt_thread_init</strong>(96 bytes, Stack size 48 btyes, Obj/src_thread.o(.text.rt_thread_init))<br>
<br>[Stack]<ul><li>Max Depth = 304 
<li>Call Chain = rt_thread_init &rArr; _rt_thread_init.isra.0 &rArr; rt_timer_init  &rArr; rt_object_init  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<li><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init.isra.0
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<li><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init_private
<li><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</ul>
<p><strong><a name="[140]"></a>rt_thread_create</strong>(82 bytes, Stack size 0 btyes, Obj/src_thread.o(.text.rt_thread_create))<br>
<br>[Stack]<ul><li>Max Depth = 328 
<li>Call Chain = rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init.isra.0
<li><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</ul>
<br>[Called By]<ul>
<li><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<li><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<li><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_ntp_sync_init
<li><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</ul>
<p><strong><a name="[141]"></a>rt_thread_suspend_sethook</strong>(6 bytes, Stack size 0 btyes, Obj/src_thread.o(.fast))<br>
<p><strong><a name="[142]"></a>rt_thread_resume_sethook</strong>(6 bytes, Stack size 0 btyes, Obj/src_thread.o(.fast))<br>
<p><strong><a name="[143]"></a>rt_thread_inited_sethook</strong>(6 bytes, Stack size 0 btyes, Obj/src_thread.o(.fast))<br>
<p><strong><a name="[144]"></a>rt_thread_self</strong>(6 bytes, Stack size 0 btyes, Obj/src_thread.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<li><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<li><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<li><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<li><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<li><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_errno
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<li><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<li><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
<li><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<li><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<li><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<li><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</ul>
<p><strong><a name="[145]"></a>rt_thread_detach</strong>(96 bytes, Stack size 8 btyes, Obj/src_thread.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = rt_thread_detach &rArr; rt_timer_detach &rArr; rt_object_detach  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<li><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[146]"></a>rt_thread_delete</strong>(82 bytes, Stack size 8 btyes, Obj/src_thread.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = rt_thread_delete &rArr; rt_timer_detach &rArr; rt_object_detach  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<li><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</ul>
<p><strong><a name="[147]"></a>rt_thread_yield</strong>(108 bytes, Stack size 4 btyes, Obj/src_thread.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 248 
<li>Call Chain = rt_thread_yield &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</ul>
<br>[Called By]<ul>
<li><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</ul>
<p><strong><a name="[148]"></a>rt_thread_suspend</strong>(104 bytes, Stack size 12 btyes, Obj/src_thread.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 204 
<li>Call Chain = rt_thread_suspend &rArr; rt_schedule_remove_thread &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<li><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<li><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<li><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<li><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<li><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<li><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
<li><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<li><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<li><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<li><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
</ul>
<p><strong><a name="[149]"></a>rt_thread_sleep</strong>(90 bytes, Stack size 20 btyes, Obj/src_thread.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 264 
<li>Call Chain = rt_thread_sleep &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<li><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<li><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<li><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</ul>
<p><strong><a name="[14a]"></a>rt_thread_delay</strong>(8 bytes, Stack size 4 btyes, Obj/src_thread.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 268 
<li>Call Chain = rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</ul>
<br>[Called By]<ul>
<li><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_thread_enrty
<li><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</ul>
<p><strong><a name="[14b]"></a>rt_thread_mdelay</strong>(12 bytes, Stack size 4 btyes, Obj/src_thread.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 268 
<li>Call Chain = rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<li><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</ul>
<br>[Called By]<ul>
<li><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
<li><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_eeprom_write
<li><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp3202_adc_read
<li><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
</ul>
<p><strong><a name="[14c]"></a>rt_thread_resume</strong>(104 bytes, Stack size 12 btyes, Obj/src_thread.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 204 
<li>Call Chain = rt_thread_resume &rArr; rt_timer_stop &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<li><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<li><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<li><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<li><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<li><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<li><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<li><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<li><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<li><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<li><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<li><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<li><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<li><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<li><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_detach
<li><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<li><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<li><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<li><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<li><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<li><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<li><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<li><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<li><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<li><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
</ul>
<p><strong><a name="[14d]"></a>rt_thread_startup</strong>(90 bytes, Stack size 8 btyes, Obj/src_thread.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 252 
<li>Call Chain = rt_thread_startup &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<li><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<li><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<li><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init_private
<li><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<li><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<li><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_ntp_sync_init
<li><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</ul>
<p><strong><a name="[14e]"></a>rt_thread_control</strong>(122 bytes, Stack size 20 btyes, Obj/src_thread.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 272 
<li>Call Chain = rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<li><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</ul>
<br>[Called By]<ul>
<li><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<p><strong><a name="[14f]"></a>rt_thread_find</strong>(170 bytes, Stack size 24 btyes, Obj/src_thread.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = rt_thread_find &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<li><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<li><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</ul>
<p><strong><a name="[150]"></a>rt_timer_timeout_sethook</strong>(6 bytes, Stack size 0 btyes, Obj/src_timer.o(.fast))<br>
<p><strong><a name="[151]"></a>rt_system_timer_thread_init</strong>(2 bytes, Stack size 0 btyes, Obj/src_timer.o(.text.rt_system_timer_thread_init))<br>
<br>[Called By]<ul>
<li><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</ul>
<p><strong><a name="[152]"></a>rt_timer_init</strong>(70 bytes, Stack size 28 btyes, Obj/src_timer.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth0_init
<li><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init.isra.0
</ul>
<p><strong><a name="[153]"></a>rt_timer_detach</strong>(56 bytes, Stack size 8 btyes, Obj/src_timer.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<li><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<li><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
</ul>
<p><strong><a name="[154]"></a>rt_timer_create</strong>(48 bytes, Stack size 20 btyes, Obj/src_timer.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = rt_timer_create &rArr; rt_object_allocate &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</ul>
<p><strong><a name="[155]"></a>rt_timer_delete</strong>(58 bytes, Stack size 8 btyes, Obj/src_timer.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 300 
<li>Call Chain = rt_timer_delete &rArr; rt_object_delete &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[156]"></a>rt_timer_start</strong>(180 bytes, Stack size 16 btyes, Obj/src_timer.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = rt_timer_start &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth0_init
<li><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<li><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<li><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<li><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<li><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<li><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<li><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
<li><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<li><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<li><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<li><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
</ul>
<p><strong><a name="[157]"></a>rt_timer_stop</strong>(86 bytes, Stack size 8 btyes, Obj/src_timer.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = rt_timer_stop &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</ul>
<p><strong><a name="[158]"></a>rt_timer_control</strong>(84 bytes, Stack size 16 btyes, Obj/src_timer.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = rt_timer_control &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<li><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<li><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<li><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<li><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<li><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
<li><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<li><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<li><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<li><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
</ul>
<p><strong><a name="[159]"></a>rt_timer_check</strong>(168 bytes, Stack size 28 btyes, Obj/src_timer.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 228 
<li>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</ul>
<br>[Called By]<ul>
<li><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</ul>
<p><strong><a name="[15a]"></a>rt_timer_next_timeout_tick</strong>(18 bytes, Stack size 0 btyes, Obj/src_timer.o(.fast))<br>
<p><strong><a name="[15b]"></a>rt_system_timer_init</strong>(8 bytes, Stack size 0 btyes, Obj/src_timer.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</ul>
<p><strong><a name="[15c]"></a>rt_hw_exception_install</strong>(6 bytes, Stack size 0 btyes, Obj/ck803_cpuport.o(.text.rt_hw_exception_install))<br>
<p><strong><a name="[15d]"></a>rt_hw_hard_fault_exception</strong>(194 bytes, Stack size 8 btyes, Obj/ck803_cpuport.o(.text.rt_hw_hard_fault_exception))<br>
<br>[Stack]<ul><li>Max Depth = 180 
<li>Call Chain = rt_hw_hard_fault_exception &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<li><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_reset
</ul>
<p><strong><a name="[15e]"></a>rt_hw_cpu_shutdown</strong>(20 bytes, Stack size 0 btyes, Obj/ck803_cpuport.o(.text.rt_hw_cpu_shutdown))<br>
<p><strong><a name="[15f]"></a>rt_hw_interrupt_leave_hook</strong>(2 bytes, Stack size 0 btyes, Obj/ck803_cpuport.o(.text.rt_hw_interrupt_leave_hook))<br>
<p><strong><a name="[160]"></a>rt_hw_interrupt_enter_hook</strong>(2 bytes, Stack size 0 btyes, Obj/ck803_cpuport.o(.text.rt_hw_interrupt_enter_hook))<br>
<p><strong><a name="[161]"></a>rt_hw_stack_init</strong>(152 bytes, Stack size 0 btyes, Obj/ck803_stack_ck803.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init.isra.0
</ul>
<p><strong><a name="[162]"></a>rt_hw_interrupt_disable</strong>(0 bytes, Stack size 0 btyes, Obj/ck803_contex_ck803_gcc.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_cmd_pending_check
<li><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_isr
<li><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_set
<li><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<li><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<li><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<li><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<li><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<li><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<li><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<li><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<li><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<li><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<li><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<li><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<li><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<li><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<li><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<li><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<li><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<li><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<li><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<li><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_detach
<li><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<li><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<li><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<li><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<li><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<li><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<li><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<li><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemset
<li><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<li><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<li><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<li><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<li><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<li><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<li><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<li><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<li><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<li><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<li><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<li><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<li><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<li><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<li><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<li><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<li><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<li><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<li><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<li><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<li><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
<li><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_poll
<li><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<li><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<li><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<li><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<li><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<li><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<li><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<li><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_add
<li><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
<li><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<li><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
<li><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<li><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<li><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<li><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<li><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<li><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_free
<li><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<li><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<li><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<li><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<li><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<li><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_linkchange
<li><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<li><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry
<li><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_poll
<li><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<li><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<li><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<li><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<li><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</ul>
<p><strong><a name="[163]"></a>rt_hw_interrupt_enable</strong>(0 bytes, Stack size 0 btyes, Obj/ck803_contex_ck803_gcc.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_cmd_pending_check
<li><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_isr
<li><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_set
<li><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<li><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<li><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<li><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<li><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<li><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<li><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<li><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<li><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<li><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<li><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<li><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<li><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<li><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<li><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<li><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<li><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<li><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<li><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<li><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_detach
<li><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<li><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<li><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<li><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<li><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<li><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<li><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<li><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<li><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemset
<li><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<li><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<li><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<li><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<li><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<li><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<li><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<li><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<li><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<li><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<li><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<li><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<li><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<li><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<li><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<li><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<li><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<li><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<li><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<li><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<li><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
<li><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_poll
<li><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<li><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<li><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<li><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<li><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<li><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<li><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<li><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_add
<li><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
<li><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<li><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
<li><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<li><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<li><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<li><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<li><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<li><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_free
<li><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<li><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<li><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<li><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<li><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<li><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_linkchange
<li><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_poll
<li><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<li><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<li><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<li><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<li><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</ul>
<p><strong><a name="[164]"></a>rt_hw_ffs</strong>(0 bytes, Stack size 0 btyes, Obj/ck803_contex_ck803_gcc.o(.text))<br>
<p><strong><a name="[165]"></a>rt_hw_context_switch_to</strong>(0 bytes, Stack size 0 btyes, Obj/ck803_contex_ck803_gcc.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</ul>
<p><strong><a name="[166]"></a>rt_hw_context_switch_interrupt</strong>(0 bytes, Stack size 0 btyes, Obj/ck803_contex_ck803_gcc.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</ul>
<p><strong><a name="[167]"></a>rt_hw_context_switch</strong>(0 bytes, Stack size 0 btyes, Obj/ck803_contex_ck803_gcc.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</ul>
<p><strong><a name="[168]"></a>PendSV_Handler</strong>(0 bytes, Stack size 0 btyes, Obj/ck803_contex_ck803_gcc.o(.text))<br>
<p><strong><a name="[169]"></a>exception_handler</strong>(0 bytes, Stack size 0 btyes, Obj/ck803_contex_ck803_gcc.o(.text))<br>
<p><strong><a name="[16a]"></a>interrupt_handler</strong>(0 bytes, Stack size 0 btyes, Obj/ck803_contex_ck803_gcc.o(.text))<br>
<p><strong><a name="[16b]"></a>reset_handler</strong>(142 bytes, Stack size 0 btyes, Obj/ck803_startup_gcc.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 352 
<li>Call Chain = reset_handler &rArr; entry &rArr; rtthread_startup  &rArr; rt_application_init  &rArr; rt_thread_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<li><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry
</ul>
<p><strong><a name="[16c]"></a>default_handler</strong>(2 bytes, Stack size 0 btyes, Obj/ck803_startup_gcc.o(.text))<br>
<p><strong><a name="[16d]"></a>timer_irq_handler</strong>(2 bytes, Stack size 0 btyes, Obj/ck803_startup_gcc.o(.text))<br>
<p><strong><a name="[16e]"></a>rt_hw_show_memory</strong>(76 bytes, Stack size 32 btyes, Obj/common_showmem.o(.text.rt_hw_show_memory))<br>
<br>[Stack]<ul><li>Max Depth = 204 
<li>Call Chain = rt_hw_show_memory &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_memory
</ul>
<p><strong><a name="[16f]"></a>rt_show_memory</strong>(54 bytes, Stack size 12 btyes, Obj/common_showmem.o(.text.rt_show_memory))<br>
<br>[Stack]<ul><li>Max Depth = 216 
<li>Call Chain = rt_show_memory &rArr; rt_hw_show_memory &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<li><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_show_memory
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[170]"></a>list_fd</strong>(206 bytes, Stack size 44 btyes, Obj/src_dfs.o(.text.list_fd))<br>
<br>[Stack]<ul><li>Max Depth = 216 
<li>Call Chain = list_fd &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
</ul>
<p><strong><a name="[171]"></a>dfs_init</strong>(108 bytes, Stack size 16 btyes, Obj/src_dfs.o(.text.dfs_init))<br>
<br>[Stack]<ul><li>Max Depth = 500 
<li>Call Chain = dfs_init &rArr; dfs_mount &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<li><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devfs_init
<li><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[172]"></a>dfs_lock</strong>(40 bytes, Stack size 12 btyes, Obj/src_dfs.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<li><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<li><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<li><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<li><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<li><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<li><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
</ul>
<p><strong><a name="[173]"></a>fd_new</strong>(260 bytes, Stack size 0 btyes, Obj/src_dfs.o(.text.fd_new))<br>
<br>[Stack]<ul><li>Max Depth = 328 
<li>Call Chain = fd_new &rArr; rt_realloc &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<li><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</ul>
<br>[Called By]<ul>
<li><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<li><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<li><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<li><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</ul>
<p><strong><a name="[174]"></a>dfs_subdir</strong>(42 bytes, Stack size 0 btyes, Obj/src_dfs.o(.text.dfs_subdir))<br>
<br>[Calls]<ul>
<li><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</ul>
<br>[Called By]<ul>
<li><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<li><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<li><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<li><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
</ul>
<p><strong><a name="[175]"></a>dfs_normalize_path</strong>(392 bytes, Stack size 24 btyes, Obj/src_dfs.o(.text.dfs_normalize_path))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<br>[Called By]<ul>
<li><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<li><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<li><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<li><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<li><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<li><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<li><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<li><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<li><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<li><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
</ul>
<p><strong><a name="[176]"></a>dfs_unlock</strong>(10 bytes, Stack size 4 btyes, Obj/src_dfs.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 292 
<li>Call Chain = dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<br>[Called By]<ul>
<li><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<li><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<li><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<li><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<li><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
</ul>
<p><strong><a name="[177]"></a>fd_get</strong>(68 bytes, Stack size 12 btyes, Obj/src_dfs.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 336 
<li>Call Chain = fd_get &rArr; dfs_lock &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<li><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<br>[Called By]<ul>
<li><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<li><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<li><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<li><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<li><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<li><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<li><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
<li><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<li><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekdir
<li><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<li><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<li><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<li><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
<li><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<li><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<li><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
</ul>
<p><strong><a name="[178]"></a>fd_put</strong>(108 bytes, Stack size 16 btyes, Obj/src_dfs.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 340 
<li>Call Chain = fd_put &rArr; dfs_lock &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<li><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<li><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<li><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<li><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<li><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<li><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<li><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
<li><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<li><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekdir
<li><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<li><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<li><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<li><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
<li><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<li><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<li><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
</ul>
<p><strong><a name="[179]"></a>fd_is_open</strong>(162 bytes, Stack size 32 btyes, Obj/src_dfs.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 392 
<li>Call Chain = fd_is_open &rArr; dfs_filesystem_lookup &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<li><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<li><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<li><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<br>[Called By]<ul>
<li><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<li><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</ul>
<p><strong><a name="[17a]"></a>dfs_fdtable_get</strong>(4 bytes, Stack size 0 btyes, Obj/src_dfs.o(.fast))<br>
<p><strong><a name="[17b]"></a>dfs_file_open</strong>(232 bytes, Stack size 20 btyes, Obj/src_dfs_file.o(.text.dfs_file_open))<br>
<br>[Stack]<ul><li>Max Depth = 412 
<li>Call Chain = dfs_file_open &rArr; fd_is_open &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<li><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<li><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<li><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<li><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<br>[Called By]<ul>
<li><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<li><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<li><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<li><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<li><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<li><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<li><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<li><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
</ul>
<p><strong><a name="[17c]"></a>dfs_file_close</strong>(48 bytes, Stack size 12 btyes, Obj/src_dfs_file.o(.text.dfs_file_close))<br>
<br>[Stack]<ul><li>Max Depth = 296 
<li>Call Chain = dfs_file_close &rArr; rt_free &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<br>[Called By]<ul>
<li><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<li><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<li><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<li><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<li><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<li><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<li><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<li><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<li><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
</ul>
<p><strong><a name="[17d]"></a>cat</strong>(96 bytes, Stack size 100 btyes, Obj/src_dfs_file.o(.text.cat))<br>
<br>[Stack]<ul><li>Max Depth = 512 
<li>Call Chain = cat &rArr; dfs_file_open &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cat
</ul>
<p><strong><a name="[17f]"></a>dfs_file_ioctl</strong>(62 bytes, Stack size 0 btyes, Obj/src_dfs_file.o(.text.dfs_file_ioctl))<br>
<p><strong><a name="[180]"></a>dfs_file_read</strong>(44 bytes, Stack size 8 btyes, Obj/src_dfs_file.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</ul>
<p><strong><a name="[181]"></a>dfs_file_unlink</strong>(140 bytes, Stack size 0 btyes, Obj/src_dfs_file.o(.text.dfs_file_unlink))<br>
<br>[Stack]<ul><li>Max Depth = 392 
<li>Call Chain = dfs_file_unlink &rArr; fd_is_open &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<li><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<li><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
</ul>
<br>[Called By]<ul>
<li><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
<li><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rmdir
</ul>
<p><strong><a name="[182]"></a>rm</strong>(24 bytes, Stack size 8 btyes, Obj/src_dfs_file.o(.text.rm))<br>
<br>[Stack]<ul><li>Max Depth = 400 
<li>Call Chain = rm &rArr; dfs_file_unlink &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[183]"></a>dfs_file_stat</strong>(164 bytes, Stack size 0 btyes, Obj/src_dfs_file.o(.text.dfs_file_stat))<br>
<br>[Stack]<ul><li>Max Depth = 360 
<li>Call Chain = dfs_file_stat &rArr; dfs_filesystem_lookup &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<li><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<li><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<br>[Called By]<ul>
<li><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<li><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<li><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</ul>
<p><strong><a name="[184]"></a>ls</strong>(240 bytes, Stack size 108 btyes, Obj/src_dfs_file.o(.text.ls))<br>
<br>[Stack]<ul><li>Max Depth = 520 
<li>Call Chain = ls &rArr; dfs_file_open &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<li><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
</ul>
<br>[Called By]<ul>
<li><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ls
</ul>
<p><strong><a name="[186]"></a>copy</strong>(308 bytes, Stack size 76 btyes, Obj/src_dfs_file.o(.text.copy))<br>
<br>[Stack]<ul><li>Max Depth = 536 
<li>Call Chain = copy &rArr; copyfile &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<li><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<li><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<li><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cp
</ul>
<p><strong><a name="[187]"></a>dfs_file_rename</strong>(142 bytes, Stack size 24 btyes, Obj/src_dfs_file.o(.text.dfs_file_rename))<br>
<br>[Stack]<ul><li>Max Depth = 384 
<li>Call Chain = dfs_file_rename &rArr; dfs_filesystem_lookup &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<li><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<li><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<br>[Called By]<ul>
<li><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
</ul>
<p><strong><a name="[188]"></a>dfs_file_getdents</strong>(40 bytes, Stack size 4 btyes, Obj/src_dfs_file.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
</ul>
<p><strong><a name="[189]"></a>dfs_file_write</strong>(30 bytes, Stack size 4 btyes, Obj/src_dfs_file.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
</ul>
<p><strong><a name="[18a]"></a>dfs_file_flush</strong>(30 bytes, Stack size 4 btyes, Obj/src_dfs_file.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
</ul>
<p><strong><a name="[18b]"></a>dfs_file_lseek</strong>(38 bytes, Stack size 8 btyes, Obj/src_dfs_file.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<li><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekdir
<li><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
</ul>
<p><strong><a name="[18c]"></a>dfs_register</strong>(94 bytes, Stack size 20 btyes, Obj/src_dfs_fs.o(.text.dfs_register))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = dfs_register &rArr; dfs_lock &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<li><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<li><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_init
<li><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devfs_init
<li><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_init
<li><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_init
</ul>
<p><strong><a name="[18d]"></a>dfs_filesystem_lookup</strong>(136 bytes, Stack size 36 btyes, Obj/src_dfs_fs.o(.text.dfs_filesystem_lookup))<br>
<br>[Stack]<ul><li>Max Depth = 360 
<li>Call Chain = dfs_filesystem_lookup &rArr; dfs_lock &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<li><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<li><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<li><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<li><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<li><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<li><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<li><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
</ul>
<p><strong><a name="[18e]"></a>dfs_filesystem_get_mounted_path</strong>(52 bytes, Stack size 0 btyes, Obj/src_dfs_fs.o(.text.dfs_filesystem_get_mounted_path))<br>
<p><strong><a name="[18f]"></a>dfs_filesystem_get_partition</strong>(190 bytes, Stack size 0 btyes, Obj/src_dfs_fs.o(.text.dfs_filesystem_get_partition))<br>
<p><strong><a name="[190]"></a>dfs_mount</strong>(370 bytes, Stack size 72 btyes, Obj/src_dfs_fs.o(.text.dfs_mount))<br>
<br>[Stack]<ul><li>Max Depth = 484 
<li>Call Chain = dfs_mount &rArr; dfs_file_open &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<li><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<li><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<li><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<li><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<li><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
</ul>
<br>[Called By]<ul>
<li><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<li><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_elm_ata
<li><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_init
</ul>
<p><strong><a name="[191]"></a>dfs_unmount</strong>(142 bytes, Stack size 0 btyes, Obj/src_dfs_fs.o(.text.dfs_unmount))<br>
<p><strong><a name="[192]"></a>dfs_mkfs</strong>(120 bytes, Stack size 20 btyes, Obj/src_dfs_fs.o(.text.dfs_mkfs))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = dfs_mkfs &rArr; dfs_lock &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<li><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<li><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkfs
<li><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkfs
</ul>
<p><strong><a name="[193]"></a>mkfs</strong>(8 bytes, Stack size 4 btyes, Obj/src_dfs_fs.o(.text.mkfs))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = mkfs &rArr; dfs_mkfs &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
</ul>
<p><strong><a name="[194]"></a>dfs_statfs</strong>(32 bytes, Stack size 8 btyes, Obj/src_dfs_fs.o(.text.dfs_statfs))<br>
<br>[Stack]<ul><li>Max Depth = 368 
<li>Call Chain = dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
</ul>
<br>[Called By]<ul>
<li><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
</ul>
<p><strong><a name="[195]"></a>df</strong>(172 bytes, Stack size 48 btyes, Obj/src_dfs_fs.o(.text.df))<br>
<br>[Stack]<ul><li>Max Depth = 416 
<li>Call Chain = df &rArr; dfs_statfs &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
<li><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__muldi3
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_df
</ul>
<p><strong><a name="[196]"></a>mkdir</strong>(96 bytes, Stack size 16 btyes, Obj/src_dfs_posix.o(.text.mkdir))<br>
<br>[Stack]<ul><li>Max Depth = 428 
<li>Call Chain = mkdir &rArr; dfs_file_open &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<li><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<li><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<li><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<li><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<li><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkdir
</ul>
<p><strong><a name="[197]"></a>open</strong>(106 bytes, Stack size 32 btyes, Obj/src_dfs_posix.o(.text.open))<br>
<br>[Stack]<ul><li>Max Depth = 444 
<li>Call Chain = open &rArr; dfs_file_open &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<li><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<li><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<li><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
</ul>
<p><strong><a name="[198]"></a>close</strong>(64 bytes, Stack size 12 btyes, Obj/src_dfs_posix.o(.text.close))<br>
<br>[Stack]<ul><li>Max Depth = 352 
<li>Call Chain = close &rArr; fd_put &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<li><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<li><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
</ul>
<p><strong><a name="[199]"></a>read</strong>(70 bytes, Stack size 16 btyes, Obj/src_dfs_posix.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 356 
<li>Call Chain = read &rArr; fd_put &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<li><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
</ul>
<p><strong><a name="[19a]"></a>rename</strong>(24 bytes, Stack size 0 btyes, Obj/src_dfs_posix.o(.text.rename))<br>
<br>[Stack]<ul><li>Max Depth = 384 
<li>Call Chain = rename &rArr; dfs_file_rename &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
</ul>
<p><strong><a name="[19b]"></a>stat</strong>(26 bytes, Stack size 0 btyes, Obj/src_dfs_posix.o(.text.stat))<br>
<p><strong><a name="[19c]"></a>fstat</strong>(66 bytes, Stack size 0 btyes, Obj/src_dfs_posix.o(.text.fstat))<br>
<p><strong><a name="[19d]"></a>fcntl</strong>(70 bytes, Stack size 0 btyes, Obj/src_dfs_posix.o(.text.fcntl))<br>
<p><strong><a name="[19e]"></a>ioctl</strong>(26 bytes, Stack size 0 btyes, Obj/src_dfs_posix.o(.text.ioctl))<br>
<p><strong><a name="[19f]"></a>statfs</strong>(26 bytes, Stack size 0 btyes, Obj/src_dfs_posix.o(.text.statfs))<br>
<p><strong><a name="[1a0]"></a>rmdir</strong>(24 bytes, Stack size 4 btyes, Obj/src_dfs_posix.o(.text.rmdir))<br>
<br>[Stack]<ul><li>Max Depth = 396 
<li>Call Chain = rmdir &rArr; dfs_file_unlink &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
</ul>
<p><strong><a name="[1a1]"></a>unlink</strong>(8 bytes, Stack size 4 btyes, Obj/src_dfs_posix.o(.text.unlink))<br>
<br>[Stack]<ul><li>Max Depth = 400 
<li>Call Chain = unlink &rArr; rmdir &rArr; dfs_file_unlink  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rmdir
</ul>
<br>[Called By]<ul>
<li><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rm
<li><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
</ul>
<p><strong><a name="[1a2]"></a>opendir</strong>(124 bytes, Stack size 16 btyes, Obj/src_dfs_posix.o(.text.opendir))<br>
<br>[Stack]<ul><li>Max Depth = 428 
<li>Call Chain = opendir &rArr; dfs_file_open &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<li><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<li><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</ul>
<p><strong><a name="[1a3]"></a>telldir</strong>(50 bytes, Stack size 0 btyes, Obj/src_dfs_posix.o(.text.telldir))<br>
<p><strong><a name="[1a4]"></a>rewinddir</strong>(54 bytes, Stack size 0 btyes, Obj/src_dfs_posix.o(.text.rewinddir))<br>
<br>[Stack]<ul><li>Max Depth = 340 
<li>Call Chain = rewinddir &rArr; fd_put &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
<li><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</ul>
<p><strong><a name="[1a5]"></a>closedir</strong>(74 bytes, Stack size 16 btyes, Obj/src_dfs_posix.o(.text.closedir))<br>
<br>[Stack]<ul><li>Max Depth = 356 
<li>Call Chain = closedir &rArr; fd_put &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<li><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<li><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</ul>
<p><strong><a name="[1a6]"></a>chdir</strong>(126 bytes, Stack size 12 btyes, Obj/src_dfs_posix.o(.text.chdir))<br>
<br>[Stack]<ul><li>Max Depth = 440 
<li>Call Chain = chdir &rArr; opendir &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<li><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<li><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<li><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<li><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<li><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cd
</ul>
<p><strong><a name="[1a7]"></a>access</strong>(32 bytes, Stack size 0 btyes, Obj/src_dfs_posix.o(.text.access))<br>
<p><strong><a name="[1a8]"></a>write</strong>(70 bytes, Stack size 16 btyes, Obj/src_dfs_posix.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 356 
<li>Call Chain = write &rArr; fd_put &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_write
<li><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
</ul>
<p><strong><a name="[1a9]"></a>lseek</strong>(120 bytes, Stack size 16 btyes, Obj/src_dfs_posix.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 356 
<li>Call Chain = lseek &rArr; fd_put &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<li><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
</ul>
<p><strong><a name="[1aa]"></a>fsync</strong>(42 bytes, Stack size 12 btyes, Obj/src_dfs_posix.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 352 
<li>Call Chain = fsync &rArr; fd_put &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_flush
<li><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<p><strong><a name="[1ab]"></a>readdir</strong>(116 bytes, Stack size 20 btyes, Obj/src_dfs_posix.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 360 
<li>Call Chain = readdir &rArr; fd_put &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<li><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</ul>
<p><strong><a name="[1ac]"></a>seekdir</strong>(56 bytes, Stack size 16 btyes, Obj/src_dfs_posix.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 356 
<li>Call Chain = seekdir &rArr; fd_put &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
<li><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<p><strong><a name="[1ad]"></a>getcwd</strong>(28 bytes, Stack size 12 btyes, Obj/src_dfs_posix.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = getcwd &rArr; rt_enter_critical </ul>
<br>[Calls]<ul>
<li><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<li><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
</ul>
<br>[Called By]<ul>
<li><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<li><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</ul>
<p><strong><a name="[1b0]"></a>poll</strong>(334 bytes, Stack size 72 btyes, Obj/src_poll.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 412 
<li>Call Chain = poll &rArr; fd_put &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<li><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<li><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<li><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</ul>
<br>[Called By]<ul>
<li><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</ul>
<p><strong><a name="[1b1]"></a>select</strong>(588 bytes, Stack size 32 btyes, Obj/src_select.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 444 
<li>Call Chain = select &rArr; poll &rArr; fd_put  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<br>[Called By]<ul>
<li><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
</ul>
<p><strong><a name="[1b2]"></a>dfs_device_fs_mount</strong>(4 bytes, Stack size 0 btyes, Obj/devfs_devfs.o(.text.dfs_device_fs_mount))<br>
<p><strong><a name="[1b4]"></a>dfs_device_fs_ioctl</strong>(54 bytes, Stack size 16 btyes, Obj/devfs_devfs.o(.text.dfs_device_fs_ioctl))<br>
<br>[Stack]<ul><li>Max Depth = 216 
<li>Call Chain = dfs_device_fs_ioctl &rArr; rt_device_control &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[1b5]"></a>dfs_device_fs_read</strong>(68 bytes, Stack size 20 btyes, Obj/devfs_devfs.o(.text.dfs_device_fs_read))<br>
<br>[Stack]<ul><li>Max Depth = 224 
<li>Call Chain = dfs_device_fs_read &rArr; rt_device_read &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[1b6]"></a>dfs_device_fs_write</strong>(68 bytes, Stack size 20 btyes, Obj/devfs_devfs.o(.text.dfs_device_fs_write))<br>
<br>[Stack]<ul><li>Max Depth = 204 
<li>Call Chain = dfs_device_fs_write &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[1b7]"></a>dfs_device_fs_open</strong>(236 bytes, Stack size 24 btyes, Obj/devfs_devfs.o(.text.dfs_device_fs_open))<br>
<br>[Stack]<ul><li>Max Depth = 332 
<li>Call Chain = dfs_device_fs_open &rArr; rt_malloc &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<li><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[1b8]"></a>dfs_device_fs_getdents</strong>(124 bytes, Stack size 32 btyes, Obj/devfs_devfs.o(.text.dfs_device_fs_getdents))<br>
<br>[Stack]<ul><li>Max Depth = 216 
<li>Call Chain = dfs_device_fs_getdents &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[1b9]"></a>dfs_device_fs_close</strong>(92 bytes, Stack size 12 btyes, Obj/devfs_devfs.o(.text.dfs_device_fs_close))<br>
<br>[Stack]<ul><li>Max Depth = 296 
<li>Call Chain = dfs_device_fs_close &rArr; rt_free &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[1ba]"></a>dfs_device_fs_stat</strong>(112 bytes, Stack size 8 btyes, Obj/devfs_devfs.o(.text.dfs_device_fs_stat))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = dfs_device_fs_stat &rArr; rt_device_find &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</ul>
<p><strong><a name="[1bb]"></a>devfs_init</strong>(12 bytes, Stack size 4 btyes, Obj/devfs_devfs.o(.text.devfs_init))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = devfs_init &rArr; dfs_register &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
</ul>
<br>[Called By]<ul>
<li><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
</ul>
<p><strong><a name="[1bc]"></a>dfs_elm_ioctl</strong>(6 bytes, Stack size 0 btyes, Obj/elmfat_dfs_elm.o(.text.dfs_elm_ioctl))<br>
<p><strong><a name="[1bd]"></a>dfs_elm_mount</strong>(244 bytes, Stack size 52 btyes, Obj/elmfat_dfs_elm.o(.text.dfs_elm_mount))<br>
<br>[Stack]<ul><li>Max Depth = 444 
<li>Call Chain = dfs_elm_mount &rArr; f_mount &rArr; ff_cre_syncobj  &rArr; rt_mutex_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<li><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[1be]"></a>dfs_elm_unmount</strong>(132 bytes, Stack size 28 btyes, Obj/elmfat_dfs_elm.o(.text.dfs_elm_unmount))<br>
<br>[Stack]<ul><li>Max Depth = 420 
<li>Call Chain = dfs_elm_unmount &rArr; f_mount &rArr; ff_cre_syncobj  &rArr; rt_mutex_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<p><strong><a name="[1bf]"></a>dfs_elm_mkfs</strong>(282 bytes, Stack size 40 btyes, Obj/elmfat_dfs_elm.o(.text.dfs_elm_mkfs))<br>
<br>[Stack]<ul><li>Max Depth = 432 
<li>Call Chain = dfs_elm_mkfs &rArr; f_mount &rArr; ff_cre_syncobj  &rArr; rt_mutex_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<li><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<li><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<li><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
</ul>
<p><strong><a name="[1c0]"></a>dfs_elm_statfs</strong>(124 bytes, Stack size 24 btyes, Obj/elmfat_dfs_elm.o(.text.dfs_elm_statfs))<br>
<br>[Stack]<ul><li>Max Depth = 448 
<li>Call Chain = dfs_elm_statfs &rArr; f_getfree &rArr; find_volume  &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[1c1]"></a>dfs_elm_open</strong>(320 bytes, Stack size 24 btyes, Obj/elmfat_dfs_elm.o(.text.dfs_elm_open))<br>
<br>[Stack]<ul><li>Max Depth = 496 
<li>Call Chain = dfs_elm_open &rArr; f_open &rArr; find_volume  &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<li><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<li><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</ul>
<p><strong><a name="[1c2]"></a>dfs_elm_close</strong>(106 bytes, Stack size 12 btyes, Obj/elmfat_dfs_elm.o(.text.dfs_elm_close))<br>
<br>[Stack]<ul><li>Max Depth = 360 
<li>Call Chain = dfs_elm_close &rArr; f_close &rArr; f_sync  &rArr; validate  &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[1c3]"></a>dfs_elm_read</strong>(88 bytes, Stack size 24 btyes, Obj/elmfat_dfs_elm.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 412 
<li>Call Chain = dfs_elm_read &rArr; f_read &rArr; validate  &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[1c4]"></a>dfs_elm_flush</strong>(46 bytes, Stack size 0 btyes, Obj/elmfat_dfs_elm.o(.text.dfs_elm_flush))<br>
<br>[Stack]<ul><li>Max Depth = 332 
<li>Call Chain = dfs_elm_flush &rArr; f_sync &rArr; validate  &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[1c5]"></a>dfs_elm_lseek</strong>(122 bytes, Stack size 16 btyes, Obj/elmfat_dfs_elm.o(.text.dfs_elm_lseek))<br>
<br>[Stack]<ul><li>Max Depth = 400 
<li>Call Chain = dfs_elm_lseek &rArr; f_lseek &rArr; validate  &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<li><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[1c6]"></a>dfs_elm_getdents</strong>(210 bytes, Stack size 320 btyes, Obj/elmfat_dfs_elm.o(.text.dfs_elm_getdents))<br>
<br>[Stack]<ul><li>Max Depth = 680 
<li>Call Chain = dfs_elm_getdents &rArr; f_readdir &rArr; validate  &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<li><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<li><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[1c7]"></a>dfs_elm_unlink</strong>(92 bytes, Stack size 20 btyes, Obj/elmfat_dfs_elm.o(.text.dfs_elm_unlink))<br>
<br>[Stack]<ul><li>Max Depth = 576 
<li>Call Chain = dfs_elm_unlink &rArr; f_unlink &rArr; find_volume  &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<p><strong><a name="[1c8]"></a>dfs_elm_rename</strong>(96 bytes, Stack size 24 btyes, Obj/elmfat_dfs_elm.o(.text.dfs_elm_rename))<br>
<br>[Stack]<ul><li>Max Depth = 616 
<li>Call Chain = dfs_elm_rename &rArr; f_rename &rArr; find_volume  &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<p><strong><a name="[1c9]"></a>dfs_elm_stat</strong>(216 bytes, Stack size 352 btyes, Obj/elmfat_dfs_elm.o(.text.dfs_elm_stat))<br>
<br>[Stack]<ul><li>Max Depth = 792 
<li>Call Chain = dfs_elm_stat &rArr; f_stat &rArr; find_volume  &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</ul>
<p><strong><a name="[1ca]"></a>elm_init</strong>(12 bytes, Stack size 4 btyes, Obj/elmfat_dfs_elm.o(.text.elm_init))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = elm_init &rArr; dfs_register &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
</ul>
<p><strong><a name="[1cb]"></a>mount_elm_ata</strong>(68 bytes, Stack size 8 btyes, Obj/elmfat_dfs_elm.o(.text.mount_elm_ata))<br>
<br>[Stack]<ul><li>Max Depth = 492 
<li>Call Chain = mount_elm_ata &rArr; dfs_mount &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
</ul>
<p><strong><a name="[1cc]"></a>disk_initialize</strong>(4 bytes, Stack size 0 btyes, Obj/elmfat_dfs_elm.o(.text.disk_initialize))<br>
<br>[Called By]<ul>
<li><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<li><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</ul>
<p><strong><a name="[1cd]"></a>disk_status</strong>(4 bytes, Stack size 0 btyes, Obj/elmfat_dfs_elm.o(.text.disk_status))<br>
<br>[Called By]<ul>
<li><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<li><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</ul>
<p><strong><a name="[1ce]"></a>get_fattime</strong>(78 bytes, Stack size 0 btyes, Obj/elmfat_dfs_elm.o(.text.get_fattime))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = get_fattime &rArr; localtime &rArr; localtime_r  &rArr; gettimeofday  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<li><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
</ul>
<br>[Called By]<ul>
<li><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<li><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<li><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<li><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</ul>
<p><strong><a name="[1cf]"></a>ff_cre_syncobj</strong>(38 bytes, Stack size 16 btyes, Obj/elmfat_dfs_elm.o(.text.ff_cre_syncobj))<br>
<br>[Stack]<ul><li>Max Depth = 360 
<li>Call Chain = ff_cre_syncobj &rArr; rt_mutex_create &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
</ul>
<br>[Called By]<ul>
<li><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</ul>
<p><strong><a name="[1d0]"></a>ff_del_syncobj</strong>(14 bytes, Stack size 4 btyes, Obj/elmfat_dfs_elm.o(.text.ff_del_syncobj))<br>
<br>[Stack]<ul><li>Max Depth = 316 
<li>Call Chain = ff_del_syncobj &rArr; rt_mutex_delete &rArr; rt_object_delete  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
</ul>
<br>[Called By]<ul>
<li><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</ul>
<p><strong><a name="[1d1]"></a>ff_memalloc</strong>(8 bytes, Stack size 0 btyes, Obj/elmfat_dfs_elm.o(.text.ff_memalloc))<br>
<br>[Stack]<ul><li>Max Depth = 308 
<li>Call Chain = ff_memalloc &rArr; rt_malloc &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</ul>
<br>[Called By]<ul>
<li><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<li><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<li><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<li><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<li><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<li><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<li><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<li><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</ul>
<p><strong><a name="[1d2]"></a>ff_memfree</strong>(8 bytes, Stack size 4 btyes, Obj/elmfat_dfs_elm.o(.text.ff_memfree))<br>
<br>[Stack]<ul><li>Max Depth = 288 
<li>Call Chain = ff_memfree &rArr; rt_free &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<br>[Called By]<ul>
<li><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<li><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<li><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<li><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<li><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<li><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<li><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<li><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</ul>
<p><strong><a name="[1d3]"></a>dfs_elm_write</strong>(92 bytes, Stack size 24 btyes, Obj/elmfat_dfs_elm.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 416 
<li>Call Chain = dfs_elm_write &rArr; f_write &rArr; validate  &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[1d4]"></a>disk_read</strong>(30 bytes, Stack size 8 btyes, Obj/elmfat_dfs_elm.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = disk_read &rArr; rt_device_read &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</ul>
<br>[Called By]<ul>
<li><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<li><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<li><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<li><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<li><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</ul>
<p><strong><a name="[1d5]"></a>disk_write</strong>(30 bytes, Stack size 8 btyes, Obj/elmfat_dfs_elm.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 28 + In Cycle
<li>Call Chain = disk_write &rArr; rt_device_write &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</ul>
<br>[Called By]<ul>
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
<li><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<li><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<li><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<li><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<li><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<li><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</ul>
<p><strong><a name="[1d6]"></a>disk_ioctl</strong>(176 bytes, Stack size 28 btyes, Obj/elmfat_dfs_elm.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 228 
<li>Call Chain = disk_ioctl &rArr; rt_device_control &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<li><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</ul>
<br>[Called By]<ul>
<li><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<li><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</ul>
<p><strong><a name="[1d7]"></a>ff_req_grant</strong>(16 bytes, Stack size 4 btyes, Obj/elmfat_dfs_elm.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 316 
<li>Call Chain = ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</ul>
<br>[Called By]<ul>
<li><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<li><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</ul>
<p><strong><a name="[1d8]"></a>ff_rel_grant</strong>(8 bytes, Stack size 4 btyes, Obj/elmfat_dfs_elm.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 292 
<li>Call Chain = ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<br>[Called By]<ul>
<li><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<li><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<li><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs.part.9
<li><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<li><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<li><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<li><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<li><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<li><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<li><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<li><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<li><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<li><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</ul>
<p><strong><a name="[1ee]"></a>f_mount</strong>(150 bytes, Stack size 32 btyes, Obj/elmfat_ff.o(.text.f_mount))<br>
<br>[Stack]<ul><li>Max Depth = 392 
<li>Call Chain = f_mount &rArr; ff_cre_syncobj &rArr; rt_mutex_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<li><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
<li><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<li><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<li><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs.part.9
</ul>
<br>[Called By]<ul>
<li><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<li><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<li><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</ul>
<p><strong><a name="[1ef]"></a>f_open</strong>(1404 bytes, Stack size 120 btyes, Obj/elmfat_ff.o(.text.f_open))<br>
<br>[Stack]<ul><li>Max Depth = 472 
<li>Call Chain = f_open &rArr; find_volume &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<li><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs.part.9
<li><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<li><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<li><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<li><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
<li><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<li><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<li><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<li><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<li><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
</ul>
<br>[Called By]<ul>
<li><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</ul>
<p><strong><a name="[1f0]"></a>f_sync</strong>(588 bytes, Stack size 0 btyes, Obj/elmfat_ff.o(.text.f_sync))<br>
<br>[Stack]<ul><li>Max Depth = 332 
<li>Call Chain = f_sync &rArr; validate &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<li><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
<li><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<li><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs.part.9
<li><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<li><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<li><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<li><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<li><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<li><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_fat_chain.part.8
<li><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<li><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
</ul>
<br>[Called By]<ul>
<li><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_flush
<li><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</ul>
<p><strong><a name="[1f1]"></a>f_close</strong>(56 bytes, Stack size 16 btyes, Obj/elmfat_ff.o(.text.f_close))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = f_close &rArr; f_sync &rArr; validate  &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<li><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<li><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</ul>
<br>[Called By]<ul>
<li><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
</ul>
<p><strong><a name="[1f2]"></a>f_lseek</strong>(1132 bytes, Stack size 52 btyes, Obj/elmfat_ff.o(.text.f_lseek))<br>
<br>[Stack]<ul><li>Max Depth = 384 
<li>Call Chain = f_lseek &rArr; validate &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<li><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs.part.9
<li><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivdi3
<li><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
<li><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<li><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</ul>
<br>[Called By]<ul>
<li><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<li><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
</ul>
<p><strong><a name="[1f3]"></a>f_opendir</strong>(442 bytes, Stack size 28 btyes, Obj/elmfat_ff.o(.text.f_opendir))<br>
<br>[Stack]<ul><li>Max Depth = 380 
<li>Call Chain = f_opendir &rArr; find_volume &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<li><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<li><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs.part.9
<li><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<li><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<li><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<li><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</ul>
<br>[Called By]<ul>
<li><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<li><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</ul>
<p><strong><a name="[1f4]"></a>f_closedir</strong>(38 bytes, Stack size 0 btyes, Obj/elmfat_ff.o(.text.f_closedir))<br>
<p><strong><a name="[1f5]"></a>f_readdir</strong>(152 bytes, Stack size 28 btyes, Obj/elmfat_ff.o(.text.f_readdir))<br>
<br>[Stack]<ul><li>Max Depth = 360 
<li>Call Chain = f_readdir &rArr; validate &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<li><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<li><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read.constprop.11
<li><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<li><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs.part.9
<li><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<li><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<li><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<li><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</ul>
<br>[Called By]<ul>
<li><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
</ul>
<p><strong><a name="[1f6]"></a>f_seekdir</strong>(66 bytes, Stack size 20 btyes, Obj/elmfat_ff.o(.text.f_seekdir))<br>
<br>[Stack]<ul><li>Max Depth = 120 + In Cycle
<li>Call Chain = f_seekdir &rArr; dir_read.constprop.11 &rArr; load_xdir  &rArr; sync_window.part.5  &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<li><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<li><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read.constprop.11
</ul>
<br>[Called By]<ul>
<li><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
</ul>
<p><strong><a name="[1f7]"></a>f_stat</strong>(138 bytes, Stack size 88 btyes, Obj/elmfat_ff.o(.text.f_stat))<br>
<br>[Stack]<ul><li>Max Depth = 440 
<li>Call Chain = f_stat &rArr; find_volume &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<li><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs.part.9
<li><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<li><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<li><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<li><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<li><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</ul>
<br>[Called By]<ul>
<li><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
</ul>
<p><strong><a name="[1f8]"></a>f_getfree</strong>(382 bytes, Stack size 72 btyes, Obj/elmfat_ff.o(.text.f_getfree))<br>
<br>[Stack]<ul><li>Max Depth = 424 
<li>Call Chain = f_getfree &rArr; find_volume &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<li><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs.part.9
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
</ul>
<br>[Called By]<ul>
<li><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
</ul>
<p><strong><a name="[1f9]"></a>f_truncate</strong>(370 bytes, Stack size 0 btyes, Obj/elmfat_ff.o(.text.f_truncate))<br>
<p><strong><a name="[1fa]"></a>f_unlink</strong>(474 bytes, Stack size 204 btyes, Obj/elmfat_ff.o(.text.f_unlink))<br>
<br>[Stack]<ul><li>Max Depth = 556 
<li>Call Chain = f_unlink &rArr; find_volume &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<li><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs.part.9
<li><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<li><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<li><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<li><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<li><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read.constprop.11
<li><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<li><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<li><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<li><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</ul>
<br>[Called By]<ul>
<li><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
</ul>
<p><strong><a name="[1fb]"></a>f_mkdir</strong>(732 bytes, Stack size 112 btyes, Obj/elmfat_ff.o(.text.f_mkdir))<br>
<br>[Stack]<ul><li>Max Depth = 464 
<li>Call Chain = f_mkdir &rArr; find_volume &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<li><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs.part.9
<li><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<li><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<li><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
<li><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<li><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<li><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<li><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<li><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
</ul>
<br>[Called By]<ul>
<li><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</ul>
<p><strong><a name="[1fc]"></a>f_rename</strong>(558 bytes, Stack size 240 btyes, Obj/elmfat_ff.o(.text.f_rename))<br>
<br>[Stack]<ul><li>Max Depth = 592 
<li>Call Chain = f_rename &rArr; find_volume &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<li><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<li><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs.part.9
<li><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<li><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<li><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
<li><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<li><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<li><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<li><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
</ul>
<br>[Called By]<ul>
<li><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
</ul>
<p><strong><a name="[1fd]"></a>f_mkfs</strong>(4086 bytes, Stack size 144 btyes, Obj/elmfat_ff.o(.text.f_mkfs))<br>
<br>[Stack]<ul><li>Max Depth = 388 
<li>Call Chain = f_mkfs &rArr; get_fattime &rArr; localtime  &rArr; localtime_r  &rArr; gettimeofday  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<li><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<li><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<li><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</ul>
<br>[Called By]<ul>
<li><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</ul>
<p><strong><a name="[1fe]"></a>elm_get_vol</strong>(28 bytes, Stack size 0 btyes, Obj/elmfat_ff.o(.text.elm_get_vol))<br>
<br>[Called By]<ul>
<li><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<li><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<li><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<li><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
</ul>
<p><strong><a name="[204]"></a>f_read</strong>(632 bytes, Stack size 56 btyes, Obj/elmfat_ff.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 388 
<li>Call Chain = f_read &rArr; validate &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<li><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs.part.9
<li><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<li><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivdi3
<li><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
</ul>
<br>[Called By]<ul>
<li><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_read
</ul>
<p><strong><a name="[205]"></a>f_write</strong>(764 bytes, Stack size 60 btyes, Obj/elmfat_ff.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 392 
<li>Call Chain = f_write &rArr; validate &rArr; ff_req_grant  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<li><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs.part.9
<li><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<li><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivdi3
<li><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
</ul>
<br>[Called By]<ul>
<li><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_write
</ul>
<p><strong><a name="[206]"></a>ff_convert</strong>(62 bytes, Stack size 0 btyes, Obj/option_ccsbcs.o(.text.ff_convert))<br>
<br>[Called By]<ul>
<li><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<li><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</ul>
<p><strong><a name="[207]"></a>ff_wtoupper</strong>(170 bytes, Stack size 0 btyes, Obj/option_ccsbcs.o(.text.ff_wtoupper))<br>
<br>[Called By]<ul>
<li><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xname_sum
<li><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<li><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</ul>
<p><strong><a name="[20c]"></a>dfs_net_get_fops</strong>(4 bytes, Stack size 0 btyes, Obj/net_dfs_net.o(.text.dfs_net_get_fops))<br>
<br>[Called By]<ul>
<li><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</ul>
<p><strong><a name="[20e]"></a>dfs_net_getsocket</strong>(38 bytes, Stack size 8 btyes, Obj/net_dfs_net.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = dfs_net_getsocket &rArr; fd_put &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
</ul>
<br>[Called By]<ul>
<li><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<li><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<li><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<li><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<li><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
</ul>
<p><strong><a name="[20f]"></a>gethostbyname</strong>(8 bytes, Stack size 4 btyes, Obj/net_net_netdb.o(.text.gethostbyname))<br>
<br>[Stack]<ul><li>Max Depth = 440 
<li>Call Chain = gethostbyname &rArr; lwip_gethostbyname &rArr; netconn_gethostbyname  &rArr; sys_sem_new  &rArr; rt_sem_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname
</ul>
<br>[Called By]<ul>
<li><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto_ntp_server
</ul>
<p><strong><a name="[210]"></a>gethostbyname_r</strong>(28 bytes, Stack size 0 btyes, Obj/net_net_netdb.o(.text.gethostbyname_r))<br>
<p><strong><a name="[211]"></a>freeaddrinfo</strong>(8 bytes, Stack size 4 btyes, Obj/net_net_netdb.o(.text.freeaddrinfo))<br>
<br>[Stack]<ul><li>Max Depth = 224 
<li>Call Chain = freeaddrinfo &rArr; lwip_freeaddrinfo &rArr; memp_free  &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
</ul>
<br>[Called By]<ul>
<li><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
</ul>
<p><strong><a name="[212]"></a>getaddrinfo</strong>(8 bytes, Stack size 4 btyes, Obj/net_net_netdb.o(.text.getaddrinfo))<br>
<br>[Stack]<ul><li>Max Depth = 456 
<li>Call Chain = getaddrinfo &rArr; lwip_getaddrinfo &rArr; netconn_gethostbyname  &rArr; sys_sem_new  &rArr; rt_sem_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
</ul>
<br>[Called By]<ul>
<li><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
</ul>
<p><strong><a name="[214]"></a>accept</strong>(140 bytes, Stack size 0 btyes, Obj/net_net_sockets.o(.text.accept))<br>
<p><strong><a name="[215]"></a>bind</strong>(20 bytes, Stack size 0 btyes, Obj/net_net_sockets.o(.text.bind))<br>
<p><strong><a name="[216]"></a>shutdown</strong>(70 bytes, Stack size 0 btyes, Obj/net_net_sockets.o(.text.shutdown))<br>
<p><strong><a name="[217]"></a>getpeername</strong>(20 bytes, Stack size 0 btyes, Obj/net_net_sockets.o(.text.getpeername))<br>
<p><strong><a name="[218]"></a>getsockname</strong>(20 bytes, Stack size 0 btyes, Obj/net_net_sockets.o(.text.getsockname))<br>
<p><strong><a name="[219]"></a>getsockopt</strong>(34 bytes, Stack size 0 btyes, Obj/net_net_sockets.o(.text.getsockopt))<br>
<p><strong><a name="[21a]"></a>setsockopt</strong>(34 bytes, Stack size 0 btyes, Obj/net_net_sockets.o(.text.setsockopt))<br>
<p><strong><a name="[21b]"></a>connect</strong>(20 bytes, Stack size 0 btyes, Obj/net_net_sockets.o(.text.connect))<br>
<p><strong><a name="[21c]"></a>listen</strong>(16 bytes, Stack size 0 btyes, Obj/net_net_sockets.o(.text.listen))<br>
<p><strong><a name="[21d]"></a>recv</strong>(24 bytes, Stack size 16 btyes, Obj/net_net_sockets.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 544 
<li>Call Chain = recv &rArr; lwip_recv &rArr; lwip_recvfrom  &rArr; netconn_recv  &rArr; netconn_recv_data  &rArr; netconn_close_shutdown  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<li><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
</ul>
<br>[Called By]<ul>
<li><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
</ul>
<p><strong><a name="[21e]"></a>socket</strong>(146 bytes, Stack size 0 btyes, Obj/net_net_sockets.o(.text.socket))<br>
<br>[Stack]<ul><li>Max Depth = 436 
<li>Call Chain = socket &rArr; lwip_socket &rArr; netconn_new_with_proto_and_callback  &rArr; netconn_alloc  &rArr; sys_mbox_new  &rArr; rt_mb_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<li><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<li><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_get_fops
<li><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tryget_socket
<li><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
<li><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
</ul>
<p><strong><a name="[21f]"></a>closesocket</strong>(36 bytes, Stack size 12 btyes, Obj/net_net_sockets.o(.text.closesocket))<br>
<br>[Stack]<ul><li>Max Depth = 424 
<li>Call Chain = closesocket &rArr; lwip_close &rArr; netconn_delete  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<li><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<li><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<li><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</ul>
<br>[Called By]<ul>
<li><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
<li><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
</ul>
<p><strong><a name="[220]"></a>ioctlsocket</strong>(20 bytes, Stack size 0 btyes, Obj/net_net_sockets.o(.text.ioctlsocket))<br>
<p><strong><a name="[221]"></a>recvfrom</strong>(74 bytes, Stack size 32 btyes, Obj/net_net_sockets.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 548 
<li>Call Chain = recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv  &rArr; netconn_recv_data  &rArr; netconn_close_shutdown  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<li><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</ul>
<br>[Called By]<ul>
<li><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
<li><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
</ul>
<p><strong><a name="[222]"></a>send</strong>(24 bytes, Stack size 16 btyes, Obj/net_net_sockets.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 364 
<li>Call Chain = send &rArr; dfs_net_getsocket &rArr; fd_put  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<li><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</ul>
<p><strong><a name="[223]"></a>sendto</strong>(74 bytes, Stack size 32 btyes, Obj/net_net_sockets.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 452 
<li>Call Chain = sendto &rArr; lwip_sendto &rArr; netbuf_alloc  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<li><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</ul>
<br>[Called By]<ul>
<li><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
<li><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto_ntp_server
</ul>
<p><strong><a name="[224]"></a>dfs_ramfs_mount</strong>(16 bytes, Stack size 0 btyes, Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_mount))<br>
<p><strong><a name="[225]"></a>dfs_ramfs_unmount</strong>(8 bytes, Stack size 0 btyes, Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_unmount))<br>
<p><strong><a name="[226]"></a>dfs_ramfs_ioctl</strong>(6 bytes, Stack size 0 btyes, Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_ioctl))<br>
<p><strong><a name="[227]"></a>dfs_ramfs_lseek</strong>(18 bytes, Stack size 0 btyes, Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_lseek))<br>
<p><strong><a name="[228]"></a>dfs_ramfs_close</strong>(8 bytes, Stack size 0 btyes, Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_close))<br>
<p><strong><a name="[229]"></a>dfs_ramfs_statfs</strong>(60 bytes, Stack size 12 btyes, Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_statfs))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = dfs_ramfs_statfs &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[22a]"></a>dfs_ramfs_read</strong>(64 bytes, Stack size 24 btyes, Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_read))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = dfs_ramfs_read &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[22b]"></a>dfs_ramfs_write</strong>(122 bytes, Stack size 24 btyes, Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_write))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = dfs_ramfs_write &rArr; rt_memheap_realloc &rArr; rt_memheap_alloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<p><strong><a name="[22c]"></a>dfs_ramfs_getdents</strong>(158 bytes, Stack size 36 btyes, Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_getdents))<br>
<br>[Stack]<ul><li>Max Depth = 220 
<li>Call Chain = dfs_ramfs_getdents &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[22d]"></a>dfs_ramfs_init</strong>(12 bytes, Stack size 4 btyes, Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_init))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = dfs_ramfs_init &rArr; dfs_register &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
</ul>
<p><strong><a name="[22e]"></a>dfs_ramfs_lookup</strong>(84 bytes, Stack size 20 btyes, Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_lookup))<br>
<br>[Calls]<ul>
<li><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
</ul>
<br>[Called By]<ul>
<li><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_open
<li><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_stat
<li><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_unlink
<li><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_rename
</ul>
<p><strong><a name="[22f]"></a>dfs_ramfs_open</strong>(262 bytes, Stack size 24 btyes, Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_open))<br>
<br>[Stack]<ul><li>Max Depth = 316 
<li>Call Chain = dfs_ramfs_open &rArr; rt_memheap_free &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_lookup
<li><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<li><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</ul>
<p><strong><a name="[230]"></a>dfs_ramfs_stat</strong>(48 bytes, Stack size 12 btyes, Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_stat))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = dfs_ramfs_stat &rArr; dfs_ramfs_lookup </ul>
<br>[Calls]<ul>
<li><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_lookup
</ul>
<p><strong><a name="[231]"></a>dfs_ramfs_unlink</strong>(84 bytes, Stack size 16 btyes, Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_unlink))<br>
<br>[Stack]<ul><li>Max Depth = 308 
<li>Call Chain = dfs_ramfs_unlink &rArr; rt_memheap_free &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_lookup
<li><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[232]"></a>dfs_ramfs_rename</strong>(88 bytes, Stack size 24 btyes, Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_rename))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = dfs_ramfs_rename &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_lookup
<li><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[233]"></a>dfs_ramfs_create</strong>(84 bytes, Stack size 0 btyes, Obj/ramfs_dfs_ramfs.o(.text.dfs_ramfs_create))<br>
<p><strong><a name="[234]"></a>dfs_romfs_mount</strong>(16 bytes, Stack size 0 btyes, Obj/romfs_dfs_romfs.o(.text.dfs_romfs_mount))<br>
<p><strong><a name="[235]"></a>dfs_romfs_unmount</strong>(4 bytes, Stack size 0 btyes, Obj/romfs_dfs_romfs.o(.text.dfs_romfs_unmount))<br>
<p><strong><a name="[236]"></a>dfs_romfs_ioctl</strong>(6 bytes, Stack size 0 btyes, Obj/romfs_dfs_romfs.o(.text.dfs_romfs_ioctl))<br>
<p><strong><a name="[237]"></a>dfs_romfs_lseek</strong>(18 bytes, Stack size 0 btyes, Obj/romfs_dfs_romfs.o(.text.dfs_romfs_lseek))<br>
<p><strong><a name="[238]"></a>dfs_romfs_close</strong>(8 bytes, Stack size 0 btyes, Obj/romfs_dfs_romfs.o(.text.dfs_romfs_close))<br>
<p><strong><a name="[239]"></a>dfs_romfs_read</strong>(88 bytes, Stack size 20 btyes, Obj/romfs_dfs_romfs.o(.text.dfs_romfs_read))<br>
<br>[Stack]<ul><li>Max Depth = 204 
<li>Call Chain = dfs_romfs_read &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[23a]"></a>dfs_romfs_getdents</strong>(176 bytes, Stack size 36 btyes, Obj/romfs_dfs_romfs.o(.text.dfs_romfs_getdents))<br>
<br>[Stack]<ul><li>Max Depth = 220 
<li>Call Chain = dfs_romfs_getdents &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<li><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</ul>
<p><strong><a name="[23b]"></a>dfs_romfs_init</strong>(56 bytes, Stack size 12 btyes, Obj/romfs_dfs_romfs.o(.text.dfs_romfs_init))<br>
<br>[Stack]<ul><li>Max Depth = 496 
<li>Call Chain = dfs_romfs_init &rArr; dfs_mount &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<li><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[23c]"></a>dfs_romfs_lookup</strong>(246 bytes, Stack size 36 btyes, Obj/romfs_dfs_romfs.o(.text.dfs_romfs_lookup))<br>
<br>[Calls]<ul>
<li><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<li><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
</ul>
<br>[Called By]<ul>
<li><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_open
<li><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_stat
</ul>
<p><strong><a name="[23d]"></a>dfs_romfs_open</strong>(104 bytes, Stack size 12 btyes, Obj/romfs_dfs_romfs.o(.text.dfs_romfs_open))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = dfs_romfs_open &rArr; dfs_romfs_lookup </ul>
<br>[Calls]<ul>
<li><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_lookup
</ul>
<p><strong><a name="[23e]"></a>dfs_romfs_stat</strong>(62 bytes, Stack size 12 btyes, Obj/romfs_dfs_romfs.o(.text.dfs_romfs_stat))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = dfs_romfs_stat &rArr; dfs_romfs_lookup </ul>
<br>[Calls]<ul>
<li><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_lookup
</ul>
<p><strong><a name="[23f]"></a>clock_cpu_getres</strong>(28 bytes, Stack size 0 btyes, Obj/cputime_cputime.o(.text.clock_cpu_getres))<br>
<p><strong><a name="[240]"></a>clock_cpu_gettime</strong>(28 bytes, Stack size 0 btyes, Obj/cputime_cputime.o(.text.clock_cpu_gettime))<br>
<p><strong><a name="[241]"></a>clock_cpu_microsecond</strong>(36 bytes, Stack size 0 btyes, Obj/cputime_cputime.o(.text.clock_cpu_microsecond))<br>
<p><strong><a name="[242]"></a>clock_cpu_millisecond</strong>(34 bytes, Stack size 0 btyes, Obj/cputime_cputime.o(.text.clock_cpu_millisecond))<br>
<p><strong><a name="[243]"></a>clock_cpu_setops</strong>(52 bytes, Stack size 8 btyes, Obj/cputime_cputime.o(.text.clock_cpu_setops))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = clock_cpu_setops &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cputime_init
</ul>
<p><strong><a name="[24a]"></a>rt_crypto_register</strong>(76 bytes, Stack size 20 btyes, Obj/crypto_crypto_dev.o(.text.rt_crypto_register))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = rt_crypto_register &rArr; rt_device_register &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_crypto_init
</ul>
<p><strong><a name="[251]"></a>rt_device_hwtimer_isr</strong>(88 bytes, Stack size 8 btyes, Obj/hwtimer_hwtimer.o(.text.rt_device_hwtimer_isr))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = rt_device_hwtimer_isr &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_isr
</ul>
<p><strong><a name="[252]"></a>rt_device_hwtimer_register</strong>(114 bytes, Stack size 16 btyes, Obj/hwtimer_hwtimer.o(.text.rt_device_hwtimer_register))<br>
<br>[Stack]<ul><li>Max Depth = 240 
<li>Call Chain = rt_device_hwtimer_register &rArr; rt_device_register &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_timers_init
</ul>
<p><strong><a name="[253]"></a>rt_i2c_core_init</strong>(4 bytes, Stack size 0 btyes, Obj/i2c_i2c_core.o(.text.rt_i2c_core_init))<br>
<p><strong><a name="[254]"></a>rt_i2c_bus_device_register</strong>(40 bytes, Stack size 12 btyes, Obj/i2c_i2c_core.o(.text.rt_i2c_bus_device_register))<br>
<br>[Stack]<ul><li>Max Depth = 252 
<li>Call Chain = rt_i2c_bus_device_register &rArr; rt_i2c_bus_device_device_init &rArr; rt_device_register  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<li><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_device_init
</ul>
<br>[Called By]<ul>
<li><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_i2c_init
</ul>
<p><strong><a name="[255]"></a>rt_i2c_bus_device_find</strong>(24 bytes, Stack size 4 btyes, Obj/i2c_i2c_core.o(.text.rt_i2c_bus_device_find))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = rt_i2c_bus_device_find &rArr; rt_device_find &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</ul>
<br>[Called By]<ul>
<li><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_24aa128_init
</ul>
<p><strong><a name="[256]"></a>rt_i2c_transfer</strong>(60 bytes, Stack size 20 btyes, Obj/i2c_i2c_core.o(.text.rt_i2c_transfer))<br>
<br>[Stack]<ul><li>Max Depth = 332 
<li>Call Chain = rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<br>[Called By]<ul>
<li><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_send
<li><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_recv
<li><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_control
<li><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_eeprom_read
<li><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_eeprom_write
</ul>
<p><strong><a name="[257]"></a>rt_i2c_master_send</strong>(42 bytes, Stack size 20 btyes, Obj/i2c_i2c_core.o(.text.rt_i2c_master_send))<br>
<br>[Stack]<ul><li>Max Depth = 352 
<li>Call Chain = rt_i2c_master_send &rArr; rt_i2c_transfer &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
</ul>
<br>[Called By]<ul>
<li><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_write
</ul>
<p><strong><a name="[258]"></a>rt_i2c_master_recv</strong>(108 bytes, Stack size 36 btyes, Obj/i2c_i2c_core.o(.text.rt_i2c_master_recv))<br>
<br>[Stack]<ul><li>Max Depth = 368 
<li>Call Chain = rt_i2c_master_recv &rArr; rt_i2c_transfer &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_read
</ul>
<p><strong><a name="[25c]"></a>rt_i2c_bus_device_device_init</strong>(62 bytes, Stack size 16 btyes, Obj/i2c_i2c_dev.o(.text.rt_i2c_bus_device_device_init))<br>
<br>[Stack]<ul><li>Max Depth = 240 
<li>Call Chain = rt_i2c_bus_device_device_init &rArr; rt_device_register &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_register
</ul>
<p><strong><a name="[264]"></a>rt_i2c_bit_add_bus</strong>(12 bytes, Stack size 0 btyes, Obj/i2c_i2c-bit-ops.o(.text.rt_i2c_bit_add_bus))<br>
<p><strong><a name="[268]"></a>eeprom_24aa128_init</strong>(104 bytes, Stack size 12 btyes, Obj/i2c_i2c_eeprom.o(.text.eeprom_24aa128_init))<br>
<br>[Stack]<ul><li>Max Depth = 236 
<li>Call Chain = eeprom_24aa128_init &rArr; rt_device_register &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<li><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_find
<li><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[26d]"></a>rt_pin_mode</strong>(40 bytes, Stack size 16 btyes, Obj/misc_pin.o(.text.rt_pin_mode))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = rt_pin_mode &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[26e]"></a>rt_pin_write</strong>(40 bytes, Stack size 16 btyes, Obj/misc_pin.o(.text.rt_pin_write))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = rt_pin_write &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[26f]"></a>rt_pin_read</strong>(44 bytes, Stack size 12 btyes, Obj/misc_pin.o(.text.rt_pin_read))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = rt_pin_read &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[272]"></a>rt_device_pin_register</strong>(66 bytes, Stack size 8 btyes, Obj/misc_pin.o(.text.rt_device_pin_register))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = rt_device_pin_register &rArr; rt_device_register &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</ul>
<br>[Called By]<ul>
<li><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_init
</ul>
<p><strong><a name="[273]"></a>rt_pin_attach_irq</strong>(98 bytes, Stack size 0 btyes, Obj/misc_pin.o(.text.rt_pin_attach_irq))<br>
<p><strong><a name="[274]"></a>rt_pin_detach_irq</strong>(44 bytes, Stack size 0 btyes, Obj/misc_pin.o(.text.rt_pin_detach_irq))<br>
<p><strong><a name="[275]"></a>rt_pin_irq_enable</strong>(48 bytes, Stack size 0 btyes, Obj/misc_pin.o(.text.rt_pin_irq_enable))<br>
<p><strong><a name="[276]"></a>set_date</strong>(90 bytes, Stack size 64 btyes, Obj/rtc_rtc.o(.text.set_date))<br>
<br>[Stack]<ul><li>Max Depth = 308 
<li>Call Chain = set_date &rArr; localtime &rArr; localtime_r  &rArr; gettimeofday  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<li><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<li><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<li><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</ul>
<br>[Called By]<ul>
<li><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<li><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_to_rtc
</ul>
<p><strong><a name="[277]"></a>set_time</strong>(84 bytes, Stack size 64 btyes, Obj/rtc_rtc.o(.text.set_time))<br>
<br>[Stack]<ul><li>Max Depth = 308 
<li>Call Chain = set_time &rArr; localtime &rArr; localtime_r  &rArr; gettimeofday  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<li><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<li><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<li><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</ul>
<br>[Called By]<ul>
<li><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<li><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_to_rtc
</ul>
<p><strong><a name="[279]"></a>list_date</strong>(30 bytes, Stack size 8 btyes, Obj/rtc_rtc.o(.text.list_date))<br>
<br>[Stack]<ul><li>Max Depth = 252 
<li>Call Chain = list_date &rArr; ctime &rArr; localtime_r  &rArr; gettimeofday  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<li><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[27a]"></a>rt_rtc_ntp_sync_init</strong>(64 bytes, Stack size 20 btyes, Obj/rtc_rtc.o(.text.rt_rtc_ntp_sync_init))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = rt_rtc_ntp_sync_init &rArr; rt_thread_create &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<li><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</ul>
<p><strong><a name="[27c]"></a>rt_soft_rtc_init</strong>(126 bytes, Stack size 52 btyes, Obj/rtc_soft_rtc.o(.text.rt_soft_rtc_init))<br>
<br>[Stack]<ul><li>Max Depth = 276 
<li>Call Chain = rt_soft_rtc_init &rArr; rt_device_register &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<li><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<li><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</ul>
<p><strong><a name="[280]"></a>rt_ata_register</strong>(76 bytes, Stack size 20 btyes, Obj/sata_sata.o(.text.rt_ata_register))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = rt_ata_register &rArr; rt_device_register &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_register
</ul>
<p><strong><a name="[293]"></a>rt_hw_serial_register</strong>(80 bytes, Stack size 20 btyes, Obj/serial_serial.o(.text.rt_hw_serial_register))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_init
</ul>
<p><strong><a name="[294]"></a>rt_hw_serial_isr</strong>(478 bytes, Stack size 36 btyes, Obj/serial_serial.o(.text.rt_hw_serial_isr))<br>
<br>[Stack]<ul><li>Max Depth = 336 
<li>Call Chain = rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<li><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<li><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_calc_recved_len
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_irq_handler
<li><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_irq_handler
</ul>
<p><strong><a name="[295]"></a>rt_spi_bus_register</strong>(38 bytes, Stack size 20 btyes, Obj/spi_spi_core.o(.text.rt_spi_bus_register))<br>
<br>[Stack]<ul><li>Max Depth = 256 
<li>Call Chain = rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
<li><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
</ul>
<br>[Called By]<ul>
<li><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_init
</ul>
<p><strong><a name="[296]"></a>rt_spi_bus_attach_device</strong>(70 bytes, Stack size 16 btyes, Obj/spi_spi_core.o(.text.rt_spi_bus_attach_device))<br>
<br>[Stack]<ul><li>Max Depth = 252 
<li>Call Chain = rt_spi_bus_attach_device &rArr; rt_spidev_device_init &rArr; rt_device_register  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spidev_device_init
<li><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</ul>
<br>[Called By]<ul>
<li><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp3202_init
</ul>
<p><strong><a name="[297]"></a>rt_spi_configure</strong>(96 bytes, Stack size 12 btyes, Obj/spi_spi_core.o(.text.rt_spi_configure))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = rt_spi_configure &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp3202_init
</ul>
<p><strong><a name="[298]"></a>rt_spi_send_then_send</strong>(210 bytes, Stack size 0 btyes, Obj/spi_spi_core.o(.text.rt_spi_send_then_send))<br>
<p><strong><a name="[299]"></a>rt_spi_send_then_recv</strong>(210 bytes, Stack size 0 btyes, Obj/spi_spi_core.o(.text.rt_spi_send_then_recv))<br>
<p><strong><a name="[29a]"></a>rt_spi_transfer</strong>(182 bytes, Stack size 44 btyes, Obj/spi_spi_core.o(.text.rt_spi_transfer))<br>
<br>[Stack]<ul><li>Max Depth = 356 
<li>Call Chain = rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_write
<li><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_read
<li><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_write
<li><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_read
</ul>
<p><strong><a name="[29b]"></a>rt_spi_transfer_message</strong>(150 bytes, Stack size 12 btyes, Obj/spi_spi_core.o(.text.rt_spi_transfer_message))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<li><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp3202_adc_read
</ul>
<p><strong><a name="[29c]"></a>rt_spi_take_bus</strong>(134 bytes, Stack size 0 btyes, Obj/spi_spi_core.o(.text.rt_spi_take_bus))<br>
<p><strong><a name="[29d]"></a>rt_spi_release_bus</strong>(74 bytes, Stack size 0 btyes, Obj/spi_spi_core.o(.text.rt_spi_release_bus))<br>
<p><strong><a name="[29e]"></a>rt_spi_take</strong>(84 bytes, Stack size 0 btyes, Obj/spi_spi_core.o(.text.rt_spi_take))<br>
<p><strong><a name="[29f]"></a>rt_spi_release</strong>(84 bytes, Stack size 0 btyes, Obj/spi_spi_core.o(.text.rt_spi_release))<br>
<p><strong><a name="[2a6]"></a>rt_spi_bus_device_init</strong>(58 bytes, Stack size 12 btyes, Obj/spi_spi_dev.o(.text.rt_spi_bus_device_init))<br>
<br>[Stack]<ul><li>Max Depth = 236 
<li>Call Chain = rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
</ul>
<p><strong><a name="[2a7]"></a>rt_spidev_device_init</strong>(58 bytes, Stack size 12 btyes, Obj/spi_spi_dev.o(.text.rt_spidev_device_init))<br>
<br>[Stack]<ul><li>Max Depth = 236 
<li>Call Chain = rt_spidev_device_init &rArr; rt_device_register &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
</ul>
<p><strong><a name="[2ab]"></a>mcp3202_init</strong>(164 bytes, Stack size 24 btyes, Obj/spi_spi_adc.o(.text.mcp3202_init))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = mcp3202_init &rArr; rt_spi_configure &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<li><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pin_mux_set
<li><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
<li><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<li><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[2b3]"></a>rt_hw_watchdog_register</strong>(72 bytes, Stack size 20 btyes, Obj/watchdog_watchdog.o(.text.rt_hw_watchdog_register))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = rt_hw_watchdog_register &rArr; rt_device_register &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_wdt_init
</ul>
<p><strong><a name="[2b4]"></a>rt_completion_init</strong>(40 bytes, Stack size 8 btyes, Obj/src_completion.o(.text.rt_completion_init))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = rt_completion_init &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</ul>
<p><strong><a name="[2b5]"></a>rt_completion_wait</strong>(212 bytes, Stack size 24 btyes, Obj/src_completion.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 268 
<li>Call Chain = rt_completion_wait &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<li><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</ul>
<p><strong><a name="[2b6]"></a>rt_completion_done</strong>(70 bytes, Stack size 12 btyes, Obj/src_completion.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 256 
<li>Call Chain = rt_completion_done &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</ul>
<p><strong><a name="[2b7]"></a>rt_data_queue_init</strong>(78 bytes, Stack size 20 btyes, Obj/src_dataqueue.o(.text.rt_data_queue_init))<br>
<br>[Stack]<ul><li>Max Depth = 328 
<li>Call Chain = rt_data_queue_init &rArr; rt_malloc &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</ul>
<p><strong><a name="[2b8]"></a>rt_data_queue_push</strong>(310 bytes, Stack size 56 btyes, Obj/src_dataqueue.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 300 
<li>Call Chain = rt_data_queue_push &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<li><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<li><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</ul>
<br>[Called By]<ul>
<li><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</ul>
<p><strong><a name="[2b9]"></a>rt_data_queue_pop</strong>(384 bytes, Stack size 56 btyes, Obj/src_dataqueue.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 300 
<li>Call Chain = rt_data_queue_pop &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<li><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<li><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</ul>
<br>[Called By]<ul>
<li><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</ul>
<p><strong><a name="[2ba]"></a>rt_data_queue_peak</strong>(116 bytes, Stack size 16 btyes, Obj/src_dataqueue.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = rt_data_queue_peak &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</ul>
<p><strong><a name="[2bb]"></a>rt_data_queue_reset</strong>(102 bytes, Stack size 20 btyes, Obj/src_dataqueue.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 264 
<li>Call Chain = rt_data_queue_reset &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</ul>
<p><strong><a name="[2bc]"></a>rt_pipe_control</strong>(4 bytes, Stack size 0 btyes, Obj/src_pipe.o(.fast))<br>
<p><strong><a name="[2bd]"></a>rt_pipe_create</strong>(148 bytes, Stack size 0 btyes, Obj/src_pipe.o(.text.rt_pipe_create))<br>
<p><strong><a name="[2be]"></a>rt_pipe_open</strong>(56 bytes, Stack size 0 btyes, Obj/src_pipe.o(.fast))<br>
<p><strong><a name="[2c0]"></a>rt_pipe_close</strong>(56 bytes, Stack size 0 btyes, Obj/src_pipe.o(.fast))<br>
<p><strong><a name="[2c6]"></a>rt_pipe_read</strong>(88 bytes, Stack size 0 btyes, Obj/src_pipe.o(.fast))<br>
<p><strong><a name="[2c7]"></a>rt_pipe_write</strong>(88 bytes, Stack size 0 btyes, Obj/src_pipe.o(.fast))<br>
<p><strong><a name="[2c8]"></a>rt_pipe_delete</strong>(70 bytes, Stack size 0 btyes, Obj/src_pipe.o(.fast))<br>
<p><strong><a name="[2c9]"></a>pipe</strong>(98 bytes, Stack size 0 btyes, Obj/src_pipe.o(.fast))<br>
<p><strong><a name="[2ca]"></a>mkfifo</strong>(20 bytes, Stack size 0 btyes, Obj/src_pipe.o(.fast))<br>
<p><strong><a name="[2cb]"></a>rt_ringbuffer_init</strong>(82 bytes, Stack size 0 btyes, Obj/src_ringbuffer.o(.text.rt_ringbuffer_init))<br>
<p><strong><a name="[2cc]"></a>rt_ringbuffer_putchar_force</strong>(160 bytes, Stack size 0 btyes, Obj/src_ringbuffer.o(.fast))<br>
<p><strong><a name="[2cd]"></a>rt_ringbuffer_create</strong>(72 bytes, Stack size 0 btyes, Obj/src_ringbuffer.o(.text.rt_ringbuffer_create))<br>
<p><strong><a name="[2ce]"></a>rt_ringbuffer_destroy</strong>(36 bytes, Stack size 0 btyes, Obj/src_ringbuffer.o(.text.rt_ringbuffer_destroy))<br>
<p><strong><a name="[2cf]"></a>rt_ringbuffer_data_len</strong>(60 bytes, Stack size 0 btyes, Obj/src_ringbuffer.o(.fast))<br>
<p><strong><a name="[2d0]"></a>rt_ringbuffer_put</strong>(156 bytes, Stack size 0 btyes, Obj/src_ringbuffer.o(.fast))<br>
<p><strong><a name="[2d1]"></a>rt_ringbuffer_put_force</strong>(212 bytes, Stack size 0 btyes, Obj/src_ringbuffer.o(.fast))<br>
<p><strong><a name="[2d2]"></a>rt_ringbuffer_get</strong>(158 bytes, Stack size 0 btyes, Obj/src_ringbuffer.o(.fast))<br>
<p><strong><a name="[2d3]"></a>rt_ringbuffer_putchar</strong>(108 bytes, Stack size 0 btyes, Obj/src_ringbuffer.o(.fast))<br>
<p><strong><a name="[2d4]"></a>rt_ringbuffer_getchar</strong>(130 bytes, Stack size 0 btyes, Obj/src_ringbuffer.o(.fast))<br>
<p><strong><a name="[2d5]"></a>rt_ringbuffer_reset</strong>(58 bytes, Stack size 0 btyes, Obj/src_ringbuffer.o(.fast))<br>
<p><strong><a name="[2d6]"></a>__wqueue_default_wake</strong>(4 bytes, Stack size 0 btyes, Obj/src_waitqueue.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wqueue_pollwake
</ul>
<p><strong><a name="[2d7]"></a>rt_wqueue_add</strong>(30 bytes, Stack size 12 btyes, Obj/src_waitqueue.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</ul>
<br>[Called By]<ul>
<li><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_poll_add
</ul>
<p><strong><a name="[2d8]"></a>rt_wqueue_remove</strong>(30 bytes, Stack size 8 btyes, Obj/src_waitqueue.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</ul>
<br>[Called By]<ul>
<li><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
<li><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<li><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
</ul>
<p><strong><a name="[2d9]"></a>rt_wqueue_wakeup</strong>(76 bytes, Stack size 24 btyes, Obj/src_waitqueue.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 268 
<li>Call Chain = rt_wqueue_wakeup &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<li><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</ul>
<br>[Called By]<ul>
<li><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_isr
<li><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<li><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_rx_ind
</ul>
<p><strong><a name="[2da]"></a>rt_wqueue_wait</strong>(202 bytes, Stack size 48 btyes, Obj/src_waitqueue.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 292 
<li>Call Chain = rt_wqueue_wait &rArr; rt_schedule &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<li><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<li><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<li><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_cmd_pending_check
<li><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_read
</ul>
<p><strong><a name="[2dc]"></a>rt_workqueue_create</strong>(86 bytes, Stack size 0 btyes, Obj/src_workqueue.o(.fast))<br>
<p><strong><a name="[2dd]"></a>rt_workqueue_destroy</strong>(36 bytes, Stack size 0 btyes, Obj/src_workqueue.o(.fast))<br>
<p><strong><a name="[2de]"></a>rt_workqueue_dowork</strong>(114 bytes, Stack size 0 btyes, Obj/src_workqueue.o(.fast))<br>
<p><strong><a name="[2df]"></a>rt_workqueue_critical_work</strong>(114 bytes, Stack size 0 btyes, Obj/src_workqueue.o(.fast))<br>
<p><strong><a name="[2e0]"></a>rt_workqueue_cancel_work</strong>(80 bytes, Stack size 0 btyes, Obj/src_workqueue.o(.fast))<br>
<p><strong><a name="[2e1]"></a>rt_workqueue_cancel_work_sync</strong>(88 bytes, Stack size 0 btyes, Obj/src_workqueue.o(.fast))<br>
<p><strong><a name="[2e2]"></a>rt_workqueue_cancel_all_work</strong>(100 bytes, Stack size 0 btyes, Obj/src_workqueue.o(.fast))<br>
<p><strong><a name="[2e4]"></a>finsh_system_init</strong>(162 bytes, Stack size 24 btyes, Obj/finsh_shell.o(.text.finsh_system_init))<br>
<br>[Stack]<ul><li>Max Depth = 352 
<li>Call Chain = finsh_system_init &rArr; rt_thread_create &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<li><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<li><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<li><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[2e5]"></a>finsh_set_prompt</strong>(52 bytes, Stack size 0 btyes, Obj/finsh_shell.o(.text.finsh_set_prompt))<br>
<p><strong><a name="[2e6]"></a>finsh_get_prompt</strong>(126 bytes, Stack size 12 btyes, Obj/finsh_shell.o(.text.finsh_get_prompt))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = finsh_get_prompt &rArr; getcwd &rArr; rt_enter_critical  </ul>
<br>[Calls]<ul>
<li><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<li><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_is_used
<li><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<li><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<li><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</ul>
<br>[Called By]<ul>
<li><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<li><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</ul>
<p><strong><a name="[2e8]"></a>finsh_get_prompt_mode</strong>(42 bytes, Stack size 0 btyes, Obj/finsh_shell.o(.text.finsh_get_prompt_mode))<br>
<p><strong><a name="[2e9]"></a>finsh_set_prompt_mode</strong>(52 bytes, Stack size 0 btyes, Obj/finsh_shell.o(.text.finsh_set_prompt_mode))<br>
<p><strong><a name="[2ea]"></a>finsh_set_device</strong>(134 bytes, Stack size 20 btyes, Obj/finsh_shell.o(.text.finsh_set_device))<br>
<br>[Stack]<ul><li>Max Depth = 224 
<li>Call Chain = finsh_set_device &rArr; rt_device_find &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<li><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<li><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</ul>
<p><strong><a name="[2eb]"></a>finsh_thread_entry</strong>(1188 bytes, Stack size 52 btyes, Obj/finsh_shell.o(.text.finsh_thread_entry))<br>
<br>[Stack]<ul><li>Max Depth = 568 
<li>Call Chain = finsh_thread_entry &rArr; msh_exec &rArr; chdir  &rArr; opendir  &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memmove
<li><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_is_used
<li><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<li><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<li><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<li><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<li><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</ul>
<p><strong><a name="[2ec]"></a>finsh_get_device</strong>(34 bytes, Stack size 0 btyes, Obj/finsh_shell.o(.text.finsh_get_device))<br>
<p><strong><a name="[2ed]"></a>finsh_set_echo</strong>(52 bytes, Stack size 0 btyes, Obj/finsh_shell.o(.text.finsh_set_echo))<br>
<p><strong><a name="[2ee]"></a>finsh_get_echo</strong>(42 bytes, Stack size 0 btyes, Obj/finsh_shell.o(.text.finsh_get_echo))<br>
<p><strong><a name="[2ef]"></a>finsh_system_function_init</strong>(10 bytes, Stack size 0 btyes, Obj/finsh_shell.o(.text.finsh_system_function_init))<br>
<p><strong><a name="[2f0]"></a>finsh_system_var_init</strong>(10 bytes, Stack size 0 btyes, Obj/finsh_shell.o(.text.finsh_system_var_init))<br>
<p><strong><a name="[2f1]"></a>hello</strong>(12 bytes, Stack size 4 btyes, Obj/finsh_cmd.o(.text.hello))<br>
<br>[Stack]<ul><li>Max Depth = 176 
<li>Call Chain = hello &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[2f3]"></a>version</strong>(10 bytes, Stack size 4 btyes, Obj/finsh_cmd.o(.text.version))<br>
<br>[Stack]<ul><li>Max Depth = 184 
<li>Call Chain = version &rArr; rt_show_version &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
</ul>
<p><strong><a name="[2f5]"></a>list_thread</strong>(260 bytes, Stack size 56 btyes, Obj/finsh_cmd.o(.text.list_thread))<br>
<br>[Stack]<ul><li>Max Depth = 228 
<li>Call Chain = list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</ul>
<br>[Called By]<ul>
<li><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<li><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ps
</ul>
<p><strong><a name="[2f6]"></a>list_sem</strong>(166 bytes, Stack size 40 btyes, Obj/finsh_cmd.o(.text.list_sem))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = list_sem &rArr; show_wait_queue &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<li><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
</ul>
<p><strong><a name="[2f7]"></a>list_event</strong>(162 bytes, Stack size 40 btyes, Obj/finsh_cmd.o(.text.list_event))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = list_event &rArr; show_wait_queue &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<li><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
</ul>
<p><strong><a name="[2f8]"></a>list_mutex</strong>(140 bytes, Stack size 40 btyes, Obj/finsh_cmd.o(.text.list_mutex))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = list_mutex &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<li><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[2f9]"></a>list_mailbox</strong>(178 bytes, Stack size 44 btyes, Obj/finsh_cmd.o(.text.list_mailbox))<br>
<br>[Stack]<ul><li>Max Depth = 236 
<li>Call Chain = list_mailbox &rArr; show_wait_queue &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<li><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
</ul>
<p><strong><a name="[2fa]"></a>list_msgqueue</strong>(166 bytes, Stack size 40 btyes, Obj/finsh_cmd.o(.text.list_msgqueue))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = list_msgqueue &rArr; show_wait_queue &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<li><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
</ul>
<p><strong><a name="[2fb]"></a>list_memheap</strong>(108 bytes, Stack size 36 btyes, Obj/finsh_cmd.o(.text.list_memheap))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = list_memheap &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<li><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[2fc]"></a>list_device</strong>(136 bytes, Stack size 116 btyes, Obj/finsh_cmd.o(.text.list_device))<br>
<br>[Stack]<ul><li>Max Depth = 288 
<li>Call Chain = list_device &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[2fd]"></a>list_timer</strong>(158 bytes, Stack size 40 btyes, Obj/finsh_cmd.o(.text.list_timer))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = list_timer &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<li><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</ul>
<p><strong><a name="[2fe]"></a>list</strong>(74 bytes, Stack size 24 btyes, Obj/finsh_cmd.o(.text.list))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = list &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</ul>
<p><strong><a name="[2ff]"></a>msh_help</strong>(80 bytes, Stack size 24 btyes, Obj/finsh_msh.o(.text.msh_help))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = msh_help &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</ul>
<br>[Called By]<ul>
<li><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</ul>
<p><strong><a name="[300]"></a>msh_is_used</strong>(4 bytes, Stack size 0 btyes, Obj/finsh_msh.o(.text.msh_is_used))<br>
<br>[Called By]<ul>
<li><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<li><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</ul>
<p><strong><a name="[301]"></a>msh_exec</strong>(498 bytes, Stack size 76 btyes, Obj/finsh_msh.o(.text.msh_exec))<br>
<br>[Stack]<ul><li>Max Depth = 516 
<li>Call Chain = msh_exec &rArr; chdir &rArr; opendir  &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<li><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
</ul>
<p><strong><a name="[302]"></a>msh_auto_complete_path</strong>(436 bytes, Stack size 28 btyes, Obj/finsh_msh.o(.text.msh_auto_complete_path))<br>
<br>[Stack]<ul><li>Max Depth = 456 
<li>Call Chain = msh_auto_complete_path &rArr; opendir &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<li><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<li><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<li><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<li><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
</ul>
<br>[Called By]<ul>
<li><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</ul>
<p><strong><a name="[303]"></a>msh_auto_complete</strong>(236 bytes, Stack size 44 btyes, Obj/finsh_msh.o(.text.msh_auto_complete))<br>
<br>[Stack]<ul><li>Max Depth = 500 
<li>Call Chain = msh_auto_complete &rArr; msh_auto_complete_path &rArr; opendir  &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<li><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<li><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<li><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<li><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
</ul>
<br>[Called By]<ul>
<li><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</ul>
<p><strong><a name="[304]"></a>cmd_time</strong>(4 bytes, Stack size 0 btyes, Obj/finsh_msh_cmd.o(.text.cmd_time))<br>
<p><strong><a name="[305]"></a>cmd_ls</strong>(26 bytes, Stack size 4 btyes, Obj/finsh_msh_cmd.o(.text.cmd_ls))<br>
<br>[Stack]<ul><li>Max Depth = 524 
<li>Call Chain = cmd_ls &rArr; ls &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
</ul>
<p><strong><a name="[306]"></a>cmd_pwd</strong>(14 bytes, Stack size 4 btyes, Obj/finsh_msh_cmd.o(.text.cmd_pwd))<br>
<br>[Stack]<ul><li>Max Depth = 176 
<li>Call Chain = cmd_pwd &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[307]"></a>cmd_mkfs</strong>(72 bytes, Stack size 8 btyes, Obj/finsh_msh_cmd.o(.text.cmd_mkfs))<br>
<br>[Stack]<ul><li>Max Depth = 352 
<li>Call Chain = cmd_mkfs &rArr; dfs_mkfs &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
</ul>
<p><strong><a name="[308]"></a>cmd_ifconfig</strong>(136 bytes, Stack size 8 btyes, Obj/finsh_msh_cmd.o(.text.cmd_ifconfig))<br>
<br>[Stack]<ul><li>Max Depth = 384 
<li>Call Chain = cmd_ifconfig &rArr; set_if &rArr; netifapi_netif_set_addr  &rArr; tcpip_api_call  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
<li><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
</ul>
<p><strong><a name="[309]"></a>cmd_netstat</strong>(14 bytes, Stack size 4 btyes, Obj/finsh_msh_cmd.o(.text.cmd_netstat))<br>
<br>[Stack]<ul><li>Max Depth = 256 
<li>Call Chain = cmd_netstat &rArr; list_tcps &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<li><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
</ul>
<p><strong><a name="[30a]"></a>cmd_ps</strong>(10 bytes, Stack size 4 btyes, Obj/finsh_msh_cmd.o(.text.cmd_ps))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = cmd_ps &rArr; list_thread &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</ul>
<p><strong><a name="[30b]"></a>cmd_free</strong>(10 bytes, Stack size 4 btyes, Obj/finsh_msh_cmd.o(.text.cmd_free))<br>
<br>[Stack]<ul><li>Max Depth = 180 
<li>Call Chain = cmd_free &rArr; list_mem &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mem
</ul>
<p><strong><a name="[30c]"></a>cmd_cp</strong>(36 bytes, Stack size 4 btyes, Obj/finsh_msh_cmd.o(.text.cmd_cp))<br>
<br>[Stack]<ul><li>Max Depth = 540 
<li>Call Chain = cmd_cp &rArr; copy &rArr; copyfile  &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</ul>
<p><strong><a name="[30d]"></a>cmd_rm</strong>(48 bytes, Stack size 16 btyes, Obj/finsh_msh_cmd.o(.text.cmd_rm))<br>
<br>[Stack]<ul><li>Max Depth = 416 
<li>Call Chain = cmd_rm &rArr; unlink &rArr; rmdir  &rArr; dfs_file_unlink  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[30e]"></a>cmd_mv</strong>(198 bytes, Stack size 20 btyes, Obj/finsh_msh_cmd.o(.text.cmd_mv))<br>
<br>[Stack]<ul><li>Max Depth = 464 
<li>Call Chain = cmd_mv &rArr; open &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<li><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<li><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
</ul>
<p><strong><a name="[30f]"></a>cmd_cat</strong>(48 bytes, Stack size 16 btyes, Obj/finsh_msh_cmd.o(.text.cmd_cat))<br>
<br>[Stack]<ul><li>Max Depth = 528 
<li>Call Chain = cmd_cat &rArr; cat &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[310]"></a>cmd_cd</strong>(46 bytes, Stack size 8 btyes, Obj/finsh_msh_cmd.o(.text.cmd_cd))<br>
<br>[Stack]<ul><li>Max Depth = 448 
<li>Call Chain = cmd_cd &rArr; chdir &rArr; opendir  &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[311]"></a>cmd_mkdir</strong>(36 bytes, Stack size 4 btyes, Obj/finsh_msh_cmd.o(.text.cmd_mkdir))<br>
<br>[Stack]<ul><li>Max Depth = 432 
<li>Call Chain = cmd_mkdir &rArr; mkdir &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[312]"></a>cmd_df</strong>(62 bytes, Stack size 8 btyes, Obj/finsh_msh_cmd.o(.text.cmd_df))<br>
<br>[Stack]<ul><li>Max Depth = 424 
<li>Call Chain = cmd_df &rArr; df &rArr; dfs_statfs  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
</ul>
<p><strong><a name="[313]"></a>cmd_echo</strong>(88 bytes, Stack size 12 btyes, Obj/finsh_msh_cmd.o(.text.cmd_echo))<br>
<br>[Stack]<ul><li>Max Depth = 456 
<li>Call Chain = cmd_echo &rArr; open &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<li><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<li><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</ul>
<p><strong><a name="[314]"></a>cmd_dns</strong>(86 bytes, Stack size 12 btyes, Obj/finsh_msh_cmd.o(.text.cmd_dns))<br>
<br>[Stack]<ul><li>Max Depth = 272 
<li>Call Chain = cmd_dns &rArr; set_dns &rArr; ip4addr_aton  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_getserver
<li><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<li><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dns
</ul>
<p><strong><a name="[315]"></a>msh_exec_script</strong>(348 bytes, Stack size 32 btyes, Obj/finsh_msh_file.o(.text.msh_exec_script))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = msh_exec_script &rArr; open &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<li><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<li><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<li><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<li><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
</ul>
<p><strong><a name="[316]"></a>malloc</strong>(14 bytes, Stack size 0 btyes, cklib_malloc.o(.text.malloc))<br>
<p><strong><a name="[317]"></a>free</strong>(14 bytes, Stack size 0 btyes, cklib_malloc.o(.text.free))<br>
<br>[Called By]<ul>
<li><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hba_reset
</ul>
<p><strong><a name="[318]"></a>realloc</strong>(44 bytes, Stack size 0 btyes, cklib_malloc.o(.text.realloc))<br>
<p><strong><a name="[319]"></a>calloc</strong>(34 bytes, Stack size 0 btyes, cklib_malloc.o(.text.calloc))<br>
<br>[Called By]<ul>
<li><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hba_reset
</ul>
<p><strong><a name="[31a]"></a>strcpy</strong>(24 bytes, Stack size 12 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<li><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</ul>
<br>[Called By]<ul>
<li><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
<li><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<li><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</ul>
<p><strong><a name="[105]"></a>strncpy</strong>(8 bytes, Stack size 4 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</ul>
<br>[Called By]<ul>
<li><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<li><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<li><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_open
<li><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_rename
<li><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<li><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname
</ul>
<p><strong><a name="[31b]"></a>strlcpy</strong>(92 bytes, Stack size 0 btyes, Obj/minilibc_string.o(.fast))<br>
<p><strong><a name="[31c]"></a>strcmp</strong>(34 bytes, Stack size 0 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<li><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<li><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
<li><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<li><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<li><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<li><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkfs
<li><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_df
</ul>
<p><strong><a name="[107]"></a>strncmp</strong>(70 bytes, Stack size 0 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
<li><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_get_ipv4
<li><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<li><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
<li><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<li><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<li><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<li><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</ul>
<p><strong><a name="[31d]"></a>strcat</strong>(34 bytes, Stack size 0 btyes, Obj/minilibc_string.o(.fast))<br>
<p><strong><a name="[31e]"></a>strncat</strong>(64 bytes, Stack size 0 btyes, Obj/minilibc_string.o(.fast))<br>
<p><strong><a name="[31f]"></a>strrchr</strong>(24 bytes, Stack size 0 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</ul>
<p><strong><a name="[320]"></a>strncasecmp</strong>(90 bytes, Stack size 8 btyes, Obj/minilibc_string.o(.fast))<br>
<p><strong><a name="[321]"></a>tolower</strong>(28 bytes, Stack size 0 btyes, Obj/minilibc_string.o(.fast))<br>
<p><strong><a name="[322]"></a>toupper</strong>(28 bytes, Stack size 0 btyes, Obj/minilibc_string.o(.fast))<br>
<p><strong><a name="[323]"></a>simple_strtoul</strong>(256 bytes, Stack size 16 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtol
<li><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsscanf
</ul>
<p><strong><a name="[324]"></a>simple_strtol</strong>(30 bytes, Stack size 4 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = simple_strtol &rArr; simple_strtoul </ul>
<br>[Calls]<ul>
<li><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoul
</ul>
<br>[Called By]<ul>
<li><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsscanf
<li><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</ul>
<p><strong><a name="[325]"></a>simple_strtoull</strong>(226 bytes, Stack size 36 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = simple_strtoull &rArr; __muldi3 </ul>
<br>[Calls]<ul>
<li><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__muldi3
</ul>
<br>[Called By]<ul>
<li><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoll
<li><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsscanf
</ul>
<p><strong><a name="[326]"></a>simple_strtoll</strong>(40 bytes, Stack size 4 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 52 
<li>Call Chain = simple_strtoll &rArr; simple_strtoull &rArr; __muldi3  </ul>
<br>[Calls]<ul>
<li><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoull
</ul>
<br>[Called By]<ul>
<li><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsscanf
<li><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoll
</ul>
<p><strong><a name="[327]"></a>vsscanf</strong>(824 bytes, Stack size 44 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 96 
<li>Call Chain = vsscanf &rArr; simple_strtoll &rArr; simple_strtoull  &rArr; __muldi3  </ul>
<br>[Calls]<ul>
<li><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtol
<li><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoul
<li><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoll
<li><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoull
</ul>
<br>[Called By]<ul>
<li><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
</ul>
<p><strong><a name="[328]"></a>sscanf</strong>(28 bytes, Stack size 16 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 112 
<li>Call Chain = sscanf &rArr; vsscanf &rArr; simple_strtoll  &rArr; simple_strtoull  &rArr; __muldi3  </ul>
<br>[Calls]<ul>
<li><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsscanf
</ul>
<p><strong><a name="[329]"></a>strspn</strong>(70 bytes, Stack size 16 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</ul>
<br>[Called By]<ul>
<li><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
</ul>
<p><strong><a name="[32a]"></a>strcspn</strong>(78 bytes, Stack size 12 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</ul>
<br>[Called By]<ul>
<li><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
</ul>
<p><strong><a name="[32b]"></a>strtok_r</strong>(70 bytes, Stack size 16 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = strtok_r &rArr; strspn </ul>
<br>[Calls]<ul>
<li><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<li><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
</ul>
<br>[Called By]<ul>
<li><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</ul>
<p><strong><a name="[32c]"></a>strtok</strong>(10 bytes, Stack size 4 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = strtok &rArr; strtok_r &rArr; strspn  </ul>
<br>[Calls]<ul>
<li><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
</ul>
<p><strong><a name="[32d]"></a>strchr</strong>(34 bytes, Stack size 0 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
<li><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ifconfig
</ul>
<p><strong><a name="[32e]"></a>strtol</strong>(8 bytes, Stack size 4 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = strtol &rArr; simple_strtol &rArr; simple_strtoul  </ul>
<br>[Calls]<ul>
<li><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtol
</ul>
<br>[Called By]<ul>
<li><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</ul>
<p><strong><a name="[32f]"></a>strtoll</strong>(8 bytes, Stack size 4 btyes, Obj/minilibc_string.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 56 
<li>Call Chain = strtoll &rArr; simple_strtoll &rArr; simple_strtoull  &rArr; __muldi3  </ul>
<br>[Calls]<ul>
<li><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoll
</ul>
<p><strong><a name="[330]"></a>__isleap</strong>(46 bytes, Stack size 0 btyes, Obj/minilibc_time.o(.fast))<br>
<p><strong><a name="[331]"></a>gmtime_r</strong>(270 bytes, Stack size 4 btyes, Obj/minilibc_time.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
</ul>
<p><strong><a name="[332]"></a>mktime</strong>(464 bytes, Stack size 40 btyes, Obj/minilibc_time.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<li><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<li><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<li><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_rtc_init
</ul>
<p><strong><a name="[333]"></a>asctime_r</strong>(222 bytes, Stack size 8 btyes, Obj/minilibc_time.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
<li><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</ul>
<p><strong><a name="[334]"></a>asctime</strong>(10 bytes, Stack size 4 btyes, Obj/minilibc_time.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = asctime &rArr; asctime_r </ul>
<br>[Calls]<ul>
<li><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime_r
</ul>
<p><strong><a name="[335]"></a>gettimeofday</strong>(64 bytes, Stack size 12 btyes, Obj/minilibc_time.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 216 
<li>Call Chain = gettimeofday &rArr; rt_device_find &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</ul>
<br>[Called By]<ul>
<li><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
</ul>
<p><strong><a name="[336]"></a>localtime_r</strong>(48 bytes, Stack size 24 btyes, Obj/minilibc_time.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 240 
<li>Call Chain = localtime_r &rArr; gettimeofday &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<li><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
</ul>
<br>[Called By]<ul>
<li><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<li><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</ul>
<p><strong><a name="[337]"></a>localtime</strong>(10 bytes, Stack size 4 btyes, Obj/minilibc_time.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = localtime &rArr; localtime_r &rArr; gettimeofday  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
</ul>
<br>[Called By]<ul>
<li><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<li><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<li><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<li><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_to_rtc
</ul>
<p><strong><a name="[338]"></a>ctime</strong>(16 bytes, Stack size 4 btyes, Obj/minilibc_time.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = ctime &rArr; localtime_r &rArr; gettimeofday  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
<li><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime_r
</ul>
<br>[Called By]<ul>
<li><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_date
<li><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<li><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync
</ul>
<p><strong><a name="[339]"></a>_gettimeofday</strong>(10 bytes, Stack size 0 btyes, Obj/minilibc_time.o(.fast))<br>
<p><strong><a name="[33a]"></a>time</strong>(72 bytes, Stack size 16 btyes, Obj/minilibc_time.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 220 
<li>Call Chain = time &rArr; rt_device_find &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<li><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<li><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<li><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</ul>
<br>[Called By]<ul>
<li><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<li><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<li><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<li><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_date
<li><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
</ul>
<p><strong><a name="[33b]"></a>clock</strong>(8 bytes, Stack size 4 btyes, Obj/minilibc_time.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</ul>
<p><strong><a name="[33c]"></a>clock_time_system_init</strong>(64 bytes, Stack size 8 btyes, Obj/time_clock_time.o(.text.clock_time_system_init))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = clock_time_system_init &rArr; rt_device_find &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<li><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</ul>
<p><strong><a name="[33e]"></a>clock_time_to_tick</strong>(94 bytes, Stack size 0 btyes, Obj/time_clock_time.o(.fast))<br>
<p><strong><a name="[33f]"></a>clock_getres</strong>(56 bytes, Stack size 0 btyes, Obj/time_clock_time.o(.fast))<br>
<p><strong><a name="[340]"></a>clock_gettime</strong>(80 bytes, Stack size 0 btyes, Obj/time_clock_time.o(.fast))<br>
<p><strong><a name="[341]"></a>clock_settime</strong>(100 bytes, Stack size 0 btyes, Obj/time_clock_time.o(.fast))<br>
<p><strong><a name="[342]"></a>sleep</strong>(34 bytes, Stack size 0 btyes, Obj/time_posix_sleep.o(.fast))<br>
<p><strong><a name="[344]"></a>sys_init</strong>(2 bytes, Stack size 0 btyes, Obj/arch_sys_arch.o(.text.sys_init))<br>
<br>[Called By]<ul>
<li><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</ul>
<p><strong><a name="[345]"></a>sys_sem_new</strong>(100 bytes, Stack size 28 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 376 
<li>Call Chain = sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<li><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</ul>
<p><strong><a name="[346]"></a>sys_thread_new</strong>(108 bytes, Stack size 0 btyes, Obj/arch_sys_arch.o(.text.sys_thread_new))<br>
<br>[Stack]<ul><li>Max Depth = 328 
<li>Call Chain = sys_thread_new &rArr; rt_thread_create &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<li><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</ul>
<p><strong><a name="[347]"></a>lwip_system_init</strong>(132 bytes, Stack size 0 btyes, Obj/arch_sys_arch.o(.text.lwip_system_init))<br>
<br>[Stack]<ul><li>Max Depth = 392 
<li>Call Chain = lwip_system_init &rArr; tcpip_init &rArr; sys_mbox_new  &rArr; rt_mb_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init_private
<li><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<li><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<li><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<p><strong><a name="[348]"></a>lwip_sys_init</strong>(8 bytes, Stack size 0 btyes, Obj/arch_sys_arch.o(.text.lwip_sys_init))<br>
<p><strong><a name="[34a]"></a>mem_init</strong>(2 bytes, Stack size 0 btyes, Obj/arch_sys_arch.o(.text.mem_init))<br>
<br>[Called By]<ul>
<li><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</ul>
<p><strong><a name="[34b]"></a>mem_calloc</strong>(8 bytes, Stack size 0 btyes, Obj/arch_sys_arch.o(.text.mem_calloc))<br>
<p><strong><a name="[34c]"></a>mem_trim</strong>(2 bytes, Stack size 0 btyes, Obj/arch_sys_arch.o(.text.mem_trim))<br>
<br>[Called By]<ul>
<li><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</ul>
<p><strong><a name="[34d]"></a>sys_sem_free</strong>(50 bytes, Stack size 12 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = sys_sem_free &rArr; rt_sem_delete &rArr; rt_object_delete  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
</ul>
<br>[Called By]<ul>
<li><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<li><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<li><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</ul>
<p><strong><a name="[34e]"></a>sys_sem_signal</strong>(10 bytes, Stack size 4 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 260 
<li>Call Chain = sys_sem_signal &rArr; rt_sem_release &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</ul>
<br>[Called By]<ul>
<li><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<li><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<li><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_dns_found
<li><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<li><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_gethostbyname
<li><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</ul>
<p><strong><a name="[34f]"></a>sys_arch_sem_wait</strong>(120 bytes, Stack size 16 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 288 
<li>Call Chain = sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<li><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<li><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<li><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<li><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
</ul>
<p><strong><a name="[350]"></a>sys_sem_valid</strong>(4 bytes, Stack size 0 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<li><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<li><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
</ul>
<p><strong><a name="[351]"></a>sys_sem_set_invalid</strong>(6 bytes, Stack size 0 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</ul>
<p><strong><a name="[352]"></a>sys_mutex_new</strong>(98 bytes, Stack size 24 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 368 
<li>Call Chain = sys_mutex_new &rArr; rt_mutex_create &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</ul>
<p><strong><a name="[353]"></a>sys_mutex_lock</strong>(56 bytes, Stack size 12 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</ul>
<br>[Called By]<ul>
<li><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<li><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<li><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<li><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<li><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<li><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<li><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<li><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
<li><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</ul>
<p><strong><a name="[354]"></a>sys_mutex_unlock</strong>(10 bytes, Stack size 4 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 292 
<li>Call Chain = sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</ul>
<br>[Called By]<ul>
<li><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<li><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<li><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<li><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<li><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<li><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<li><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
<li><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</ul>
<p><strong><a name="[355]"></a>sys_mutex_free</strong>(52 bytes, Stack size 12 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = sys_mutex_free &rArr; rt_mutex_delete &rArr; rt_object_delete  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
</ul>
<p><strong><a name="[356]"></a>sys_mutex_valid</strong>(4 bytes, Stack size 0 btyes, Obj/arch_sys_arch.o(.fast))<br>
<p><strong><a name="[357]"></a>sys_mutex_set_invalid</strong>(6 bytes, Stack size 0 btyes, Obj/arch_sys_arch.o(.fast))<br>
<p><strong><a name="[358]"></a>sys_mbox_new</strong>(102 bytes, Stack size 28 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 376 
<li>Call Chain = sys_mbox_new &rArr; rt_mb_create &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<li><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</ul>
<p><strong><a name="[359]"></a>sys_mbox_free</strong>(52 bytes, Stack size 12 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = sys_mbox_free &rArr; rt_mb_delete &rArr; rt_object_delete  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
</ul>
<br>[Called By]<ul>
<li><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<li><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<li><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</ul>
<p><strong><a name="[35a]"></a>sys_mbox_post</strong>(132 bytes, Stack size 16 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 320 
<li>Call Chain = sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</ul>
<br>[Called By]<ul>
<li><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</ul>
<p><strong><a name="[35b]"></a>sys_mbox_trypost</strong>(22 bytes, Stack size 4 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 312 
<li>Call Chain = sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</ul>
<br>[Called By]<ul>
<li><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<li><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<li><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<li><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<li><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</ul>
<p><strong><a name="[35c]"></a>sys_arch_mbox_tryfetch</strong>(34 bytes, Stack size 4 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 308 
<li>Call Chain = sys_arch_mbox_tryfetch &rArr; rt_mb_recv &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</ul>
<br>[Called By]<ul>
<li><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</ul>
<p><strong><a name="[35d]"></a>sys_mbox_valid</strong>(4 bytes, Stack size 0 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<li><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<li><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<li><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<li><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<li><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<li><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<li><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<li><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</ul>
<p><strong><a name="[35e]"></a>sys_mbox_set_invalid</strong>(6 bytes, Stack size 0 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<li><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</ul>
<p><strong><a name="[35f]"></a>sys_arch_protect</strong>(8 bytes, Stack size 4 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</ul>
<br>[Called By]<ul>
<li><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_tx
<li><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<li><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<li><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<li><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<li><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<li><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<li><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<li><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<li><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
<li><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<li><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<li><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<li><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<li><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<li><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<li><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_join_leave_group
<li><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<li><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<li><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<li><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<li><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<li><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool.isra.0
<li><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool.isra.1
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</ul>
<p><strong><a name="[360]"></a>sys_arch_unprotect</strong>(8 bytes, Stack size 4 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</ul>
<br>[Called By]<ul>
<li><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_tx
<li><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<li><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<li><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<li><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<li><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<li><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<li><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<li><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<li><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
<li><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<li><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<li><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<li><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<li><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<li><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<li><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_join_leave_group
<li><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<li><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<li><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<li><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<li><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<li><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool.isra.0
<li><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool.isra.1
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</ul>
<p><strong><a name="[361]"></a>sys_arch_assert</strong>(36 bytes, Stack size 12 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = sys_arch_assert &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_init
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
<li><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<li><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<li><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
<li><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<li><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<li><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<li><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<li><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<li><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<li><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<li><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<li><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<li><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
<li><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<li><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<li><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<li><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<li><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<li><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<li><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<li><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<li><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<li><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<li><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<li><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<li><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<li><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<li><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<li><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<li><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<li><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<li><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<li><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<li><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<li><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<li><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<li><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<li><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<li><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<li><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<li><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool.isra.0
<li><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool.isra.1
<li><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_pool
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free_pool
<li><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<li><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<li><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<li><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<li><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dechain
<li><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<li><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<li><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<li><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<li><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<li><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<li><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<li><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<li><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<li><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<li><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<li><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<li><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<li><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<li><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<li><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcbs_sane
<li><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<li><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<li><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<li><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<li><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc.isra.0
<li><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment.isra.1
<li><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header.constprop.2
<li><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<li><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<li><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<li><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<li><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<li><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<li><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<li><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<li><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<li><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<li><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry.isra.0
<li><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_addr
<li><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_get_entry
<li><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<li><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<li><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<li><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<li><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<li><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output
<li><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<li><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<li><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<li><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<li><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<li><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<li><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<li><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<li><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<li><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<li><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short.isra.0
<li><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option.isra.1
<li><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte.isra.2
<li><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<li><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<li><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long.isra.4
<li><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<li><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
<li><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<li><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<li><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<li><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<li><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response.isra.0
<li><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<li><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group.isra.3
<li><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
<li><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<li><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<li><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<li><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</ul>
<p><strong><a name="[362]"></a>sys_arch_mbox_fetch</strong>(146 bytes, Stack size 20 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = sys_arch_mbox_fetch &rArr; rt_mb_recv &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<li><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<li><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</ul>
<p><strong><a name="[363]"></a>sys_jiffies</strong>(8 bytes, Stack size 4 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</ul>
<p><strong><a name="[364]"></a>sys_now</strong>(12 bytes, Stack size 4 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</ul>
<br>[Called By]<ul>
<li><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<li><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<li><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<li><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<li><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<li><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<li><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_restart_timeouts
<li><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<li><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
</ul>
<p><strong><a name="[365]"></a>mem_malloc</strong>(8 bytes, Stack size 4 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 312 
<li>Call Chain = mem_malloc &rArr; rt_malloc &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</ul>
<br>[Called By]<ul>
<li><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</ul>
<p><strong><a name="[366]"></a>mem_free</strong>(12 bytes, Stack size 4 btyes, Obj/arch_sys_arch.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 288 
<li>Call Chain = mem_free &rArr; rt_free &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<br>[Called By]<ul>
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</ul>
<p><strong><a name="[369]"></a>netconn_new_with_proto_and_callback</strong>(188 bytes, Stack size 40 btyes, Obj/api_api_lib.o(.text.netconn_new_with_proto_and_callback))<br>
<br>[Stack]<ul><li>Max Depth = 436 
<li>Call Chain = netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_mbox_new  &rArr; rt_mb_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<li><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<li><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<li><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<li><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</ul>
<br>[Called By]<ul>
<li><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</ul>
<p><strong><a name="[36a]"></a>netconn_delete</strong>(64 bytes, Stack size 36 btyes, Obj/api_api_lib.o(.text.netconn_delete))<br>
<br>[Stack]<ul><li>Max Depth = 376 
<li>Call Chain = netconn_delete &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<li><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</ul>
<br>[Called By]<ul>
<li><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<li><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</ul>
<p><strong><a name="[36b]"></a>netconn_getaddr</strong>(110 bytes, Stack size 28 btyes, Obj/api_api_lib.o(.text.netconn_getaddr))<br>
<br>[Stack]<ul><li>Max Depth = 368 
<li>Call Chain = netconn_getaddr &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</ul>
<p><strong><a name="[36c]"></a>netconn_bind</strong>(68 bytes, Stack size 0 btyes, Obj/api_api_lib.o(.text.netconn_bind))<br>
<p><strong><a name="[36d]"></a>netconn_connect</strong>(70 bytes, Stack size 0 btyes, Obj/api_api_lib.o(.text.netconn_connect))<br>
<p><strong><a name="[36e]"></a>netconn_disconnect</strong>(56 bytes, Stack size 0 btyes, Obj/api_api_lib.o(.text.netconn_disconnect))<br>
<p><strong><a name="[36f]"></a>netconn_listen_with_backlog</strong>(56 bytes, Stack size 0 btyes, Obj/api_api_lib.o(.text.netconn_listen_with_backlog))<br>
<p><strong><a name="[370]"></a>netconn_accept</strong>(202 bytes, Stack size 0 btyes, Obj/api_api_lib.o(.text.netconn_accept))<br>
<p><strong><a name="[371]"></a>netconn_close</strong>(10 bytes, Stack size 0 btyes, Obj/api_api_lib.o(.text.netconn_close))<br>
<p><strong><a name="[372]"></a>netconn_shutdown</strong>(28 bytes, Stack size 0 btyes, Obj/api_api_lib.o(.text.netconn_shutdown))<br>
<p><strong><a name="[373]"></a>netconn_join_leave_group</strong>(78 bytes, Stack size 28 btyes, Obj/api_api_lib.o(.text.netconn_join_leave_group))<br>
<br>[Stack]<ul><li>Max Depth = 368 
<li>Call Chain = netconn_join_leave_group &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</ul>
<p><strong><a name="[374]"></a>netconn_gethostbyname</strong>(144 bytes, Stack size 36 btyes, Obj/api_api_lib.o(.text.netconn_gethostbyname))<br>
<br>[Stack]<ul><li>Max Depth = 412 
<li>Call Chain = netconn_gethostbyname &rArr; sys_sem_new &rArr; rt_sem_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<li><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<li><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<li><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname
<li><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
</ul>
<p><strong><a name="[375]"></a>netconn_recv_tcp_pbuf</strong>(44 bytes, Stack size 4 btyes, Obj/api_api_lib.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 416 
<li>Call Chain = netconn_recv_tcp_pbuf &rArr; netconn_recv_data &rArr; netconn_close_shutdown  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</ul>
<p><strong><a name="[376]"></a>netconn_recv</strong>(174 bytes, Stack size 20 btyes, Obj/api_api_lib.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 432 
<li>Call Chain = netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</ul>
<p><strong><a name="[377]"></a>netconn_send</strong>(58 bytes, Stack size 28 btyes, Obj/api_api_lib.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 368 
<li>Call Chain = netconn_send &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_sendto
<li><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<li><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</ul>
<p><strong><a name="[378]"></a>netconn_sendto</strong>(28 bytes, Stack size 4 btyes, Obj/api_api_lib.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 372 
<li>Call Chain = netconn_sendto &rArr; netconn_send &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
</ul>
<p><strong><a name="[379]"></a>netconn_write_partly</strong>(232 bytes, Stack size 44 btyes, Obj/api_api_lib.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 384 
<li>Call Chain = netconn_write_partly &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<li><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<li><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</ul>
<p><strong><a name="[37a]"></a>lwip_netconn_do_gethostbyname</strong>(46 bytes, Stack size 0 btyes, Obj/api_api_msg.o(.text.lwip_netconn_do_gethostbyname))<br>
<br>[Stack]<ul><li>Max Depth = 728 
<li>Call Chain = lwip_netconn_do_gethostbyname &rArr; dns_gethostbyname_addrtype &rArr; dns_check_entry  &rArr; dns_send  &rArr; udp_sendto  &rArr; udp_sendto_if  &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<li><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</ul>
<p><strong><a name="[380]"></a>lwip_netconn_do_newconn</strong>(168 bytes, Stack size 0 btyes, Obj/api_api_msg.o(.text.lwip_netconn_do_newconn))<br>
<br>[Stack]<ul><li>Max Depth = 672 
<li>Call Chain = lwip_netconn_do_newconn &rArr; tcp_new_ip_type &rArr; tcp_alloc  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new_ip_type
<li><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_recv
<li><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
<li><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<li><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_ip_type
<li><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
</ul>
<p><strong><a name="[381]"></a>netconn_alloc</strong>(160 bytes, Stack size 20 btyes, Obj/api_api_msg.o(.text.netconn_alloc))<br>
<br>[Stack]<ul><li>Max Depth = 396 
<li>Call Chain = netconn_alloc &rArr; sys_mbox_new &rArr; rt_mb_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<li><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<li><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<li><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</ul>
<br>[Called By]<ul>
<li><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</ul>
<p><strong><a name="[382]"></a>netconn_free</strong>(110 bytes, Stack size 12 btyes, Obj/api_api_msg.o(.text.netconn_free))<br>
<br>[Stack]<ul><li>Max Depth = 336 
<li>Call Chain = netconn_free &rArr; sys_sem_free &rArr; rt_sem_delete  &rArr; rt_object_delete  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<li><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<li><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_set_invalid
<li><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</ul>
<br>[Called By]<ul>
<li><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<li><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</ul>
<p><strong><a name="[385]"></a>lwip_netconn_do_delconn</strong>(338 bytes, Stack size 12 btyes, Obj/api_api_msg.o(.text.lwip_netconn_do_delconn))<br>
<br>[Stack]<ul><li>Max Depth = 696 
<li>Call Chain = lwip_netconn_do_delconn &rArr; netconn_drain &rArr; tcp_abort  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<li><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<li><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<li><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<li><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<li><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<li><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
</ul>
<p><strong><a name="[386]"></a>lwip_netconn_do_bind</strong>(126 bytes, Stack size 0 btyes, Obj/api_api_msg.o(.text.lwip_netconn_do_bind))<br>
<p><strong><a name="[387]"></a>lwip_netconn_do_connect</strong>(266 bytes, Stack size 0 btyes, Obj/api_api_msg.o(.text.lwip_netconn_do_connect))<br>
<p><strong><a name="[388]"></a>lwip_netconn_do_disconnect</strong>(70 bytes, Stack size 0 btyes, Obj/api_api_msg.o(.text.lwip_netconn_do_disconnect))<br>
<p><strong><a name="[389]"></a>lwip_netconn_do_listen</strong>(254 bytes, Stack size 0 btyes, Obj/api_api_msg.o(.text.lwip_netconn_do_listen))<br>
<p><strong><a name="[38a]"></a>lwip_netconn_do_getaddr</strong>(204 bytes, Stack size 0 btyes, Obj/api_api_msg.o(.text.lwip_netconn_do_getaddr))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = lwip_netconn_do_getaddr &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</ul>
<p><strong><a name="[38b]"></a>lwip_netconn_do_close</strong>(220 bytes, Stack size 8 btyes, Obj/api_api_msg.o(.text.lwip_netconn_do_close))<br>
<br>[Stack]<ul><li>Max Depth = 692 
<li>Call Chain = lwip_netconn_do_close &rArr; netconn_drain &rArr; tcp_abort  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<li><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<li><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<li><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<li><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</ul>
<p><strong><a name="[38c]"></a>lwip_netconn_do_join_leave_group</strong>(116 bytes, Stack size 8 btyes, Obj/api_api_msg.o(.text.lwip_netconn_do_join_leave_group))<br>
<br>[Stack]<ul><li>Max Depth = 620 
<li>Call Chain = lwip_netconn_do_join_leave_group &rArr; igmp_leavegroup &rArr; igmp_leavegroup_netif  &rArr; igmp_send  &rArr; ip4_output_if_opt  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<li><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
</ul>
<p><strong><a name="[393]"></a>lwip_netconn_do_send</strong>(156 bytes, Stack size 8 btyes, Obj/api_api_msg.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 616 
<li>Call Chain = lwip_netconn_do_send &rArr; udp_send &rArr; udp_sendto  &rArr; udp_sendto_if  &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
<li><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<li><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<li><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</ul>
<p><strong><a name="[394]"></a>lwip_netconn_do_recv</strong>(92 bytes, Stack size 20 btyes, Obj/api_api_msg.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 632 
<li>Call Chain = lwip_netconn_do_recv &rArr; tcp_recved &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
</ul>
<p><strong><a name="[395]"></a>lwip_netconn_do_write</strong>(240 bytes, Stack size 8 btyes, Obj/api_api_msg.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 360 
<li>Call Chain = lwip_netconn_do_write &rArr; recv_udp &rArr; netbuf_delete  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<li><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<li><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<li><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
</ul>
<p><strong><a name="[396]"></a>err_to_errno</strong>(26 bytes, Stack size 0 btyes, Obj/api_err.o(.text.err_to_errno))<br>
<br>[Called By]<ul>
<li><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<li><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<li><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<li><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<li><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</ul>
<p><strong><a name="[397]"></a>netbuf_new</strong>(26 bytes, Stack size 8 btyes, Obj/api_netbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 220 
<li>Call Chain = netbuf_new &rArr; memp_malloc &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
</ul>
<p><strong><a name="[398]"></a>netbuf_data</strong>(100 bytes, Stack size 0 btyes, Obj/api_netbuf.o(.text.netbuf_data))<br>
<p><strong><a name="[399]"></a>netbuf_next</strong>(52 bytes, Stack size 0 btyes, Obj/api_netbuf.o(.text.netbuf_next))<br>
<p><strong><a name="[39a]"></a>netbuf_first</strong>(28 bytes, Stack size 0 btyes, Obj/api_netbuf.o(.text.netbuf_first))<br>
<p><strong><a name="[39b]"></a>netbuf_delete</strong>(34 bytes, Stack size 8 btyes, Obj/api_netbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = netbuf_delete &rArr; pbuf_free &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</ul>
<br>[Called By]<ul>
<li><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<li><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<li><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<li><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<li><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<li><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</ul>
<p><strong><a name="[39c]"></a>netbuf_alloc</strong>(84 bytes, Stack size 12 btyes, Obj/api_netbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 372 
<li>Call Chain = netbuf_alloc &rArr; pbuf_alloc &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<li><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</ul>
<p><strong><a name="[39d]"></a>netbuf_free</strong>(42 bytes, Stack size 8 btyes, Obj/api_netbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = netbuf_free &rArr; pbuf_free &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</ul>
<p><strong><a name="[39e]"></a>netbuf_ref</strong>(76 bytes, Stack size 16 btyes, Obj/api_netbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 376 
<li>Call Chain = netbuf_ref &rArr; pbuf_alloc &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<p><strong><a name="[39f]"></a>netbuf_chain</strong>(68 bytes, Stack size 12 btyes, Obj/api_netbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 224 
<li>Call Chain = netbuf_chain &rArr; memp_free &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<li><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<p><strong><a name="[3a0]"></a>lwip_gethostbyname</strong>(84 bytes, Stack size 24 btyes, Obj/api_netdb.o(.text.lwip_gethostbyname))<br>
<br>[Stack]<ul><li>Max Depth = 436 
<li>Call Chain = lwip_gethostbyname &rArr; netconn_gethostbyname &rArr; sys_sem_new  &rArr; rt_sem_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<li><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</ul>
<br>[Called By]<ul>
<li><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
</ul>
<p><strong><a name="[3a1]"></a>lwip_gethostbyname_r</strong>(186 bytes, Stack size 0 btyes, Obj/api_netdb.o(.text.lwip_gethostbyname_r))<br>
<p><strong><a name="[3a2]"></a>lwip_freeaddrinfo</strong>(24 bytes, Stack size 8 btyes, Obj/api_netdb.o(.text.lwip_freeaddrinfo))<br>
<br>[Stack]<ul><li>Max Depth = 220 
<li>Call Chain = lwip_freeaddrinfo &rArr; memp_free &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</ul>
<br>[Called By]<ul>
<li><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeaddrinfo
<li><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</ul>
<p><strong><a name="[3a3]"></a>lwip_getaddrinfo</strong>(354 bytes, Stack size 40 btyes, Obj/api_netdb.o(.text.lwip_getaddrinfo))<br>
<br>[Stack]<ul><li>Max Depth = 452 
<li>Call Chain = lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; sys_sem_new  &rArr; rt_sem_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<li><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<li><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<li><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getaddrinfo
<li><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</ul>
<p><strong><a name="[3a7]"></a>netifapi_netif_add</strong>(70 bytes, Stack size 44 btyes, Obj/api_netifapi.o(.text.netifapi_netif_add))<br>
<br>[Stack]<ul><li>Max Depth = 384 
<li>Call Chain = netifapi_netif_add &rArr; tcpip_api_call &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
</ul>
<br>[Called By]<ul>
<li><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</ul>
<p><strong><a name="[3a8]"></a>netifapi_netif_set_addr</strong>(46 bytes, Stack size 36 btyes, Obj/api_netifapi.o(.text.netifapi_netif_set_addr))<br>
<br>[Stack]<ul><li>Max Depth = 376 
<li>Call Chain = netifapi_netif_set_addr &rArr; tcpip_api_call &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
</ul>
<br>[Called By]<ul>
<li><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
</ul>
<p><strong><a name="[3a9]"></a>netifapi_netif_common</strong>(22 bytes, Stack size 36 btyes, Obj/api_netifapi.o(.text.netifapi_netif_common))<br>
<br>[Stack]<ul><li>Max Depth = 376 
<li>Call Chain = netifapi_netif_common &rArr; tcpip_api_call &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
</ul>
<br>[Called By]<ul>
<li><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
</ul>
<p><strong><a name="[3ad]"></a>lwip_socket_thread_init</strong>(2 bytes, Stack size 0 btyes, Obj/api_sockets.o(.text.lwip_socket_thread_init))<br>
<p><strong><a name="[3ae]"></a>lwip_socket_thread_cleanup</strong>(2 bytes, Stack size 0 btyes, Obj/api_sockets.o(.text.lwip_socket_thread_cleanup))<br>
<p><strong><a name="[3af]"></a>lwip_tryget_socket</strong>(28 bytes, Stack size 0 btyes, Obj/api_sockets.o(.text.lwip_tryget_socket))<br>
<br>[Called By]<ul>
<li><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_poll
<li><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<li><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</ul>
<p><strong><a name="[3b0]"></a>lwip_accept</strong>(464 bytes, Stack size 0 btyes, Obj/api_sockets.o(.text.lwip_accept))<br>
<p><strong><a name="[3b1]"></a>lwip_bind</strong>(124 bytes, Stack size 0 btyes, Obj/api_sockets.o(.text.lwip_bind))<br>
<p><strong><a name="[3b2]"></a>lwip_close</strong>(230 bytes, Stack size 36 btyes, Obj/api_sockets.o(.text.lwip_close))<br>
<br>[Stack]<ul><li>Max Depth = 412 
<li>Call Chain = lwip_close &rArr; netconn_delete &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<li><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<li><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<li><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<li><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_close
<li><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<li><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</ul>
<p><strong><a name="[3b3]"></a>lwip_connect</strong>(124 bytes, Stack size 0 btyes, Obj/api_sockets.o(.text.lwip_connect))<br>
<p><strong><a name="[3b4]"></a>lwip_listen</strong>(104 bytes, Stack size 0 btyes, Obj/api_sockets.o(.text.lwip_listen))<br>
<p><strong><a name="[3b5]"></a>lwip_socket</strong>(136 bytes, Stack size 0 btyes, Obj/api_sockets.o(.text.lwip_socket))<br>
<br>[Stack]<ul><li>Max Depth = 436 
<li>Call Chain = lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc  &rArr; sys_mbox_new  &rArr; rt_mb_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<li><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<li><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<li><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</ul>
<br>[Called By]<ul>
<li><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<li><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</ul>
<p><strong><a name="[3b6]"></a>lwip_select</strong>(868 bytes, Stack size 0 btyes, Obj/api_sockets.o(.text.lwip_select))<br>
<p><strong><a name="[3b7]"></a>lwip_shutdown</strong>(156 bytes, Stack size 0 btyes, Obj/api_sockets.o(.text.lwip_shutdown))<br>
<p><strong><a name="[3b8]"></a>lwip_getpeername</strong>(10 bytes, Stack size 0 btyes, Obj/api_sockets.o(.text.lwip_getpeername))<br>
<p><strong><a name="[3b9]"></a>lwip_getsockname</strong>(10 bytes, Stack size 0 btyes, Obj/api_sockets.o(.text.lwip_getsockname))<br>
<p><strong><a name="[3ba]"></a>lwip_getsockopt</strong>(820 bytes, Stack size 0 btyes, Obj/api_sockets.o(.text.lwip_getsockopt))<br>
<p><strong><a name="[3bb]"></a>lwip_setsockopt</strong>(854 bytes, Stack size 36 btyes, Obj/api_sockets.o(.text.lwip_setsockopt))<br>
<br>[Stack]<ul><li>Max Depth = 648 
<li>Call Chain = lwip_setsockopt &rArr; igmp_leavegroup &rArr; igmp_leavegroup_netif  &rArr; igmp_send  &rArr; ip4_output_if_opt  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<li><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<li><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<li><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<li><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<li><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
</ul>
<br>[Called By]<ul>
<li><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</ul>
<p><strong><a name="[3bc]"></a>lwip_ioctl</strong>(304 bytes, Stack size 16 btyes, Obj/api_sockets.o(.text.lwip_ioctl))<br>
<br>[Stack]<ul><li>Max Depth = 220 
<li>Call Chain = lwip_ioctl &rArr; rt_device_find &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<li><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_get_ipv4
<li><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<li><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</ul>
<br>[Called By]<ul>
<li><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_ioctl
</ul>
<p><strong><a name="[3bd]"></a>lwip_fcntl</strong>(120 bytes, Stack size 0 btyes, Obj/api_sockets.o(.text.lwip_fcntl))<br>
<p><strong><a name="[3c0]"></a>lwip_recvfrom</strong>(600 bytes, Stack size 84 btyes, Obj/api_sockets.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 516 
<li>Call Chain = lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data  &rArr; netconn_close_shutdown  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<li><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<li><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<li><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<li><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<li><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<li><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_read
<li><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
<li><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</ul>
<p><strong><a name="[3c1]"></a>lwip_read</strong>(18 bytes, Stack size 12 btyes, Obj/api_sockets.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 528 
<li>Call Chain = lwip_read &rArr; lwip_recvfrom &rArr; netconn_recv  &rArr; netconn_recv_data  &rArr; netconn_close_shutdown  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</ul>
<br>[Called By]<ul>
<li><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_read
</ul>
<p><strong><a name="[3c2]"></a>lwip_recv</strong>(24 bytes, Stack size 12 btyes, Obj/api_sockets.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 528 
<li>Call Chain = lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv  &rArr; netconn_recv_data  &rArr; netconn_close_shutdown  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</ul>
<br>[Called By]<ul>
<li><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</ul>
<p><strong><a name="[3c3]"></a>lwip_sendmsg</strong>(522 bytes, Stack size 44 btyes, Obj/api_sockets.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 428 
<li>Call Chain = lwip_sendmsg &rArr; netconn_write_partly &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<li><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_new
<li><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<li><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<li><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
</ul>
<br>[Called By]<ul>
<li><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_writev
</ul>
<p><strong><a name="[3c4]"></a>lwip_sendto</strong>(288 bytes, Stack size 48 btyes, Obj/api_sockets.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 420 
<li>Call Chain = lwip_sendto &rArr; netbuf_alloc &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<li><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<li><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<li><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<li><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</ul>
<br>[Called By]<ul>
<li><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<li><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<li><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</ul>
<p><strong><a name="[3c5]"></a>lwip_send</strong>(164 bytes, Stack size 36 btyes, Obj/api_sockets.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = lwip_send &rArr; netconn_write_partly &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<li><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<li><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<li><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<li><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
</ul>
<br>[Called By]<ul>
<li><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<li><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<li><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_write
</ul>
<p><strong><a name="[3c6]"></a>lwip_write</strong>(10 bytes, Stack size 4 btyes, Obj/api_sockets.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 40 + In Cycle
<li>Call Chain = lwip_write &rArr; lwip_send &rArr; netconn_write_partly  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</ul>
<br>[Called By]<ul>
<li><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_write
</ul>
<p><strong><a name="[3c7]"></a>lwip_writev</strong>(32 bytes, Stack size 32 btyes, Obj/api_sockets.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 460 
<li>Call Chain = lwip_writev &rArr; lwip_sendmsg &rArr; netconn_write_partly  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
</ul>
<p><strong><a name="[3ca]"></a>tcpip_callbackmsg_new</strong>(26 bytes, Stack size 0 btyes, Obj/api_tcpip.o(.text.tcpip_callbackmsg_new))<br>
<p><strong><a name="[3cb]"></a>tcpip_callbackmsg_delete</strong>(12 bytes, Stack size 0 btyes, Obj/api_tcpip.o(.text.tcpip_callbackmsg_delete))<br>
<p><strong><a name="[3cc]"></a>tcpip_trycallback</strong>(40 bytes, Stack size 0 btyes, Obj/api_tcpip.o(.text.tcpip_trycallback))<br>
<p><strong><a name="[3cd]"></a>tcpip_init</strong>(98 bytes, Stack size 16 btyes, Obj/api_tcpip.o(.text.tcpip_init))<br>
<br>[Stack]<ul><li>Max Depth = 392 
<li>Call Chain = tcpip_init &rArr; sys_mbox_new &rArr; rt_mb_create  &rArr; rt_object_allocate  &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<li><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<li><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
</ul>
<br>[Called By]<ul>
<li><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
</ul>
<p><strong><a name="[3ce]"></a>pbuf_free_callback</strong>(14 bytes, Stack size 0 btyes, Obj/api_tcpip.o(.text.pbuf_free_callback))<br>
<p><strong><a name="[3cf]"></a>mem_free_callback</strong>(14 bytes, Stack size 0 btyes, Obj/api_tcpip.o(.text.mem_free_callback))<br>
<p><strong><a name="[3d0]"></a>tcpip_inpkt</strong>(34 bytes, Stack size 20 btyes, Obj/api_tcpip.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = tcpip_inpkt &rArr; sys_mutex_lock &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<li><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
</ul>
<br>[Called By]<ul>
<li><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
</ul>
<p><strong><a name="[3d1]"></a>tcpip_input</strong>(30 bytes, Stack size 4 btyes, Obj/api_tcpip.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = tcpip_input &rArr; tcpip_inpkt &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
</ul>
<p><strong><a name="[3d2]"></a>tcpip_callback_with_block</strong>(100 bytes, Stack size 20 btyes, Obj/api_tcpip.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 340 
<li>Call Chain = tcpip_callback_with_block &rArr; sys_mbox_post &rArr; rt_mb_send_wait  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<li><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</ul>
<br>[Called By]<ul>
<li><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
</ul>
<p><strong><a name="[3d3]"></a>tcpip_send_msg_wait_sem</strong>(28 bytes, Stack size 16 btyes, Obj/api_tcpip.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 340 
<li>Call Chain = tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<li><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
</ul>
<br>[Called By]<ul>
<li><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<li><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<li><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<li><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<li><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<li><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<li><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<li><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
</ul>
<p><strong><a name="[3d4]"></a>tcpip_api_call</strong>(30 bytes, Stack size 16 btyes, Obj/api_tcpip.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 340 
<li>Call Chain = tcpip_api_call &rArr; sys_mutex_lock &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<li><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
</ul>
<br>[Called By]<ul>
<li><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_add
<li><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_set_addr
<li><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
</ul>
<p><strong><a name="[3d5]"></a>lwip_htons</strong>(10 bytes, Stack size 0 btyes, Obj/core_def.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<li><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<li><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<li><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<li><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<li><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<li><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment.isra.1
<li><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header.constprop.2
<li><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<li><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<li><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<li><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<li><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<li><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<li><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<li><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<li><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<li><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<li><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<li><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<li><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<li><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<li><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<li><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<li><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto_ntp_server
<li><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</ul>
<p><strong><a name="[3d6]"></a>lwip_strnstr</strong>(80 bytes, Stack size 0 btyes, Obj/core_def.o(.text.lwip_strnstr))<br>
<p><strong><a name="[3d7]"></a>lwip_stricmp</strong>(48 bytes, Stack size 0 btyes, Obj/core_def.o(.text.lwip_stricmp))<br>
<p><strong><a name="[3d8]"></a>lwip_strnicmp</strong>(60 bytes, Stack size 4 btyes, Obj/core_def.o(.text.lwip_strnicmp))<br>
<br>[Called By]<ul>
<li><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</ul>
<p><strong><a name="[3d9]"></a>lwip_itoa</strong>(98 bytes, Stack size 0 btyes, Obj/core_def.o(.text.lwip_itoa))<br>
<p><strong><a name="[3da]"></a>lwip_htonl</strong>(4 bytes, Stack size 0 btyes, Obj/core_def.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<li><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment.isra.1
<li><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header.constprop.2
<li><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<li><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<li><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<li><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<li><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<li><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<li><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<li><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_netmask_valid
<li><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<li><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<li><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<li><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<li><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<li><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack.isra.8
<li><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<li><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<li><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<li><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
</ul>
<p><strong><a name="[3df]"></a>dns_init</strong>(2 bytes, Stack size 0 btyes, Obj/core_dns.o(.text.dns_init))<br>
<br>[Called By]<ul>
<li><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</ul>
<p><strong><a name="[3e0]"></a>dns_setserver</strong>(32 bytes, Stack size 0 btyes, Obj/core_dns.o(.text.dns_setserver))<br>
<br>[Called By]<ul>
<li><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dns
<li><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack.isra.8
</ul>
<p><strong><a name="[3e1]"></a>dns_getserver</strong>(16 bytes, Stack size 0 btyes, Obj/core_dns.o(.text.dns_getserver))<br>
<br>[Called By]<ul>
<li><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
<li><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dns
</ul>
<p><strong><a name="[3e2]"></a>dns_tmr</strong>(28 bytes, Stack size 4 btyes, Obj/core_dns.o(.text.dns_tmr))<br>
<br>[Stack]<ul><li>Max Depth = 680 
<li>Call Chain = dns_tmr &rArr; dns_check_entry &rArr; dns_send  &rArr; udp_sendto  &rArr; udp_sendto_if  &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</ul>
<p><strong><a name="[3e3]"></a>dns_gethostbyname_addrtype</strong>(604 bytes, Stack size 52 btyes, Obj/core_dns.o(.text.dns_gethostbyname_addrtype))<br>
<br>[Stack]<ul><li>Max Depth = 728 
<li>Call Chain = dns_gethostbyname_addrtype &rArr; dns_check_entry &rArr; dns_send  &rArr; udp_sendto  &rArr; udp_sendto_if  &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<li><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_strnicmp
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
<li><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<li><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<li><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<li><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<li><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
</ul>
<br>[Called By]<ul>
<li><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_gethostbyname
</ul>
<p><strong><a name="[3e4]"></a>dns_gethostbyname</strong>(20 bytes, Stack size 0 btyes, Obj/core_dns.o(.text.dns_gethostbyname))<br>
<p><strong><a name="[3e5]"></a>lwip_standard_chksum</strong>(132 bytes, Stack size 4 btyes, Obj/core_inet_chksum.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<li><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<li><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<li><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
</ul>
<p><strong><a name="[3e6]"></a>inet_chksum_pseudo</strong>(164 bytes, Stack size 28 btyes, Obj/core_inet_chksum.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = inet_chksum_pseudo &rArr; lwip_standard_chksum </ul>
<br>[Calls]<ul>
<li><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
<li><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</ul>
<br>[Called By]<ul>
<li><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
</ul>
<p><strong><a name="[3e7]"></a>ip_chksum_pseudo</strong>(20 bytes, Stack size 8 btyes, Obj/core_inet_chksum.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 40 
<li>Call Chain = ip_chksum_pseudo &rArr; inet_chksum_pseudo &rArr; lwip_standard_chksum  </ul>
<br>[Calls]<ul>
<li><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</ul>
<br>[Called By]<ul>
<li><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</ul>
<p><strong><a name="[3e8]"></a>inet_chksum_pseudo_partial</strong>(252 bytes, Stack size 44 btyes, Obj/core_inet_chksum.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 240 
<li>Call Chain = inet_chksum_pseudo_partial &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</ul>
<br>[Called By]<ul>
<li><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo_partial
</ul>
<p><strong><a name="[3e9]"></a>ip_chksum_pseudo_partial</strong>(28 bytes, Stack size 12 btyes, Obj/core_inet_chksum.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 252 
<li>Call Chain = ip_chksum_pseudo_partial &rArr; inet_chksum_pseudo_partial &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
</ul>
<p><strong><a name="[3ea]"></a>inet_chksum</strong>(12 bytes, Stack size 4 btyes, Obj/core_inet_chksum.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = inet_chksum &rArr; lwip_standard_chksum </ul>
<br>[Calls]<ul>
<li><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</ul>
<br>[Called By]<ul>
<li><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response.isra.0
<li><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<li><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<li><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</ul>
<p><strong><a name="[3eb]"></a>inet_chksum_pbuf</strong>(92 bytes, Stack size 20 btyes, Obj/core_inet_chksum.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum </ul>
<br>[Calls]<ul>
<li><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</ul>
<br>[Called By]<ul>
<li><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</ul>
<p><strong><a name="[3ec]"></a>lwip_init</strong>(40 bytes, Stack size 4 btyes, Obj/core_init.o(.text.lwip_init))<br>
<br>[Stack]<ul><li>Max Depth = 236 
<li>Call Chain = lwip_init &rArr; sys_timeouts_init &rArr; sys_timeout  &rArr; memp_malloc  &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<li><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<li><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<li><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<li><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<li><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<li><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_init
<li><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<li><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
</ul>
<br>[Called By]<ul>
<li><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</ul>
<p><strong><a name="[3ed]"></a>if_nametoindex</strong>(24 bytes, Stack size 0 btyes, Obj/core_if.o(.text.if_nametoindex))<br>
<p><strong><a name="[3ee]"></a>if_indextoname</strong>(38 bytes, Stack size 0 btyes, Obj/core_if.o(.text.if_indextoname))<br>
<p><strong><a name="[3f0]"></a>memp_init_pool</strong>(56 bytes, Stack size 0 btyes, Obj/core_memp.o(.text.memp_init_pool))<br>
<p><strong><a name="[3f1]"></a>memp_init</strong>(86 bytes, Stack size 16 btyes, Obj/core_memp.o(.text.memp_init))<br>
<br>[Called By]<ul>
<li><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</ul>
<p><strong><a name="[3f3]"></a>memp_malloc_pool</strong>(36 bytes, Stack size 8 btyes, Obj/core_memp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 216 
<li>Call Chain = memp_malloc_pool &rArr; do_memp_malloc_pool.isra.0 &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool.isra.0
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<p><strong><a name="[3f4]"></a>memp_malloc</strong>(42 bytes, Stack size 4 btyes, Obj/core_memp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = memp_malloc &rArr; do_memp_malloc_pool.isra.0 &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool.isra.0
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<li><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<li><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<li><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<li><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_new
<li><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<li><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<li><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<li><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment.isra.1
<li><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<li><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<li><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<li><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<li><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<li><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group.isra.3
</ul>
<p><strong><a name="[3f5]"></a>memp_free_pool</strong>(36 bytes, Stack size 4 btyes, Obj/core_memp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = memp_free_pool &rArr; do_memp_malloc_pool.isra.0 &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool.isra.0
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<p><strong><a name="[3f6]"></a>memp_free</strong>(44 bytes, Stack size 4 btyes, Obj/core_memp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = memp_free &rArr; do_memp_malloc_pool.isra.0 &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool.isra.0
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<li><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<li><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<li><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<li><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<li><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<li><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<li><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<li><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<li><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<li><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<li><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<li><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close.part.3
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<li><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<li><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<li><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<li><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<li><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<li><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<li><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<li><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<li><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
</ul>
<p><strong><a name="[3f8]"></a>netif_init</strong>(2 bytes, Stack size 0 btyes, Obj/core_netif.o(.text.netif_init))<br>
<br>[Called By]<ul>
<li><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</ul>
<p><strong><a name="[3f9]"></a>netif_input</strong>(26 bytes, Stack size 0 btyes, Obj/core_netif.o(.fast))<br>
<p><strong><a name="[3fa]"></a>netif_find</strong>(58 bytes, Stack size 0 btyes, Obj/core_netif.o(.text.netif_find))<br>
<p><strong><a name="[3fb]"></a>netif_find_nonum</strong>(50 bytes, Stack size 0 btyes, Obj/core_netif.o(.text.netif_find_nonum))<br>
<p><strong><a name="[3fc]"></a>netif_find_byindex</strong>(46 bytes, Stack size 0 btyes, Obj/core_netif.o(.text.netif_find_byindex))<br>
<p><strong><a name="[3fd]"></a>netif_get_index</strong>(32 bytes, Stack size 0 btyes, Obj/core_netif.o(.text.netif_get_index))<br>
<p><strong><a name="[3fe]"></a>netif_set_ipaddr</strong>(126 bytes, Stack size 20 btyes, Obj/core_netif.o(.text.netif_set_ipaddr))<br>
<br>[Stack]<ul><li>Max Depth = 696 
<li>Call Chain = netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
<li><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_netif_ip_addr_changed
<li><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_netif_ip_addr_changed
<li><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports.part.0
</ul>
<br>[Called By]<ul>
<li><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</ul>
<p><strong><a name="[3ff]"></a>netif_set_addr</strong>(66 bytes, Stack size 16 btyes, Obj/core_netif.o(.text.netif_set_addr))<br>
<br>[Stack]<ul><li>Max Depth = 712 
<li>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed  &rArr; tcp_netif_ip_addr_changed_pcblist  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</ul>
<br>[Called By]<ul>
<li><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_do_netif_set_addr
<li><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<li><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<li><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<li><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</ul>
<p><strong><a name="[400]"></a>netif_add</strong>(174 bytes, Stack size 32 btyes, Obj/core_netif.o(.text.netif_add))<br>
<br>[Stack]<ul><li>Max Depth = 744 
<li>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr  &rArr; tcp_netif_ip_addr_changed  &rArr; tcp_netif_ip_addr_changed_pcblist  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<li><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<li><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_do_netif_add
</ul>
<p><strong><a name="[401]"></a>netif_set_gw</strong>(10 bytes, Stack size 0 btyes, Obj/core_netif.o(.text.netif_set_gw))<br>
<p><strong><a name="[402]"></a>netif_set_netmask</strong>(10 bytes, Stack size 0 btyes, Obj/core_netif.o(.text.netif_set_netmask))<br>
<p><strong><a name="[403]"></a>netif_set_default</strong>(6 bytes, Stack size 0 btyes, Obj/core_netif.o(.text.netif_set_default))<br>
<br>[Called By]<ul>
<li><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<li><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</ul>
<p><strong><a name="[404]"></a>netif_set_up</strong>(60 bytes, Stack size 8 btyes, Obj/core_netif.o(.text.netif_set_up))<br>
<br>[Stack]<ul><li>Max Depth = 424 
<li>Call Chain = netif_set_up &rArr; netif_issue_reports.part.0 &rArr; etharp_request  &rArr; etharp_raw  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports.part.0
</ul>
<br>[Called By]<ul>
<li><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<li><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</ul>
<p><strong><a name="[405]"></a>netif_set_down</strong>(56 bytes, Stack size 0 btyes, Obj/core_netif.o(.text.netif_set_down))<br>
<p><strong><a name="[406]"></a>netif_remove</strong>(144 bytes, Stack size 0 btyes, Obj/core_netif.o(.text.netif_remove))<br>
<p><strong><a name="[407]"></a>netif_set_status_callback</strong>(8 bytes, Stack size 0 btyes, Obj/core_netif.o(.text.netif_set_status_callback))<br>
<p><strong><a name="[408]"></a>netif_set_link_up</strong>(56 bytes, Stack size 8 btyes, Obj/core_netif.o(.text.netif_set_link_up))<br>
<br>[Stack]<ul><li>Max Depth = 628 
<li>Call Chain = netif_set_link_up &rArr; dhcp_network_changed &rArr; dhcp_reboot  &rArr; udp_sendto_if  &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<li><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports.part.0
</ul>
<br>[Called By]<ul>
<li><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<li><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</ul>
<p><strong><a name="[409]"></a>netif_set_link_down</strong>(20 bytes, Stack size 0 btyes, Obj/core_netif.o(.text.netif_set_link_down))<br>
<p><strong><a name="[40c]"></a>pbuf_header</strong>(10 bytes, Stack size 4 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = pbuf_header &rArr; pbuf_header_impl &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</ul>
<br>[Called By]<ul>
<li><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<li><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<li><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment.isra.1
<li><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<li><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<li><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<li><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<li><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<li><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<li><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<li><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<li><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</ul>
<p><strong><a name="[40d]"></a>pbuf_header_force</strong>(10 bytes, Stack size 4 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = pbuf_header_force &rArr; pbuf_header_impl &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</ul>
<br>[Called By]<ul>
<li><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<li><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</ul>
<p><strong><a name="[40e]"></a>pbuf_free</strong>(166 bytes, Stack size 28 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 316 
<li>Call Chain = pbuf_free &rArr; mem_free &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</ul>
<br>[Called By]<ul>
<li><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_tx
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
<li><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<li><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<li><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<li><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<li><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<li><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<li><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<li><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<li><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<li><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<li><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<li><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dechain
<li><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<li><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<li><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<li><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge.part.1
<li><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<li><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<li><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment.isra.1
<li><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<li><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<li><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<li><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<li><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<li><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<li><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<li><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<li><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<li><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<li><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<li><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<li><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<li><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<li><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<li><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<li><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<li><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<li><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<li><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<li><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<li><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response.isra.0
<li><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<li><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<li><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
</ul>
<p><strong><a name="[40f]"></a>pbuf_alloc</strong>(506 bytes, Stack size 44 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 360 
<li>Call Chain = pbuf_alloc &rArr; pbuf_free &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</ul>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth0_init
<li><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_tx
<li><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_rx
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
<li><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<li><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<li><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<li><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<li><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<li><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc.isra.0
<li><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header.constprop.2
<li><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<li><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<li><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<li><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<li><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<li><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<li><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<li><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<li><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response.isra.0
<li><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
</ul>
<p><strong><a name="[410]"></a>pbuf_realloc</strong>(208 bytes, Stack size 28 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</ul>
<br>[Called By]<ul>
<li><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<li><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<li><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<li><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<li><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<li><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<li><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<li><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<li><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</ul>
<p><strong><a name="[411]"></a>pbuf_clen</strong>(24 bytes, Stack size 0 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<li><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<li><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<li><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<li><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</ul>
<p><strong><a name="[412]"></a>pbuf_ref</strong>(48 bytes, Stack size 8 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 204 
<li>Call Chain = pbuf_ref &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_tx
<li><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<li><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</ul>
<p><strong><a name="[413]"></a>pbuf_cat</strong>(174 bytes, Stack size 12 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = pbuf_cat &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<li><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<li><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<li><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</ul>
<p><strong><a name="[414]"></a>pbuf_chain</strong>(16 bytes, Stack size 8 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 216 
<li>Call Chain = pbuf_chain &rArr; pbuf_cat &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<li><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</ul>
<br>[Called By]<ul>
<li><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<li><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</ul>
<p><strong><a name="[415]"></a>pbuf_dechain</strong>(110 bytes, Stack size 16 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 332 
<li>Call Chain = pbuf_dechain &rArr; pbuf_free &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</ul>
<p><strong><a name="[416]"></a>pbuf_copy</strong>(340 bytes, Stack size 36 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = pbuf_copy &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_tx
<li><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<li><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<li><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</ul>
<p><strong><a name="[417]"></a>pbuf_copy_partial</strong>(136 bytes, Stack size 24 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 220 
<li>Call Chain = pbuf_copy_partial &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<li><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<li><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<li><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<li><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</ul>
<p><strong><a name="[418]"></a>pbuf_skip</strong>(80 bytes, Stack size 0 btyes, Obj/core_pbuf.o(.fast))<br>
<p><strong><a name="[419]"></a>pbuf_take</strong>(192 bytes, Stack size 36 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = pbuf_take &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<li><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</ul>
<p><strong><a name="[41a]"></a>pbuf_take_at</strong>(100 bytes, Stack size 24 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 256 
<li>Call Chain = pbuf_take_at &rArr; pbuf_take &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
</ul>
<br>[Called By]<ul>
<li><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</ul>
<p><strong><a name="[41b]"></a>pbuf_coalesce</strong>(70 bytes, Stack size 12 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 372 
<li>Call Chain = pbuf_coalesce &rArr; pbuf_alloc &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<p><strong><a name="[41c]"></a>pbuf_get_at</strong>(38 bytes, Stack size 0 btyes, Obj/core_pbuf.o(.fast))<br>
<p><strong><a name="[41d]"></a>pbuf_try_get_at</strong>(42 bytes, Stack size 0 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</ul>
<p><strong><a name="[41e]"></a>pbuf_put_at</strong>(38 bytes, Stack size 0 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</ul>
<p><strong><a name="[41f]"></a>pbuf_memcmp</strong>(26 bytes, Stack size 4 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = pbuf_memcmp &rArr; pbuf_header_impl &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</ul>
<p><strong><a name="[420]"></a>pbuf_memfind</strong>(68 bytes, Stack size 28 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = pbuf_memfind &rArr; pbuf_header_impl &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</ul>
<br>[Called By]<ul>
<li><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_strstr
</ul>
<p><strong><a name="[421]"></a>pbuf_strstr</strong>(56 bytes, Stack size 12 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = pbuf_strstr &rArr; pbuf_memfind &rArr; pbuf_header_impl  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memfind
</ul>
<p><strong><a name="[422]"></a>raw_input</strong>(192 bytes, Stack size 48 btyes, Obj/core_raw.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = raw_input &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</ul>
<p><strong><a name="[423]"></a>raw_bind</strong>(22 bytes, Stack size 0 btyes, Obj/core_raw.o(.text.raw_bind))<br>
<p><strong><a name="[424]"></a>raw_connect</strong>(22 bytes, Stack size 0 btyes, Obj/core_raw.o(.text.raw_connect))<br>
<p><strong><a name="[425]"></a>raw_recv</strong>(6 bytes, Stack size 0 btyes, Obj/core_raw.o(.text.raw_recv))<br>
<br>[Called By]<ul>
<li><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
</ul>
<p><strong><a name="[426]"></a>raw_remove</strong>(74 bytes, Stack size 0 btyes, Obj/core_raw.o(.text.raw_remove))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = raw_remove &rArr; memp_free &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</ul>
<br>[Called By]<ul>
<li><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
</ul>
<p><strong><a name="[427]"></a>raw_new</strong>(44 bytes, Stack size 12 btyes, Obj/core_raw.o(.text.raw_new))<br>
<br>[Stack]<ul><li>Max Depth = 224 
<li>Call Chain = raw_new &rArr; memp_malloc &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new_ip_type
</ul>
<p><strong><a name="[428]"></a>raw_netif_ip_addr_changed</strong>(58 bytes, Stack size 0 btyes, Obj/core_raw.o(.text.raw_netif_ip_addr_changed))<br>
<br>[Called By]<ul>
<li><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</ul>
<p><strong><a name="[429]"></a>raw_sendto</strong>(244 bytes, Stack size 36 btyes, Obj/core_raw.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 548 
<li>Call Chain = raw_sendto &rArr; ip4_output_if &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<li><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<li><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<li><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<li><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
</ul>
<p><strong><a name="[42a]"></a>raw_send</strong>(10 bytes, Stack size 4 btyes, Obj/core_raw.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 552 
<li>Call Chain = raw_send &rArr; raw_sendto &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</ul>
<br>[Called By]<ul>
<li><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
</ul>
<p><strong><a name="[42b]"></a>raw_new_ip_type</strong>(10 bytes, Stack size 4 btyes, Obj/core_raw.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 228 
<li>Call Chain = raw_new_ip_type &rArr; raw_new &rArr; memp_malloc  &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
</ul>
<br>[Called By]<ul>
<li><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
</ul>
<p><strong><a name="[42c]"></a>sys_msleep</strong>(44 bytes, Stack size 0 btyes, Obj/core_sys.o(.fast))<br>
<p><strong><a name="[42f]"></a>tcp_init</strong>(2 bytes, Stack size 0 btyes, Obj/core_tcp.o(.text.tcp_init))<br>
<br>[Called By]<ul>
<li><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</ul>
<p><strong><a name="[430]"></a>tcp_bind</strong>(188 bytes, Stack size 0 btyes, Obj/core_tcp.o(.text.tcp_bind))<br>
<p><strong><a name="[431]"></a>tcp_listen_with_backlog_and_err</strong>(226 bytes, Stack size 0 btyes, Obj/core_tcp.o(.text.tcp_listen_with_backlog_and_err))<br>
<p><strong><a name="[432]"></a>tcp_listen_with_backlog</strong>(10 bytes, Stack size 0 btyes, Obj/core_tcp.o(.text.tcp_listen_with_backlog))<br>
<p><strong><a name="[433]"></a>tcp_connect</strong>(384 bytes, Stack size 0 btyes, Obj/core_tcp.o(.text.tcp_connect))<br>
<p><strong><a name="[434]"></a>tcp_arg</strong>(8 bytes, Stack size 0 btyes, Obj/core_tcp.o(.text.tcp_arg))<br>
<br>[Called By]<ul>
<li><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<li><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</ul>
<p><strong><a name="[435]"></a>tcp_recv</strong>(40 bytes, Stack size 0 btyes, Obj/core_tcp.o(.text.tcp_recv))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = tcp_recv &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<li><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</ul>
<p><strong><a name="[436]"></a>tcp_sent</strong>(38 bytes, Stack size 12 btyes, Obj/core_tcp.o(.text.tcp_sent))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = tcp_sent &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<li><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</ul>
<p><strong><a name="[437]"></a>tcp_err</strong>(40 bytes, Stack size 12 btyes, Obj/core_tcp.o(.text.tcp_err))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = tcp_err &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<li><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</ul>
<p><strong><a name="[438]"></a>tcp_accept</strong>(14 bytes, Stack size 0 btyes, Obj/core_tcp.o(.text.tcp_accept))<br>
<br>[Called By]<ul>
<li><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</ul>
<p><strong><a name="[439]"></a>tcp_poll</strong>(52 bytes, Stack size 16 btyes, Obj/core_tcp.o(.text.tcp_poll))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = tcp_poll &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<li><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</ul>
<p><strong><a name="[43a]"></a>tcp_debug_state_str</strong>(8 bytes, Stack size 0 btyes, Obj/core_tcp.o(.text.tcp_debug_state_str))<br>
<br>[Called By]<ul>
<li><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
</ul>
<p><strong><a name="[43b]"></a>tcp_debug_print</strong>(18 bytes, Stack size 0 btyes, Obj/core_tcp.o(.text.tcp_debug_print))<br>
<p><strong><a name="[43c]"></a>tcp_debug_print_state</strong>(2 bytes, Stack size 0 btyes, Obj/core_tcp.o(.text.tcp_debug_print_state))<br>
<p><strong><a name="[43d]"></a>tcp_debug_print_flags</strong>(2 bytes, Stack size 0 btyes, Obj/core_tcp.o(.text.tcp_debug_print_flags))<br>
<p><strong><a name="[43e]"></a>tcp_debug_print_pcbs</strong>(44 bytes, Stack size 0 btyes, Obj/core_tcp.o(.text.tcp_debug_print_pcbs))<br>
<p><strong><a name="[43f]"></a>tcp_pcbs_sane</strong>(152 bytes, Stack size 24 btyes, Obj/core_tcp.o(.text.tcp_pcbs_sane))<br>
<br>[Stack]<ul><li>Max Depth = 220 
<li>Call Chain = tcp_pcbs_sane &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</ul>
<p><strong><a name="[440]"></a>tcp_pcb_remove</strong>(192 bytes, Stack size 8 btyes, Obj/core_tcp.o(.text.tcp_pcb_remove))<br>
<br>[Stack]<ul><li>Max Depth = 608 
<li>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcbs_sane
<li><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<li><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</ul>
<br>[Called By]<ul>
<li><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<li><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<li><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close.part.3
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</ul>
<p><strong><a name="[442]"></a>tcp_close</strong>(24 bytes, Stack size 4 btyes, Obj/core_tcp.o(.text.tcp_close))<br>
<br>[Stack]<ul><li>Max Depth = 632 
<li>Call Chain = tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</ul>
<br>[Called By]<ul>
<li><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</ul>
<p><strong><a name="[443]"></a>tcp_shutdown</strong>(94 bytes, Stack size 0 btyes, Obj/core_tcp.o(.text.tcp_shutdown))<br>
<br>[Stack]<ul><li>Max Depth = 628 
<li>Call Chain = tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</ul>
<br>[Called By]<ul>
<li><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</ul>
<p><strong><a name="[444]"></a>tcp_abandon</strong>(254 bytes, Stack size 44 btyes, Obj/core_tcp.o(.text.tcp_abandon))<br>
<br>[Stack]<ul><li>Max Depth = 652 
<li>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<li><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<li><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<li><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<li><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<li><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<li><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed_pcblist
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</ul>
<p><strong><a name="[445]"></a>tcp_abort</strong>(10 bytes, Stack size 4 btyes, Obj/core_tcp.o(.text.tcp_abort))<br>
<br>[Stack]<ul><li>Max Depth = 656 
<li>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</ul>
<br>[Called By]<ul>
<li><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<li><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</ul>
<p><strong><a name="[448]"></a>tcp_netif_ip_addr_changed</strong>(78 bytes, Stack size 12 btyes, Obj/core_tcp.o(.text.tcp_netif_ip_addr_changed))<br>
<br>[Stack]<ul><li>Max Depth = 676 
<li>Call Chain = tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed_pcblist
</ul>
<br>[Called By]<ul>
<li><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</ul>
<p><strong><a name="[449]"></a>tcp_new</strong>(10 bytes, Stack size 0 btyes, Obj/core_tcp.o(.text.tcp_new))<br>
<p><strong><a name="[44a]"></a>tcp_update_rcv_ann_wnd</strong>(90 bytes, Stack size 12 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = tcp_update_rcv_ann_wnd &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<li><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</ul>
<p><strong><a name="[44b]"></a>tcp_recved</strong>(124 bytes, Stack size 12 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 612 
<li>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<li><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</ul>
<br>[Called By]<ul>
<li><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<li><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
<li><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<li><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</ul>
<p><strong><a name="[44c]"></a>tcp_txnow</strong>(40 bytes, Stack size 8 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 608 
<li>Call Chain = tcp_txnow &rArr; tcp_output &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</ul>
<p><strong><a name="[44d]"></a>tcp_seg_free</strong>(32 bytes, Stack size 8 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</ul>
<br>[Called By]<ul>
<li><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<li><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge.part.1
<li><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<li><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<li><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment.isra.1
<li><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</ul>
<p><strong><a name="[44e]"></a>tcp_segs_free</strong>(20 bytes, Stack size 8 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 332 
<li>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</ul>
<br>[Called By]<ul>
<li><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</ul>
<p><strong><a name="[450]"></a>tcp_slowtmr</strong>(1130 bytes, Stack size 68 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 672 
<li>Call Chain = tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<li><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<li><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<li><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<li><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<li><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</ul>
<br>[Called By]<ul>
<li><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</ul>
<p><strong><a name="[451]"></a>tcp_setprio</strong>(4 bytes, Stack size 0 btyes, Obj/core_tcp.o(.fast))<br>
<p><strong><a name="[452]"></a>tcp_pcb_purge</strong>(20 bytes, Stack size 4 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = tcp_pcb_purge &rArr; tcp_new_port </ul>
<br>[Calls]<ul>
<li><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
</ul>
<br>[Called By]<ul>
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</ul>
<p><strong><a name="[453]"></a>tcp_next_iss</strong>(14 bytes, Stack size 0 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</ul>
<p><strong><a name="[454]"></a>tcp_eff_send_mss_impl</strong>(44 bytes, Stack size 8 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</ul>
<br>[Called By]<ul>
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<li><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</ul>
<p><strong><a name="[455]"></a>tcp_recv_null</strong>(56 bytes, Stack size 8 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 636 
<li>Call Chain = tcp_recv_null &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</ul>
<br>[Called By]<ul>
<li><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</ul>
<p><strong><a name="[456]"></a>tcp_process_refused_data</strong>(126 bytes, Stack size 20 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 656 
<li>Call Chain = tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close_shutdown  &rArr; tcp_close_shutdown_fin  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</ul>
<br>[Called By]<ul>
<li><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</ul>
<p><strong><a name="[457]"></a>tcp_fasttmr</strong>(128 bytes, Stack size 28 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 684 
<li>Call Chain = tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null  &rArr; tcp_close_shutdown  &rArr; tcp_close_shutdown_fin  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<li><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<li><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</ul>
<br>[Called By]<ul>
<li><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</ul>
<p><strong><a name="[458]"></a>tcp_tmr</strong>(32 bytes, Stack size 4 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 688 
<li>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data  &rArr; tcp_recv_null  &rArr; tcp_close_shutdown  &rArr; tcp_close_shutdown_fin  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<li><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</ul>
<br>[Called By]<ul>
<li><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</ul>
<p><strong><a name="[45a]"></a>tcp_alloc</strong>(304 bytes, Stack size 16 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 668 
<li>Call Chain = tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<li><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
</ul>
<br>[Called By]<ul>
<li><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_ip_type
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</ul>
<p><strong><a name="[45b]"></a>tcp_new_ip_type</strong>(10 bytes, Stack size 4 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 672 
<li>Call Chain = tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</ul>
<br>[Called By]<ul>
<li><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
</ul>
<p><strong><a name="[460]"></a>tcp_input</strong>(3354 bytes, Stack size 72 btyes, Obj/core_tcp_in.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 740 
<li>Call Chain = tcp_input &rArr; tcp_alloc &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<li><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<li><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<li><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcbs_sane
<li><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<li><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<li><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<li><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<li><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<li><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<li><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<li><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<li><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<li><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<li><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<li><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<li><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<li><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<li><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<li><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</ul>
<br>[Called By]<ul>
<li><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</ul>
<p><strong><a name="[461]"></a>tcp_trigger_input_pcb_close</strong>(12 bytes, Stack size 0 btyes, Obj/core_tcp_in.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</ul>
<p><strong><a name="[463]"></a>tcp_send_fin</strong>(90 bytes, Stack size 0 btyes, Obj/core_tcp_out.o(.text.tcp_send_fin))<br>
<br>[Stack]<ul><li>Max Depth = 408 
<li>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; tcp_pbuf_prealloc.isra.0  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</ul>
<br>[Called By]<ul>
<li><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</ul>
<p><strong><a name="[464]"></a>tcp_rst</strong>(224 bytes, Stack size 0 btyes, Obj/core_tcp_out.o(.text.tcp_rst))<br>
<br>[Stack]<ul><li>Max Depth = 512 
<li>Call Chain = tcp_rst &rArr; ip4_output_if &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<li><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<li><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<li><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</ul>
<p><strong><a name="[465]"></a>tcp_keepalive</strong>(90 bytes, Stack size 0 btyes, Obj/core_tcp_out.o(.text.tcp_keepalive))<br>
<br>[Stack]<ul><li>Max Depth = 512 
<li>Call Chain = tcp_keepalive &rArr; ip4_output_if &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc.isra.0
<li><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<li><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</ul>
<br>[Called By]<ul>
<li><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</ul>
<p><strong><a name="[468]"></a>tcp_write</strong>(1284 bytes, Stack size 100 btyes, Obj/core_tcp_out.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 476 
<li>Call Chain = tcp_write &rArr; tcp_pbuf_prealloc.isra.0 &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<li><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<li><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc.isra.0
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<li><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</ul>
<br>[Called By]<ul>
<li><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
</ul>
<p><strong><a name="[469]"></a>tcp_enqueue_flags</strong>(372 bytes, Stack size 32 btyes, Obj/core_tcp_out.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 408 
<li>Call Chain = tcp_enqueue_flags &rArr; tcp_pbuf_prealloc.isra.0 &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc.isra.0
<li><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<li><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</ul>
<p><strong><a name="[46a]"></a>tcp_send_empty_ack</strong>(126 bytes, Stack size 28 btyes, Obj/core_tcp_out.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 540 
<li>Call Chain = tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc.isra.0
<li><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<li><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</ul>
<br>[Called By]<ul>
<li><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<li><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</ul>
<p><strong><a name="[46b]"></a>tcp_output</strong>(1198 bytes, Stack size 60 btyes, Obj/core_tcp_out.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 600 
<li>Call Chain = tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<li><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<li><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<li><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
</ul>
<br>[Called By]<ul>
<li><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<li><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<li><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_txnow
<li><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<li><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<li><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<li><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<li><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
</ul>
<p><strong><a name="[46c]"></a>tcp_rexmit_rto</strong>(58 bytes, Stack size 4 btyes, Obj/core_tcp_out.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 604 
<li>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</ul>
<br>[Called By]<ul>
<li><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</ul>
<p><strong><a name="[46d]"></a>tcp_rexmit</strong>(134 bytes, Stack size 20 btyes, Obj/core_tcp_out.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</ul>
<br>[Called By]<ul>
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<li><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
</ul>
<p><strong><a name="[46e]"></a>tcp_rexmit_fast</strong>(86 bytes, Stack size 8 btyes, Obj/core_tcp_out.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit </ul>
<br>[Calls]<ul>
<li><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</ul>
<br>[Called By]<ul>
<li><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</ul>
<p><strong><a name="[46f]"></a>tcp_zero_window_probe</strong>(290 bytes, Stack size 36 btyes, Obj/core_tcp_out.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 548 
<li>Call Chain = tcp_zero_window_probe &rArr; ip4_output_if &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc.isra.0
<li><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<li><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<li><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</ul>
<br>[Called By]<ul>
<li><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</ul>
<p><strong><a name="[470]"></a>sys_timeout</strong>(152 bytes, Stack size 20 btyes, Obj/core_timeouts.o(.text.sys_timeout))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = sys_timeout &rArr; memp_malloc &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<li><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
<li><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclic_timer
<li><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
</ul>
<p><strong><a name="[471]"></a>tcp_timer_needed</strong>(44 bytes, Stack size 4 btyes, Obj/core_timeouts.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 236 
<li>Call Chain = tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc  &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</ul>
<br>[Called By]<ul>
<li><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</ul>
<p><strong><a name="[472]"></a>sys_timeouts_init</strong>(42 bytes, Stack size 0 btyes, Obj/core_timeouts.o(.text.sys_timeouts_init))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = sys_timeouts_init &rArr; sys_timeout &rArr; memp_malloc  &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<li><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</ul>
<br>[Called By]<ul>
<li><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</ul>
<p><strong><a name="[475]"></a>sys_untimeout</strong>(82 bytes, Stack size 4 btyes, Obj/core_timeouts.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 216 
<li>Call Chain = sys_untimeout &rArr; memp_free &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</ul>
<p><strong><a name="[476]"></a>sys_restart_timeouts</strong>(12 bytes, Stack size 4 btyes, Obj/core_timeouts.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = sys_restart_timeouts &rArr; sys_now </ul>
<br>[Calls]<ul>
<li><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</ul>
<p><strong><a name="[477]"></a>sys_timeouts_mbox_fetch</strong>(156 bytes, Stack size 40 btyes, Obj/core_timeouts.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 364 
<li>Call Chain = sys_timeouts_mbox_fetch &rArr; sys_arch_mbox_fetch &rArr; rt_mb_recv  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<li><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<li><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<li><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<li><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
</ul>
<br>[Called By]<ul>
<li><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</ul>
<p><strong><a name="[478]"></a>udp_init</strong>(2 bytes, Stack size 0 btyes, Obj/core_udp.o(.text.udp_init))<br>
<br>[Called By]<ul>
<li><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</ul>
<p><strong><a name="[479]"></a>udp_input</strong>(394 bytes, Stack size 52 btyes, Obj/core_udp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 608 
<li>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response.isra.0  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<li><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<li><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</ul>
<br>[Called By]<ul>
<li><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</ul>
<p><strong><a name="[47a]"></a>udp_bind</strong>(220 bytes, Stack size 16 btyes, Obj/core_udp.o(.text.udp_bind))<br>
<br>[Called By]<ul>
<li><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<li><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<li><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<li><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
</ul>
<p><strong><a name="[47b]"></a>udp_connect</strong>(92 bytes, Stack size 0 btyes, Obj/core_udp.o(.text.udp_connect))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = udp_connect &rArr; udp_bind </ul>
<br>[Calls]<ul>
<li><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</ul>
<br>[Called By]<ul>
<li><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
</ul>
<p><strong><a name="[47c]"></a>udp_disconnect</strong>(14 bytes, Stack size 0 btyes, Obj/core_udp.o(.text.udp_disconnect))<br>
<p><strong><a name="[47d]"></a>udp_remove</strong>(74 bytes, Stack size 4 btyes, Obj/core_udp.o(.text.udp_remove))<br>
<br>[Stack]<ul><li>Max Depth = 216 
<li>Call Chain = udp_remove &rArr; memp_free &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</ul>
<br>[Called By]<ul>
<li><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<li><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<li><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<li><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
</ul>
<p><strong><a name="[47e]"></a>udp_new</strong>(34 bytes, Stack size 8 btyes, Obj/core_udp.o(.text.udp_new))<br>
<br>[Stack]<ul><li>Max Depth = 220 
<li>Call Chain = udp_new &rArr; memp_malloc &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
<li><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
</ul>
<p><strong><a name="[47f]"></a>udp_new_ip_type</strong>(8 bytes, Stack size 4 btyes, Obj/core_udp.o(.text.udp_new_ip_type))<br>
<br>[Stack]<ul><li>Max Depth = 224 
<li>Call Chain = udp_new_ip_type &rArr; udp_new &rArr; memp_malloc  &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
</ul>
<br>[Called By]<ul>
<li><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<li><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</ul>
<p><strong><a name="[480]"></a>udp_netif_ip_addr_changed</strong>(58 bytes, Stack size 0 btyes, Obj/core_udp.o(.text.udp_netif_ip_addr_changed))<br>
<br>[Called By]<ul>
<li><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</ul>
<p><strong><a name="[481]"></a>udp_sendto_if_src</strong>(370 bytes, Stack size 52 btyes, Obj/core_udp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 564 
<li>Call Chain = udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<li><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<li><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<li><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<li><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<li><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<li><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<li><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
</ul>
<p><strong><a name="[482]"></a>udp_sendto_if</strong>(78 bytes, Stack size 16 btyes, Obj/core_udp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 580 
<li>Call Chain = udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</ul>
<br>[Called By]<ul>
<li><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<li><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<li><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<li><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<li><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</ul>
<p><strong><a name="[483]"></a>udp_sendto</strong>(90 bytes, Stack size 24 btyes, Obj/core_udp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 604 
<li>Call Chain = udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<li><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</ul>
<br>[Called By]<ul>
<li><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<li><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<li><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</ul>
<p><strong><a name="[484]"></a>udp_send</strong>(24 bytes, Stack size 4 btyes, Obj/core_udp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 608 
<li>Call Chain = udp_send &rArr; udp_sendto &rArr; udp_sendto_if  &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</ul>
<br>[Called By]<ul>
<li><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
</ul>
<p><strong><a name="[485]"></a>udp_recv</strong>(6 bytes, Stack size 0 btyes, Obj/core_udp.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<li><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<li><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
</ul>
<p><strong><a name="[486]"></a>ethernet_input</strong>(174 bytes, Stack size 16 btyes, Obj/netif_ethernet.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 792 
<li>Call Chain = ethernet_input &rArr; ip4_input &rArr; tcp_input  &rArr; tcp_alloc  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<li><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<li><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
</ul>
<p><strong><a name="[487]"></a>ethernet_output</strong>(132 bytes, Stack size 24 btyes, Obj/netif_ethernet.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = ethernet_output &rArr; pbuf_header &rArr; pbuf_header_impl  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<li><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<li><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<li><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<li><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</ul>
<p><strong><a name="[48a]"></a>set_if</strong>(134 bytes, Stack size 0 btyes, Obj/netif_ethernetif.o(.text.set_if))<br>
<br>[Stack]<ul><li>Max Depth = 376 
<li>Call Chain = set_if &rArr; netifapi_netif_set_addr &rArr; tcpip_api_call  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<li><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<li><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_set_addr
</ul>
<br>[Called By]<ul>
<li><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ifconfig
</ul>
<p><strong><a name="[48b]"></a>set_dns</strong>(34 bytes, Stack size 8 btyes, Obj/netif_ethernetif.o(.text.set_dns))<br>
<br>[Stack]<ul><li>Max Depth = 260 
<li>Call Chain = set_dns &rArr; ip4addr_aton &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<li><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
</ul>
<br>[Called By]<ul>
<li><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dns
</ul>
<p><strong><a name="[48c]"></a>list_if</strong>(356 bytes, Stack size 40 btyes, Obj/netif_ethernetif.o(.text.list_if))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = list_if &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<li><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_getserver
<li><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
</ul>
<br>[Called By]<ul>
<li><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ifconfig
</ul>
<p><strong><a name="[48d]"></a>list_udps</strong>(94 bytes, Stack size 64 btyes, Obj/netif_ethernetif.o(.text.list_udps))<br>
<br>[Stack]<ul><li>Max Depth = 236 
<li>Call Chain = list_udps &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<li><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<li><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
</ul>
<br>[Called By]<ul>
<li><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_netstat
</ul>
<p><strong><a name="[48e]"></a>list_tcps</strong>(284 bytes, Stack size 80 btyes, Obj/netif_ethernetif.o(.text.list_tcps))<br>
<br>[Stack]<ul><li>Max Depth = 252 
<li>Call Chain = list_tcps &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<li><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<li><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_debug_state_str
<li><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
</ul>
<br>[Called By]<ul>
<li><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_netstat
</ul>
<p><strong><a name="[48f]"></a>eth_device_init_with_flag</strong>(172 bytes, Stack size 44 btyes, Obj/netif_ethernetif.o(.text.eth_device_init_with_flag))<br>
<br>[Stack]<ul><li>Max Depth = 428 
<li>Call Chain = eth_device_init_with_flag &rArr; netifapi_netif_add &rArr; tcpip_api_call  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<li><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<li><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<li><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<li><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<li><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_add
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init
</ul>
<p><strong><a name="[490]"></a>eth_device_init</strong>(10 bytes, Stack size 4 btyes, Obj/netif_ethernetif.o(.text.eth_device_init))<br>
<br>[Stack]<ul><li>Max Depth = 432 
<li>Call Chain = eth_device_init &rArr; eth_device_init_with_flag &rArr; netifapi_netif_add  &rArr; tcpip_api_call  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</ul>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth0_init
<li><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
</ul>
<p><strong><a name="[491]"></a>eth_device_linkchange</strong>(64 bytes, Stack size 0 btyes, Obj/netif_ethernetif.o(.text.eth_device_linkchange))<br>
<br>[Stack]<ul><li>Max Depth = 308 
<li>Call Chain = eth_device_linkchange &rArr; rt_mb_send &rArr; rt_mb_send_wait  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_link_update
</ul>
<p><strong><a name="[492]"></a>eth_system_device_init</strong>(4 bytes, Stack size 0 btyes, Obj/netif_ethernetif.o(.text.eth_system_device_init))<br>
<p><strong><a name="[493]"></a>eth_system_device_init_private</strong>(120 bytes, Stack size 24 btyes, Obj/netif_ethernetif.o(.text.eth_system_device_init_private))<br>
<br>[Stack]<ul><li>Max Depth = 328 
<li>Call Chain = eth_system_device_init_private &rArr; rt_thread_init &rArr; _rt_thread_init.isra.0  &rArr; rt_timer_init  &rArr; rt_object_init  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h2x_hw_init
<li><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<li><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<li><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
</ul>
<p><strong><a name="[494]"></a>eth_get_ipv4</strong>(66 bytes, Stack size 16 btyes, Obj/netif_ethernetif.o(.text.eth_get_ipv4))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = eth_get_ipv4 &rArr; rt_enter_critical </ul>
<br>[Calls]<ul>
<li><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<li><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
</ul>
<br>[Called By]<ul>
<li><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
</ul>
<p><strong><a name="[496]"></a>eth_device_ready</strong>(22 bytes, Stack size 4 btyes, Obj/netif_ethernetif.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 312 
<li>Call Chain = eth_device_ready &rArr; rt_mb_send &rArr; rt_mb_send_wait  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</ul>
<br>[Called By]<ul>
<li><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth0_isr
<li><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth1_isr
</ul>
<p><strong><a name="[497]"></a>dhcp_cleanup</strong>(42 bytes, Stack size 0 btyes, Obj/ipv4_dhcp.o(.text.dhcp_cleanup))<br>
<p><strong><a name="[498]"></a>dhcp_inform</strong>(150 bytes, Stack size 0 btyes, Obj/ipv4_dhcp.o(.text.dhcp_inform))<br>
<p><strong><a name="[499]"></a>dhcp_network_changed</strong>(48 bytes, Stack size 4 btyes, Obj/ipv4_dhcp.o(.text.dhcp_network_changed))<br>
<br>[Stack]<ul><li>Max Depth = 620 
<li>Call Chain = dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if  &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<li><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
</ul>
<br>[Called By]<ul>
<li><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
</ul>
<p><strong><a name="[49a]"></a>dhcp_arp_reply</strong>(176 bytes, Stack size 28 btyes, Obj/ipv4_dhcp.o(.text.dhcp_arp_reply))<br>
<br>[Stack]<ul><li>Max Depth = 592 
<li>Call Chain = dhcp_arp_reply &rArr; udp_sendto_if_src &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<li><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option.isra.1
<li><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long.isra.4
<li><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<li><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<li><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<li><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
</ul>
<p><strong><a name="[49b]"></a>dhcp_renew</strong>(222 bytes, Stack size 36 btyes, Obj/ipv4_dhcp.o(.text.dhcp_renew))<br>
<br>[Stack]<ul><li>Max Depth = 616 
<li>Call Chain = dhcp_renew &rArr; udp_sendto_if &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<li><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option.isra.1
<li><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short.isra.0
<li><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte.isra.2
<li><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<li><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<li><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<li><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
</ul>
<br>[Called By]<ul>
<li><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</ul>
<p><strong><a name="[49c]"></a>dhcp_release</strong>(204 bytes, Stack size 32 btyes, Obj/ipv4_dhcp.o(.text.dhcp_release))<br>
<br>[Stack]<ul><li>Max Depth = 744 
<li>Call Chain = dhcp_release &rArr; netif_set_addr &rArr; netif_set_ipaddr  &rArr; tcp_netif_ip_addr_changed  &rArr; tcp_netif_ip_addr_changed_pcblist  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<li><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<li><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option.isra.1
<li><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long.isra.4
<li><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<li><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<li><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<li><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
</ul>
<br>[Called By]<ul>
<li><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<li><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</ul>
<p><strong><a name="[49d]"></a>dhcp_coarse_tmr</strong>(362 bytes, Stack size 40 btyes, Obj/ipv4_dhcp.o(.text.dhcp_coarse_tmr))<br>
<br>[Stack]<ul><li>Max Depth = 784 
<li>Call Chain = dhcp_coarse_tmr &rArr; dhcp_release &rArr; netif_set_addr  &rArr; netif_set_ipaddr  &rArr; tcp_netif_ip_addr_changed  &rArr; tcp_netif_ip_addr_changed_pcblist  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<li><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<li><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<li><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<li><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option.isra.1
<li><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short.isra.0
<li><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte.isra.2
<li><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<li><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<li><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<li><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
</ul>
<p><strong><a name="[49e]"></a>dhcp_fine_tmr</strong>(134 bytes, Stack size 16 btyes, Obj/ipv4_dhcp.o(.text.dhcp_fine_tmr))<br>
<br>[Stack]<ul><li>Max Depth = 760 
<li>Call Chain = dhcp_fine_tmr &rArr; dhcp_release &rArr; netif_set_addr  &rArr; netif_set_ipaddr  &rArr; tcp_netif_ip_addr_changed  &rArr; tcp_netif_ip_addr_changed_pcblist  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<li><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<li><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<li><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<li><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<li><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
</ul>
<p><strong><a name="[49f]"></a>dhcp_stop</strong>(86 bytes, Stack size 8 btyes, Obj/ipv4_dhcp.o(.text.dhcp_stop))<br>
<br>[Stack]<ul><li>Max Depth = 236 
<li>Call Chain = dhcp_stop &rArr; dhcp_dec_pcb_refcount &rArr; udp_remove  &rArr; memp_free  &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
</ul>
<br>[Called By]<ul>
<li><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</ul>
<p><strong><a name="[4a0]"></a>dhcp_start</strong>(196 bytes, Stack size 12 btyes, Obj/ipv4_dhcp.o(.text.dhcp_start))<br>
<br>[Stack]<ul><li>Max Depth = 616 
<li>Call Chain = dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<li><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<li><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
<li><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<li><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</ul>
<br>[Called By]<ul>
<li><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<li><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</ul>
<p><strong><a name="[4a1]"></a>dhcp_supplied_address</strong>(36 bytes, Stack size 0 btyes, Obj/ipv4_dhcp.o(.text.dhcp_supplied_address))<br>
<p><strong><a name="[4b2]"></a>dhcp_set_struct</strong>(86 bytes, Stack size 0 btyes, Obj/ipv4_dhcp.o(.text.dhcp_set_struct))<br>
<p><strong><a name="[4b6]"></a>etharp_cleanup_netif</strong>(54 bytes, Stack size 0 btyes, Obj/ipv4_etharp.o(.text.etharp_cleanup_netif))<br>
<p><strong><a name="[4b7]"></a>etharp_query</strong>(448 bytes, Stack size 0 btyes, Obj/ipv4_etharp.o(.text.etharp_query))<br>
<br>[Stack]<ul><li>Max Depth = 408 
<li>Call Chain = etharp_query &rArr; etharp_raw &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<li><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<li><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<li><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</ul>
<br>[Called By]<ul>
<li><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<li><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
</ul>
<p><strong><a name="[4b8]"></a>etharp_request</strong>(40 bytes, Stack size 0 btyes, Obj/ipv4_etharp.o(.text.etharp_request))<br>
<br>[Stack]<ul><li>Max Depth = 408 
<li>Call Chain = etharp_request &rArr; etharp_raw &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</ul>
<br>[Called By]<ul>
<li><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports.part.0
</ul>
<p><strong><a name="[4ba]"></a>etharp_tmr</strong>(138 bytes, Stack size 40 btyes, Obj/ipv4_etharp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 448 
<li>Call Chain = etharp_tmr &rArr; etharp_raw &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<li><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</ul>
<p><strong><a name="[4bb]"></a>etharp_find_addr</strong>(100 bytes, Stack size 16 btyes, Obj/ipv4_etharp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 424 
<li>Call Chain = etharp_find_addr &rArr; etharp_raw &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<p><strong><a name="[4bc]"></a>etharp_get_entry</strong>(154 bytes, Stack size 20 btyes, Obj/ipv4_etharp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 216 
<li>Call Chain = etharp_get_entry &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<p><strong><a name="[4bd]"></a>etharp_input</strong>(436 bytes, Stack size 64 btyes, Obj/ipv4_etharp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 656 
<li>Call Chain = etharp_input &rArr; dhcp_arp_reply &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<li><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<li><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<li><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<li><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
</ul>
<br>[Called By]<ul>
<li><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</ul>
<p><strong><a name="[4be]"></a>etharp_output</strong>(302 bytes, Stack size 28 btyes, Obj/ipv4_etharp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 480 
<li>Call Chain = etharp_output &rArr; etharp_output_to_arp_index &rArr; etharp_raw  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<li><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<li><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<li><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<p><strong><a name="[4c0]"></a>icmp_input</strong>(226 bytes, Stack size 36 btyes, Obj/ipv4_icmp.o(.text.icmp_input))<br>
<br>[Stack]<ul><li>Max Depth = 548 
<li>Call Chain = icmp_input &rArr; ip4_output_if &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<li><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<li><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</ul>
<br>[Called By]<ul>
<li><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</ul>
<p><strong><a name="[4c1]"></a>icmp_dest_unreach</strong>(14 bytes, Stack size 4 btyes, Obj/ipv4_icmp.o(.text.icmp_dest_unreach))<br>
<br>[Stack]<ul><li>Max Depth = 556 
<li>Call Chain = icmp_dest_unreach &rArr; icmp_send_response.isra.0 &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response.isra.0
</ul>
<br>[Called By]<ul>
<li><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<li><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</ul>
<p><strong><a name="[4c2]"></a>icmp_time_exceeded</strong>(14 bytes, Stack size 4 btyes, Obj/ipv4_icmp.o(.text.icmp_time_exceeded))<br>
<br>[Stack]<ul><li>Max Depth = 556 
<li>Call Chain = icmp_time_exceeded &rArr; icmp_send_response.isra.0 &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response.isra.0
</ul>
<br>[Called By]<ul>
<li><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<li><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</ul>
<p><strong><a name="[4c6]"></a>igmp_init</strong>(22 bytes, Stack size 0 btyes, Obj/ipv4_igmp.o(.text.igmp_init))<br>
<br>[Called By]<ul>
<li><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</ul>
<p><strong><a name="[4c7]"></a>igmp_start</strong>(54 bytes, Stack size 8 btyes, Obj/ipv4_igmp.o(.text.igmp_start))<br>
<br>[Stack]<ul><li>Max Depth = 240 
<li>Call Chain = igmp_start &rArr; igmp_lookup_group.isra.3 &rArr; memp_malloc  &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group.isra.3
</ul>
<br>[Called By]<ul>
<li><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</ul>
<p><strong><a name="[4c8]"></a>igmp_stop</strong>(48 bytes, Stack size 0 btyes, Obj/ipv4_igmp.o(.text.igmp_stop))<br>
<p><strong><a name="[4c9]"></a>igmp_report_groups</strong>(30 bytes, Stack size 8 btyes, Obj/ipv4_igmp.o(.text.igmp_report_groups))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = igmp_report_groups &rArr; igmp_delaying_member </ul>
<br>[Calls]<ul>
<li><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
</ul>
<br>[Called By]<ul>
<li><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports.part.0
</ul>
<p><strong><a name="[4ca]"></a>igmp_lookfor_group</strong>(30 bytes, Stack size 0 btyes, Obj/ipv4_igmp.o(.text.igmp_lookfor_group))<br>
<br>[Called By]<ul>
<li><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</ul>
<p><strong><a name="[4cb]"></a>igmp_input</strong>(194 bytes, Stack size 20 btyes, Obj/ipv4_igmp.o(.text.igmp_input))<br>
<br>[Stack]<ul><li>Max Depth = 336 
<li>Call Chain = igmp_input &rArr; pbuf_free &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
</ul>
<br>[Called By]<ul>
<li><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</ul>
<p><strong><a name="[4cc]"></a>igmp_joingroup_netif</strong>(196 bytes, Stack size 16 btyes, Obj/ipv4_igmp.o(.text.igmp_joingroup_netif))<br>
<br>[Stack]<ul><li>Max Depth = 592 
<li>Call Chain = igmp_joingroup_netif &rArr; igmp_send &rArr; ip4_output_if_opt  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group.isra.3
<li><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<li><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
</ul>
<p><strong><a name="[4cd]"></a>igmp_joingroup</strong>(132 bytes, Stack size 16 btyes, Obj/ipv4_igmp.o(.text.igmp_joingroup))<br>
<br>[Stack]<ul><li>Max Depth = 608 
<li>Call Chain = igmp_joingroup &rArr; igmp_joingroup_netif &rArr; igmp_send  &rArr; ip4_output_if_opt  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_join_leave_group
<li><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
</ul>
<p><strong><a name="[4ce]"></a>igmp_leavegroup_netif</strong>(232 bytes, Stack size 16 btyes, Obj/ipv4_igmp.o(.text.igmp_leavegroup_netif))<br>
<br>[Stack]<ul><li>Max Depth = 592 
<li>Call Chain = igmp_leavegroup_netif &rArr; igmp_send &rArr; ip4_output_if_opt  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<li><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
</ul>
<p><strong><a name="[4cf]"></a>igmp_leavegroup</strong>(142 bytes, Stack size 20 btyes, Obj/ipv4_igmp.o(.text.igmp_leavegroup))<br>
<br>[Stack]<ul><li>Max Depth = 612 
<li>Call Chain = igmp_leavegroup &rArr; igmp_leavegroup_netif &rArr; igmp_send  &rArr; ip4_output_if_opt  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_join_leave_group
<li><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
</ul>
<p><strong><a name="[4d0]"></a>igmp_tmr</strong>(84 bytes, Stack size 20 btyes, Obj/ipv4_igmp.o(.text.igmp_tmr))<br>
<br>[Stack]<ul><li>Max Depth = 596 
<li>Call Chain = igmp_tmr &rArr; igmp_send &rArr; ip4_output_if_opt  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
</ul>
<p><strong><a name="[4d1]"></a>ip4_set_default_multicast_netif</strong>(6 bytes, Stack size 0 btyes, Obj/ipv4_ip4.o(.text.ip4_set_default_multicast_netif))<br>
<p><strong><a name="[4d2]"></a>ip4_route</strong>(200 bytes, Stack size 0 btyes, Obj/ipv4_ip4.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<li><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<li><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<li><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<li><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<li><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<li><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<li><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<li><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<li><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output
<li><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response.isra.0
</ul>
<p><strong><a name="[4d3]"></a>ip4_input</strong>(796 bytes, Stack size 36 btyes, Obj/ipv4_ip4.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 776 
<li>Call Chain = ip4_input &rArr; tcp_input &rArr; tcp_alloc  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<li><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<li><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<li><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<li><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<li><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<li><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<li><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<li><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<li><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<li><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<li><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<li><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</ul>
<br>[Called By]<ul>
<li><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</ul>
<p><strong><a name="[4d4]"></a>ip4_output_if_opt_src</strong>(390 bytes, Stack size 56 btyes, Obj/ipv4_ip4.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 480 
<li>Call Chain = ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<li><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</ul>
<br>[Called By]<ul>
<li><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt
<li><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<li><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
</ul>
<p><strong><a name="[4d5]"></a>ip4_output_if_opt</strong>(68 bytes, Stack size 40 btyes, Obj/ipv4_ip4.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 520 
<li>Call Chain = ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
</ul>
<br>[Called By]<ul>
<li><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
</ul>
<p><strong><a name="[4d6]"></a>ip4_output_if</strong>(88 bytes, Stack size 32 btyes, Obj/ipv4_ip4.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 512 
<li>Call Chain = ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
</ul>
<br>[Called By]<ul>
<li><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<li><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<li><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<li><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<li><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<li><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<li><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output
<li><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response.isra.0
<li><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</ul>
<p><strong><a name="[4d7]"></a>ip4_output_if_src</strong>(46 bytes, Stack size 32 btyes, Obj/ipv4_ip4.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 512 
<li>Call Chain = ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
</ul>
<br>[Called By]<ul>
<li><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</ul>
<p><strong><a name="[4d8]"></a>ip4_output</strong>(84 bytes, Stack size 40 btyes, Obj/ipv4_ip4.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 552 
<li>Call Chain = ip4_output &rArr; ip4_output_if &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<li><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
</ul>
<p><strong><a name="[4d9]"></a>ip4_addr_isbroadcast_u32</strong>(58 bytes, Stack size 0 btyes, Obj/ipv4_ip4_addr.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<li><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<li><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<li><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<li><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<li><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<li><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<li><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<li><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</ul>
<p><strong><a name="[4da]"></a>ip4_addr_netmask_valid</strong>(56 bytes, Stack size 4 btyes, Obj/ipv4_ip4_addr.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</ul>
<p><strong><a name="[4db]"></a>ip4addr_aton</strong>(400 bytes, Stack size 56 btyes, Obj/ipv4_ip4_addr.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 252 
<li>Call Chain = ip4addr_aton &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dns
<li><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<li><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<li><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<li><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</ul>
<p><strong><a name="[4dc]"></a>ipaddr_addr</strong>(28 bytes, Stack size 8 btyes, Obj/ipv4_ip4_addr.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 260 
<li>Call Chain = ipaddr_addr &rArr; ip4addr_aton &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
</ul>
<br>[Called By]<ul>
<li><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
</ul>
<p><strong><a name="[4dd]"></a>ip4addr_ntoa_r</strong>(166 bytes, Stack size 32 btyes, Obj/ipv4_ip4_addr.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
</ul>
<p><strong><a name="[4de]"></a>ip4addr_ntoa</strong>(12 bytes, Stack size 4 btyes, Obj/ipv4_ip4_addr.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = ip4addr_ntoa &rArr; ip4addr_ntoa_r </ul>
<br>[Calls]<ul>
<li><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa_r
</ul>
<br>[Called By]<ul>
<li><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
<li><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
<li><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<li><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dns
<li><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</ul>
<p><strong><a name="[4e2]"></a>ip_reass_tmr</strong>(48 bytes, Stack size 12 btyes, Obj/ipv4_ip4_frag.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 236 
<li>Call Chain = ip_reass_tmr &rArr; ip_reass_dequeue_datagram &rArr; memp_free  &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
</ul>
<p><strong><a name="[4e3]"></a>ip4_reass</strong>(1354 bytes, Stack size 52 btyes, Obj/ipv4_ip4_frag.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 368 
<li>Call Chain = ip4_reass &rArr; pbuf_free &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<li><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
</ul>
<br>[Called By]<ul>
<li><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</ul>
<p><strong><a name="[4e4]"></a>ip4_frag</strong>(392 bytes, Stack size 64 btyes, Obj/ipv4_ip4_frag.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 424 
<li>Call Chain = ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</ul>
<br>[Called By]<ul>
<li><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<li><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
</ul>
<p><strong><a name="[4e6]"></a>ntp_get_time</strong>(704 bytes, Stack size 140 btyes, Obj/ntp_ntp.o(.text.ntp_get_time))<br>
<br>[Stack]<ul><li>Max Depth = 688 
<li>Call Chain = ntp_get_time &rArr; recvfrom &rArr; lwip_recvfrom  &rArr; netconn_recv  &rArr; netconn_recv_data  &rArr; netconn_close_shutdown  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<li><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
<li><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<li><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<li><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto_ntp_server
<li><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<li><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<li><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<li><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<li><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</ul>
<br>[Called By]<ul>
<li><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_to_rtc
</ul>
<p><strong><a name="[4e7]"></a>ntp_get_local_time</strong>(18 bytes, Stack size 0 btyes, Obj/ntp_ntp.o(.text.ntp_get_local_time))<br>
<p><strong><a name="[4e8]"></a>ntp_sync_to_rtc</strong>(68 bytes, Stack size 8 btyes, Obj/ntp_ntp.o(.text.ntp_sync_to_rtc))<br>
<br>[Stack]<ul><li>Max Depth = 696 
<li>Call Chain = ntp_sync_to_rtc &rArr; ntp_get_time &rArr; recvfrom  &rArr; lwip_recvfrom  &rArr; netconn_recv  &rArr; netconn_recv_data  &rArr; netconn_close_shutdown  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<li><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<li><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<li><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
</ul>
<br>[Called By]<ul>
<li><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_thread_enrty
<li><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync
</ul>
<p><strong><a name="[4eb]"></a>ping</strong>(590 bytes, Stack size 212 btyes, Obj/ping_ping.o(.text.ping))<br>
<br>[Stack]<ul><li>Max Depth = 860 
<li>Call Chain = ping &rArr; lwip_setsockopt &rArr; igmp_leavegroup  &rArr; igmp_leavegroup_netif  &rArr; igmp_send  &rArr; ip4_output_if_opt  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<li><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<li><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<li><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<li><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<li><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<li><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<li><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</ul>
<br>[Called By]<ul>
<li><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ping
</ul>
<p><strong><a name="[4ec]"></a>cmd_ping</strong>(32 bytes, Stack size 4 btyes, Obj/ping_ping.o(.text.cmd_ping))<br>
<br>[Stack]<ul><li>Max Depth = 864 
<li>Call Chain = cmd_ping &rArr; ping &rArr; lwip_setsockopt  &rArr; igmp_leavegroup  &rArr; igmp_leavegroup_netif  &rArr; igmp_send  &rArr; ip4_output_if_opt  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[4ee]"></a>dma_hw_init</strong>(246 bytes, Stack size 0 btyes, bsp_dma.o(.text.dma_hw_init))<br>
<p><strong><a name="[4ef]"></a>dma_intr_enable</strong>(8 bytes, Stack size 4 btyes, bsp_dma.o(.text.dma_intr_enable))<br>
<br>[Calls]<ul>
<li><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_intr_enable
</ul>
<br>[Called By]<ul>
<li><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_hw_init
</ul>
<p><strong><a name="[4f0]"></a>dma_intr_disable</strong>(68 bytes, Stack size 0 btyes, bsp_dma.o(.text.dma_intr_disable))<br>
<p><strong><a name="[4f1]"></a>dma_abort</strong>(124 bytes, Stack size 0 btyes, bsp_dma.o(.text.dma_abort))<br>
<p><strong><a name="[4f3]"></a>dma_channel_intr_status_get</strong>(22 bytes, Stack size 4 btyes, bsp_dma.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_intr_enable
</ul>
<p><strong><a name="[4f4]"></a>dma_intr_status</strong>(24 bytes, Stack size 4 btyes, bsp_dma.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_intr_enable
</ul>
<br>[Called By]<ul>
<li><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_hw_internal
</ul>
<p><strong><a name="[4f5]"></a>dma_intr_clear</strong>(38 bytes, Stack size 0 btyes, bsp_dma.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_hw_internal
</ul>
<p><strong><a name="[4f6]"></a>dma_start</strong>(138 bytes, Stack size 4 btyes, bsp_dma.o(.fast))<br>
<p><strong><a name="[4f7]"></a>dma_is_busy</strong>(32 bytes, Stack size 0 btyes, bsp_dma.o(.fast))<br>
<p><strong><a name="[4f9]"></a>gpio_intr_enable</strong>(28 bytes, Stack size 0 btyes, bsp_gpio.o(.text.gpio_intr_enable))<br>
<br>[Called By]<ul>
<li><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_irq_enable
<li><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_attach_irq
</ul>
<p><strong><a name="[4fa]"></a>gpio_intr_disable</strong>(30 bytes, Stack size 0 btyes, bsp_gpio.o(.text.gpio_intr_disable))<br>
<br>[Called By]<ul>
<li><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_detach_irq
</ul>
<p><strong><a name="[4fb]"></a>gpio_status_get</strong>(8 bytes, Stack size 0 btyes, bsp_gpio.o(.fast))<br>
<p><strong><a name="[4fc]"></a>gpio_intr_clear</strong>(8 bytes, Stack size 0 btyes, bsp_gpio.o(.text.gpio_intr_clear))<br>
<p><strong><a name="[4fd]"></a>gpio_pull_mode_set</strong>(14 bytes, Stack size 0 btyes, bsp_gpio.o(.text.gpio_pull_mode_set))<br>
<p><strong><a name="[4fe]"></a>gpio_hw_init</strong>(350 bytes, Stack size 12 btyes, bsp_gpio.o(.text.gpio_hw_init))<br>
<br>[Calls]<ul>
<li><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pull_mode_set.part.0
</ul>
<br>[Called By]<ul>
<li><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_mode
<li><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_attach_irq
</ul>
<p><strong><a name="[4ff]"></a>gpio_set</strong>(60 bytes, Stack size 4 btyes, bsp_gpio.o(.text.gpio_set))<br>
<br>[Calls]<ul>
<li><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</ul>
<br>[Called By]<ul>
<li><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_write
</ul>
<p><strong><a name="[500]"></a>gpio_get</strong>(62 bytes, Stack size 4 btyes, bsp_gpio.o(.text.gpio_get))<br>
<br>[Calls]<ul>
<li><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</ul>
<br>[Called By]<ul>
<li><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_read
</ul>
<p><strong><a name="[501]"></a>gpio_intr_status</strong>(8 bytes, Stack size 0 btyes, bsp_gpio.o(.fast))<br>
<p><strong><a name="[502]"></a>h2x_hw_init</strong>(80 bytes, Stack size 0 btyes, bsp_h2x.o(.text.h2x_hw_init))<br>
<br>[Called By]<ul>
<li><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_init
<li><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init_private
</ul>
<p><strong><a name="[503]"></a>h2x_read_queue_set</strong>(80 bytes, Stack size 112 btyes, bsp_h2x.o(.text.h2x_read_queue_set))<br>
<p><strong><a name="[504]"></a>h2x_write_queue_set</strong>(80 bytes, Stack size 0 btyes, bsp_h2x.o(.text.h2x_write_queue_set))<br>
<p><strong><a name="[505]"></a>i2c_intr_enable</strong>(62 bytes, Stack size 0 btyes, bsp_i2c.o(.text.i2c_intr_enable))<br>
<p><strong><a name="[506]"></a>i2c_intr_disable</strong>(62 bytes, Stack size 0 btyes, bsp_i2c.o(.text.i2c_intr_disable))<br>
<p><strong><a name="[507]"></a>i2c_status_get</strong>(8 bytes, Stack size 0 btyes, bsp_i2c.o(.fast))<br>
<p><strong><a name="[508]"></a>i2c_intr_clear</strong>(62 bytes, Stack size 0 btyes, bsp_i2c.o(.text.i2c_intr_clear))<br>
<p><strong><a name="[509]"></a>i2c_recv</strong>(128 bytes, Stack size 8 btyes, bsp_i2c.o(.text.i2c_recv))<br>
<br>[Called By]<ul>
<li><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_i2c_xfer
</ul>
<p><strong><a name="[50a]"></a>i2c_send</strong>(102 bytes, Stack size 0 btyes, bsp_i2c.o(.text.i2c_send))<br>
<br>[Called By]<ul>
<li><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_i2c_xfer
</ul>
<p><strong><a name="[50b]"></a>i2c_is_busy</strong>(12 bytes, Stack size 0 btyes, bsp_i2c.o(.text.i2c_is_busy))<br>
<br>[Called By]<ul>
<li><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_i2c_xfer
</ul>
<p><strong><a name="[50c]"></a>i2c_hw_init</strong>(62 bytes, Stack size 12 btyes, bsp_i2c.o(.text.i2c_hw_init))<br>
<br>[Calls]<ul>
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_get
</ul>
<br>[Called By]<ul>
<li><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_i2c_init
</ul>
<p><strong><a name="[50d]"></a>i2c_scl_val_set</strong>(16 bytes, Stack size 0 btyes, bsp_i2c.o(.text.i2c_scl_val_set))<br>
<p><strong><a name="[50e]"></a>i2c_sda_val_set</strong>(16 bytes, Stack size 0 btyes, bsp_i2c.o(.text.i2c_sda_val_set))<br>
<p><strong><a name="[50f]"></a>i2c_intr_status</strong>(48 bytes, Stack size 0 btyes, bsp_i2c.o(.fast))<br>
<p><strong><a name="[511]"></a>scu_tdc_temp_get</strong>(34 bytes, Stack size 0 btyes, bsp_scu.o(.text.scu_tdc_temp_get))<br>
<p><strong><a name="[512]"></a>scu_ice_enable</strong>(14 bytes, Stack size 0 btyes, bsp_scu.o(.text.scu_ice_enable))<br>
<p><strong><a name="[513]"></a>scu_ice_disable</strong>(14 bytes, Stack size 0 btyes, bsp_scu.o(.text.scu_ice_disable))<br>
<p><strong><a name="[514]"></a>scu_pin_mux_set</strong>(20 bytes, Stack size 0 btyes, bsp_scu.o(.text.scu_pin_mux_set))<br>
<br>[Called By]<ul>
<li><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_mode
<li><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_attach_irq
<li><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp3202_init
</ul>
<p><strong><a name="[515]"></a>scu_chipid_get</strong>(14 bytes, Stack size 0 btyes, bsp_scu.o(.text.scu_chipid_get))<br>
<p><strong><a name="[516]"></a>scu_chipid_set</strong>(108 bytes, Stack size 0 btyes, bsp_scu.o(.text.scu_chipid_set))<br>
<p><strong><a name="[517]"></a>scu_reset_record_get</strong>(8 bytes, Stack size 0 btyes, bsp_scu.o(.text.scu_reset_record_get))<br>
<p><strong><a name="[519]"></a>scu_sw_cnt_get</strong>(6 bytes, Stack size 0 btyes, bsp_scu.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_us_delay
<li><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hardclock_get
<li><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cputime_gettime
</ul>
<p><strong><a name="[51a]"></a>scu_sw_cnt_enable</strong>(8 bytes, Stack size 0 btyes, bsp_scu.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<li><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cputime_init
</ul>
<p><strong><a name="[51b]"></a>scu_alien_enable</strong>(14 bytes, Stack size 0 btyes, bsp_scu.o(.fast))<br>
<p><strong><a name="[51c]"></a>scu_alien_disable</strong>(14 bytes, Stack size 0 btyes, bsp_scu.o(.fast))<br>
<p><strong><a name="[51d]"></a>module_reset</strong>(78 bytes, Stack size 4 btyes, bsp_scu.o(.fast))<br>
<p><strong><a name="[51e]"></a>multi_module_reset</strong>(110 bytes, Stack size 4 btyes, bsp_scu.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_reset
</ul>
<p><strong><a name="[51f]"></a>module_enable</strong>(72 bytes, Stack size 0 btyes, bsp_scu.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_init
</ul>
<p><strong><a name="[520]"></a>module_disable</strong>(64 bytes, Stack size 4 btyes, bsp_scu.o(.fast))<br>
<p><strong><a name="[521]"></a>clock_freq_get</strong>(150 bytes, Stack size 0 btyes, bsp_scu.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_init
<li><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_configure
<li><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_hwtimer_control
<li><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_timers_init
<li><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<li><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_standby
<li><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tic_us_get
<li><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_hw_init
<li><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init
<li><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_hw_init
<li><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_reset
<li><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_clk_set
<li><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_hw_init
<li><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cputime_getres
<li><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_hw_init
</ul>
<p><strong><a name="[522]"></a>clock_freq_set</strong>(448 bytes, Stack size 12 btyes, bsp_scu.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_source_set.part.0
</ul>
<br>[Called By]<ul>
<li><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_init
<li><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_standby
<li><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_normal
</ul>
<p><strong><a name="[523]"></a>clock_source_set</strong>(48 bytes, Stack size 4 btyes, bsp_scu.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_source_set.part.0
</ul>
<br>[Called By]<ul>
<li><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_init
</ul>
<p><strong><a name="[524]"></a>clock_source_get</strong>(12 bytes, Stack size 0 btyes, bsp_scu.o(.fast))<br>
<p><strong><a name="[525]"></a>clock_enable</strong>(30 bytes, Stack size 0 btyes, bsp_scu.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_init
</ul>
<p><strong><a name="[526]"></a>clock_disable</strong>(36 bytes, Stack size 0 btyes, bsp_scu.o(.fast))<br>
<p><strong><a name="[527]"></a>clock_reset</strong>(150 bytes, Stack size 4 btyes, bsp_scu.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_init
</ul>
<p><strong><a name="[528]"></a>clock_standby</strong>(78 bytes, Stack size 4 btyes, bsp_scu.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = clock_standby &rArr; clock_freq_set </ul>
<br>[Calls]<ul>
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_get
<li><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_set
</ul>
<p><strong><a name="[529]"></a>clock_normal</strong>(60 bytes, Stack size 4 btyes, bsp_scu.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = clock_normal &rArr; clock_freq_set </ul>
<br>[Calls]<ul>
<li><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_source_set.part.0
<li><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_set
</ul>
<p><strong><a name="[52a]"></a>spi_send</strong>(136 bytes, Stack size 0 btyes, bsp_spi.o(.text.spi_send))<br>
<p><strong><a name="[52b]"></a>spi_hw_init</strong>(196 bytes, Stack size 8 btyes, bsp_spi.o(.text.spi_hw_init))<br>
<br>[Stack]<ul><li>Max Depth = 304 
<li>Call Chain = spi_hw_init &rArr; log_error_id &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
</ul>
<br>[Called By]<ul>
<li><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_configure
</ul>
<p><strong><a name="[52c]"></a>spi_send_recv</strong>(44 bytes, Stack size 8 btyes, bsp_spi.o(.text.spi_send_recv))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = spi_send_recv &rArr; spi_tx_rx_fifo </ul>
<br>[Calls]<ul>
<li><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_rx_fifo
</ul>
<br>[Called By]<ul>
<li><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_xfer
</ul>
<p><strong><a name="[52d]"></a>spi_intr_enable</strong>(62 bytes, Stack size 0 btyes, bsp_spi.o(.text.spi_intr_enable))<br>
<p><strong><a name="[52e]"></a>spi_intr_disable</strong>(62 bytes, Stack size 0 btyes, bsp_spi.o(.text.spi_intr_disable))<br>
<p><strong><a name="[52f]"></a>spi_status_get</strong>(8 bytes, Stack size 0 btyes, bsp_spi.o(.fast))<br>
<p><strong><a name="[530]"></a>spi_intr_clear</strong>(62 bytes, Stack size 0 btyes, bsp_spi.o(.text.spi_intr_clear))<br>
<p><strong><a name="[531]"></a>spi_frame_output_port_set</strong>(22 bytes, Stack size 0 btyes, bsp_spi.o(.text.spi_frame_output_port_set))<br>
<br>[Called By]<ul>
<li><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_init
</ul>
<p><strong><a name="[532]"></a>spi_frame_output_low</strong>(44 bytes, Stack size 4 btyes, bsp_spi.o(.text.spi_frame_output_low))<br>
<br>[Called By]<ul>
<li><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_xfer
</ul>
<p><strong><a name="[533]"></a>spi_frame_output_high</strong>(14 bytes, Stack size 0 btyes, bsp_spi.o(.text.spi_frame_output_high))<br>
<br>[Called By]<ul>
<li><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_xfer
</ul>
<p><strong><a name="[534]"></a>spi_txfifo_not_full</strong>(12 bytes, Stack size 0 btyes, bsp_spi.o(.text.spi_txfifo_not_full))<br>
<p><strong><a name="[535]"></a>spi_tx_start</strong>(22 bytes, Stack size 0 btyes, bsp_spi.o(.text.spi_tx_start))<br>
<p><strong><a name="[536]"></a>spi_tx_stop</strong>(18 bytes, Stack size 0 btyes, bsp_spi.o(.text.spi_tx_stop))<br>
<p><strong><a name="[537]"></a>spi_tx_rx_start</strong>(30 bytes, Stack size 0 btyes, bsp_spi.o(.text.spi_tx_rx_start))<br>
<p><strong><a name="[538]"></a>spi_tx_rx_stop</strong>(14 bytes, Stack size 0 btyes, bsp_spi.o(.text.spi_tx_rx_stop))<br>
<p><strong><a name="[539]"></a>spi_wait_txfifo_empty</strong>(42 bytes, Stack size 0 btyes, bsp_spi.o(.text.spi_wait_txfifo_empty))<br>
<p><strong><a name="[53a]"></a>spi_is_busy</strong>(12 bytes, Stack size 0 btyes, bsp_spi.o(.text.spi_is_busy))<br>
<p><strong><a name="[53b]"></a>spi_rx_fifo_read</strong>(220 bytes, Stack size 0 btyes, bsp_spi.o(.text.spi_rx_fifo_read))<br>
<p><strong><a name="[53c]"></a>spi_tx_fifo_write</strong>(158 bytes, Stack size 0 btyes, bsp_spi.o(.text.spi_tx_fifo_write))<br>
<p><strong><a name="[53d]"></a>spi_tx_rx_fifo</strong>(244 bytes, Stack size 12 btyes, bsp_spi.o(.text.spi_tx_rx_fifo))<br>
<br>[Calls]<ul>
<li><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</ul>
<br>[Called By]<ul>
<li><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_recv
</ul>
<p><strong><a name="[53e]"></a>spi_recv</strong>(44 bytes, Stack size 0 btyes, bsp_spi.o(.text.spi_recv))<br>
<p><strong><a name="[53f]"></a>spi_intr_status</strong>(48 bytes, Stack size 0 btyes, bsp_spi.o(.fast))<br>
<p><strong><a name="[540]"></a>timer_count_get</strong>(16 bytes, Stack size 0 btyes, bsp_timer.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_hwtimer_count_get
</ul>
<p><strong><a name="[541]"></a>timer_hw_init</strong>(172 bytes, Stack size 16 btyes, bsp_timer.o(.text.timer_hw_init))<br>
<br>[Stack]<ul><li>Max Depth = 100 
<li>Call Chain = timer_hw_init &rArr; __fixunssfsi &rArr; __subsf3  &rArr; _fpadd_parts  </ul>
<br>[Calls]<ul>
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_get
<li><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__floatunsisf
<li><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subsf3
<li><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mulsf3
<li><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fixunssfsi
</ul>
<br>[Called By]<ul>
<li><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_hwtimer_start
<li><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_hwtimer_init
</ul>
<p><strong><a name="[542]"></a>timer_intr_enable</strong>(26 bytes, Stack size 0 btyes, bsp_timer.o(.text.timer_intr_enable))<br>
<p><strong><a name="[543]"></a>timer_intr_disable</strong>(26 bytes, Stack size 0 btyes, bsp_timer.o(.text.timer_intr_disable))<br>
<p><strong><a name="[544]"></a>timer_is_timeout</strong>(20 bytes, Stack size 0 btyes, bsp_timer.o(.text.timer_is_timeout))<br>
<p><strong><a name="[545]"></a>timer_pm_adjust</strong>(82 bytes, Stack size 0 btyes, bsp_timer.o(.text.timer_pm_adjust))<br>
<p><strong><a name="[546]"></a>timer_pm_recover</strong>(70 bytes, Stack size 0 btyes, bsp_timer.o(.text.timer_pm_recover))<br>
<p><strong><a name="[547]"></a>tic_init</strong>(54 bytes, Stack size 0 btyes, bsp_timer.o(.text.tic_init))<br>
<p><strong><a name="[548]"></a>timer_intr_status</strong>(8 bytes, Stack size 0 btyes, bsp_timer.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_isr
</ul>
<p><strong><a name="[549]"></a>timer_intr_clear</strong>(58 bytes, Stack size 4 btyes, bsp_timer.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_isr
</ul>
<p><strong><a name="[54a]"></a>timer_start</strong>(40 bytes, Stack size 0 btyes, bsp_timer.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_hwtimer_start
</ul>
<p><strong><a name="[54b]"></a>timer_stop</strong>(34 bytes, Stack size 0 btyes, bsp_timer.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_hwtimer_stop
</ul>
<p><strong><a name="[54c]"></a>tic_start</strong>(22 bytes, Stack size 0 btyes, bsp_timer.o(.fast))<br>
<p><strong><a name="[54d]"></a>tic_stop</strong>(34 bytes, Stack size 0 btyes, bsp_timer.o(.fast))<br>
<p><strong><a name="[54e]"></a>tic_us_get</strong>(28 bytes, Stack size 8 btyes, bsp_timer.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_get
</ul>
<br>[Called By]<ul>
<li><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_hwtimer_start
</ul>
<p><strong><a name="[54f]"></a>uart_mode_set</strong>(30 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_mode_set))<br>
<p><strong><a name="[550]"></a>uart_line_status_get</strong>(24 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_line_status_get))<br>
<p><strong><a name="[551]"></a>uart_intr_id_get</strong>(26 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_intr_id_get))<br>
<p><strong><a name="[552]"></a>uart_line_break_set</strong>(32 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_line_break_set))<br>
<p><strong><a name="[553]"></a>uart_line_break_clear</strong>(32 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_line_break_clear))<br>
<p><strong><a name="[554]"></a>uart_loopback_set</strong>(42 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_loopback_set))<br>
<p><strong><a name="[555]"></a>uart_fifo_enable</strong>(32 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_fifo_enable))<br>
<p><strong><a name="[556]"></a>uart_fifo_disable</strong>(32 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_fifo_disable))<br>
<p><strong><a name="[557]"></a>uart_fifo_init</strong>(60 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_fifo_init))<br>
<p><strong><a name="[558]"></a>uart_hw_init</strong>(184 bytes, Stack size 28 btyes, bsp_uart.o(.text.uart_hw_init))<br>
<br>[Calls]<ul>
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_get
</ul>
<br>[Called By]<ul>
<li><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_configure
<li><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</ul>
<p><strong><a name="[559]"></a>uart_intr_enable</strong>(64 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_intr_enable))<br>
<br>[Called By]<ul>
<li><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_control
</ul>
<p><strong><a name="[55a]"></a>uart_intr_disable</strong>(64 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_intr_disable))<br>
<br>[Called By]<ul>
<li><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_control
</ul>
<p><strong><a name="[55b]"></a>uart_intr_status</strong>(108 bytes, Stack size 0 btyes, bsp_uart.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_irq_handler
<li><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_irq_handler
</ul>
<p><strong><a name="[55c]"></a>console_putc</strong>(42 bytes, Stack size 0 btyes, bsp_uart.o(.text.console_putc))<br>
<br>[Called By]<ul>
<li><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</ul>
<p><strong><a name="[55d]"></a>console_getc</strong>(20 bytes, Stack size 0 btyes, bsp_uart.o(.text.console_getc))<br>
<p><strong><a name="[55e]"></a>uart_putc</strong>(50 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_putc))<br>
<br>[Called By]<ul>
<li><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_putc
</ul>
<p><strong><a name="[55f]"></a>uart_getc</strong>(50 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_getc))<br>
<p><strong><a name="[560]"></a>uart_send</strong>(64 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_send))<br>
<p><strong><a name="[561]"></a>uart_recv</strong>(62 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_recv))<br>
<p><strong><a name="[562]"></a>uart_tx_ready</strong>(28 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_tx_ready))<br>
<p><strong><a name="[563]"></a>uart_ndelay_putc</strong>(18 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_ndelay_putc))<br>
<p><strong><a name="[564]"></a>uart_rx_ready</strong>(28 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_rx_ready))<br>
<br>[Called By]<ul>
<li><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_getc
</ul>
<p><strong><a name="[565]"></a>uart_ndelay_getc</strong>(20 bytes, Stack size 0 btyes, bsp_uart.o(.text.uart_ndelay_getc))<br>
<br>[Called By]<ul>
<li><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_getc
</ul>
<p><strong><a name="[566]"></a>uart_intr_clear</strong>(2 bytes, Stack size 0 btyes, bsp_uart.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_irq_handler
<li><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_irq_handler
</ul>
<p><strong><a name="[567]"></a>wdt_signal_set</strong>(42 bytes, Stack size 0 btyes, bsp_wdt.o(.text.wdt_signal_set))<br>
<p><strong><a name="[568]"></a>wdt_status_clear</strong>(10 bytes, Stack size 0 btyes, bsp_wdt.o(.fast))<br>
<p><strong><a name="[569]"></a>wdt_intr_enable</strong>(14 bytes, Stack size 0 btyes, bsp_wdt.o(.text.wdt_intr_enable))<br>
<p><strong><a name="[56a]"></a>wdt_intr_disable</strong>(14 bytes, Stack size 0 btyes, bsp_wdt.o(.text.wdt_intr_disable))<br>
<p><strong><a name="[56b]"></a>wdt_hw_init</strong>(78 bytes, Stack size 12 btyes, bsp_wdt.o(.text.wdt_hw_init))<br>
<br>[Calls]<ul>
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_get
</ul>
<br>[Called By]<ul>
<li><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_wdt_config
<li><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_wdt_control
</ul>
<p><strong><a name="[56c]"></a>wdt_start</strong>(20 bytes, Stack size 0 btyes, bsp_wdt.o(.text.wdt_start))<br>
<br>[Called By]<ul>
<li><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_wdt_control
</ul>
<p><strong><a name="[56d]"></a>wdt_stop</strong>(14 bytes, Stack size 0 btyes, bsp_wdt.o(.text.wdt_stop))<br>
<br>[Called By]<ul>
<li><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_wdt_control
</ul>
<p><strong><a name="[56e]"></a>chip_reset</strong>(104 bytes, Stack size 12 btyes, bsp_wdt.o(.text.chip_reset))<br>
<br>[Calls]<ul>
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_get
</ul>
<br>[Called By]<ul>
<li><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</ul>
<p><strong><a name="[56f]"></a>wdt_status_get</strong>(8 bytes, Stack size 0 btyes, bsp_wdt.o(.fast))<br>
<p><strong><a name="[570]"></a>wdt_intr_status</strong>(8 bytes, Stack size 0 btyes, bsp_wdt.o(.fast))<br>
<p><strong><a name="[571]"></a>wdt_intr_clear</strong>(10 bytes, Stack size 0 btyes, bsp_wdt.o(.fast))<br>
<p><strong><a name="[572]"></a>wdt_feed</strong>(20 bytes, Stack size 0 btyes, bsp_wdt.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_wdt_control
<li><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_link_change_handler
<li><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_complete_wait
</ul>
<p><strong><a name="[573]"></a>ext_gpio_intr_enable</strong>(28 bytes, Stack size 0 btyes, bsp_ext_gpio.o(.text.ext_gpio_intr_enable))<br>
<p><strong><a name="[574]"></a>ext_gpio_intr_disable</strong>(30 bytes, Stack size 0 btyes, bsp_ext_gpio.o(.text.ext_gpio_intr_disable))<br>
<p><strong><a name="[575]"></a>ext_gpio_status_get</strong>(8 bytes, Stack size 0 btyes, bsp_ext_gpio.o(.fast))<br>
<p><strong><a name="[576]"></a>ext_gpio_intr_clear</strong>(8 bytes, Stack size 0 btyes, bsp_ext_gpio.o(.text.ext_gpio_intr_clear))<br>
<p><strong><a name="[577]"></a>ext_gpio_pull_mode_set</strong>(60 bytes, Stack size 0 btyes, bsp_ext_gpio.o(.text.ext_gpio_pull_mode_set))<br>
<p><strong><a name="[578]"></a>ext_gpio_hw_init</strong>(318 bytes, Stack size 0 btyes, bsp_ext_gpio.o(.text.ext_gpio_hw_init))<br>
<p><strong><a name="[579]"></a>ext_gpio_set</strong>(64 bytes, Stack size 0 btyes, bsp_ext_gpio.o(.text.ext_gpio_set))<br>
<p><strong><a name="[57a]"></a>ext_gpio_get</strong>(60 bytes, Stack size 0 btyes, bsp_ext_gpio.o(.text.ext_gpio_get))<br>
<p><strong><a name="[57b]"></a>ext_gpio_intr_status</strong>(8 bytes, Stack size 0 btyes, bsp_ext_gpio.o(.fast))<br>
<p><strong><a name="[57c]"></a>aes_crypt</strong>(202 bytes, Stack size 0 btyes, crypto_aes.o(.fast))<br>
<p><strong><a name="[57d]"></a>aes_crypt_ctr</strong>(174 bytes, Stack size 0 btyes, crypto_aes.o(.fast))<br>
<p><strong><a name="[57e]"></a>aes_crypt_xts</strong>(174 bytes, Stack size 0 btyes, crypto_aes.o(.fast))<br>
<p><strong><a name="[57f]"></a>cmac_init</strong>(98 bytes, Stack size 0 btyes, crypto_cmac.o(.text.cmac_init))<br>
<p><strong><a name="[580]"></a>cmac_update</strong>(340 bytes, Stack size 0 btyes, crypto_cmac.o(.text.cmac_update))<br>
<p><strong><a name="[581]"></a>cmac_final</strong>(24 bytes, Stack size 0 btyes, crypto_cmac.o(.text.cmac_final))<br>
<p><strong><a name="[582]"></a>ECC_Init</strong>(28 bytes, Stack size 0 btyes, crypto_eccp.o(.text.ECC_Init))<br>
<p><strong><a name="[583]"></a>ECC_PointMul</strong>(82 bytes, Stack size 0 btyes, crypto_eccp.o(.text.ECC_PointMul))<br>
<p><strong><a name="[584]"></a>ECC_PointMul_Shamir</strong>(118 bytes, Stack size 0 btyes, crypto_eccp.o(.text.ECC_PointMul_Shamir))<br>
<p><strong><a name="[585]"></a>ECC_PointAdd</strong>(88 bytes, Stack size 0 btyes, crypto_eccp.o(.text.ECC_PointAdd))<br>
<p><strong><a name="[586]"></a>ECC_PointDouble</strong>(64 bytes, Stack size 0 btyes, crypto_eccp.o(.text.ECC_PointDouble))<br>
<p><strong><a name="[587]"></a>ECC_TestPoint</strong>(44 bytes, Stack size 0 btyes, crypto_eccp.o(.text.ECC_TestPoint))<br>
<p><strong><a name="[588]"></a>ECC_Close</strong>(8 bytes, Stack size 0 btyes, crypto_eccp.o(.text.ECC_Close))<br>
<p><strong><a name="[58a]"></a>hash_init</strong>(44 bytes, Stack size 0 btyes, crypto_hash.o(.fast))<br>
<p><strong><a name="[58b]"></a>hash_update</strong>(194 bytes, Stack size 0 btyes, crypto_hash.o(.fast))<br>
<p><strong><a name="[58c]"></a>hash_final</strong>(266 bytes, Stack size 0 btyes, crypto_hash.o(.fast))<br>
<p><strong><a name="[58d]"></a>hash_key</strong>(142 bytes, Stack size 0 btyes, crypto_hmac.o(.text.hash_key))<br>
<p><strong><a name="[58e]"></a>key_xor_ipad</strong>(34 bytes, Stack size 0 btyes, crypto_hmac.o(.text.key_xor_ipad))<br>
<p><strong><a name="[58f]"></a>key_xor_opad</strong>(34 bytes, Stack size 0 btyes, crypto_hmac.o(.text.key_xor_opad))<br>
<p><strong><a name="[590]"></a>hmac_init</strong>(160 bytes, Stack size 0 btyes, crypto_hmac.o(.text.hmac_init))<br>
<p><strong><a name="[591]"></a>hmac_update</strong>(26 bytes, Stack size 0 btyes, crypto_hmac.o(.text.hmac_update))<br>
<p><strong><a name="[592]"></a>hmac_final</strong>(156 bytes, Stack size 0 btyes, crypto_hmac.o(.text.hmac_final))<br>
<p><strong><a name="[593]"></a>hmac</strong>(80 bytes, Stack size 0 btyes, crypto_hmac.o(.text.hmac))<br>
<p><strong><a name="[597]"></a>pke_init</strong>(3152 bytes, Stack size 44 btyes, crypto_pke.o(.text.pke_init))<br>
<br>[Called By]<ul>
<li><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_crypto_reset
</ul>
<p><strong><a name="[598]"></a>uint8_XOR</strong>(32 bytes, Stack size 0 btyes, crypto_pke.o(.text.uint8_XOR))<br>
<p><strong><a name="[599]"></a>get_valid_bits</strong>(16 bytes, Stack size 0 btyes, crypto_pke.o(.text.get_valid_bits))<br>
<p><strong><a name="[59a]"></a>get_valid_words</strong>(48 bytes, Stack size 0 btyes, crypto_pke.o(.text.get_valid_words))<br>
<p><strong><a name="[59b]"></a>convert_byte_array</strong>(78 bytes, Stack size 0 btyes, crypto_pke.o(.text.convert_byte_array))<br>
<p><strong><a name="[59c]"></a>pke_load_operand</strong>(26 bytes, Stack size 0 btyes, crypto_pke.o(.text.pke_load_operand))<br>
<p><strong><a name="[59d]"></a>pke_read_operand</strong>(26 bytes, Stack size 0 btyes, crypto_pke.o(.text.pke_read_operand))<br>
<p><strong><a name="[59e]"></a>uint32_BigNumCmp</strong>(188 bytes, Stack size 0 btyes, crypto_pke.o(.text.uint32_BigNumCmp))<br>
<p><strong><a name="[59f]"></a>uint8_BigNum_Check_NULL</strong>(38 bytes, Stack size 0 btyes, crypto_pke.o(.text.uint8_BigNum_Check_NULL))<br>
<p><strong><a name="[5a0]"></a>uint32_BigNum_Check_NULL</strong>(34 bytes, Stack size 0 btyes, crypto_pke.o(.text.uint32_BigNum_Check_NULL))<br>
<p><strong><a name="[5a1]"></a>uint32_copy</strong>(26 bytes, Stack size 0 btyes, crypto_pke.o(.text.uint32_copy))<br>
<p><strong><a name="[5a2]"></a>uint32_clear</strong>(28 bytes, Stack size 0 btyes, crypto_pke.o(.text.uint32_clear))<br>
<p><strong><a name="[5a3]"></a>uint32_set</strong>(26 bytes, Stack size 0 btyes, crypto_pke.o(.text.uint32_set))<br>
<p><strong><a name="[5a4]"></a>pke_set_operand_width</strong>(132 bytes, Stack size 0 btyes, crypto_pke.o(.text.pke_set_operand_width))<br>
<p><strong><a name="[5a5]"></a>pke_get_operand_bytes</strong>(6 bytes, Stack size 0 btyes, crypto_pke.o(.text.pke_get_operand_bytes))<br>
<p><strong><a name="[5a6]"></a>pke_add</strong>(316 bytes, Stack size 0 btyes, crypto_pke.o(.text.pke_add))<br>
<p><strong><a name="[5a7]"></a>pke_sub</strong>(280 bytes, Stack size 0 btyes, crypto_pke.o(.text.pke_sub))<br>
<p><strong><a name="[5a8]"></a>pke_mul</strong>(356 bytes, Stack size 0 btyes, crypto_pke.o(.text.pke_mul))<br>
<p><strong><a name="[5a9]"></a>pke_modadd</strong>(388 bytes, Stack size 0 btyes, crypto_pke.o(.text.pke_modadd))<br>
<p><strong><a name="[5aa]"></a>pke_modsub</strong>(388 bytes, Stack size 0 btyes, crypto_pke.o(.text.pke_modsub))<br>
<p><strong><a name="[5ab]"></a>pke_pre_calc_mont_N0</strong>(54 bytes, Stack size 0 btyes, crypto_pke.o(.text.pke_pre_calc_mont_N0))<br>
<p><strong><a name="[5ac]"></a>pke_pre_calc_mont_H</strong>(302 bytes, Stack size 0 btyes, crypto_pke.o(.text.pke_pre_calc_mont_H))<br>
<p><strong><a name="[5ad]"></a>pke_pre_calc_mont_H_without_output</strong>(14 bytes, Stack size 0 btyes, crypto_pke.o(.text.pke_pre_calc_mont_H_without_output))<br>
<p><strong><a name="[5ae]"></a>pke_load_pre_calc_mont_H</strong>(104 bytes, Stack size 0 btyes, crypto_pke.o(.text.pke_load_pre_calc_mont_H))<br>
<p><strong><a name="[5af]"></a>pke_modmul</strong>(388 bytes, Stack size 0 btyes, crypto_pke.o(.text.pke_modmul))<br>
<p><strong><a name="[5b0]"></a>pke_modexp</strong>(400 bytes, Stack size 0 btyes, crypto_pke.o(.text.pke_modexp))<br>
<p><strong><a name="[5b1]"></a>pke_modinv</strong>(272 bytes, Stack size 0 btyes, crypto_pke.o(.text.pke_modinv))<br>
<p><strong><a name="[5b2]"></a>Bigint_div_table_high</strong>(272 bytes, Stack size 0 btyes, crypto_pke.o(.text.Bigint_div_table_high))<br>
<p><strong><a name="[5b3]"></a>Bigint_div_table_low</strong>(262 bytes, Stack size 0 btyes, crypto_pke.o(.text.Bigint_div_table_low))<br>
<p><strong><a name="[5b4]"></a>Get_Multiple2_Number</strong>(56 bytes, Stack size 0 btyes, crypto_pke.o(.text.Get_Multiple2_Number))<br>
<p><strong><a name="[5b5]"></a>Big_Div2n</strong>(230 bytes, Stack size 0 btyes, crypto_pke.o(.text.Big_Div2n))<br>
<p><strong><a name="[5b6]"></a>pke_mod</strong>(856 bytes, Stack size 0 btyes, crypto_pke.o(.text.pke_mod))<br>
<p><strong><a name="[5b7]"></a>Bigint_Check_1</strong>(22 bytes, Stack size 0 btyes, crypto_pke.o(.text.Bigint_Check_1))<br>
<p><strong><a name="[5b8]"></a>Bigint_Check_p_1</strong>(28 bytes, Stack size 0 btyes, crypto_pke.o(.text.Bigint_Check_p_1))<br>
<p><strong><a name="[5b9]"></a>prime_Test_Miller_Rabin</strong>(662 bytes, Stack size 0 btyes, crypto_pke.o(.text.prime_Test_Miller_Rabin))<br>
<p><strong><a name="[5ba]"></a>GetPrime</strong>(216 bytes, Stack size 0 btyes, crypto_pke.o(.text.GetPrime))<br>
<p><strong><a name="[5bb]"></a>pointMul</strong>(800 bytes, Stack size 0 btyes, crypto_pke.o(.text.pointMul))<br>
<p><strong><a name="[5bc]"></a>pointMul_Shamir</strong>(1068 bytes, Stack size 0 btyes, crypto_pke.o(.text.pointMul_Shamir))<br>
<p><strong><a name="[5bd]"></a>pointAdd</strong>(920 bytes, Stack size 0 btyes, crypto_pke.o(.text.pointAdd))<br>
<p><strong><a name="[5be]"></a>pointDouble</strong>(694 bytes, Stack size 0 btyes, crypto_pke.o(.text.pointDouble))<br>
<p><strong><a name="[5bf]"></a>pointVerify</strong>(592 bytes, Stack size 0 btyes, crypto_pke.o(.text.pointVerify))<br>
<p><strong><a name="[5c0]"></a>get_rand</strong>(242 bytes, Stack size 28 btyes, crypto_rng.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</ul>
<br>[Called By]<ul>
<li><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand_get
</ul>
<p><strong><a name="[5c1]"></a>get_rand_uint32</strong>(10 bytes, Stack size 0 btyes, crypto_rng.o(.text.get_rand_uint32))<br>
<p><strong><a name="[5c2]"></a>rand_get</strong>(8 bytes, Stack size 4 btyes, crypto_rng.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = rand_get &rArr; get_rand </ul>
<br>[Calls]<ul>
<li><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rand
</ul>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth0_init
<li><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
</ul>
<p><strong><a name="[5c3]"></a>rsa_crt_keypair_gen</strong>(182 bytes, Stack size 0 btyes, crypto_rsa.o(.fast))<br>
<p><strong><a name="[5c4]"></a>rsa_encrypt</strong>(212 bytes, Stack size 0 btyes, crypto_rsa.o(.fast))<br>
<p><strong><a name="[5c5]"></a>rsa_crt_decrypt</strong>(468 bytes, Stack size 0 btyes, crypto_rsa.o(.fast))<br>
<p><strong><a name="[5c6]"></a>rsa_keypair_gen</strong>(106 bytes, Stack size 0 btyes, crypto_rsa.o(.fast))<br>
<p><strong><a name="[5c7]"></a>rsa_decrypt</strong>(274 bytes, Stack size 0 btyes, crypto_rsa.o(.fast))<br>
<p><strong><a name="[5c8]"></a>rsa_pq_keypair_gen</strong>(262 bytes, Stack size 0 btyes, crypto_rsa.o(.fast))<br>
<p><strong><a name="[5c9]"></a>RSA_ModExp</strong>(172 bytes, Stack size 0 btyes, crypto_rsa_osr.o(.text.RSA_ModExp))<br>
<p><strong><a name="[5ca]"></a>RSA_CRTModExp</strong>(366 bytes, Stack size 0 btyes, crypto_rsa_osr.o(.text.RSA_CRTModExp))<br>
<p><strong><a name="[5cb]"></a>RSA_Get_E1</strong>(86 bytes, Stack size 0 btyes, crypto_rsa_osr.o(.text.RSA_Get_E1))<br>
<p><strong><a name="[5cd]"></a>RSA_Get_E2</strong>(18 bytes, Stack size 0 btyes, crypto_rsa_osr.o(.text.RSA_Get_E2))<br>
<p><strong><a name="[5ce]"></a>CheckValue_0x5a5a5a5a</strong>(60 bytes, Stack size 0 btyes, crypto_rsa_osr.o(.text.CheckValue_0x5a5a5a5a))<br>
<p><strong><a name="[5cf]"></a>RSA_GetKey</strong>(550 bytes, Stack size 0 btyes, crypto_rsa_osr.o(.text.RSA_GetKey))<br>
<p><strong><a name="[5d0]"></a>RSA_GetCRTKey</strong>(804 bytes, Stack size 0 btyes, crypto_rsa_osr.o(.text.RSA_GetCRTKey))<br>
<p><strong><a name="[5d1]"></a>RSA_pq_GetKey</strong>(524 bytes, Stack size 0 btyes, crypto_rsa_osr.o(.text.RSA_pq_GetKey))<br>
<p><strong><a name="[5d2]"></a>sha1_init</strong>(12 bytes, Stack size 0 btyes, crypto_sha1.o(.fast))<br>
<p><strong><a name="[5d3]"></a>sha1_update</strong>(16 bytes, Stack size 0 btyes, crypto_sha1.o(.fast))<br>
<p><strong><a name="[5d4]"></a>sha1_final</strong>(14 bytes, Stack size 0 btyes, crypto_sha1.o(.fast))<br>
<p><strong><a name="[5d5]"></a>sha224_init</strong>(12 bytes, Stack size 0 btyes, crypto_sha224.o(.fast))<br>
<p><strong><a name="[5d6]"></a>sha224_update</strong>(16 bytes, Stack size 0 btyes, crypto_sha224.o(.fast))<br>
<p><strong><a name="[5d7]"></a>sha224_final</strong>(14 bytes, Stack size 0 btyes, crypto_sha224.o(.fast))<br>
<p><strong><a name="[5d8]"></a>sha256_init</strong>(12 bytes, Stack size 0 btyes, crypto_sha256.o(.fast))<br>
<p><strong><a name="[5d9]"></a>sha256_update</strong>(16 bytes, Stack size 0 btyes, crypto_sha256.o(.fast))<br>
<p><strong><a name="[5da]"></a>sha256_final</strong>(14 bytes, Stack size 0 btyes, crypto_sha256.o(.fast))<br>
<p><strong><a name="[5db]"></a>sm2_e_get</strong>(30 bytes, Stack size 0 btyes, crypto_sm2.o(.fast))<br>
<p><strong><a name="[5dc]"></a>sm2_z_get</strong>(42 bytes, Stack size 0 btyes, crypto_sm2.o(.fast))<br>
<p><strong><a name="[5dd]"></a>sm2_keypair_gen</strong>(30 bytes, Stack size 0 btyes, crypto_sm2.o(.fast))<br>
<p><strong><a name="[5de]"></a>sm2_sign</strong>(54 bytes, Stack size 0 btyes, crypto_sm2.o(.fast))<br>
<p><strong><a name="[5df]"></a>sm2_verify</strong>(66 bytes, Stack size 0 btyes, crypto_sm2.o(.fast))<br>
<p><strong><a name="[5e0]"></a>sm2_encrypt</strong>(58 bytes, Stack size 0 btyes, crypto_sm2.o(.fast))<br>
<p><strong><a name="[5e1]"></a>sm2_decrypt</strong>(94 bytes, Stack size 0 btyes, crypto_sm2.o(.fast))<br>
<p><strong><a name="[5e2]"></a>sm2_key_exchange</strong>(130 bytes, Stack size 0 btyes, crypto_sm2.o(.fast))<br>
<p><strong><a name="[5e3]"></a>sm2_pointMul_base</strong>(80 bytes, Stack size 0 btyes, crypto_sm2_osr.o(.text.sm2_pointMul_base))<br>
<p><strong><a name="[5e4]"></a>uint32_BigNum_Add_One</strong>(38 bytes, Stack size 0 btyes, crypto_sm2_osr.o(.text.uint32_BigNum_Add_One))<br>
<p><strong><a name="[5e5]"></a>sm2_kdf_counter_add_one</strong>(24 bytes, Stack size 0 btyes, crypto_sm2_osr.o(.text.sm2_kdf_counter_add_one))<br>
<p><strong><a name="[5e6]"></a>sm2_kdf</strong>(202 bytes, Stack size 0 btyes, crypto_sm2_osr.o(.text.sm2_kdf))<br>
<p><strong><a name="[5e7]"></a>sm2_getZ_osr</strong>(212 bytes, Stack size 0 btyes, crypto_sm2_osr.o(.text.sm2_getZ_osr))<br>
<p><strong><a name="[5e8]"></a>sm2_getE_osr</strong>(84 bytes, Stack size 0 btyes, crypto_sm2_osr.o(.text.sm2_getE_osr))<br>
<p><strong><a name="[5e9]"></a>sm2_keyget</strong>(134 bytes, Stack size 0 btyes, crypto_sm2_osr.o(.text.sm2_keyget))<br>
<p><strong><a name="[5ea]"></a>sm2_sign_with_k</strong>(328 bytes, Stack size 0 btyes, crypto_sm2_osr.o(.text.sm2_sign_with_k))<br>
<p><strong><a name="[5eb]"></a>sm2_sign_osr</strong>(194 bytes, Stack size 0 btyes, crypto_sm2_osr.o(.text.sm2_sign_osr))<br>
<p><strong><a name="[5ec]"></a>sm2_verify_osr</strong>(330 bytes, Stack size 0 btyes, crypto_sm2_osr.o(.text.sm2_verify_osr))<br>
<p><strong><a name="[5ed]"></a>sm2_encrypt_with_k</strong>(352 bytes, Stack size 0 btyes, crypto_sm2_osr.o(.text.sm2_encrypt_with_k))<br>
<p><strong><a name="[5ee]"></a>sm2_encrypt_osr</strong>(114 bytes, Stack size 0 btyes, crypto_sm2_osr.o(.text.sm2_encrypt_osr))<br>
<p><strong><a name="[5ef]"></a>sm2_decrypt_osr</strong>(354 bytes, Stack size 0 btyes, crypto_sm2_osr.o(.text.sm2_decrypt_osr))<br>
<p><strong><a name="[5f0]"></a>sm2_exchangekey_osr</strong>(756 bytes, Stack size 0 btyes, crypto_sm2_osr.o(.text.sm2_exchangekey_osr))<br>
<p><strong><a name="[5f1]"></a>sm3_init</strong>(12 bytes, Stack size 0 btyes, crypto_sm3.o(.fast))<br>
<p><strong><a name="[5f2]"></a>sm3_update</strong>(16 bytes, Stack size 0 btyes, crypto_sm3.o(.fast))<br>
<p><strong><a name="[5f3]"></a>sm3_final</strong>(14 bytes, Stack size 0 btyes, crypto_sm3.o(.fast))<br>
<p><strong><a name="[5f4]"></a>sm4_crypt</strong>(208 bytes, Stack size 0 btyes, crypto_sm4.o(.fast))<br>
<p><strong><a name="[5f5]"></a>sm4_crypt_ctr</strong>(152 bytes, Stack size 0 btyes, crypto_sm4.o(.fast))<br>
<p><strong><a name="[5f6]"></a>sm4_crypt_xts</strong>(152 bytes, Stack size 0 btyes, crypto_sm4.o(.fast))<br>
<p><strong><a name="[5f8]"></a>crypto_hw_init</strong>(2 bytes, Stack size 0 btyes, crypto_crypto.o(.text.crypto_hw_init))<br>
<br>[Called By]<ul>
<li><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_crypto_ioctl
<li><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_crypto_reset
</ul>
<p><strong><a name="[5f9]"></a>crypto_reset</strong>(18 bytes, Stack size 0 btyes, crypto_crypto.o(.text.crypto_reset))<br>
<br>[Called By]<ul>
<li><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_reset
<li><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_crypto_ioctl
<li><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_crypto_reset
</ul>
<p><strong><a name="[5fa]"></a>crypto_hash_reset</strong>(16 bytes, Stack size 0 btyes, crypto_crypto.o(.text.crypto_hash_reset))<br>
<p><strong><a name="[5fb]"></a>crypto_data_pad</strong>(12 bytes, Stack size 0 btyes, crypto_crypto.o(.text.crypto_data_pad))<br>
<br>[Called By]<ul>
<li><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_reset
</ul>
<p><strong><a name="[5fc]"></a>crypto_data_discard</strong>(12 bytes, Stack size 0 btyes, crypto_crypto.o(.text.crypto_data_discard))<br>
<br>[Called By]<ul>
<li><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_reset
</ul>
<p><strong><a name="[5fd]"></a>crypto_master_reset</strong>(12 bytes, Stack size 0 btyes, crypto_crypto.o(.text.crypto_master_reset))<br>
<p><strong><a name="[5fe]"></a>crypto_slave_reset</strong>(12 bytes, Stack size 0 btyes, crypto_crypto.o(.text.crypto_slave_reset))<br>
<p><strong><a name="[5ff]"></a>crypto_reg_symc_lsr_get</strong>(8 bytes, Stack size 0 btyes, crypto_crypto.o(.text.crypto_reg_symc_lsr_get))<br>
<p><strong><a name="[600]"></a>crypto_symc_data_cnt</strong>(10 bytes, Stack size 0 btyes, crypto_crypto.o(.text.crypto_symc_data_cnt))<br>
<p><strong><a name="[601]"></a>crypto_is_busy</strong>(32 bytes, Stack size 0 btyes, crypto_crypto.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_reset
</ul>
<p><strong><a name="[602]"></a>crypto_bridge_is_required</strong>(48 bytes, Stack size 0 btyes, crypto_crypto.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_write
<li><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_read
</ul>
<p><strong><a name="[603]"></a>crypto_frontend_port_addr</strong>(6 bytes, Stack size 0 btyes, crypto_crypto.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_write
<li><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_read
</ul>
<p><strong><a name="[604]"></a>crypto_backend_port_addr</strong>(6 bytes, Stack size 0 btyes, crypto_crypto.o(.fast))<br>
<p><strong><a name="[605]"></a>crypto_fifo_enable</strong>(206 bytes, Stack size 12 btyes, crypto_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = crypto_fifo_enable &rArr; symm_param_cfg </ul>
<br>[Calls]<ul>
<li><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symm_param_cfg
</ul>
<p><strong><a name="[606]"></a>crypto_bridge_enable</strong>(350 bytes, Stack size 24 btyes, crypto_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = crypto_bridge_enable &rArr; symm_param_cfg </ul>
<br>[Calls]<ul>
<li><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symm_param_cfg
</ul>
<br>[Called By]<ul>
<li><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_write
<li><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_read
</ul>
<p><strong><a name="[607]"></a>crypto_bridge_prd_enable</strong>(318 bytes, Stack size 16 btyes, crypto_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = crypto_bridge_prd_enable &rArr; symm_param_cfg </ul>
<br>[Calls]<ul>
<li><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symm_param_cfg
</ul>
<p><strong><a name="[608]"></a>crypto_dma_start</strong>(604 bytes, Stack size 16 btyes, crypto_crypto.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = crypto_dma_start &rArr; symm_param_cfg </ul>
<br>[Calls]<ul>
<li><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symm_param_cfg
</ul>
<p><strong><a name="[609]"></a>bn_mod</strong>(26 bytes, Stack size 0 btyes, crypto_bignum.o(.text.bn_mod))<br>
<p><strong><a name="[60a]"></a>bn_cmp</strong>(14 bytes, Stack size 0 btyes, crypto_bignum.o(.text.bn_cmp))<br>
<p><strong><a name="[60b]"></a>bn_add</strong>(8 bytes, Stack size 0 btyes, crypto_bignum.o(.text.bn_add))<br>
<p><strong><a name="[60c]"></a>bn_sub</strong>(8 bytes, Stack size 0 btyes, crypto_bignum.o(.text.bn_sub))<br>
<p><strong><a name="[60d]"></a>bn_mul</strong>(8 bytes, Stack size 0 btyes, crypto_bignum.o(.text.bn_mul))<br>
<p><strong><a name="[60e]"></a>bn_modadd</strong>(20 bytes, Stack size 0 btyes, crypto_bignum.o(.text.bn_modadd))<br>
<p><strong><a name="[60f]"></a>bn_modsub</strong>(20 bytes, Stack size 0 btyes, crypto_bignum.o(.text.bn_modsub))<br>
<p><strong><a name="[610]"></a>bn_modmul</strong>(48 bytes, Stack size 0 btyes, crypto_bignum.o(.text.bn_modmul))<br>
<p><strong><a name="[611]"></a>bn_modexp</strong>(56 bytes, Stack size 0 btyes, crypto_bignum.o(.text.bn_modexp))<br>
<p><strong><a name="[612]"></a>bn_modinv</strong>(20 bytes, Stack size 0 btyes, crypto_bignum.o(.text.bn_modinv))<br>
<p><strong><a name="[613]"></a>ecc_point_verify</strong>(68 bytes, Stack size 0 btyes, crypto_ecc.o(.text.ecc_point_verify))<br>
<p><strong><a name="[614]"></a>ecc_point_add</strong>(96 bytes, Stack size 0 btyes, crypto_ecc.o(.text.ecc_point_add))<br>
<p><strong><a name="[615]"></a>ecc_point_double</strong>(94 bytes, Stack size 0 btyes, crypto_ecc.o(.text.ecc_point_double))<br>
<p><strong><a name="[616]"></a>ecc_point_mul</strong>(88 bytes, Stack size 0 btyes, crypto_ecc.o(.text.ecc_point_mul))<br>
<p><strong><a name="[617]"></a>ecc_point_shamir</strong>(112 bytes, Stack size 0 btyes, crypto_ecc.o(.text.ecc_point_shamir))<br>
<p><strong><a name="[61a]"></a>norc_port_switch_cmd</strong>(26 bytes, Stack size 0 btyes, norflash_norflash.o(.text.norc_port_switch_cmd))<br>
<p><strong><a name="[61b]"></a>norc_port_switch_xip</strong>(24 bytes, Stack size 0 btyes, norflash_norflash.o(.text.norc_port_switch_xip))<br>
<p><strong><a name="[61c]"></a>norflash_hw_init</strong>(352 bytes, Stack size 4 btyes, norflash_norflash.o(.text.norflash_hw_init))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = norflash_hw_init &rArr; norc_port_switch_xip.part.1 </ul>
<br>[Calls]<ul>
<li><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norc_port_switch_xip.part.1
<li><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norc_port_switch_cmd.part.0
</ul>
<br>[Called By]<ul>
<li><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_init
<li><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</ul>
<p><strong><a name="[61d]"></a>norflash_byte_read</strong>(116 bytes, Stack size 0 btyes, norflash_norflash.o(.text.norflash_byte_read))<br>
<p><strong><a name="[61e]"></a>norflash_byte_write</strong>(226 bytes, Stack size 12 btyes, norflash_norflash.o(.text.norflash_byte_write))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = norflash_byte_write &rArr; norc_port_switch_xip.part.1 </ul>
<br>[Calls]<ul>
<li><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norc_port_switch_xip.part.1
<li><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norc_port_switch_cmd.part.0
</ul>
<br>[Called By]<ul>
<li><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_write
</ul>
<p><strong><a name="[61f]"></a>norflash_read</strong>(150 bytes, Stack size 0 btyes, norflash_norflash.o(.text.norflash_read))<br>
<br>[Called By]<ul>
<li><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_read
</ul>
<p><strong><a name="[620]"></a>norflash_write</strong>(308 bytes, Stack size 36 btyes, norflash_norflash.o(.text.norflash_write))<br>
<br>[Stack]<ul><li>Max Depth = 40 
<li>Call Chain = norflash_write &rArr; norc_port_switch_xip.part.1 </ul>
<br>[Calls]<ul>
<li><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norc_port_switch_xip.part.1
<li><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norc_port_switch_cmd.part.0
</ul>
<br>[Called By]<ul>
<li><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_write
</ul>
<p><strong><a name="[621]"></a>norflash_sector_erase</strong>(198 bytes, Stack size 8 btyes, norflash_norflash.o(.text.norflash_sector_erase))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = norflash_sector_erase &rArr; norc_port_switch_xip.part.1 </ul>
<br>[Calls]<ul>
<li><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norc_port_switch_xip.part.1
<li><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norc_port_switch_cmd.part.0
</ul>
<br>[Called By]<ul>
<li><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_write
</ul>
<p><strong><a name="[622]"></a>norflash_block_erase</strong>(206 bytes, Stack size 0 btyes, norflash_norflash.o(.text.norflash_block_erase))<br>
<p><strong><a name="[623]"></a>norflash_chip_erase</strong>(164 bytes, Stack size 0 btyes, norflash_norflash.o(.text.norflash_chip_erase))<br>
<p><strong><a name="[624]"></a>norflash_capacity_get</strong>(130 bytes, Stack size 0 btyes, norflash_norflash.o(.text.norflash_capacity_get))<br>
<p><strong><a name="[626]"></a>debug_mp_print</strong>(304 bytes, Stack size 0 btyes, norflash_nftl.o(.text.debug_mp_print))<br>
<p><strong><a name="[629]"></a>nftl_write</strong>(1094 bytes, Stack size 0 btyes, norflash_nftl.o(.fast))<br>
<p><strong><a name="[62a]"></a>nftl_read</strong>(194 bytes, Stack size 0 btyes, norflash_nftl.o(.fast))<br>
<p><strong><a name="[62b]"></a>nftl_delete</strong>(198 bytes, Stack size 0 btyes, norflash_nftl.o(.fast))<br>
<p><strong><a name="[62c]"></a>nftl_idle_gc</strong>(12 bytes, Stack size 0 btyes, norflash_nftl.o(.fast))<br>
<p><strong><a name="[62d]"></a>nftl_init</strong>(216 bytes, Stack size 0 btyes, norflash_nftl.o(.fast))<br>
<p><strong><a name="[62e]"></a>nftl_capacity_bytes_get</strong>(12 bytes, Stack size 0 btyes, norflash_nftl.o(.fast))<br>
<p><strong><a name="[635]"></a>usb_sw_reset</strong>(26 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_sw_reset))<br>
<p><strong><a name="[636]"></a>usb_connect</strong>(16 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_connect))<br>
<p><strong><a name="[637]"></a>usb_disconnect</strong>(16 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_disconnect))<br>
<p><strong><a name="[638]"></a>usb_vbus_set</strong>(18 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_vbus_set))<br>
<p><strong><a name="[639]"></a>usb_spd_set</strong>(56 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_spd_set))<br>
<p><strong><a name="[63a]"></a>usb_spd_get</strong>(30 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_spd_get))<br>
<p><strong><a name="[63b]"></a>usb_suspend</strong>(12 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_suspend))<br>
<p><strong><a name="[63c]"></a>usb_addr_set</strong>(22 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_addr_set))<br>
<p><strong><a name="[63d]"></a>usb_config_set</strong>(16 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_config_set))<br>
<p><strong><a name="[63e]"></a>usb_config_is_set</strong>(14 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_config_is_set))<br>
<p><strong><a name="[63f]"></a>usb_config_clear</strong>(16 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_config_clear))<br>
<p><strong><a name="[640]"></a>usb_remote_wakeup_set</strong>(12 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_remote_wakeup_set))<br>
<p><strong><a name="[641]"></a>usb_remote_wakeup_clear</strong>(12 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_remote_wakeup_clear))<br>
<p><strong><a name="[642]"></a>usb_remote_wakeup</strong>(12 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_remote_wakeup))<br>
<p><strong><a name="[643]"></a>usb_lpm_enable</strong>(12 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_lpm_enable))<br>
<p><strong><a name="[644]"></a>usb_lpm_disable</strong>(12 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_lpm_disable))<br>
<p><strong><a name="[645]"></a>usb_test_mode_set</strong>(68 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_test_mode_set))<br>
<p><strong><a name="[646]"></a>usb_ltm_enable</strong>(12 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ltm_enable))<br>
<p><strong><a name="[647]"></a>usb_ltm_disable</strong>(12 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ltm_disable))<br>
<p><strong><a name="[648]"></a>usb_set_belt</strong>(34 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_set_belt))<br>
<p><strong><a name="[649]"></a>usb_u1_enable</strong>(12 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_u1_enable))<br>
<p><strong><a name="[64a]"></a>usb_u2_enable</strong>(12 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_u2_enable))<br>
<p><strong><a name="[64b]"></a>usb_u1_disable</strong>(12 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_u1_disable))<br>
<p><strong><a name="[64c]"></a>usb_u2_disable</strong>(12 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_u2_disable))<br>
<p><strong><a name="[64d]"></a>usb_u3_enter</strong>(12 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_u3_enter))<br>
<p><strong><a name="[64e]"></a>usb_u1_timeout_set</strong>(24 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_u1_timeout_set))<br>
<p><strong><a name="[64f]"></a>usb_u2_timeout_set</strong>(16 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_u2_timeout_set))<br>
<p><strong><a name="[650]"></a>usb_ep0_recv</strong>(154 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ep0_recv))<br>
<p><strong><a name="[651]"></a>usb_ep0_send</strong>(172 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ep0_send))<br>
<p><strong><a name="[652]"></a>usb_ep0_ack</strong>(16 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ep0_ack))<br>
<p><strong><a name="[653]"></a>usb_ep0_stall</strong>(16 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ep0_stall))<br>
<p><strong><a name="[654]"></a>usb_total_entry_get</strong>(10 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_total_entry_get))<br>
<p><strong><a name="[655]"></a>usb_ep_type_set</strong>(26 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ep_type_set))<br>
<p><strong><a name="[656]"></a>usb_ep_dir_set</strong>(26 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ep_dir_set))<br>
<p><strong><a name="[657]"></a>usb_ep_start_entry_set</strong>(114 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ep_start_entry_set))<br>
<p><strong><a name="[658]"></a>usb_ep_entry_set</strong>(28 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ep_entry_set))<br>
<p><strong><a name="[659]"></a>usb_ep_mps_set</strong>(24 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ep_mps_set))<br>
<p><strong><a name="[65a]"></a>usb_ep_stall</strong>(18 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ep_stall))<br>
<p><strong><a name="[65b]"></a>usb_ep_stall_clear</strong>(26 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ep_stall_clear))<br>
<p><strong><a name="[65c]"></a>usb_ep_is_stalled</strong>(16 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ep_is_stalled))<br>
<p><strong><a name="[65d]"></a>usb_ep_seqnum_reset</strong>(18 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ep_seqnum_reset))<br>
<p><strong><a name="[65e]"></a>usb_ep_active</strong>(18 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ep_active))<br>
<p><strong><a name="[65f]"></a>usb_ep_is_active</strong>(16 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ep_is_active))<br>
<p><strong><a name="[660]"></a>usb_ep_reset</strong>(16 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ep_reset))<br>
<p><strong><a name="[661]"></a>usb_ep_is_full</strong>(16 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_ep_is_full))<br>
<p><strong><a name="[662]"></a>usb_pio_trash</strong>(38 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_pio_trash))<br>
<p><strong><a name="[663]"></a>usb_stream_disable</strong>(14 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_stream_disable))<br>
<p><strong><a name="[664]"></a>usb_edma_start</strong>(264 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_edma_start))<br>
<p><strong><a name="[665]"></a>usb_edma_is_busy</strong>(8 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_edma_is_busy))<br>
<p><strong><a name="[666]"></a>usb_dma_init</strong>(16 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_dma_init))<br>
<p><strong><a name="[667]"></a>usb_hw_init</strong>(44 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_hw_init))<br>
<p><strong><a name="[668]"></a>usb_phy_cfg</strong>(20 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_phy_cfg))<br>
<p><strong><a name="[669]"></a>set_reg</strong>(16 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[66a]"></a>clear_reg</strong>(18 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[66b]"></a>usb_ep_bycnt_get</strong>(18 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[66c]"></a>usb_ep_bycnt_set</strong>(28 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[66d]"></a>usb_ep_0byte_send</strong>(16 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[66e]"></a>usb_ep_is_empty</strong>(16 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[66f]"></a>usb_pio_recv</strong>(38 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[670]"></a>usb_pio_send</strong>(168 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[671]"></a>usb_stream_check</strong>(126 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[672]"></a>usb_stream_start</strong>(26 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[673]"></a>usb_stream_accepted</strong>(174 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[674]"></a>usb_stream_resume</strong>(150 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[675]"></a>usb_dma_start</strong>(126 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[676]"></a>usb_dma_is_busy</strong>(14 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[677]"></a>usb_intr_enable</strong>(178 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[678]"></a>usb_intr_disable</strong>(182 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[679]"></a>usb_intr_status</strong>(188 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[67a]"></a>usb_intr_clear</strong>(182 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[67b]"></a>ahci_rfis_base_get</strong>(8 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_rfis_base_get))<br>
<p><strong><a name="[67c]"></a>ahci_intr_enable</strong>(18 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_intr_enable))<br>
<br>[Called By]<ul>
<li><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_ioctl
<li><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_init
</ul>
<p><strong><a name="[67d]"></a>ahci_intr_disable</strong>(20 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_intr_disable))<br>
<br>[Called By]<ul>
<li><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_ioctl
</ul>
<p><strong><a name="[67e]"></a>ahci_intr_status</strong>(68 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_intr_status))<br>
<br>[Called By]<ul>
<li><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_isr
</ul>
<p><strong><a name="[67f]"></a>ahci_intr_clear</strong>(24 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_intr_clear))<br>
<br>[Called By]<ul>
<li><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_isr
</ul>
<p><strong><a name="[680]"></a>ahci_device_probe</strong>(24 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_device_probe))<br>
<p><strong><a name="[681]"></a>ahci_port_init</strong>(542 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_port_init))<br>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hba_reset
</ul>
<p><strong><a name="[682]"></a>ahci_port_mode_set</strong>(192 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_port_mode_set))<br>
<p><strong><a name="[683]"></a>ahci_auto_partial2slumber_set</strong>(64 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_auto_partial2slumber_set))<br>
<p><strong><a name="[684]"></a>ahci_port_state_set</strong>(328 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_port_state_set))<br>
<p><strong><a name="[685]"></a>ahci_addr_mode_get</strong>(20 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_addr_mode_get))<br>
<p><strong><a name="[686]"></a>ahci_addr_mode_set</strong>(88 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_addr_mode_set))<br>
<p><strong><a name="[687]"></a>ahci_sector_per_block_set</strong>(100 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_sector_per_block_set))<br>
<p><strong><a name="[688]"></a>ahci_puis_device_spinup_set</strong>(82 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_puis_device_spinup_set))<br>
<p><strong><a name="[689]"></a>ahci_puis_feature_set</strong>(100 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_puis_feature_set))<br>
<p><strong><a name="[68a]"></a>ahci_sata_feature_set</strong>(338 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_sata_feature_set))<br>
<p><strong><a name="[68b]"></a>ahci_cache_feature_set</strong>(132 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_cache_feature_set))<br>
<p><strong><a name="[68c]"></a>ahci_apm_feature_set</strong>(126 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_apm_feature_set))<br>
<p><strong><a name="[68d]"></a>ahci_lkah_feature_set</strong>(132 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_lkah_feature_set))<br>
<p><strong><a name="[68e]"></a>ahci_revert_to_default_feature_set</strong>(100 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_revert_to_default_feature_set))<br>
<p><strong><a name="[68f]"></a>ahci_error_info_print</strong>(2 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_error_info_print))<br>
<p><strong><a name="[690]"></a>ahci_hex_print</strong>(2 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_hex_print))<br>
<br>[Called By]<ul>
<li><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_fis_rx
</ul>
<p><strong><a name="[691]"></a>ahci_cmd_status_clear</strong>(98 bytes, Stack size 4 btyes, sata_host_ahci.o(.fast))<br>
<p><strong><a name="[692]"></a>ahci_is_device_probed</strong>(36 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_is_device_probed))<br>
<p><strong><a name="[693]"></a>ahci_port_serr_clear</strong>(14 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_port_serr_clear))<br>
<br>[Called By]<ul>
<li><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_isr
</ul>
<p><strong><a name="[694]"></a>ahci_port_sntf_clear</strong>(14 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_port_sntf_clear))<br>
<p><strong><a name="[695]"></a>ahci_port_sntf_get</strong>(14 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_port_sntf_get))<br>
<p><strong><a name="[696]"></a>ahci_reg_is_flush</strong>(30 bytes, Stack size 4 btyes, sata_host_ahci.o(.text.ahci_reg_is_flush))<br>
<br>[Called By]<ul>
<li><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_isr
</ul>
<p><strong><a name="[697]"></a>ahci_reg_cmd_get</strong>(12 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_reg_cmd_get))<br>
<p><strong><a name="[698]"></a>ahci_reg_ci_get</strong>(12 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_reg_ci_get))<br>
<br>[Called By]<ul>
<li><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_cmd_pending_check
<li><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_isr
</ul>
<p><strong><a name="[699]"></a>ahci_reg_ci_set</strong>(20 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_reg_ci_set))<br>
<p><strong><a name="[69a]"></a>ahci_reg_is_get</strong>(12 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_reg_is_get))<br>
<p><strong><a name="[69b]"></a>ahci_reg_tfd_get</strong>(12 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_reg_tfd_get))<br>
<p><strong><a name="[69c]"></a>ahci_reg_sts_get</strong>(12 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_reg_sts_get))<br>
<p><strong><a name="[69d]"></a>ahci_reg_err_get</strong>(12 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_reg_err_get))<br>
<p><strong><a name="[69e]"></a>ahci_ccs_get</strong>(20 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_ccs_get))<br>
<br>[Called By]<ul>
<li><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_isr
</ul>
<p><strong><a name="[69f]"></a>ahci_dsfis_base_get</strong>(8 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_dsfis_base_get))<br>
<p><strong><a name="[6a0]"></a>ahci_sdbfis_base_get</strong>(8 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_sdbfis_base_get))<br>
<p><strong><a name="[6a1]"></a>ahci_feature_set_exception</strong>(76 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_feature_set_exception))<br>
<p><strong><a name="[6a2]"></a>ahci_sleep_standby_handle</strong>(92 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_sleep_standby_handle))<br>
<p><strong><a name="[6a3]"></a>ahci_xfer_mode_set</strong>(162 bytes, Stack size 28 btyes, sata_host_ahci.o(.text.ahci_xfer_mode_set))<br>
<br>[Stack]<ul><li>Max Depth = 380 
<li>Call Chain = ahci_xfer_mode_set &rArr; ahci_cmd_issue &rArr; ahci_cmd_complete_wait  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_set_features
<li><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_issue
<li><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_slot_free
</ul>
<br>[Called By]<ul>
<li><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_probe
</ul>
<p><strong><a name="[6a4]"></a>ahci_log_ext_read</strong>(94 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_log_ext_read))<br>
<p><strong><a name="[6a5]"></a>identify_revise</strong>(318 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.identify_revise))<br>
<br>[Calls]<ul>
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_identify_read
</ul>
<p><strong><a name="[6a6]"></a>ahci_identify_read</strong>(124 bytes, Stack size 20 btyes, sata_host_ahci.o(.text.ahci_identify_read))<br>
<br>[Stack]<ul><li>Max Depth = 372 
<li>Call Chain = ahci_identify_read &rArr; ahci_cmd_issue &rArr; ahci_cmd_complete_wait  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_identify
<li><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_issue
<li><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;identify_revise
<li><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_slot_free
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
</ul>
<br>[Called By]<ul>
<li><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_probe
<li><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hba_reset
</ul>
<p><strong><a name="[6a7]"></a>ahci_smart</strong>(66 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_smart))<br>
<p><strong><a name="[6a8]"></a>ahci_read_max_address_ext</strong>(134 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_read_max_address_ext))<br>
<p><strong><a name="[6a9]"></a>ahci_read_max_address</strong>(130 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_read_max_address))<br>
<p><strong><a name="[6aa]"></a>ahci_read_verify_sectors</strong>(66 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_read_verify_sectors))<br>
<p><strong><a name="[6ab]"></a>ahci_read_verify_sectors_ext</strong>(68 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_read_verify_sectors_ext))<br>
<p><strong><a name="[6ac]"></a>ahci_security</strong>(66 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_security))<br>
<p><strong><a name="[6ad]"></a>ahci_passthru</strong>(212 bytes, Stack size 20 btyes, sata_host_ahci.o(.text.ahci_passthru))<br>
<br>[Stack]<ul><li>Max Depth = 372 
<li>Call Chain = ahci_passthru &rArr; ahci_cmd_issue &rArr; ahci_cmd_complete_wait  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_inout_data_lba
<li><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_issue
<li><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_slot_free
<li><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_non_data_lba
</ul>
<br>[Called By]<ul>
<li><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hba_reset
</ul>
<p><strong><a name="[6ae]"></a>ahci_hba_reset</strong>(408 bytes, Stack size 36 btyes, sata_host_ahci.o(.text.ahci_hba_reset))<br>
<br>[Stack]<ul><li>Max Depth = 408 
<li>Call Chain = ahci_hba_reset &rArr; ahci_identify_read &rArr; ahci_cmd_issue  &rArr; ahci_cmd_complete_wait  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_port_init
<li><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_link_change_handler
<li><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_identify_read
<li><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<li><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_passthru
<li><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_error_handler
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<li><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_port_reset
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
</ul>
<br>[Called By]<ul>
<li><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_probe
<li><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_error_recover
<li><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hw_init
</ul>
<p><strong><a name="[6af]"></a>ahci_device_intr_enable</strong>(256 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_device_intr_enable))<br>
<p><strong><a name="[6b0]"></a>ahci_sw_reset</strong>(284 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_sw_reset))<br>
<p><strong><a name="[6b1]"></a>ahci_hw_init</strong>(330 bytes, Stack size 16 btyes, sata_host_ahci.o(.text.ahci_hw_init))<br>
<br>[Stack]<ul><li>Max Depth = 424 
<li>Call Chain = ahci_hw_init &rArr; ahci_hba_reset &rArr; ahci_identify_read  &rArr; ahci_cmd_issue  &rArr; ahci_cmd_complete_wait  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hba_reset
<li><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
</ul>
<br>[Called By]<ul>
<li><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_init
</ul>
<p><strong><a name="[6b2]"></a>ahci_clock_set</strong>(6 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_clock_set))<br>
<br>[Called By]<ul>
<li><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_init
</ul>
<p><strong><a name="[6b3]"></a>ahci_clock_get</strong>(6 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_clock_get))<br>
<p><strong><a name="[6b4]"></a>ahci_wait_timeout_set</strong>(6 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_wait_timeout_set))<br>
<br>[Called By]<ul>
<li><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_init
</ul>
<p><strong><a name="[6b5]"></a>ahci_speed_set</strong>(46 bytes, Stack size 0 btyes, sata_host_ahci.o(.text.ahci_speed_set))<br>
<br>[Called By]<ul>
<li><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_init
</ul>
<p><strong><a name="[6b6]"></a>ahci_prdt_setup</strong>(144 bytes, Stack size 36 btyes, sata_host_ahci.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_prdt_pre_setup
</ul>
<p><strong><a name="[6b7]"></a>ahci_prdt_setup2</strong>(138 bytes, Stack size 36 btyes, sata_host_ahci.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_rw_ncq
<li><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_rw_dma
<li><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_rw_multi
</ul>
<p><strong><a name="[6b8]"></a>ahci_prdt_pre_setup</strong>(122 bytes, Stack size 4 btyes, sata_host_ahci.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 40 
<li>Call Chain = ahci_prdt_pre_setup &rArr; ahci_prdt_setup </ul>
<br>[Calls]<ul>
<li><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_prdt_setup
</ul>
<br>[Called By]<ul>
<li><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_inout_data_lba
<li><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_dma_ncq_lba
</ul>
<p><strong><a name="[6b9]"></a>ahci_hba_get</strong>(4 bytes, Stack size 0 btyes, sata_host_ahci.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_register
<li><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_reset
</ul>
<p><strong><a name="[6ba]"></a>ahci_reg_sact_set</strong>(20 bytes, Stack size 0 btyes, sata_host_ahci.o(.fast))<br>
<p><strong><a name="[6bb]"></a>ahci_reg_sact_get</strong>(12 bytes, Stack size 0 btyes, sata_host_ahci.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_cmd_pending_check
<li><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_isr
</ul>
<p><strong><a name="[6bc]"></a>ahci_link_change_handler</strong>(228 bytes, Stack size 20 btyes, sata_host_ahci.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 316 
<li>Call Chain = ahci_link_change_handler &rArr; log_error_id &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_feed
<li><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
</ul>
<br>[Called By]<ul>
<li><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_isr
<li><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_port_reset
<li><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hba_reset
</ul>
<p><strong><a name="[6bd]"></a>ahci_port_reset</strong>(294 bytes, Stack size 20 btyes, sata_host_ahci.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 336 
<li>Call Chain = ahci_port_reset &rArr; ahci_link_change_handler &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_link_change_handler
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
</ul>
<br>[Called By]<ul>
<li><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hba_reset
</ul>
<p><strong><a name="[6be]"></a>ahci_cmd_complete_wait</strong>(270 bytes, Stack size 52 btyes, sata_host_ahci.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = ahci_cmd_complete_wait &rArr; log_error_id &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_feed
<li><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_slot_free
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
<li><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_nonvolatile
<li><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_fis_rx
</ul>
<br>[Called By]<ul>
<li><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_issue
</ul>
<p><strong><a name="[6bf]"></a>ahci_cache_flush</strong>(184 bytes, Stack size 20 btyes, sata_host_ahci.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 372 
<li>Call Chain = ahci_cache_flush &rArr; ahci_cmd_issue &rArr; ahci_cmd_complete_wait  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_flush_cache
<li><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_issue
<li><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_flush_cache_ext
<li><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_slot_free
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
</ul>
<br>[Called By]<ul>
<li><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_sync
</ul>
<p><strong><a name="[6c0]"></a>ahci_data_set_trim</strong>(108 bytes, Stack size 20 btyes, sata_host_ahci.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 372 
<li>Call Chain = ahci_data_set_trim &rArr; ahci_cmd_issue &rArr; ahci_cmd_complete_wait  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_data_set_management_trim
<li><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_slot_free
<li><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_issue
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
</ul>
<br>[Called By]<ul>
<li><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_trim
</ul>
<p><strong><a name="[6c1]"></a>ahci_raw_rw</strong>(168 bytes, Stack size 44 btyes, sata_host_ahci.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 112 
<li>Call Chain = ahci_raw_rw &rArr; ahci_cmd_rw_dma &rArr; ahci_prdt_setup2  </ul>
<br>[Calls]<ul>
<li><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_rw_dma
<li><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_rw_ncq
</ul>
<p><strong><a name="[6c2]"></a>ahci_sector_read</strong>(196 bytes, Stack size 28 btyes, sata_host_ahci.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 372 
<li>Call Chain = ahci_sector_read &rArr; ahci_cmd_read_sector_lba48 &rArr; ahci_inout_data_lba  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_read_sector_lba48
<li><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_read_sector_lba28
<li><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_read_multi_lba48
<li><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_read_multi_lba28
<li><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_read_ncq
</ul>
<br>[Called By]<ul>
<li><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_read
</ul>
<p><strong><a name="[6c3]"></a>ahci_sector_write</strong>(206 bytes, Stack size 28 btyes, sata_host_ahci.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 372 
<li>Call Chain = ahci_sector_write &rArr; ahci_cmd_write_sector_lba48 &rArr; ahci_inout_data_lba  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_write_sector_lba48
<li><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_write_sector_lba28
<li><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_write_multi_lba48
<li><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_write_ncq
<li><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_write_multi_lba28
<li><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
</ul>
<br>[Called By]<ul>
<li><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_write
</ul>
<p><strong><a name="[6c4]"></a>ahci_ncq_queue_abort</strong>(114 bytes, Stack size 24 btyes, sata_host_ahci.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 376 
<li>Call Chain = ahci_ncq_queue_abort &rArr; ahci_cmd_issue &rArr; ahci_cmd_complete_wait  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_ncq_queue_mgmt
<li><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_slot_free
<li><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_issue
<li><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
</ul>
<p><strong><a name="[6c5]"></a>ahci_ncq_deadline_handle</strong>(106 bytes, Stack size 24 btyes, sata_host_ahci.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 376 
<li>Call Chain = ahci_ncq_deadline_handle &rArr; ahci_cmd_issue &rArr; ahci_cmd_complete_wait  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_ncq_queue_mgmt
<li><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_slot_free
<li><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_issue
<li><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
</ul>
<p><strong><a name="[6c6]"></a>ahci_error_recover</strong>(204 bytes, Stack size 8 btyes, sata_host_ahci.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hba_reset
</ul>
<br>[Called By]<ul>
<li><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_error_handler
</ul>
<p><strong><a name="[6c7]"></a>ahci_error_handler</strong>(182 bytes, Stack size 12 btyes, sata_host_ahci.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 308 
<li>Call Chain = ahci_error_handler &rArr; log_error_id &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
<li><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_error_recover
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</ul>
<br>[Called By]<ul>
<li><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_trim
<li><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_sync
<li><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_write
<li><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_read
<li><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_probe
<li><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hba_reset
</ul>
<p><strong><a name="[6c8]"></a>ahci_cmd_slot_is_empty</strong>(78 bytes, Stack size 4 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</ul>
<br>[Called By]<ul>
<li><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_trim
<li><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_sync
<li><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_write
<li><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_read
</ul>
<p><strong><a name="[6c9]"></a>ahci_tfd_read</strong>(28 bytes, Stack size 0 btyes, sata_host_ahci_cmd.o(.text.ahci_tfd_read))<br>
<p><strong><a name="[6ca]"></a>ahci_cmd_identify</strong>(72 bytes, Stack size 0 btyes, sata_host_ahci_cmd.o(.text.ahci_cmd_identify))<br>
<br>[Stack]<ul><li>Max Depth = 332 
<li>Call Chain = ahci_cmd_identify &rArr; ahci_inout_data_lba &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_inout_data_lba
</ul>
<br>[Called By]<ul>
<li><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_identify_read
</ul>
<p><strong><a name="[6cb]"></a>ahci_cmd_sw_reset</strong>(72 bytes, Stack size 0 btyes, sata_host_ahci_cmd.o(.text.ahci_cmd_sw_reset))<br>
<p><strong><a name="[6cc]"></a>ahci_cmd_exec_diag</strong>(40 bytes, Stack size 0 btyes, sata_host_ahci_cmd.o(.text.ahci_cmd_exec_diag))<br>
<p><strong><a name="[6cd]"></a>ahci_cmd_intr_enable</strong>(38 bytes, Stack size 0 btyes, sata_host_ahci_cmd.o(.text.ahci_cmd_intr_enable))<br>
<p><strong><a name="[6ce]"></a>ahci_cmd_set_features</strong>(54 bytes, Stack size 4 btyes, sata_host_ahci_cmd.o(.text.ahci_cmd_set_features))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = ahci_cmd_set_features &rArr; ahci_non_data_lba </ul>
<br>[Calls]<ul>
<li><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_non_data_lba
</ul>
<br>[Called By]<ul>
<li><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_xfer_mode_set
</ul>
<p><strong><a name="[6cf]"></a>ahci_cmd_read_log_ext</strong>(84 bytes, Stack size 0 btyes, sata_host_ahci_cmd.o(.text.ahci_cmd_read_log_ext))<br>
<p><strong><a name="[6d0]"></a>ahci_cmd_set_multiple_mode</strong>(50 bytes, Stack size 0 btyes, sata_host_ahci_cmd.o(.text.ahci_cmd_set_multiple_mode))<br>
<p><strong><a name="[6d1]"></a>ahci_cmd_sleep_standby</strong>(76 bytes, Stack size 0 btyes, sata_host_ahci_cmd.o(.text.ahci_cmd_sleep_standby))<br>
<p><strong><a name="[6d2]"></a>ahci_cmd_smart</strong>(164 bytes, Stack size 0 btyes, sata_host_ahci_cmd.o(.text.ahci_cmd_smart))<br>
<p><strong><a name="[6d3]"></a>ahci_cmd_security</strong>(114 bytes, Stack size 0 btyes, sata_host_ahci_cmd.o(.text.ahci_cmd_security))<br>
<p><strong><a name="[6d4]"></a>ahci_cmd_slot_free</strong>(10 bytes, Stack size 0 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_write
<li><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_read
<li><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_complete_wait
<li><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cache_flush
<li><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_data_set_trim
<li><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_ncq_queue_abort
<li><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_ncq_deadline_handle
<li><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_xfer_mode_set
<li><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_identify_read
<li><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_passthru
</ul>
<p><strong><a name="[6d5]"></a>ahci_cmd_slot_get</strong>(20 bytes, Stack size 0 btyes, sata_host_ahci_cmd.o(.fast))<br>
<p><strong><a name="[6d6]"></a>ahci_usable_cmd_slot_get</strong>(120 bytes, Stack size 20 btyes, sata_host_ahci_cmd.o(.fast))<br>
<p><strong><a name="[6d7]"></a>ahci_fis_rx</strong>(156 bytes, Stack size 12 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hex_print
</ul>
<br>[Called By]<ul>
<li><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_complete_wait
</ul>
<p><strong><a name="[6d8]"></a>ahci_cmd_issue</strong>(62 bytes, Stack size 4 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 352 
<li>Call Chain = ahci_cmd_issue &rArr; ahci_cmd_complete_wait &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_complete_wait
</ul>
<br>[Called By]<ul>
<li><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_write
<li><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_read
<li><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cache_flush
<li><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_data_set_trim
<li><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_ncq_queue_abort
<li><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_ncq_deadline_handle
<li><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_xfer_mode_set
<li><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_identify_read
<li><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_passthru
</ul>
<p><strong><a name="[6d9]"></a>ahci_non_data_lba</strong>(404 bytes, Stack size 24 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_passthru
<li><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_flush_cache
<li><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_flush_cache_ext
<li><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_read_max_address_ext
<li><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_read_max_address
<li><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_read_verify_sectors
<li><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_read_verify_sectors_ext
<li><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_set_features
</ul>
<p><strong><a name="[6da]"></a>ahci_inout_data_lba</strong>(348 bytes, Stack size 36 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 332 
<li>Call Chain = ahci_inout_data_lba &rArr; log_error_id &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_prdt_pre_setup
<li><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__umoddi3
<li><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivdi3
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<li><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
</ul>
<br>[Called By]<ul>
<li><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_passthru
<li><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_read_sector_lba28
<li><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_read_sector_lba48
<li><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_write_sector_lba28
<li><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_write_sector_lba48
<li><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_read_multi_lba28
<li><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_read_multi_lba48
<li><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_write_multi_lba28
<li><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_write_multi_lba48
<li><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_data_set_management_trim
<li><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_identify
</ul>
<p><strong><a name="[6db]"></a>ahci_dma_ncq_lba</strong>(214 bytes, Stack size 12 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 52 
<li>Call Chain = ahci_dma_ncq_lba &rArr; ahci_prdt_pre_setup &rArr; ahci_prdt_setup  </ul>
<br>[Calls]<ul>
<li><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_prdt_pre_setup
</ul>
<br>[Called By]<ul>
<li><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_ncq_queue_mgmt
<li><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_read_ncq
<li><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_write_ncq
</ul>
<p><strong><a name="[6dc]"></a>ahci_cmd_flush_cache</strong>(64 bytes, Stack size 4 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = ahci_cmd_flush_cache &rArr; ahci_non_data_lba </ul>
<br>[Calls]<ul>
<li><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_non_data_lba
</ul>
<br>[Called By]<ul>
<li><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cache_flush
</ul>
<p><strong><a name="[6dd]"></a>ahci_cmd_flush_cache_ext</strong>(64 bytes, Stack size 4 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = ahci_cmd_flush_cache_ext &rArr; ahci_non_data_lba </ul>
<br>[Calls]<ul>
<li><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_non_data_lba
</ul>
<br>[Called By]<ul>
<li><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cache_flush
</ul>
<p><strong><a name="[6de]"></a>ahci_cmd_read_sector_lba28</strong>(108 bytes, Stack size 4 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 336 
<li>Call Chain = ahci_cmd_read_sector_lba28 &rArr; ahci_inout_data_lba &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_inout_data_lba
</ul>
<br>[Called By]<ul>
<li><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_sector_read
</ul>
<p><strong><a name="[6df]"></a>ahci_cmd_read_sector_lba48</strong>(88 bytes, Stack size 12 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = ahci_cmd_read_sector_lba48 &rArr; ahci_inout_data_lba &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_inout_data_lba
</ul>
<br>[Called By]<ul>
<li><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_sector_read
</ul>
<p><strong><a name="[6e0]"></a>ahci_cmd_write_sector_lba28</strong>(108 bytes, Stack size 4 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 336 
<li>Call Chain = ahci_cmd_write_sector_lba28 &rArr; ahci_inout_data_lba &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_inout_data_lba
</ul>
<br>[Called By]<ul>
<li><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_sector_write
</ul>
<p><strong><a name="[6e1]"></a>ahci_cmd_write_sector_lba48</strong>(88 bytes, Stack size 12 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = ahci_cmd_write_sector_lba48 &rArr; ahci_inout_data_lba &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_inout_data_lba
</ul>
<br>[Called By]<ul>
<li><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_sector_write
</ul>
<p><strong><a name="[6e2]"></a>ahci_cmd_ncq_queue_mgmt</strong>(118 bytes, Stack size 12 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 64 
<li>Call Chain = ahci_cmd_ncq_queue_mgmt &rArr; ahci_dma_ncq_lba &rArr; ahci_prdt_pre_setup  &rArr; ahci_prdt_setup  </ul>
<br>[Calls]<ul>
<li><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_dma_ncq_lba
<li><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</ul>
<br>[Called By]<ul>
<li><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_ncq_queue_abort
<li><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_ncq_deadline_handle
</ul>
<p><strong><a name="[6e3]"></a>ahci_cmd_rw_ncq</strong>(246 bytes, Stack size 28 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 64 
<li>Call Chain = ahci_cmd_rw_ncq &rArr; ahci_prdt_setup2 </ul>
<br>[Calls]<ul>
<li><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_prdt_setup2
</ul>
<br>[Called By]<ul>
<li><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_raw_rw
</ul>
<p><strong><a name="[6e4]"></a>ahci_cmd_rw_dma</strong>(248 bytes, Stack size 32 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 68 
<li>Call Chain = ahci_cmd_rw_dma &rArr; ahci_prdt_setup2 </ul>
<br>[Calls]<ul>
<li><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_prdt_setup2
</ul>
<br>[Called By]<ul>
<li><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_raw_rw
</ul>
<p><strong><a name="[6e5]"></a>ahci_cmd_rw_multi</strong>(216 bytes, Stack size 28 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 64 
<li>Call Chain = ahci_cmd_rw_multi &rArr; ahci_prdt_setup2 </ul>
<br>[Calls]<ul>
<li><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_prdt_setup2
</ul>
<p><strong><a name="[6e6]"></a>ahci_quick_rw</strong>(138 bytes, Stack size 8 btyes, sata_host_ahci_cmd.o(.fast))<br>
<p><strong><a name="[6e7]"></a>ahci_cmd_read_ncq</strong>(138 bytes, Stack size 12 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 64 
<li>Call Chain = ahci_cmd_read_ncq &rArr; ahci_dma_ncq_lba &rArr; ahci_prdt_pre_setup  &rArr; ahci_prdt_setup  </ul>
<br>[Calls]<ul>
<li><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_dma_ncq_lba
</ul>
<br>[Called By]<ul>
<li><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_sector_read
</ul>
<p><strong><a name="[6e8]"></a>ahci_cmd_write_ncq</strong>(138 bytes, Stack size 12 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 64 
<li>Call Chain = ahci_cmd_write_ncq &rArr; ahci_dma_ncq_lba &rArr; ahci_prdt_pre_setup  &rArr; ahci_prdt_setup  </ul>
<br>[Calls]<ul>
<li><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_dma_ncq_lba
</ul>
<br>[Called By]<ul>
<li><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_sector_write
</ul>
<p><strong><a name="[6e9]"></a>ahci_cmd_read_multi_lba28</strong>(78 bytes, Stack size 8 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 340 
<li>Call Chain = ahci_cmd_read_multi_lba28 &rArr; ahci_inout_data_lba &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_inout_data_lba
</ul>
<br>[Called By]<ul>
<li><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_sector_read
</ul>
<p><strong><a name="[6ea]"></a>ahci_cmd_read_multi_lba48</strong>(78 bytes, Stack size 12 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = ahci_cmd_read_multi_lba48 &rArr; ahci_inout_data_lba &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_inout_data_lba
</ul>
<br>[Called By]<ul>
<li><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_sector_read
</ul>
<p><strong><a name="[6eb]"></a>ahci_cmd_write_multi_lba28</strong>(78 bytes, Stack size 8 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 340 
<li>Call Chain = ahci_cmd_write_multi_lba28 &rArr; ahci_inout_data_lba &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_inout_data_lba
</ul>
<br>[Called By]<ul>
<li><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_sector_write
</ul>
<p><strong><a name="[6ec]"></a>ahci_cmd_write_multi_lba48</strong>(78 bytes, Stack size 12 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = ahci_cmd_write_multi_lba48 &rArr; ahci_inout_data_lba &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_inout_data_lba
</ul>
<br>[Called By]<ul>
<li><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_sector_write
</ul>
<p><strong><a name="[6ed]"></a>ahci_cmd_data_set_management_trim</strong>(92 bytes, Stack size 8 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 340 
<li>Call Chain = ahci_cmd_data_set_management_trim &rArr; ahci_inout_data_lba &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_inout_data_lba
</ul>
<br>[Called By]<ul>
<li><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_data_set_trim
</ul>
<p><strong><a name="[6ee]"></a>ahci_cmd_read_max_address_ext</strong>(54 bytes, Stack size 4 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = ahci_cmd_read_max_address_ext &rArr; ahci_non_data_lba </ul>
<br>[Calls]<ul>
<li><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_non_data_lba
</ul>
<p><strong><a name="[6ef]"></a>ahci_cmd_read_max_address</strong>(40 bytes, Stack size 4 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = ahci_cmd_read_max_address &rArr; ahci_non_data_lba </ul>
<br>[Calls]<ul>
<li><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_non_data_lba
</ul>
<p><strong><a name="[6f0]"></a>ahci_cmd_read_verify_sectors</strong>(58 bytes, Stack size 4 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = ahci_cmd_read_verify_sectors &rArr; ahci_non_data_lba </ul>
<br>[Calls]<ul>
<li><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_non_data_lba
</ul>
<p><strong><a name="[6f1]"></a>ahci_cmd_read_verify_sectors_ext</strong>(66 bytes, Stack size 8 btyes, sata_host_ahci_cmd.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = ahci_cmd_read_verify_sectors_ext &rArr; ahci_non_data_lba </ul>
<br>[Calls]<ul>
<li><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_non_data_lba
</ul>
<p><strong><a name="[6f2]"></a>delay_init</strong>(10 bytes, Stack size 0 btyes, common_delay.o(.text.delay_init))<br>
<p><strong><a name="[6f3]"></a>udelay</strong>(42 bytes, Stack size 0 btyes, common_delay.o(.fast))<br>
<p><strong><a name="[6f4]"></a>delay</strong>(18 bytes, Stack size 0 btyes, common_delay.o(.fast))<br>
<p><strong><a name="[6f5]"></a>mdelay</strong>(14 bytes, Stack size 0 btyes, common_delay.o(.fast))<br>
<p><strong><a name="[6f7]"></a>log_st_init</strong>(188 bytes, Stack size 0 btyes, common_log.o(.text.log_st_init))<br>
<p><strong><a name="[6f8]"></a>log_init</strong>(264 bytes, Stack size 0 btyes, common_log.o(.text.log_init))<br>
<p><strong><a name="[6f9]"></a>log_write</strong>(356 bytes, Stack size 64 btyes, common_log.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 104 
<li>Call Chain = log_write &rArr; norflash_write &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_write
<li><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_byte_write
<li><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_sector_erase
</ul>
<br>[Called By]<ul>
<li><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_st_data.part.0
<li><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_nonvolatile
</ul>
<p><strong><a name="[6fb]"></a>log_read</strong>(158 bytes, Stack size 32 btyes, common_log.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_read
</ul>
<p><strong><a name="[6fc]"></a>log_nonvolatile</strong>(174 bytes, Stack size 188 btyes, common_log.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 292 
<li>Call Chain = log_nonvolatile &rArr; log_write &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
<li><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_write
<li><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_complete_wait
<li><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
</ul>
<p><strong><a name="[6fd]"></a>log_error_id</strong>(20 bytes, Stack size 4 btyes, common_log.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 296 
<li>Call Chain = log_error_id &rArr; log_nonvolatile &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_nonvolatile
</ul>
<br>[Called By]<ul>
<li><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_link_change_handler
<li><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_port_reset
<li><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_complete_wait
<li><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cache_flush
<li><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_data_set_trim
<li><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_sector_write
<li><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_ncq_queue_abort
<li><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_ncq_deadline_handle
<li><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_error_handler
<li><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_identify_read
<li><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hba_reset
<li><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hw_init
<li><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_inout_data_lba
<li><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_clk_set
<li><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_frame_transmit
<li><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_frame_recv_poll
<li><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_tx_queue_init
<li><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_rx_queue_init
<li><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_hw_init
</ul>
<p><strong><a name="[6fe]"></a>log_st_data</strong>(28 bytes, Stack size 4 btyes, common_log.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 64 
<li>Call Chain = log_st_data &rArr; ascii_to_dec </ul>
<br>[Calls]<ul>
<li><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii_to_dec
</ul>
<p><strong><a name="[700]"></a>mem_hw_init</strong>(40 bytes, Stack size 4 btyes, common_memcpy_hw.o(.text.mem_hw_init))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = mem_hw_init &rArr; intr_disconnect &rArr; intr_cache_flush.part.0  </ul>
<br>[Calls]<ul>
<li><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_disconnect
<li><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_intr_enable
</ul>
<br>[Called By]<ul>
<li><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmem_init
</ul>
<p><strong><a name="[701]"></a>memcpy_hw</strong>(136 bytes, Stack size 28 btyes, common_memcpy_hw.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = memcpy_hw &rArr; mem_hw_internal &rArr; dma_intr_status  </ul>
<br>[Calls]<ul>
<li><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_hw_internal
</ul>
<br>[Called By]<ul>
<li><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy
</ul>
<p><strong><a name="[702]"></a>memset_hw</strong>(132 bytes, Stack size 32 btyes, common_memcpy_hw.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 40 
<li>Call Chain = memset_hw &rArr; mem_hw_internal &rArr; dma_intr_status  </ul>
<br>[Calls]<ul>
<li><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_hw_internal
</ul>
<br>[Called By]<ul>
<li><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemset
</ul>
<p><strong><a name="[704]"></a>perf_is_done</strong>(22 bytes, Stack size 0 btyes, common_perf.o(.text.perf_is_done))<br>
<p><strong><a name="[705]"></a>perf_statistic</strong>(60 bytes, Stack size 0 btyes, common_perf.o(.text.perf_statistic))<br>
<p><strong><a name="[706]"></a>perf_result</strong>(300 bytes, Stack size 0 btyes, common_perf.o(.text.perf_result))<br>
<p><strong><a name="[707]"></a>perf_start</strong>(122 bytes, Stack size 0 btyes, common_perf.o(.text.perf_start))<br>
<p><strong><a name="[709]"></a>mp_info_get</strong>(72 bytes, Stack size 0 btyes, component_mp.o(.text.mp_info_get))<br>
<p><strong><a name="[70a]"></a>dfu_init</strong>(118 bytes, Stack size 0 btyes, component_mp.o(.text.dfu_init))<br>
<p><strong><a name="[70b]"></a>dfu_update</strong>(58 bytes, Stack size 0 btyes, component_mp.o(.text.dfu_update))<br>
<p><strong><a name="[70c]"></a>dfu_final</strong>(68 bytes, Stack size 0 btyes, component_mp.o(.text.dfu_final))<br>
<p><strong><a name="[70d]"></a>spiflash_block_erase</strong>(154 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.spiflash_block_erase))<br>
<p><strong><a name="[70e]"></a>spiflash_chip_erase</strong>(120 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.spiflash_chip_erase))<br>
<p><strong><a name="[70f]"></a>spiflash_capacity_get</strong>(162 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.spiflash_capacity_get))<br>
<p><strong><a name="[711]"></a>snfc_cmd_send</strong>(164 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.snfc_cmd_send))<br>
<p><strong><a name="[712]"></a>snfc_cmd_fast_send</strong>(22 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.snfc_cmd_fast_send))<br>
<p><strong><a name="[713]"></a>snfc_port_switch</strong>(22 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.snfc_port_switch))<br>
<p><strong><a name="[714]"></a>snfc_dma_en_set</strong>(20 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.snfc_dma_en_set))<br>
<p><strong><a name="[715]"></a>snfc_cmd_cmplt_sts_is_set</strong>(12 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.snfc_cmd_cmplt_sts_is_set))<br>
<p><strong><a name="[716]"></a>snfc_cmd_cmplt_sts_clr</strong>(10 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.snfc_cmd_cmplt_sts_clr))<br>
<p><strong><a name="[717]"></a>spiflash_hw_init</strong>(666 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.spiflash_hw_init))<br>
<p><strong><a name="[718]"></a>spiflash_hw_conf_get</strong>(154 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.spiflash_hw_conf_get))<br>
<p><strong><a name="[719]"></a>spiflash_write_enable</strong>(66 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.spiflash_write_enable))<br>
<p><strong><a name="[71a]"></a>spiflash_status_poll</strong>(66 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.spiflash_status_poll))<br>
<p><strong><a name="[71b]"></a>spiflash_read_cmd_send</strong>(322 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.spiflash_read_cmd_send))<br>
<p><strong><a name="[71c]"></a>spiflash_byte_read</strong>(104 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.spiflash_byte_read))<br>
<p><strong><a name="[71d]"></a>spiflash_byte_write</strong>(182 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.spiflash_byte_write))<br>
<p><strong><a name="[71e]"></a>spiflash_read</strong>(180 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.spiflash_read))<br>
<p><strong><a name="[71f]"></a>spiflash_write</strong>(300 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.spiflash_write))<br>
<p><strong><a name="[720]"></a>spiflash_sector_erase</strong>(148 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.spiflash_sector_erase))<br>
<p><strong><a name="[722]"></a>sata_diagnose</strong>(24 bytes, Stack size 0 btyes, sata_device_sata.o(.text.sata_diagnose))<br>
<p><strong><a name="[723]"></a>sata_ctrller_reset</strong>(76 bytes, Stack size 0 btyes, sata_device_sata.o(.text.sata_ctrller_reset))<br>
<p><strong><a name="[724]"></a>sata_host_detec</strong>(144 bytes, Stack size 0 btyes, sata_device_sata.o(.text.sata_host_detec))<br>
<p><strong><a name="[725]"></a>sata_host_detec_status_get</strong>(12 bytes, Stack size 0 btyes, sata_device_sata.o(.text.sata_host_detec_status_get))<br>
<p><strong><a name="[726]"></a>sata_slumber</strong>(14 bytes, Stack size 0 btyes, sata_device_sata.o(.text.sata_slumber))<br>
<p><strong><a name="[727]"></a>sata_lower_power_enter</strong>(12 bytes, Stack size 0 btyes, sata_device_sata.o(.text.sata_lower_power_enter))<br>
<p><strong><a name="[728]"></a>sata_power_mode_set</strong>(20 bytes, Stack size 0 btyes, sata_device_sata.o(.text.sata_power_mode_set))<br>
<p><strong><a name="[729]"></a>sata_sleep_enable</strong>(12 bytes, Stack size 0 btyes, sata_device_sata.o(.text.sata_sleep_enable))<br>
<p><strong><a name="[72a]"></a>sata_sleep_disable</strong>(12 bytes, Stack size 0 btyes, sata_device_sata.o(.text.sata_sleep_disable))<br>
<p><strong><a name="[72b]"></a>sata_speed_set</strong>(30 bytes, Stack size 0 btyes, sata_device_sata.o(.text.sata_speed_set))<br>
<p><strong><a name="[72c]"></a>sata_err_bits_get</strong>(8 bytes, Stack size 0 btyes, sata_device_sata.o(.text.sata_err_bits_get))<br>
<p><strong><a name="[72d]"></a>sata_err_bits_clr</strong>(8 bytes, Stack size 0 btyes, sata_device_sata.o(.text.sata_err_bits_clr))<br>
<p><strong><a name="[72e]"></a>sata_hw_init</strong>(86 bytes, Stack size 0 btyes, sata_device_sata.o(.text.sata_hw_init))<br>
<p><strong><a name="[72f]"></a>sata_prdt_addr_set</strong>(60 bytes, Stack size 0 btyes, sata_device_sata.o(.text.sata_prdt_addr_set))<br>
<p><strong><a name="[730]"></a>sata_dma_abort</strong>(14 bytes, Stack size 0 btyes, sata_device_sata.o(.text.sata_dma_abort))<br>
<p><strong><a name="[731]"></a>secu_psw_addr_get</strong>(104 bytes, Stack size 0 btyes, sata_device_sata.o(.text.secu_psw_addr_get))<br>
<p><strong><a name="[732]"></a>sata_remainder_cnt</strong>(10 bytes, Stack size 0 btyes, sata_device_sata.o(.text.sata_remainder_cnt))<br>
<p><strong><a name="[733]"></a>sata_speed_get</strong>(12 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[734]"></a>sata_cmd_illegal</strong>(14 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[735]"></a>sata_cmd_abort</strong>(12 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[736]"></a>sata_is_lba_dev</strong>(12 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[737]"></a>sata_cmd_code_get</strong>(10 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[738]"></a>sata_cmd_fea_get</strong>(12 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[739]"></a>sata_cmd_tag_get</strong>(12 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[73a]"></a>sata_cmd_lba_get</strong>(66 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[73b]"></a>sata_cmd_cnt_get</strong>(48 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[73c]"></a>sata_cmd_device_region_get</strong>(10 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[73d]"></a>sata_cmd_chs_head_get</strong>(12 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[73e]"></a>sata_cmd_chs_cylinder_get</strong>(12 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[73f]"></a>sata_cmd_chs_sector_get</strong>(10 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[740]"></a>sata_nd_cmd_d2h_send</strong>(14 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[741]"></a>sata_ncq_cmd_d2h_send</strong>(24 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[742]"></a>sata_h2d_parse</strong>(122 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[744]"></a>sata_status</strong>(294 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[745]"></a>sata_is_busy</strong>(32 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[746]"></a>sata_io</strong>(816 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[747]"></a>sata_intr_enable</strong>(8 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[748]"></a>sata_intr_disable</strong>(14 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[749]"></a>sata_intr_status</strong>(8 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[74a]"></a>sata_intr_clear</strong>(8 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[74b]"></a>emcc_ctrl_get</strong>(18 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_ctrl_get))<br>
<p><strong><a name="[74c]"></a>emcc_ctrl_set</strong>(18 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_ctrl_set))<br>
<p><strong><a name="[74d]"></a>emcc_intmask_get</strong>(26 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_intmask_get))<br>
<p><strong><a name="[74e]"></a>emcc_intmask_set</strong>(26 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_intmask_set))<br>
<p><strong><a name="[74f]"></a>emcc_intsien_get</strong>(26 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_intsien_get))<br>
<p><strong><a name="[750]"></a>emcc_intsien_set</strong>(26 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_intsien_set))<br>
<p><strong><a name="[751]"></a>emcc_cmd_send</strong>(110 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[752]"></a>emcc_direct_res_long_get</strong>(56 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_direct_res_long_get))<br>
<p><strong><a name="[753]"></a>emcc_ecsd_byte_get</strong>(208 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_ecsd_byte_get))<br>
<p><strong><a name="[754]"></a>emcc_bus_timing_set</strong>(198 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_bus_timing_set))<br>
<p><strong><a name="[755]"></a>emcc_tuning_ds_set</strong>(34 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_tuning_ds_set))<br>
<p><strong><a name="[756]"></a>emcc_tuning_clk_set</strong>(28 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_tuning_clk_set))<br>
<p><strong><a name="[757]"></a>emcc_bus_mode_set</strong>(248 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_bus_mode_set))<br>
<p><strong><a name="[758]"></a>emcc_bus_mode_reset</strong>(50 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_bus_mode_reset))<br>
<p><strong><a name="[759]"></a>emmc_intr_wait</strong>(66 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emmc_intr_wait))<br>
<p><strong><a name="[75a]"></a>emcc_clk_div_set</strong>(16 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_clk_div_set))<br>
<p><strong><a name="[75b]"></a>emcc_phy_div_set</strong>(36 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_phy_div_set))<br>
<p><strong><a name="[75c]"></a>emcc_phy_div_enable</strong>(38 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_phy_div_enable))<br>
<p><strong><a name="[75d]"></a>emcc_phy_div_disable</strong>(38 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_phy_div_disable))<br>
<p><strong><a name="[75e]"></a>emcc_idle_wait</strong>(66 bytes, Stack size 0 btyes, emmc_emcc.o(.text.emcc_idle_wait))<br>
<p><strong><a name="[75f]"></a>emcc_direct_res_short_get</strong>(18 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[760]"></a>emcc_queue_res_get</strong>(26 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[761]"></a>emcc_qcmd_fifo_status_check</strong>(44 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[762]"></a>emcc_dcmd_reg_status_check</strong>(34 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[763]"></a>emcc_device_busy_check</strong>(36 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[764]"></a>emcc_fifo_reset</strong>(38 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[765]"></a>emcc_reset</strong>(38 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[766]"></a>emcc_junk_enable</strong>(26 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[767]"></a>emcc_junk_disable</strong>(24 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[768]"></a>emcc_force_clk_enable</strong>(24 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[769]"></a>emcc_force_clk_disable</strong>(24 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[76a]"></a>emcc_wr_fifo_state_get</strong>(34 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[76b]"></a>emcc_intr_check</strong>(34 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[76c]"></a>emcc_intr_mask</strong>(32 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[76d]"></a>emcc_intr_unmask</strong>(30 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[76e]"></a>emcc_intr_enable</strong>(48 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[76f]"></a>emcc_intr_disable</strong>(36 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[770]"></a>emcc_intr_status</strong>(24 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[771]"></a>emcc_intr_clear</strong>(24 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[772]"></a>emcc_data_port_get</strong>(16 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[773]"></a>emcc_data_port_belong</strong>(12 bytes, Stack size 0 btyes, emmc_emcc.o(.fast))<br>
<p><strong><a name="[774]"></a>gmac_wol_wakeup_event_set</strong>(34 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_wol_wakeup_event_set))<br>
<br>[Called By]<ul>
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[775]"></a>gmac_wol_wakeup_event_get</strong>(22 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_wol_wakeup_event_get))<br>
<p><strong><a name="[776]"></a>gmac_wol_mode_enter</strong>(78 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_wol_mode_enter))<br>
<br>[Called By]<ul>
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[777]"></a>gmac_wol_mode_exit</strong>(62 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_wol_mode_exit))<br>
<br>[Called By]<ul>
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[778]"></a>gmac_wol_state_poll</strong>(24 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_wol_state_poll))<br>
<br>[Called By]<ul>
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[779]"></a>gmac_speed_duplex_set</strong>(92 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_speed_duplex_set))<br>
<br>[Called By]<ul>
<li><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_link_update
</ul>
<p><strong><a name="[77a]"></a>gmac_statistics_get</strong>(158 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_statistics_get))<br>
<br>[Called By]<ul>
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[77b]"></a>gmac_tx_queue_init</strong>(230 bytes, Stack size 24 btyes, gmac_gmac.o(.text.gmac_tx_queue_init))<br>
<br>[Stack]<ul><li>Max Depth = 320 
<li>Call Chain = gmac_tx_queue_init &rArr; log_error_id &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth0_init
<li><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[77c]"></a>gmac_rx_queue_init</strong>(236 bytes, Stack size 28 btyes, gmac_gmac.o(.text.gmac_rx_queue_init))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = gmac_rx_queue_init &rArr; log_error_id &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth0_init
<li><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[77d]"></a>gmac_hw_init</strong>(108 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_hw_init))<br>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth0_init
<li><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[77e]"></a>gmac_hw_deinit</strong>(34 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_hw_deinit))<br>
<br>[Called By]<ul>
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[77f]"></a>gmac_phy_addr_set</strong>(12 bytes, Stack size 0 btyes, gmac_gmac.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth0_init
<li><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[780]"></a>gmac_addr_filter_set</strong>(88 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_addr_filter_set))<br>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth0_init
<li><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[781]"></a>gmac_addr_filter_get</strong>(22 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_addr_filter_get))<br>
<br>[Called By]<ul>
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[782]"></a>gmac_hash_filter_set</strong>(292 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_hash_filter_set))<br>
<br>[Called By]<ul>
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[783]"></a>gmac_hash_filter_get</strong>(24 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_hash_filter_get))<br>
<br>[Called By]<ul>
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[784]"></a>gmac_mac_addr_set</strong>(66 bytes, Stack size 8 btyes, gmac_gmac.o(.text.gmac_mac_addr_set))<br>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth0_init
<li><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[785]"></a>gmac_mac_addr_get</strong>(70 bytes, Stack size 8 btyes, gmac_gmac.o(.text.gmac_mac_addr_get))<br>
<br>[Called By]<ul>
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[786]"></a>gmac_flow_ctrl_enable</strong>(134 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_flow_ctrl_enable))<br>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth0_init
<li><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[787]"></a>gmac_flow_ctrl_disable</strong>(32 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_flow_ctrl_disable))<br>
<br>[Called By]<ul>
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[788]"></a>gmac_tx_enable</strong>(28 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_tx_enable))<br>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth0_init
<li><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[789]"></a>gmac_tx_disable</strong>(24 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_tx_disable))<br>
<br>[Called By]<ul>
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[78a]"></a>gmac_rx_enable</strong>(32 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_rx_enable))<br>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth0_init
<li><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[78b]"></a>gmac_rx_disable</strong>(24 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_rx_disable))<br>
<br>[Called By]<ul>
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[78c]"></a>gmac_jumbo_frame_enable</strong>(24 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_jumbo_frame_enable))<br>
<br>[Called By]<ul>
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[78d]"></a>gmac_jumbo_frame_disable</strong>(22 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_jumbo_frame_disable))<br>
<br>[Called By]<ul>
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[78e]"></a>gmac_chksum_offload_set</strong>(78 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_chksum_offload_set))<br>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth0_init
<li><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[78f]"></a>gmac_checksum_offload_get</strong>(18 bytes, Stack size 0 btyes, gmac_gmac.o(.text.gmac_checksum_offload_get))<br>
<p><strong><a name="[790]"></a>gmac_wol_wakeup_frame_filter_set</strong>(404 bytes, Stack size 24 btyes, gmac_gmac.o(.text.gmac_wol_wakeup_frame_filter_set))<br>
<br>[Called By]<ul>
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[791]"></a>gmac_phy_mmd_clk_set</strong>(76 bytes, Stack size 12 btyes, gmac_gmac.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 308 
<li>Call Chain = gmac_phy_mmd_clk_set &rArr; log_error_id &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_get
</ul>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth0_init
<li><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[792]"></a>gmac_phy_mmd_read16</strong>(76 bytes, Stack size 0 btyes, gmac_gmac.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvell_phy_init
<li><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvell_phy_intr_disable
<li><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvell_phy_intr_status
<li><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvell_phy_intr_clear
<li><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvell_phy_link_status_get
<li><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvell_phy_speed_duplex_change
<li><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtl8211_phy_intr_disable
<li><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtl8211_phy_intr_status
<li><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtl8211_phy_intr_clear
<li><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtl8211_phy_link_status_get
<li><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtl8211_phy_speed_duplex_change
</ul>
<p><strong><a name="[793]"></a>gmac_phy_mmd_write16</strong>(94 bytes, Stack size 0 btyes, gmac_gmac.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvell_phy_intr_enable
<li><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvell_phy_init
<li><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvell_phy_intr_disable
<li><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvell_phy_intr_status
<li><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvell_phy_intr_clear
<li><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvell_phy_link_status_get
<li><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvell_phy_speed_duplex_change
<li><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtl8211_phy_intr_enable
<li><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtl8211_phy_intr_disable
<li><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtl8211_phy_speed_duplex_change
</ul>
<p><strong><a name="[794]"></a>gmac_intr_enable</strong>(18 bytes, Stack size 0 btyes, gmac_gmac.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth0_init
<li><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_rx
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[795]"></a>gmac_intr_disable</strong>(24 bytes, Stack size 0 btyes, gmac_gmac.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth0_isr
<li><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth1_isr
</ul>
<p><strong><a name="[796]"></a>gmac_intr_status</strong>(18 bytes, Stack size 0 btyes, gmac_gmac.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth0_isr
<li><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth1_isr
</ul>
<p><strong><a name="[797]"></a>gmac_intr_clear</strong>(18 bytes, Stack size 0 btyes, gmac_gmac.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth0_isr
<li><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth1_isr
</ul>
<p><strong><a name="[798]"></a>gmac_frame_transmit</strong>(406 bytes, Stack size 16 btyes, gmac_gmac.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 312 
<li>Call Chain = gmac_frame_transmit &rArr; log_error_id &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
</ul>
<br>[Called By]<ul>
<li><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_tx
</ul>
<p><strong><a name="[799]"></a>gmac_frame_transmitted_buf_poll</strong>(138 bytes, Stack size 0 btyes, gmac_gmac.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_tx
</ul>
<p><strong><a name="[79a]"></a>gmac_frame_recv_poll</strong>(666 bytes, Stack size 28 btyes, gmac_gmac.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = gmac_frame_recv_poll &rArr; log_error_id &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_error_id
</ul>
<br>[Called By]<ul>
<li><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_rx
</ul>
<p><strong><a name="[79b]"></a>gmac_rx_buf_attach</strong>(84 bytes, Stack size 0 btyes, gmac_gmac.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth0_init
<li><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_t610_eth1_init
<li><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_rx
<li><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_control
</ul>
<p><strong><a name="[79c]"></a>gmac_rx_valid_buf</strong>(86 bytes, Stack size 0 btyes, gmac_gmac.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_rx
</ul>
<p><strong><a name="[79d]"></a>gmac_rx_buf_processed</strong>(44 bytes, Stack size 0 btyes, gmac_gmac.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dev_rx
</ul>
<p><strong><a name="[7a0]"></a>set_reg_bit</strong>(14 bytes, Stack size 0 btyes, xhci_xhci.o(.text.set_reg_bit))<br>
<p><strong><a name="[7a1]"></a>clear_reg_bit</strong>(16 bytes, Stack size 0 btyes, xhci_xhci.o(.text.clear_reg_bit))<br>
<p><strong><a name="[7a2]"></a>xhci_halt</strong>(22 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_halt))<br>
<p><strong><a name="[7a3]"></a>xhci_run</strong>(56 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_run))<br>
<p><strong><a name="[7a4]"></a>xhci_reset</strong>(28 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_reset))<br>
<p><strong><a name="[7a5]"></a>xhci_find_new_dequeue_state</strong>(36 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_find_new_dequeue_state))<br>
<p><strong><a name="[7a6]"></a>xhci_set_tr_deq_ptr</strong>(118 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_set_tr_deq_ptr))<br>
<p><strong><a name="[7a7]"></a>xhci_ep_reset</strong>(138 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_ep_reset))<br>
<p><strong><a name="[7a8]"></a>xhci_bandwidth_check</strong>(70 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_bandwidth_check))<br>
<p><strong><a name="[7a9]"></a>xhci_get_endpoint_interval</strong>(214 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_get_endpoint_interval))<br>
<p><strong><a name="[7aa]"></a>xhci_drop_endpoint</strong>(132 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_drop_endpoint))<br>
<p><strong><a name="[7ab]"></a>xhci_add_endpoint</strong>(604 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_add_endpoint))<br>
<p><strong><a name="[7ac]"></a>xhci_reset_device</strong>(166 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_reset_device))<br>
<p><strong><a name="[7ad]"></a>xhci_set_ERDP</strong>(332 bytes, Stack size 0 btyes, xhci_xhci.o(.fast))<br>
<p><strong><a name="[7ae]"></a>xhci_set_dev_notification</strong>(20 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_set_dev_notification))<br>
<p><strong><a name="[7af]"></a>xhci_set_port_arrays</strong>(240 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_set_port_arrays))<br>
<p><strong><a name="[7b0]"></a>xhci_mem_cleanup</strong>(60 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_mem_cleanup))<br>
<p><strong><a name="[7b1]"></a>xhci_mem_init</strong>(632 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_mem_init))<br>
<p><strong><a name="[7b2]"></a>xhci_bulk_ep_index_get</strong>(248 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_bulk_ep_index_get))<br>
<p><strong><a name="[7b3]"></a>xhci_dev_free</strong>(144 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_dev_free))<br>
<p><strong><a name="[7b4]"></a>xhci_dev_alloc</strong>(396 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_dev_alloc))<br>
<p><strong><a name="[7b5]"></a>xhci_dev_stop</strong>(194 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_dev_stop))<br>
<p><strong><a name="[7b6]"></a>xhci_dev_set_address</strong>(344 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_dev_set_address))<br>
<p><strong><a name="[7b7]"></a>xhci_fs_maxp_check</strong>(92 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_fs_maxp_check))<br>
<p><strong><a name="[7b8]"></a>xhci_hw_init</strong>(26 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_hw_init))<br>
<p><strong><a name="[7b9]"></a>xhci_dev_speed_get</strong>(38 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_dev_speed_get))<br>
<p><strong><a name="[7ba]"></a>xhci_print_cap_regs</strong>(388 bytes, Stack size 0 btyes, xhci_xhci_dbg.o(.text.xhci_print_cap_regs))<br>
<p><strong><a name="[7bb]"></a>xhci_print_command_reg</strong>(120 bytes, Stack size 0 btyes, xhci_xhci_dbg.o(.text.xhci_print_command_reg))<br>
<p><strong><a name="[7bc]"></a>xhci_print_status_reg</strong>(138 bytes, Stack size 0 btyes, xhci_xhci_dbg.o(.text.xhci_print_status_reg))<br>
<p><strong><a name="[7bd]"></a>xhci_print_op_regs</strong>(20 bytes, Stack size 0 btyes, xhci_xhci_dbg.o(.text.xhci_print_op_regs))<br>
<p><strong><a name="[7be]"></a>xhci_print_ports</strong>(106 bytes, Stack size 0 btyes, xhci_xhci_dbg.o(.text.xhci_print_ports))<br>
<p><strong><a name="[7bf]"></a>xhci_print_ir_set</strong>(106 bytes, Stack size 0 btyes, xhci_xhci_dbg.o(.text.xhci_print_ir_set))<br>
<p><strong><a name="[7c0]"></a>xhci_print_run_regs</strong>(72 bytes, Stack size 0 btyes, xhci_xhci_dbg.o(.text.xhci_print_run_regs))<br>
<p><strong><a name="[7c1]"></a>xhci_print_registers</strong>(2 bytes, Stack size 0 btyes, xhci_xhci_dbg.o(.text.xhci_print_registers))<br>
<p><strong><a name="[7c2]"></a>xhci_print_memory</strong>(2 bytes, Stack size 0 btyes, xhci_xhci_dbg.o(.text.xhci_print_memory))<br>
<p><strong><a name="[7c4]"></a>xhci_link_segments</strong>(20 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.text.xhci_link_segments))<br>
<p><strong><a name="[7c5]"></a>xhci_alloc_segments_for_ring</strong>(134 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.text.xhci_alloc_segments_for_ring))<br>
<p><strong><a name="[7c6]"></a>xhci_ring_alloc</strong>(80 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.text.xhci_ring_alloc))<br>
<p><strong><a name="[7c7]"></a>xhci_link_rings</strong>(184 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.text.xhci_link_rings))<br>
<p><strong><a name="[7c8]"></a>xhci_test_and_clear_bit</strong>(30 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.text.xhci_test_and_clear_bit))<br>
<p><strong><a name="[7c9]"></a>inc_deq</strong>(422 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.fast))<br>
<p><strong><a name="[7ca]"></a>xhci_ring_cmd_db</strong>(12 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.text.xhci_ring_cmd_db))<br>
<p><strong><a name="[7cb]"></a>handle_cmd_completion</strong>(294 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.text.handle_cmd_completion))<br>
<p><strong><a name="[7cc]"></a>xhci_poll_rh_status</strong>(524 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.text.xhci_poll_rh_status))<br>
<p><strong><a name="[7cd]"></a>handle_port_status</strong>(362 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.text.handle_port_status))<br>
<p><strong><a name="[7ce]"></a>xhci_ctrl_xfer</strong>(444 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.text.xhci_ctrl_xfer))<br>
<p><strong><a name="[7cf]"></a>xhci_async_ctrl_xfer</strong>(356 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.text.xhci_async_ctrl_xfer))<br>
<p><strong><a name="[7d0]"></a>xhci_queue_command</strong>(70 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.text.xhci_queue_command))<br>
<p><strong><a name="[7d1]"></a>xhci_dev_attach_event</strong>(72 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.text.xhci_dev_attach_event))<br>
<p><strong><a name="[7d2]"></a>xhci_dev_dettach_event</strong>(72 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.text.xhci_dev_dettach_event))<br>
<p><strong><a name="[7d3]"></a>xhci_port_status_check</strong>(10 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.text.xhci_port_status_check))<br>
<p><strong><a name="[7d4]"></a>xhci_port_warm_reset</strong>(18 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.text.xhci_port_warm_reset))<br>
<p><strong><a name="[7d5]"></a>inc_enq</strong>(178 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.fast))<br>
<p><strong><a name="[7d6]"></a>xhci_ring_ep_db</strong>(20 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.fast))<br>
<p><strong><a name="[7d7]"></a>handle_tx_event</strong>(840 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.fast))<br>
<p><strong><a name="[7d8]"></a>xhci_isr</strong>(208 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.fast))<br>
<p><strong><a name="[7d9]"></a>prepare_room_on_ring</strong>(238 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.fast))<br>
<p><strong><a name="[7da]"></a>xhci_td_size</strong>(66 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.fast))<br>
<p><strong><a name="[7db]"></a>giveback_first_trb</strong>(56 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.fast))<br>
<p><strong><a name="[7dc]"></a>xhci_bulk_xfer</strong>(708 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.fast))<br>
<p><strong><a name="[7dd]"></a>xhci_async_bulk_xfer</strong>(544 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.fast))<br>
<p><strong><a name="[7de]"></a>xhci_async_xfer_check</strong>(114 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.fast))<br>
<p><strong><a name="[7df]"></a>xhci_os_dev_speed_get</strong>(8 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_dev_speed_get))<br>
<p><strong><a name="[7e0]"></a>xhci_os_ctrl_xfer</strong>(8 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_ctrl_xfer))<br>
<p><strong><a name="[7e1]"></a>xhci_os_bulk_xfer</strong>(8 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_bulk_xfer))<br>
<p><strong><a name="[7e2]"></a>xhci_os_bandwidth_check</strong>(8 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_bandwidth_check))<br>
<p><strong><a name="[7e3]"></a>xhci_os_bulk_ep_index_get</strong>(8 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_bulk_ep_index_get))<br>
<p><strong><a name="[7e4]"></a>xhci_os_drop_endpoint</strong>(8 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_drop_endpoint))<br>
<p><strong><a name="[7e5]"></a>xhci_os_ep_reset</strong>(8 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_ep_reset))<br>
<p><strong><a name="[7e6]"></a>xhci_os_intr_xfer_check</strong>(54 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_intr_xfer_check))<br>
<p><strong><a name="[7e7]"></a>xhci_os_read_usbsts</strong>(8 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_read_usbsts))<br>
<p><strong><a name="[7e8]"></a>xhci_os_port_change_status_get</strong>(8 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_port_change_status_get))<br>
<p><strong><a name="[7e9]"></a>xhci_os_port_change_status_clear</strong>(10 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_port_change_status_clear))<br>
<p><strong><a name="[7ea]"></a>xhci_os_roothub_connect</strong>(40 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_roothub_connect))<br>
<p><strong><a name="[7eb]"></a>xhci_os_roothub_disconnect</strong>(34 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_roothub_disconnect))<br>
<p><strong><a name="[7ec]"></a>xhci_os_hw_init</strong>(8 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_hw_init))<br>
<p><strong><a name="[7ed]"></a>xhci_os_halt</strong>(8 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_halt))<br>
<p><strong><a name="[7ee]"></a>xhci_os_reset</strong>(8 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_reset))<br>
<p><strong><a name="[7ef]"></a>xhci_os_run</strong>(8 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_run))<br>
<p><strong><a name="[7f0]"></a>xhci_os_mem_init</strong>(20 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_mem_init))<br>
<p><strong><a name="[7f1]"></a>xhci_os_status_flag_clear</strong>(36 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_status_flag_clear))<br>
<p><strong><a name="[7f2]"></a>xhci_os_event_ring_update</strong>(34 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_event_ring_update))<br>
<p><strong><a name="[7f3]"></a>xhci_os_hse_handler</strong>(16 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_hse_handler))<br>
<p><strong><a name="[7f4]"></a>xhci_os_handle_event</strong>(114 bytes, Stack size 0 btyes, xhci_xhci_os.o(.fast))<br>
<p><strong><a name="[7f5]"></a>xhci_os_slot_request</strong>(12 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_slot_request))<br>
<p><strong><a name="[7f6]"></a>xhci_os_set_address</strong>(8 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_set_address))<br>
<p><strong><a name="[7f7]"></a>xhci_os_add_endpoint</strong>(100 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_add_endpoint))<br>
<p><strong><a name="[7f8]"></a>xhci_os_dev_free</strong>(38 bytes, Stack size 0 btyes, xhci_xhci_os.o(.text.xhci_os_dev_free))<br>
<p><strong><a name="[7f9]"></a>xhci_os_intr_xfer</strong>(478 bytes, Stack size 0 btyes, xhci_xhci_os.o(.fast))<br>
<p><strong><a name="[7fa]"></a>muxio_sram_hw_init</strong>(204 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_sram_hw_init))<br>
<p><strong><a name="[7fb]"></a>muxio_admux_op_mode_set</strong>(22 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_admux_op_mode_set))<br>
<p><strong><a name="[7fc]"></a>muxio_admux_tim_mode_set</strong>(20 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_admux_tim_mode_set))<br>
<p><strong><a name="[7fd]"></a>muxio_admux_hw_init</strong>(100 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_admux_hw_init))<br>
<p><strong><a name="[7fe]"></a>muxio_data_port_addr</strong>(126 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_data_port_addr))<br>
<p><strong><a name="[7ff]"></a>muxio_cmd_port_addr</strong>(30 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_cmd_port_addr))<br>
<p><strong><a name="[800]"></a>muxio_intr_status</strong>(8 bytes, Stack size 0 btyes, muxio_muxio.o(.fast))<br>
<p><strong><a name="[801]"></a>muxio_intr_enable</strong>(258 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_intr_enable))<br>
<p><strong><a name="[802]"></a>muxio_intr_disable</strong>(258 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_intr_disable))<br>
<p><strong><a name="[803]"></a>muxio_fs_wfifo_free_entries</strong>(10 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_fs_wfifo_free_entries))<br>
<p><strong><a name="[804]"></a>muxio_fs_rfifo_valid_entries</strong>(10 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_fs_rfifo_valid_entries))<br>
<p><strong><a name="[805]"></a>muxio_fs_cwfifo_free_entries</strong>(12 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_fs_cwfifo_free_entries))<br>
<p><strong><a name="[806]"></a>muxio_fs_crfifo_valid_entries</strong>(10 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_fs_crfifo_valid_entries))<br>
<p><strong><a name="[807]"></a>muxio_fs_status_get</strong>(8 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_fs_status_get))<br>
<p><strong><a name="[808]"></a>muxio_fs_hw_init</strong>(132 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_fs_hw_init))<br>
<p><strong><a name="[809]"></a>muxio_fs_data_send</strong>(58 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_fs_data_send))<br>
<p><strong><a name="[80a]"></a>muxio_fs_data_recv</strong>(58 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_fs_data_recv))<br>
<p><strong><a name="[80b]"></a>muxio_fs_cmd_send</strong>(58 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_fs_cmd_send))<br>
<p><strong><a name="[80c]"></a>muxio_fs_cmd_recv</strong>(58 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_fs_cmd_recv))<br>
<p><strong><a name="[80d]"></a>muxio_fm_exfifo_is_empty</strong>(10 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_fm_exfifo_is_empty))<br>
<p><strong><a name="[80e]"></a>muxio_fm_exfifo_is_full</strong>(12 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_fm_exfifo_is_full))<br>
<p><strong><a name="[80f]"></a>muxio_fm_hw_init</strong>(64 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_fm_hw_init))<br>
<p><strong><a name="[810]"></a>muxio_fm_send</strong>(40 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_fm_send))<br>
<p><strong><a name="[811]"></a>muxio_fm_recv</strong>(32 bytes, Stack size 0 btyes, muxio_muxio.o(.text.muxio_fm_recv))<br>
<p><strong><a name="[812]"></a>muxio_intr_clear_all</strong>(12 bytes, Stack size 0 btyes, muxio_muxio.o(.fast))<br>
<p><strong><a name="[813]"></a>muxio_intr_clear</strong>(8 bytes, Stack size 0 btyes, muxio_muxio.o(.fast))<br>
<p><strong><a name="[814]"></a>dq_addlast</strong>(26 bytes, Stack size 0 btyes, cklib_dq_addlast.o(.text.dq_addlast))<br>
<p><strong><a name="[815]"></a>dq_rem</strong>(40 bytes, Stack size 0 btyes, cklib_dq_rem.o(.text.dq_rem))<br>
<p><strong><a name="[816]"></a>mm_get_mallinfo</strong>(44 bytes, Stack size 0 btyes, cklib_lib_mallinfo.o(.text.mm_get_mallinfo))<br>
<p><strong><a name="[316]"></a>malloc</strong>(14 bytes, Stack size 0 btyes, cklib_malloc.o(.text.malloc))<br>
<p><strong><a name="[317]"></a>free</strong>(14 bytes, Stack size 0 btyes, cklib_malloc.o(.text.free))<br>
<br>[Called By]<ul>
<li><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hba_reset
</ul>
<p><strong><a name="[318]"></a>realloc</strong>(44 bytes, Stack size 0 btyes, cklib_malloc.o(.text.realloc))<br>
<p><strong><a name="[319]"></a>calloc</strong>(34 bytes, Stack size 0 btyes, cklib_malloc.o(.text.calloc))<br>
<br>[Called By]<ul>
<li><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hba_reset
</ul>
<p><strong><a name="[817]"></a>mm_addfreechunk</strong>(92 bytes, Stack size 0 btyes, cklib_mm_addfreechunk.o(.text.mm_addfreechunk))<br>
<p><strong><a name="[818]"></a>mm_free</strong>(148 bytes, Stack size 0 btyes, cklib_mm_free.o(.text.mm_free))<br>
<p><strong><a name="[819]"></a>mm_addregion</strong>(80 bytes, Stack size 0 btyes, cklib_mm_initialize.o(.text.mm_addregion))<br>
<p><strong><a name="[81a]"></a>mm_initialize</strong>(58 bytes, Stack size 0 btyes, cklib_mm_initialize.o(.text.mm_initialize))<br>
<p><strong><a name="[81b]"></a>mm_heap_initialize</strong>(18 bytes, Stack size 0 btyes, cklib_mm_initialize.o(.text.mm_heap_initialize))<br>
<p><strong><a name="[820]"></a>mm_dbg_clone</strong>(36 bytes, Stack size 0 btyes, cklib_mm_leak.o(.text.mm_dbg_clone))<br>
<p><strong><a name="[821]"></a>mm_statistics_save</strong>(8 bytes, Stack size 0 btyes, cklib_mm_leak.o(.text.mm_statistics_save))<br>
<p><strong><a name="[822]"></a>mm_statistics_restore</strong>(8 bytes, Stack size 0 btyes, cklib_mm_leak.o(.text.mm_statistics_restore))<br>
<p><strong><a name="[823]"></a>mm_do_snapshoot</strong>(80 bytes, Stack size 0 btyes, cklib_mm_leak.o(.text.mm_do_snapshoot))<br>
<p><strong><a name="[824]"></a>mm_release_snapshoot</strong>(38 bytes, Stack size 0 btyes, cklib_mm_leak.o(.text.mm_release_snapshoot))<br>
<p><strong><a name="[825]"></a>mm_leak_add_chunk</strong>(24 bytes, Stack size 0 btyes, cklib_mm_leak.o(.text.mm_leak_add_chunk))<br>
<p><strong><a name="[826]"></a>mm_leak_del_chunk</strong>(24 bytes, Stack size 0 btyes, cklib_mm_leak.o(.text.mm_leak_del_chunk))<br>
<p><strong><a name="[827]"></a>mm_do_statistics</strong>(72 bytes, Stack size 0 btyes, cklib_mm_leak.o(.text.mm_do_statistics))<br>
<p><strong><a name="[828]"></a>mm_record_minfree</strong>(12 bytes, Stack size 0 btyes, cklib_mm_leak.o(.text.mm_record_minfree))<br>
<p><strong><a name="[829]"></a>mm_leak_dump</strong>(16 bytes, Stack size 0 btyes, cklib_mm_leak.o(.text.mm_leak_dump))<br>
<p><strong><a name="[82a]"></a>mm_leak_search_chunk</strong>(106 bytes, Stack size 0 btyes, cklib_mm_leak.o(.text.mm_leak_search_chunk))<br>
<p><strong><a name="[82b]"></a>mm_show_corrupted</strong>(30 bytes, Stack size 0 btyes, cklib_mm_leak.o(.text.mm_show_corrupted))<br>
<p><strong><a name="[82c]"></a>mm_mallinfo</strong>(90 bytes, Stack size 0 btyes, cklib_mm_mallinfo.o(.text.mm_mallinfo))<br>
<p><strong><a name="[82d]"></a>mm_max_usedsize_update</strong>(50 bytes, Stack size 0 btyes, cklib_mm_mallinfo.o(.text.mm_max_usedsize_update))<br>
<p><strong><a name="[82e]"></a>mm_get_max_usedsize</strong>(6 bytes, Stack size 0 btyes, cklib_mm_mallinfo.o(.text.mm_get_max_usedsize))<br>
<p><strong><a name="[82f]"></a>mm_malloc</strong>(150 bytes, Stack size 0 btyes, cklib_mm_malloc.o(.text.mm_malloc))<br>
<p><strong><a name="[830]"></a>mm_size2ndx</strong>(32 bytes, Stack size 0 btyes, cklib_mm_size2ndx.o(.text.mm_size2ndx))<br>
<p><strong><a name="[832]"></a>vsnprintf</strong>(1426 bytes, Stack size 0 btyes, cklib_printf.o(.text.vsnprintf))<br>
<p><strong><a name="[eb]"></a>snprintf</strong>(24 bytes, Stack size 0 btyes, cklib_printf.o(.text.snprintf))<br>
<p><strong><a name="[ed]"></a>vsprintf</strong>(16 bytes, Stack size 0 btyes, cklib_printf.o(.text.vsprintf))<br>
<br>[Called By]<ul>
<li><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_nonvolatile
</ul>
<p><strong><a name="[ef]"></a>sprintf</strong>(26 bytes, Stack size 0 btyes, cklib_printf.o(.text.sprintf))<br>
<br>[Called By]<ul>
<li><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_st_data.part.0
<li><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_nonvolatile
</ul>
<p><strong><a name="[f5]"></a>printf</strong>(70 bytes, Stack size 0 btyes, cklib_printf.o(.text.printf))<br>
<br>[Called By]<ul>
<li><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symm_param_cfg
<li><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_fifo_enable
<li><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bridge_enable
<li><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_dma_start
<li><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_link_change_handler
<li><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_complete_wait
<li><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_error_handler
<li><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_passthru
<li><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_slot_is_empty
<li><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_ncq_queue_mgmt
<li><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_print.constprop.1
<li><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
<li><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<li><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
<li><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_rx_fifo
</ul>
<p><strong><a name="[833]"></a>ac_mp_status</strong>(10 bytes, Stack size 0 btyes, ck803_aclink_client.o(.fast))<br>
<p><strong><a name="[834]"></a>ac_mp_init</strong>(76 bytes, Stack size 0 btyes, ck803_aclink_client.o(.text.ac_mp_init))<br>
<p><strong><a name="[835]"></a>ac_mp_intr_clear</strong>(12 bytes, Stack size 0 btyes, ck803_aclink_client.o(.fast))<br>
<p><strong><a name="[836]"></a>ac_mp_intr_enable</strong>(2 bytes, Stack size 0 btyes, ck803_aclink_client.o(.fast))<br>
<p><strong><a name="[837]"></a>ac_mp_intr_disable</strong>(2 bytes, Stack size 0 btyes, ck803_aclink_client.o(.fast))<br>
<p><strong><a name="[838]"></a>ac_mp_send</strong>(124 bytes, Stack size 0 btyes, ck803_aclink_client.o(.fast))<br>
<p><strong><a name="[839]"></a>ac_mp_recv</strong>(88 bytes, Stack size 0 btyes, ck803_aclink_client.o(.fast))<br>
<p><strong><a name="[83a]"></a>csi_vic_init</strong>(12 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_hw_init
</ul>
<p><strong><a name="[83b]"></a>csi_coret_config</strong>(100 bytes, Stack size 0 btyes, ck803_core_ck803.o(.text.csi_coret_config))<br>
<p><strong><a name="[83c]"></a>csi_cache_set_range</strong>(28 bytes, Stack size 0 btyes, ck803_core_ck803.o(.text.csi_cache_set_range))<br>
<br>[Called By]<ul>
<li><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_init
</ul>
<p><strong><a name="[83d]"></a>csi_cache_enable_profile</strong>(16 bytes, Stack size 0 btyes, ck803_core_ck803.o(.text.csi_cache_enable_profile))<br>
<p><strong><a name="[83e]"></a>csi_cache_disable_profile</strong>(16 bytes, Stack size 0 btyes, ck803_core_ck803.o(.text.csi_cache_disable_profile))<br>
<p><strong><a name="[83f]"></a>csi_cache_reset_profile</strong>(16 bytes, Stack size 0 btyes, ck803_core_ck803.o(.text.csi_cache_reset_profile))<br>
<p><strong><a name="[840]"></a>csi_cache_get_access_time</strong>(8 bytes, Stack size 0 btyes, ck803_core_ck803.o(.text.csi_cache_get_access_time))<br>
<p><strong><a name="[841]"></a>csi_cache_get_miss_time</strong>(8 bytes, Stack size 0 btyes, ck803_core_ck803.o(.text.csi_cache_get_miss_time))<br>
<p><strong><a name="[842]"></a>csi_mpu_enable</strong>(14 bytes, Stack size 0 btyes, ck803_core_ck803.o(.text.csi_mpu_enable))<br>
<p><strong><a name="[843]"></a>csi_mpu_disable</strong>(14 bytes, Stack size 0 btyes, ck803_core_ck803.o(.text.csi_mpu_disable))<br>
<p><strong><a name="[844]"></a>csi_mpu_config_region</strong>(110 bytes, Stack size 0 btyes, ck803_core_ck803.o(.text.csi_mpu_config_region))<br>
<p><strong><a name="[845]"></a>csi_mpu_enable_region</strong>(32 bytes, Stack size 0 btyes, ck803_core_ck803.o(.text.csi_mpu_enable_region))<br>
<p><strong><a name="[846]"></a>csi_mpu_disable_region</strong>(32 bytes, Stack size 0 btyes, ck803_core_ck803.o(.text.csi_mpu_disable_region))<br>
<p><strong><a name="[847]"></a>csi_system_reset</strong>(18 bytes, Stack size 0 btyes, ck803_core_ck803.o(.text.csi_system_reset))<br>
<p><strong><a name="[848]"></a>csi_vic_enable_irq</strong>(16 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_enable
</ul>
<p><strong><a name="[849]"></a>csi_vic_disable_irq</strong>(18 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_disconnect
<li><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_disable
<li><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_hw_init
</ul>
<p><strong><a name="[84a]"></a>csi_vic_get_pending_irq</strong>(20 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[84b]"></a>csi_vic_set_pending_irq</strong>(18 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[84c]"></a>csi_vic_clear_pending_irq</strong>(18 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_clear
<li><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_disconnect
<li><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_clear
</ul>
<p><strong><a name="[84d]"></a>csi_vic_get_wakeup_irq</strong>(18 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[84e]"></a>csi_vic_set_wakeup_irq</strong>(16 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[84f]"></a>csi_vic_clear_wakeup_irq</strong>(18 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[850]"></a>csi_vic_get_active</strong>(20 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[851]"></a>csi_vic_set_threshold</strong>(26 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[852]"></a>csi_vic_set_prio</strong>(56 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_init
<li><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_install
<li><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_connect
</ul>
<p><strong><a name="[853]"></a>csi_vic_get_prio</strong>(36 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[854]"></a>csi_vic_set_vector</strong>(16 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_hw_init
</ul>
<p><strong><a name="[855]"></a>csi_vic_get_vector</strong>(20 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[856]"></a>csi_coret_get_load</strong>(6 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[857]"></a>csi_coret_get_value</strong>(6 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[858]"></a>csi_icache_enable</strong>(32 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_init
</ul>
<p><strong><a name="[859]"></a>csi_icache_disable</strong>(32 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[85a]"></a>csi_dcache_enable</strong>(28 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[85b]"></a>csi_dcache_disable</strong>(32 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[85c]"></a>csi_dcache_invalid</strong>(24 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_icache_invalid
</ul>
<p><strong><a name="[85d]"></a>csi_icache_invalid</strong>(8 bytes, Stack size 4 btyes, ck803_core_ck803.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_dcache_invalid
</ul>
<p><strong><a name="[85e]"></a>csi_dcache_clean</strong>(24 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[85f]"></a>csi_dcache_clean_invalid</strong>(24 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[860]"></a>csi_dcache_invalid_range</strong>(44 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_cache_flush.part.0
</ul>
<p><strong><a name="[861]"></a>csi_dcache_clean_range</strong>(54 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[862]"></a>csi_dcache_clean_invalid_range</strong>(44 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_cache_flush.part.0
</ul>
<p><strong><a name="[863]"></a>csi_irq_save</strong>(10 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norc_port_switch_cmd.part.0
<li><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_hw_init
</ul>
<p><strong><a name="[864]"></a>csi_irq_restore</strong>(6 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norc_port_switch_xip.part.1
<li><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_hw_init
</ul>
<p><strong><a name="[865]"></a>irq_enable</strong>(6 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</ul>
<p><strong><a name="[866]"></a>irq_disable</strong>(6 bytes, Stack size 0 btyes, ck803_core_ck803.o(.fast))<br>
<p><strong><a name="[867]"></a>core_timer_hw_init</strong>(50 bytes, Stack size 12 btyes, ck803_core_timer.o(.text.core_timer_hw_init))<br>
<br>[Calls]<ul>
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_get
</ul>
<br>[Called By]<ul>
<li><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_init
</ul>
<p><strong><a name="[868]"></a>core_timer_clear</strong>(16 bytes, Stack size 0 btyes, ck803_core_timer.o(.fast))<br>
<p><strong><a name="[869]"></a>core_timer_intr_enable</strong>(12 bytes, Stack size 0 btyes, ck803_core_timer.o(.text.core_timer_intr_enable))<br>
<br>[Called By]<ul>
<li><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_init
</ul>
<p><strong><a name="[86a]"></a>core_timer_intr_disable</strong>(12 bytes, Stack size 0 btyes, ck803_core_timer.o(.text.core_timer_intr_disable))<br>
<br>[Called By]<ul>
<li><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_init
</ul>
<p><strong><a name="[86b]"></a>core_timer_intr_status</strong>(12 bytes, Stack size 0 btyes, ck803_core_timer.o(.fast))<br>
<p><strong><a name="[86c]"></a>core_timer_intr_clear</strong>(16 bytes, Stack size 0 btyes, ck803_core_timer.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_isr
</ul>
<p><strong><a name="[86d]"></a>core_timer_start</strong>(12 bytes, Stack size 0 btyes, ck803_core_timer.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_init
</ul>
<p><strong><a name="[86e]"></a>core_timer_stop</strong>(12 bytes, Stack size 0 btyes, ck803_core_timer.o(.fast))<br>
<p><strong><a name="[86f]"></a>core_timer_current_value_get</strong>(6 bytes, Stack size 0 btyes, ck803_core_timer.o(.fast))<br>
<p><strong><a name="[871]"></a>intr_hw_init</strong>(84 bytes, Stack size 0 btyes, ck803_interrupt.o(.text.intr_hw_init))<br>
<br>[Stack]<ul><li>Max Depth = 4 
<li>Call Chain = intr_hw_init &rArr; intr_cache_flush.part.0 </ul>
<br>[Calls]<ul>
<li><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_irq_save
<li><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_vic_init
<li><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_vic_disable_irq
<li><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_vic_set_vector
<li><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_cache_flush.part.0
<li><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_irq_restore
</ul>
<br>[Called By]<ul>
<li><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_init
</ul>
<p><strong><a name="[872]"></a>intr_status_get</strong>(8 bytes, Stack size 0 btyes, ck803_interrupt.o(.text.intr_status_get))<br>
<p><strong><a name="[874]"></a>intr_vector_enable</strong>(2 bytes, Stack size 0 btyes, ck803_interrupt.o(.fast))<br>
<p><strong><a name="[875]"></a>intr_vector_disable</strong>(2 bytes, Stack size 0 btyes, ck803_interrupt.o(.fast))<br>
<p><strong><a name="[876]"></a>intr_connect</strong>(38 bytes, Stack size 8 btyes, ck803_interrupt.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = intr_connect &rArr; intr_cache_flush.part.0 </ul>
<br>[Calls]<ul>
<li><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_cache_flush.part.0
<li><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_vic_set_prio
</ul>
<br>[Called By]<ul>
<li><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_install
</ul>
<p><strong><a name="[877]"></a>intr_disconnect</strong>(38 bytes, Stack size 8 btyes, ck803_interrupt.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = intr_disconnect &rArr; intr_cache_flush.part.0 </ul>
<br>[Calls]<ul>
<li><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_vic_clear_pending_irq
<li><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_vic_disable_irq
<li><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_cache_flush.part.0
</ul>
<br>[Called By]<ul>
<li><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_install
<li><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_hw_init
</ul>
<p><strong><a name="[878]"></a>intr_is_connected</strong>(36 bytes, Stack size 0 btyes, ck803_interrupt.o(.fast))<br>
<p><strong><a name="[879]"></a>intr_enable</strong>(8 bytes, Stack size 4 btyes, ck803_interrupt.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_vic_enable_irq
</ul>
<br>[Called By]<ul>
<li><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_umask
</ul>
<p><strong><a name="[87a]"></a>intr_disable</strong>(8 bytes, Stack size 4 btyes, ck803_interrupt.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_vic_disable_irq
</ul>
<br>[Called By]<ul>
<li><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_mask
</ul>
<p><strong><a name="[87b]"></a>intr_clear</strong>(8 bytes, Stack size 4 btyes, ck803_interrupt.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_vic_clear_pending_irq
</ul>
<p><strong><a name="[87c]"></a>backtrace</strong>(222 bytes, Stack size 0 btyes, ck803_backtrace.o(.text.backtrace))<br>
<p><strong><a name="[87d]"></a>__muldi3</strong>(74 bytes, Stack size 12 btyes, _muldi3.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mulsf3
<li><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__muldf3
<li><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoull
<li><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
</ul>
<p><strong><a name="[87e]"></a>__fixunssfsi</strong>(46 bytes, Stack size 8 btyes, _fixunssfsi.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 84 
<li>Call Chain = __fixunssfsi &rArr; __subsf3 &rArr; _fpadd_parts  </ul>
<br>[Calls]<ul>
<li><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gesf2
<li><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fixsfsi
<li><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subsf3
</ul>
<br>[Called By]<ul>
<li><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_hw_init
<li><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_write
</ul>
<p><strong><a name="[87f]"></a>__floatdisf</strong>(122 bytes, Stack size 0 btyes, _floatdisf.o(.text))<br>
<p><strong><a name="[880]"></a>__floatundidf</strong>(40 bytes, Stack size 0 btyes, _floatundidf.o(.text))<br>
<p><strong><a name="[881]"></a>__udivdi3</strong>(814 bytes, Stack size 20 btyes, _udivdi3.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<li><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<li><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<li><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<li><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_inout_data_lba
</ul>
<p><strong><a name="[882]"></a>__umoddi3</strong>(800 bytes, Stack size 24 btyes, _umoddi3.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<li><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_inout_data_lba
</ul>
<p><strong><a name="[884]"></a>__addsf3</strong>(42 bytes, Stack size 60 btyes, _addsub_sf.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 76 
<li>Call Chain = __addsf3 &rArr; _fpadd_parts </ul>
<br>[Calls]<ul>
<li><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_f
<li><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fpadd_parts
<li><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pack_f
</ul>
<br>[Called By]<ul>
<li><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_write
<li><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_read
</ul>
<p><strong><a name="[885]"></a>__subsf3</strong>(50 bytes, Stack size 60 btyes, _addsub_sf.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 76 
<li>Call Chain = __subsf3 &rArr; _fpadd_parts </ul>
<br>[Calls]<ul>
<li><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_f
<li><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fpadd_parts
<li><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pack_f
</ul>
<br>[Called By]<ul>
<li><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_hw_init
<li><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fixunssfsi
<li><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_write
<li><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_read
</ul>
<p><strong><a name="[886]"></a>__mulsf3</strong>(278 bytes, Stack size 64 btyes, _mul_sf.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 76 
<li>Call Chain = __mulsf3 &rArr; __muldi3 </ul>
<br>[Calls]<ul>
<li><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_f
<li><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__muldi3
<li><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pack_f
</ul>
<br>[Called By]<ul>
<li><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_hw_init
<li><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_write
<li><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_read
</ul>
<p><strong><a name="[887]"></a>__divsf3</strong>(192 bytes, Stack size 44 btyes, _div_sf.o(.text))<br>
<br>[Calls]<ul>
<li><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_f
<li><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pack_f
</ul>
<br>[Called By]<ul>
<li><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cputime_getres
<li><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_write
<li><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_read
</ul>
<p><strong><a name="[888]"></a>__eqsf2</strong>(50 bytes, Stack size 44 btyes, _eq_sf.o(.text))<br>
<br>[Calls]<ul>
<li><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_f
<li><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpcmp_parts_f
</ul>
<br>[Called By]<ul>
<li><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_write
</ul>
<p><strong><a name="[889]"></a>__nesf2</strong>(50 bytes, Stack size 0 btyes, _ne_sf.o(.text))<br>
<p><strong><a name="[88a]"></a>__gtsf2</strong>(58 bytes, Stack size 44 btyes, _gt_sf.o(.text))<br>
<br>[Calls]<ul>
<li><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_f
<li><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpcmp_parts_f
</ul>
<br>[Called By]<ul>
<li><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_write
</ul>
<p><strong><a name="[88b]"></a>__gesf2</strong>(58 bytes, Stack size 44 btyes, _ge_sf.o(.text))<br>
<br>[Calls]<ul>
<li><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_f
<li><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpcmp_parts_f
</ul>
<br>[Called By]<ul>
<li><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fixunssfsi
<li><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_write
</ul>
<p><strong><a name="[88c]"></a>__ltsf2</strong>(50 bytes, Stack size 44 btyes, _lt_sf.o(.text))<br>
<br>[Calls]<ul>
<li><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_f
<li><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpcmp_parts_f
</ul>
<br>[Called By]<ul>
<li><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_write
</ul>
<p><strong><a name="[88d]"></a>__floatsisf</strong>(82 bytes, Stack size 20 btyes, _si_to_sf.o(.text))<br>
<br>[Calls]<ul>
<li><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pack_f
</ul>
<br>[Called By]<ul>
<li><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_write
<li><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_read
</ul>
<p><strong><a name="[88e]"></a>__fixsfsi</strong>(82 bytes, Stack size 24 btyes, _sf_to_si.o(.text))<br>
<br>[Calls]<ul>
<li><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_f
</ul>
<br>[Called By]<ul>
<li><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fixunssfsi
<li><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_read
</ul>
<p><strong><a name="[88f]"></a>__extendsfdf2</strong>(40 bytes, Stack size 0 btyes, _sf_to_df.o(.text))<br>
<p><strong><a name="[890]"></a>__floatunsisf</strong>(94 bytes, Stack size 20 btyes, _usi_to_sf.o(.text))<br>
<br>[Calls]<ul>
<li><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pack_f
</ul>
<br>[Called By]<ul>
<li><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_hw_init
<li><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cputime_getres
<li><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_write
<li><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_read
</ul>
<p><strong><a name="[892]"></a>__adddf3</strong>(46 bytes, Stack size 80 btyes, _addsub_df.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 124 
<li>Call Chain = __adddf3 &rArr; _fpadd_parts </ul>
<br>[Calls]<ul>
<li><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_d
<li><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fpadd_parts
<li><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pack_d
</ul>
<p><strong><a name="[893]"></a>__subdf3</strong>(54 bytes, Stack size 80 btyes, _addsub_df.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 124 
<li>Call Chain = __subdf3 &rArr; _fpadd_parts </ul>
<br>[Calls]<ul>
<li><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_d
<li><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fpadd_parts
<li><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pack_d
</ul>
<br>[Called By]<ul>
<li><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</ul>
<p><strong><a name="[894]"></a>__muldf3</strong>(508 bytes, Stack size 124 btyes, _mul_df.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 144 
<li>Call Chain = __muldf3 &rArr; __pack_d </ul>
<br>[Calls]<ul>
<li><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_d
<li><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__muldi3
<li><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pack_d
</ul>
<br>[Called By]<ul>
<li><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</ul>
<p><strong><a name="[895]"></a>__divdf3</strong>(274 bytes, Stack size 0 btyes, _div_df.o(.text))<br>
<p><strong><a name="[896]"></a>__eqdf2</strong>(54 bytes, Stack size 60 btyes, _eq_df.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 64 
<li>Call Chain = __eqdf2 &rArr; __unpack_d </ul>
<br>[Calls]<ul>
<li><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_d
<li><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpcmp_parts_d
</ul>
<br>[Called By]<ul>
<li><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</ul>
<p><strong><a name="[897]"></a>__floatsidf</strong>(104 bytes, Stack size 24 btyes, _si_to_df.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 44 
<li>Call Chain = __floatsidf &rArr; __pack_d </ul>
<br>[Calls]<ul>
<li><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pack_d
</ul>
<br>[Called By]<ul>
<li><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</ul>
<p><strong><a name="[898]"></a>__fixdfsi</strong>(112 bytes, Stack size 32 btyes, _df_to_si.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = __fixdfsi &rArr; __unpack_d </ul>
<br>[Calls]<ul>
<li><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_d
</ul>
<br>[Called By]<ul>
<li><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</ul>
<p><strong><a name="[899]"></a>__make_dp</strong>(46 bytes, Stack size 0 btyes, _make_df.o(.text))<br>
<p><strong><a name="[89a]"></a>__truncdfsf2</strong>(52 bytes, Stack size 0 btyes, _df_to_sf.o(.text))<br>
<p><strong><a name="[89b]"></a>__floatunsidf</strong>(86 bytes, Stack size 0 btyes, _usi_to_df.o(.text))<br>
<p><strong><a name="[89c]"></a>__pack_f</strong>(190 bytes, Stack size 0 btyes, _pack_sf.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__addsf3
<li><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subsf3
<li><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mulsf3
<li><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__divsf3
<li><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__floatsisf
<li><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__floatunsisf
</ul>
<p><strong><a name="[89d]"></a>__unpack_f</strong>(120 bytes, Stack size 0 btyes, _unpack_sf.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__addsf3
<li><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subsf3
<li><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mulsf3
<li><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__divsf3
<li><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__eqsf2
<li><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gtsf2
<li><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gesf2
<li><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ltsf2
<li><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fixsfsi
</ul>
<p><strong><a name="[89e]"></a>__fpcmp_parts_f</strong>(172 bytes, Stack size 0 btyes, _fpcmp_parts_sf.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__eqsf2
<li><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gtsf2
<li><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gesf2
<li><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ltsf2
</ul>
<p><strong><a name="[89f]"></a>__make_fp</strong>(22 bytes, Stack size 0 btyes, _make_sf.o(.text))<br>
<p><strong><a name="[8a0]"></a>__pack_d</strong>(398 bytes, Stack size 20 btyes, _pack_df.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__adddf3
<li><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subdf3
<li><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__muldf3
<li><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__floatsidf
</ul>
<p><strong><a name="[8a1]"></a>__unpack_d</strong>(228 bytes, Stack size 4 btyes, _unpack_df.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__adddf3
<li><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subdf3
<li><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__muldf3
<li><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__eqdf2
<li><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fixdfsi
</ul>
<p><strong><a name="[8a2]"></a>__fpcmp_parts_d</strong>(194 bytes, Stack size 0 btyes, _fpcmp_parts_df.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__eqdf2
</ul>
<p><strong><a name="[8a3]"></a>__GI_putchar</strong>(12 bytes, Stack size 4 btyes, putchar.o(.text))<br>
<br>[Calls]<ul>
<li><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</ul>
<p><strong><a name="[8a4]"></a>putchar</strong>(12 bytes, Stack size 0 btyes, putchar.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_print.constprop.1
</ul>
<p><strong><a name="[8a5]"></a>__GI_perror</strong>(62 bytes, Stack size 8 btyes, perror.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 44 + In Cycle
<li>Call Chain = __GI_perror &rArr; fputc &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<li><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
<li><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</ul>
<p><strong><a name="[8a6]"></a>perror</strong>(62 bytes, Stack size 0 btyes, perror.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
</ul>
<p><strong><a name="[8a7]"></a>__GI_fputs</strong>(74 bytes, Stack size 24 btyes, fputs.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 60 + In Cycle
<li>Call Chain = __GI_fputs &rArr; fputc &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_critical_enter
<li><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<li><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_critical_exit
</ul>
<p><strong><a name="[8a8]"></a>fputs</strong>(74 bytes, Stack size 0 btyes, fputs.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_perror
</ul>
<p><strong><a name="[8a9]"></a>__GI_rand</strong>(0 bytes, Stack size 0 btyes, rand.o(.text))<br>
<p><strong><a name="[8aa]"></a>rand</strong>(20 bytes, Stack size 0 btyes, rand.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<li><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<li><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<li><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
<li><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
</ul>
<p><strong><a name="[8ab]"></a>__GI_srand</strong>(6 bytes, Stack size 0 btyes, rand.o(.text))<br>
<p><strong><a name="[8ac]"></a>srand</strong>(6 bytes, Stack size 0 btyes, rand.o(.text))<br>
<p><strong><a name="[8ad]"></a>__GI_strtoul</strong>(244 bytes, Stack size 28 btyes, strtoul.o(.text))<br>
<br>[Calls]<ul>
<li><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<li><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isdigit
<li><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isalpha
<li><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isupper
</ul>
<p><strong><a name="[8ae]"></a>strtoul</strong>(244 bytes, Stack size 0 btyes, strtoul.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
<li><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_memory
</ul>
<p><strong><a name="[8af]"></a>atoi</strong>(12 bytes, Stack size 4 btyes, atoi.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = atoi &rArr; strtol &rArr; simple_strtol  &rArr; simple_strtoul  </ul>
<br>[Calls]<ul>
<li><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</ul>
<br>[Called By]<ul>
<li><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<li><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
</ul>
<p><strong><a name="[8b0]"></a>__GI_strerror</strong>(18 bytes, Stack size 0 btyes, strerror.o(.text))<br>
<p><strong><a name="[8b1]"></a>strerror</strong>(18 bytes, Stack size 0 btyes, strerror.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_perror
</ul>
<p><strong><a name="[8b2]"></a>__GI_isdigit</strong>(8 bytes, Stack size 0 btyes, isdigit.o(.text))<br>
<p><strong><a name="[8b3]"></a>isdigit</strong>(8 bytes, Stack size 0 btyes, isdigit.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_strtoul
</ul>
<p><strong><a name="[8b4]"></a>__GI_isupper</strong>(8 bytes, Stack size 0 btyes, isupper.o(.text))<br>
<p><strong><a name="[8b5]"></a>isupper</strong>(8 bytes, Stack size 0 btyes, isupper.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_strtoul
</ul>
<p><strong><a name="[8b6]"></a>__GI_isalpha</strong>(18 bytes, Stack size 0 btyes, isalpha.o(.text))<br>
<p><strong><a name="[8b7]"></a>isalpha</strong>(18 bytes, Stack size 0 btyes, isalpha.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_strtoul
</ul>
<p><strong><a name="[8b8]"></a>__GI_isspace</strong>(20 bytes, Stack size 0 btyes, isspace.o(.text))<br>
<p><strong><a name="[8b9]"></a>isspace</strong>(20 bytes, Stack size 0 btyes, isspace.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_strtoul
</ul>
<p><strong><a name="[8ba]"></a>minilibc_init</strong>(40 bytes, Stack size 0 btyes, minilibc_init.o(.text))<br>
<p><strong><a name="[8bb]"></a>__GI_os_critical_open</strong>(4 bytes, Stack size 0 btyes, critical.o(.text))<br>
<p><strong><a name="[8bc]"></a>os_critical_open</strong>(4 bytes, Stack size 0 btyes, critical.o(.text))<br>
<p><strong><a name="[8bd]"></a>__GI_os_critical_enter</strong>(4 bytes, Stack size 0 btyes, critical.o(.text))<br>
<p><strong><a name="[79]"></a>os_critical_enter</strong>(4 bytes, Stack size 0 btyes, critical.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_fputs
</ul>
<p><strong><a name="[8be]"></a>__GI_os_critical_exit</strong>(4 bytes, Stack size 0 btyes, critical.o(.text))<br>
<p><strong><a name="[7f]"></a>os_critical_exit</strong>(4 bytes, Stack size 0 btyes, critical.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_fputs
</ul>
<p><strong><a name="[8bf]"></a>__GI_os_critical_close</strong>(4 bytes, Stack size 0 btyes, critical.o(.text))<br>
<p><strong><a name="[8c0]"></a>os_critical_close</strong>(4 bytes, Stack size 0 btyes, critical.o(.text))<br>
<p><strong><a name="[8c1]"></a>__GI_putc</strong>(8 bytes, Stack size 4 btyes, putc.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 40 + In Cycle
<li>Call Chain = __GI_putc &rArr; fputc &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</ul>
<p><strong><a name="[8c2]"></a>putc</strong>(8 bytes, Stack size 0 btyes, putc.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_putchar
</ul>
<h3>Local Symbols</h3>
<p><strong><a name="[0]"></a>data_print.constprop.1</strong>(44 bytes, Stack size 16 btyes, Obj/entry_ipraw.o(.text.data_print.constprop.1))<br>
<br>[Calls]<ul>
<li><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</ul>
<br>[Called By]<ul>
<li><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iprawtest
</ul>
<p><strong><a name="[2]"></a>thread1_entry</strong>(10 bytes, Stack size 4 btyes, Obj/entry_main.o(.text.thread1_entry))<br>
<br>[Calls]<ul>
<li><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</ul>
<p><strong><a name="[5]"></a>drv_cputime_gettime</strong>(8 bytes, Stack size 4 btyes, Obj/drivers_drv_cputime.o(.text.drv_cputime_gettime))<br>
<br>[Calls]<ul>
<li><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_sw_cnt_get
</ul>
<p><strong><a name="[6]"></a>drv_cputime_getres</strong>(40 bytes, Stack size 8 btyes, Obj/drivers_drv_cputime.o(.text.drv_cputime_getres))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = drv_cputime_getres &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_get
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__floatunsisf
<li><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__divsf3
</ul>
<p><strong><a name="[7]"></a>drv_crypto_init</strong>(32 bytes, Stack size 8 btyes, Obj/drivers_drv_crypto.o(.text.drv_crypto_init))<br>
<br>[Stack]<ul><li>Max Depth = 252 
<li>Call Chain = drv_crypto_init &rArr; rt_crypto_register &rArr; rt_device_register  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_crypto_register
</ul>
<p><strong><a name="[8]"></a>drv_crypto_ioctl</strong>(18 bytes, Stack size 4 btyes, Obj/drivers_drv_crypto.o(.text.drv_crypto_ioctl))<br>
<br>[Calls]<ul>
<li><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_hw_init
<li><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_reset
</ul>
<p><strong><a name="[9]"></a>drv_crypto_reset</strong>(18 bytes, Stack size 4 btyes, Obj/drivers_drv_crypto.o(.text.drv_crypto_reset))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = drv_crypto_reset &rArr; pke_init </ul>
<br>[Calls]<ul>
<li><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_hw_init
<li><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_reset
<li><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_init
</ul>
<p><strong><a name="[a]"></a>drv_crypto_lock.part.0</strong>(14 bytes, Stack size 0 btyes, Obj/drivers_drv_crypto.o(.fast))<br>
<p><strong><a name="[3b]"></a>sys_tick_isr</strong>(20 bytes, Stack size 4 btyes, Obj/drivers_drv_ctimer.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 256 
<li>Call Chain = sys_tick_isr &rArr; rt_tick_increase &rArr; rt_thread_yield  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_intr_clear
<li><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_clear
<li><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</ul>
<p><strong><a name="[3d]"></a>eth_dev_open</strong>(4 bytes, Stack size 0 btyes, Obj/drivers_drv_eth.o(.text.eth_dev_open))<br>
<p><strong><a name="[3e]"></a>eth_dev_close</strong>(4 bytes, Stack size 0 btyes, Obj/drivers_drv_eth.o(.text.eth_dev_close))<br>
<p><strong><a name="[3f]"></a>rt_hw_t610_eth0_init</strong>(432 bytes, Stack size 24 btyes, Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth0_init))<br>
<br>[Stack]<ul><li>Max Depth = 456 
<li>Call Chain = rt_hw_t610_eth0_init &rArr; eth_device_init &rArr; eth_device_init_with_flag  &rArr; netifapi_netif_add  &rArr; tcpip_api_call  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand_get
<li><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_hw_init
<li><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_tx_queue_init
<li><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_rx_queue_init
<li><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_rx_buf_attach
<li><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_chksum_offload_set
<li><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_flow_ctrl_enable
<li><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_mac_addr_set
<li><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_intr_enable
<li><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_addr_filter_set
<li><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_tx_enable
<li><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_rx_enable
<li><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_addr_set
<li><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_clk_set
<li><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<li><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_install
<li><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_umask
<li><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[40]"></a>rt_hw_t610_eth1_init</strong>(438 bytes, Stack size 24 btyes, Obj/drivers_drv_eth.o(.text.rt_hw_t610_eth1_init))<br>
<br>[Stack]<ul><li>Max Depth = 456 
<li>Call Chain = rt_hw_t610_eth1_init &rArr; eth_device_init &rArr; eth_device_init_with_flag  &rArr; netifapi_netif_add  &rArr; tcpip_api_call  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand_get
<li><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_hw_init
<li><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_tx_queue_init
<li><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_rx_queue_init
<li><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_rx_buf_attach
<li><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_chksum_offload_set
<li><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_flow_ctrl_enable
<li><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_mac_addr_set
<li><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_intr_enable
<li><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_addr_filter_set
<li><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_tx_enable
<li><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_rx_enable
<li><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_addr_set
<li><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_clk_set
<li><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<li><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<li><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_install
<li><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_umask
<li><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[41]"></a>eth_dev_tx</strong>(318 bytes, Stack size 28 btyes, Obj/drivers_drv_eth.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 388 
<li>Call Chain = eth_dev_tx &rArr; pbuf_alloc &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_frame_transmitted_buf_poll
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<li><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_frame_transmit
<li><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
</ul>
<p><strong><a name="[42]"></a>eth_dev_init</strong>(34 bytes, Stack size 0 btyes, Obj/drivers_drv_eth.o(.text.eth_dev_init))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = eth_dev_init &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<p><strong><a name="[43]"></a>eth_dev_control</strong>(824 bytes, Stack size 28 btyes, Obj/drivers_drv_eth.o(.text.eth_dev_control))<br>
<br>[Stack]<ul><li>Max Depth = 388 
<li>Call Chain = eth_dev_control &rArr; pbuf_alloc &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_addr_filter_get
<li><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_mac_addr_get
<li><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_mac_addr_set
<li><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<li><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_wol_wakeup_frame_filter_set
<li><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_wol_wakeup_event_set
<li><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_wol_mode_enter
<li><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_wol_state_poll
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_wol_mode_exit
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_flow_ctrl_disable
<li><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_statistics_get
<li><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_hash_filter_set
<li><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_hash_filter_get
<li><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_tx_disable
<li><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_rx_disable
<li><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_jumbo_frame_disable
<li><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_addr_filter_set
<li><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_jumbo_frame_enable
<li><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_rx_enable
<li><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_tx_enable
<li><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_flow_ctrl_enable
<li><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_hw_deinit
<li><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_hw_init
<li><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_tx_queue_init
<li><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_rx_queue_init
<li><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_rx_buf_attach
<li><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_chksum_offload_set
<li><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_intr_enable
<li><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_addr_set
<li><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_phy_mmd_clk_set
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[44]"></a>eth_dev_write</strong>(14 bytes, Stack size 4 btyes, Obj/drivers_drv_eth.o(.text.eth_dev_write))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = eth_dev_write &rArr; rt_set_errno </ul>
<br>[Calls]<ul>
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<p><strong><a name="[45]"></a>eth_dev_read</strong>(14 bytes, Stack size 0 btyes, Obj/drivers_drv_eth.o(.text.eth_dev_read))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = eth_dev_read &rArr; rt_set_errno </ul>
<br>[Calls]<ul>
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<p><strong><a name="[46]"></a>eth_dev_rx</strong>(224 bytes, Stack size 20 btyes, Obj/drivers_drv_eth.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 380 
<li>Call Chain = eth_dev_rx &rArr; pbuf_alloc &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_frame_recv_poll
<li><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_rx_valid_buf
<li><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_rx_buf_attach
<li><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_rx_buf_processed
<li><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_intr_enable
</ul>
<p><strong><a name="[47]"></a>eth_link_update</strong>(330 bytes, Stack size 88 btyes, Obj/drivers_drv_eth.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 396 
<li>Call Chain = eth_link_update &rArr; eth_device_linkchange &rArr; rt_mb_send  &rArr; rt_mb_send_wait  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_speed_duplex_set
<li><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_linkchange
<li><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[48]"></a>eth0_isr</strong>(78 bytes, Stack size 12 btyes, Obj/drivers_drv_eth.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = eth0_isr &rArr; eth_device_ready &rArr; rt_mb_send  &rArr; rt_mb_send_wait  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_clear
<li><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_intr_status
<li><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_intr_clear
<li><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_ready
<li><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_intr_disable
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[49]"></a>eth1_isr</strong>(78 bytes, Stack size 12 btyes, Obj/drivers_drv_eth.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = eth1_isr &rArr; eth_device_ready &rArr; rt_mb_send  &rArr; rt_mb_send_wait  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_clear
<li><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_intr_status
<li><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_intr_clear
<li><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_ready
<li><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_intr_disable
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[50]"></a>drv_pin_init</strong>(14 bytes, Stack size 4 btyes, Obj/drivers_drv_gpio.o(.text.drv_pin_init))<br>
<br>[Stack]<ul><li>Max Depth = 236 
<li>Call Chain = drv_pin_init &rArr; rt_device_pin_register &rArr; rt_device_register  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
</ul>
<p><strong><a name="[52]"></a>drv_i2c_init</strong>(48 bytes, Stack size 12 btyes, Obj/drivers_drv_i2c.o(.text.drv_i2c_init))<br>
<br>[Stack]<ul><li>Max Depth = 264 
<li>Call Chain = drv_i2c_init &rArr; rt_i2c_bus_device_register &rArr; rt_i2c_bus_device_device_init  &rArr; rt_device_register  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_hw_init
<li><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<li><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_register
</ul>
<p><strong><a name="[53]"></a>drv_i2c_xfer</strong>(216 bytes, Stack size 24 btyes, Obj/drivers_drv_i2c.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = drv_i2c_xfer &rArr; i2c_recv </ul>
<br>[Calls]<ul>
<li><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_is_busy
<li><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send
<li><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_recv
</ul>
<p><strong><a name="[5a]"></a>drv_ata_register</strong>(32 bytes, Stack size 4 btyes, Obj/drivers_drv_sata.o(.text.drv_ata_register))<br>
<br>[Stack]<ul><li>Max Depth = 248 
<li>Call Chain = drv_ata_register &rArr; rt_ata_register &rArr; rt_device_register  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hba_get
<li><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ata_register
</ul>
<p><strong><a name="[5b]"></a>drv_ata_trim</strong>(74 bytes, Stack size 20 btyes, Obj/drivers_drv_sata.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 392 
<li>Call Chain = drv_ata_trim &rArr; ahci_data_set_trim &rArr; ahci_cmd_issue  &rArr; ahci_cmd_complete_wait  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_slot_is_empty
<li><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_data_set_trim
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_error_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_write
<li><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_read
</ul>
<p><strong><a name="[5c]"></a>drv_ata_probe</strong>(138 bytes, Stack size 0 btyes, Obj/drivers_drv_sata.o(.text.drv_ata_probe))<br>
<br>[Stack]<ul><li>Max Depth = 408 
<li>Call Chain = drv_ata_probe &rArr; ahci_hba_reset &rArr; ahci_identify_read  &rArr; ahci_cmd_issue  &rArr; ahci_cmd_complete_wait  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hba_reset
<li><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_identify_read
<li><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_xfer_mode_set
<li><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_error_handler
</ul>
<p><strong><a name="[5d]"></a>drv_ata_init</strong>(126 bytes, Stack size 12 btyes, Obj/drivers_drv_sata.o(.text.drv_ata_init))<br>
<br>[Stack]<ul><li>Max Depth = 436 
<li>Call Chain = drv_ata_init &rArr; ahci_hw_init &rArr; ahci_hba_reset  &rArr; ahci_identify_read  &rArr; ahci_cmd_issue  &rArr; ahci_cmd_complete_wait  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_get
<li><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_clock_set
<li><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_wait_timeout_set
<li><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_speed_set
<li><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hw_init
<li><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_mask
<li><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_intr_enable
<li><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_install
<li><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_umask
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_reset
</ul>
<p><strong><a name="[5e]"></a>drv_ata_reset</strong>(134 bytes, Stack size 36 btyes, Obj/drivers_drv_sata.o(.text.drv_ata_reset))<br>
<br>[Stack]<ul><li>Max Depth = 472 
<li>Call Chain = drv_ata_reset &rArr; drv_ata_init &rArr; ahci_hw_init  &rArr; ahci_hba_reset  &rArr; ahci_identify_read  &rArr; ahci_cmd_issue  &rArr; ahci_cmd_complete_wait  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_hba_get
<li><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_is_busy
<li><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_module_reset
<li><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_reset
<li><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_init
<li><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_data_pad
<li><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_data_discard
</ul>
<br>[Called By]<ul>
<li><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_write
<li><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_read
</ul>
<p><strong><a name="[5f]"></a>drv_ata_sync</strong>(66 bytes, Stack size 12 btyes, Obj/drivers_drv_sata.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 384 
<li>Call Chain = drv_ata_sync &rArr; ahci_cache_flush &rArr; ahci_cmd_issue  &rArr; ahci_cmd_complete_wait  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_slot_is_empty
<li><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cache_flush
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_error_handler
</ul>
<p><strong><a name="[60]"></a>drv_ata_ioctl</strong>(64 bytes, Stack size 4 btyes, Obj/drivers_drv_sata.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 176 
<li>Call Chain = drv_ata_ioctl &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_intr_disable
<li><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_mask
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_intr_enable
<li><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_umask
</ul>
<p><strong><a name="[61]"></a>drv_ata_cmd_pending_check</strong>(130 bytes, Stack size 28 btyes, Obj/drivers_drv_sata.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 320 
<li>Call Chain = drv_ata_cmd_pending_check &rArr; rt_wqueue_wait &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
<li><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_reg_ci_get
<li><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_reg_sact_get
</ul>
<p><strong><a name="[62]"></a>drv_ata_write</strong>(294 bytes, Stack size 52 btyes, Obj/drivers_drv_sata.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 524 
<li>Call Chain = drv_ata_write &rArr; drv_ata_reset &rArr; drv_ata_init  &rArr; ahci_hw_init  &rArr; ahci_hba_reset  &rArr; ahci_identify_read  &rArr; ahci_cmd_issue  &rArr; ahci_cmd_complete_wait  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_slot_is_empty
<li><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_sector_write
<li><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_slot_free
<li><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bridge_is_required
<li><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bridge_enable
<li><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_frontend_port_addr
<li><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_issue
<li><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_trim
<li><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_error_handler
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_reset
</ul>
<p><strong><a name="[63]"></a>drv_ata_read</strong>(322 bytes, Stack size 52 btyes, Obj/drivers_drv_sata.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 524 
<li>Call Chain = drv_ata_read &rArr; drv_ata_reset &rArr; drv_ata_init  &rArr; ahci_hw_init  &rArr; ahci_hba_reset  &rArr; ahci_identify_read  &rArr; ahci_cmd_issue  &rArr; ahci_cmd_complete_wait  &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_slot_is_empty
<li><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_sector_read
<li><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_slot_free
<li><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bridge_is_required
<li><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bridge_enable
<li><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_frontend_port_addr
<li><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_cmd_issue
<li><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_trim
<li><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_error_handler
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ata_reset
</ul>
<p><strong><a name="[64]"></a>ahci_isr</strong>(458 bytes, Stack size 36 btyes, Obj/drivers_drv_sata.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 352 
<li>Call Chain = ahci_isr &rArr; ahci_link_change_handler &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_intr_status
<li><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_intr_clear
<li><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_reg_is_flush
<li><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_clear
<li><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_reg_ci_get
<li><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_reg_sact_get
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_ccs_get
<li><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_port_serr_clear
<li><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahci_link_change_handler
</ul>
<p><strong><a name="[65]"></a>drv_spi_xfer</strong>(84 bytes, Stack size 12 btyes, Obj/drivers_drv_spi.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = drv_spi_xfer &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_recv
<li><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frame_output_high
<li><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frame_output_low
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[66]"></a>drv_spi_configure</strong>(132 bytes, Stack size 32 btyes, Obj/drivers_drv_spi.o(.text.drv_spi_configure))<br>
<br>[Stack]<ul><li>Max Depth = 336 
<li>Call Chain = drv_spi_configure &rArr; spi_hw_init &rArr; log_error_id  &rArr; log_nonvolatile  &rArr; log_write  &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_get
<li><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_hw_init
</ul>
<p><strong><a name="[67]"></a>drv_spi_init</strong>(20 bytes, Stack size 4 btyes, Obj/drivers_drv_spi.o(.text.drv_spi_init))<br>
<br>[Stack]<ul><li>Max Depth = 260 
<li>Call Chain = drv_spi_init &rArr; rt_spi_bus_register &rArr; rt_spi_bus_device_init  &rArr; rt_device_register  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frame_output_port_set
<li><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
</ul>
<p><strong><a name="[6a]"></a>drv_timers_init</strong>(112 bytes, Stack size 0 btyes, Obj/drivers_drv_timer.o(.text.drv_timers_init))<br>
<br>[Stack]<ul><li>Max Depth = 240 
<li>Call Chain = drv_timers_init &rArr; rt_device_hwtimer_register &rArr; rt_device_register  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_get
<li><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_hwtimer_register
</ul>
<p><strong><a name="[6b]"></a>drv_hwtimer_control</strong>(78 bytes, Stack size 16 btyes, Obj/drivers_drv_timer.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = drv_hwtimer_control &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_get
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[6c]"></a>drv_hwtimer_count_get</strong>(48 bytes, Stack size 8 btyes, Obj/drivers_drv_timer.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = drv_hwtimer_count_get &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_count_get
</ul>
<p><strong><a name="[6d]"></a>drv_hwtimer_stop</strong>(48 bytes, Stack size 8 btyes, Obj/drivers_drv_timer.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = drv_hwtimer_stop &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop
</ul>
<p><strong><a name="[6e]"></a>drv_hwtimer_start</strong>(110 bytes, Stack size 36 btyes, Obj/drivers_drv_timer.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 220 
<li>Call Chain = drv_hwtimer_start &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tic_us_get
<li><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_hw_init
<li><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_install
<li><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_umask
<li><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[70]"></a>drv_uart_init</strong>(192 bytes, Stack size 0 btyes, Obj/drivers_drv_uart.o(.text.drv_uart_init))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = drv_uart_init &rArr; rt_hw_serial_register &rArr; rt_device_register  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
</ul>
<p><strong><a name="[72]"></a>drv_uart_getc</strong>(64 bytes, Stack size 8 btyes, Obj/drivers_drv_uart.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = drv_uart_getc &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_ready
<li><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ndelay_getc
</ul>
<p><strong><a name="[73]"></a>drv_uart_putc</strong>(54 bytes, Stack size 12 btyes, Obj/drivers_drv_uart.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = drv_uart_putc &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc
</ul>
<p><strong><a name="[74]"></a>drv_uart_control</strong>(122 bytes, Stack size 12 btyes, Obj/drivers_drv_uart.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = drv_uart_control &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_intr_disable
<li><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_intr_enable
<li><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_install
<li><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_umask
</ul>
<p><strong><a name="[75]"></a>drv_uart_configure</strong>(96 bytes, Stack size 28 btyes, Obj/drivers_drv_uart.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = drv_uart_configure &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init
</ul>
<p><strong><a name="[76]"></a>drv_wdt_config</strong>(24 bytes, Stack size 12 btyes, Obj/drivers_drv_wdt.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = drv_wdt_config &rArr; wdt_hw_init </ul>
<br>[Calls]<ul>
<li><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_hw_init
</ul>
<p><strong><a name="[77]"></a>drv_wdt_init</strong>(22 bytes, Stack size 4 btyes, Obj/drivers_drv_wdt.o(.text.drv_wdt_init))<br>
<br>[Stack]<ul><li>Max Depth = 248 
<li>Call Chain = drv_wdt_init &rArr; rt_hw_watchdog_register &rArr; rt_device_register  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_watchdog_register
</ul>
<p><strong><a name="[78]"></a>drv_wdt_control</strong>(92 bytes, Stack size 12 btyes, Obj/drivers_drv_wdt.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = drv_wdt_control &rArr; wdt_hw_init </ul>
<br>[Calls]<ul>
<li><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_start
<li><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_feed
<li><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_stop
<li><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_hw_init
</ul>
<p><strong><a name="[9e]"></a>rti_end</strong>(4 bytes, Stack size 0 btyes, Obj/src_components.o(.text.rti_end))<br>
<p><strong><a name="[a0]"></a>rti_board_end</strong>(4 bytes, Stack size 0 btyes, Obj/src_components.o(.text.rti_board_end))<br>
<p><strong><a name="[a1]"></a>rti_start</strong>(4 bytes, Stack size 0 btyes, Obj/src_components.o(.text.rti_start))<br>
<p><strong><a name="[a2]"></a>rti_board_start</strong>(4 bytes, Stack size 0 btyes, Obj/src_components.o(.text.rti_board_start))<br>
<p><strong><a name="[ba]"></a>rt_thread_idle_entry</strong>(18 bytes, Stack size 8 btyes, Obj/src_idle.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 328 
<li>Call Chain = rt_thread_idle_entry &rArr; rt_thread_idle_excute &rArr; rt_object_delete  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</ul>
<p><strong><a name="[e7]"></a>print_number</strong>(514 bytes, Stack size 108 btyes, Obj/src_kservice.o(.text.print_number))<br>
<br>[Stack]<ul><li>Max Depth = 132 
<li>Call Chain = print_number &rArr; __umoddi3 </ul>
<br>[Calls]<ul>
<li><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__umoddi3
<li><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivdi3
</ul>
<br>[Called By]<ul>
<li><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</ul>
<p><strong><a name="[118]"></a>plug_holes</strong>(158 bytes, Stack size 16 btyes, Obj/src_mem.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = plug_holes &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
</ul>
<p><strong><a name="[13e]"></a>_rt_thread_init.isra.0</strong>(144 bytes, Stack size 24 btyes, Obj/src_thread.o(.text._rt_thread_init.isra.0))<br>
<br>[Stack]<ul><li>Max Depth = 256 
<li>Call Chain = _rt_thread_init.isra.0 &rArr; rt_timer_init &rArr; rt_object_init  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<li><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
<li><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<li><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</ul>
<p><strong><a name="[17e]"></a>copyfile</strong>(194 bytes, Stack size 48 btyes, Obj/src_dfs_file.o(.text.copyfile))<br>
<br>[Stack]<ul><li>Max Depth = 460 
<li>Call Chain = copyfile &rArr; dfs_file_open &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</ul>
<br>[Called By]<ul>
<li><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<li><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</ul>
<p><strong><a name="[185]"></a>copydir</strong>(256 bytes, Stack size 388 btyes, Obj/src_dfs_file.o(.text.copydir))<br>
<br>[Stack]<ul><li>Max Depth = 388 
<li>Call Chain = copydir &rArr; copyfile &rArr; dfs_file_open  &rArr; fd_is_open  &rArr; dfs_filesystem_lookup  &rArr; dfs_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<li><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<li><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<li><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<li><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<li><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</ul>
<br>[Called By]<ul>
<li><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<li><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</ul>
<p><strong><a name="[1ae]"></a>_poll_add</strong>(54 bytes, Stack size 12 btyes, Obj/src_poll.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 320 
<li>Call Chain = _poll_add &rArr; rt_malloc &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_add
</ul>
<p><strong><a name="[1af]"></a>__wqueue_pollwake</strong>(32 bytes, Stack size 4 btyes, Obj/src_poll.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wqueue_default_wake
</ul>
<p><strong><a name="[1b3]"></a>dfs_device_fs_poll</strong>(4 bytes, Stack size 0 btyes, Obj/devfs_devfs.o(.text.dfs_device_fs_poll))<br>
<p><strong><a name="[1d9]"></a>get_ldnumber</strong>(90 bytes, Stack size 4 btyes, Obj/elmfat_ff.o(.text.get_ldnumber))<br>
<br>[Called By]<ul>
<li><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<li><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<li><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<li><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</ul>
<p><strong><a name="[1da]"></a>xname_sum</strong>(86 bytes, Stack size 12 btyes, Obj/elmfat_ff.o(.text.xname_sum))<br>
<br>[Calls]<ul>
<li><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</ul>
<br>[Called By]<ul>
<li><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<li><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</ul>
<p><strong><a name="[1db]"></a>validate</strong>(76 bytes, Stack size 16 btyes, Obj/elmfat_ff.o(.text.validate))<br>
<br>[Stack]<ul><li>Max Depth = 332 
<li>Call Chain = validate &rArr; ff_req_grant &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<li><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
</ul>
<br>[Called By]<ul>
<li><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<li><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<li><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<li><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<li><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<li><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</ul>
<p><strong><a name="[1dc]"></a>sync_window.part.5</strong>(78 bytes, Stack size 20 btyes, Obj/elmfat_ff.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 48 + In Cycle
<li>Call Chain = sync_window.part.5 &rArr; disk_write &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</ul>
<br>[Called By]<ul>
<li><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<li><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_bitmap
<li><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<li><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat.part.7
<li><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<li><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<li><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<li><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<li><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<li><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<li><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<li><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<li><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_fat_chain.part.8
<li><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<li><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<li><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<li><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<li><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<li><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read.constprop.11
<li><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<li><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<li><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<li><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<li><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<li><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<li><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<li><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</ul>
<p><strong><a name="[1dd]"></a>dir_sdi</strong>(180 bytes, Stack size 0 btyes, Obj/elmfat_ff.o(.text.dir_sdi))<br>
<br>[Stack]<ul><li>Max Depth = 48 + In Cycle
<li>Call Chain = dir_sdi &rArr; sync_window.part.5 &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
</ul>
<br>[Called By]<ul>
<li><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<li><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<li><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<li><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<li><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<li><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<li><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<li><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<li><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<li><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<li><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</ul>
<p><strong><a name="[1de]"></a>sync_fs</strong>(190 bytes, Stack size 16 btyes, Obj/elmfat_ff.o(.text.sync_fs))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = sync_fs &rArr; disk_ioctl &rArr; rt_device_control  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</ul>
<br>[Called By]<ul>
<li><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<li><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<li><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<li><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</ul>
<p><strong><a name="[1df]"></a>check_fs</strong>(194 bytes, Stack size 8 btyes, Obj/elmfat_ff.o(.text.check_fs))<br>
<br>[Stack]<ul><li>Max Depth = 56 + In Cycle
<li>Call Chain = check_fs &rArr; sync_window.part.5 &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
</ul>
<br>[Called By]<ul>
<li><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</ul>
<p><strong><a name="[1e0]"></a>find_volume</strong>(1394 bytes, Stack size 36 btyes, Obj/elmfat_ff.o(.text.find_volume))<br>
<br>[Stack]<ul><li>Max Depth = 352 
<li>Call Chain = find_volume &rArr; ff_req_grant &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<li><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
<li><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<li><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<li><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
</ul>
<br>[Called By]<ul>
<li><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<li><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<li><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<li><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<li><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<li><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<li><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<li><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</ul>
<p><strong><a name="[1e1]"></a>remove_chain</strong>(260 bytes, Stack size 0 btyes, Obj/elmfat_ff.o(.text.remove_chain))<br>
<br>[Stack]<ul><li>Max Depth = 48 + In Cycle
<li>Call Chain = remove_chain &rArr; sync_window.part.5 &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
</ul>
<br>[Called By]<ul>
<li><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<li><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<li><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</ul>
<p><strong><a name="[1e2]"></a>fill_fat_chain.part.8</strong>(76 bytes, Stack size 20 btyes, Obj/elmfat_ff.o(.text.fill_fat_chain.part.8))<br>
<br>[Stack]<ul><li>Max Depth = 68 + In Cycle
<li>Call Chain = fill_fat_chain.part.8 &rArr; sync_window.part.5 &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
</ul>
<br>[Called By]<ul>
<li><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<li><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</ul>
<p><strong><a name="[1e3]"></a>unlock_fs.part.9</strong>(14 bytes, Stack size 4 btyes, Obj/elmfat_ff.o(.text.unlock_fs.part.9))<br>
<br>[Stack]<ul><li>Max Depth = 296 
<li>Call Chain = unlock_fs.part.9 &rArr; ff_rel_grant &rArr; rt_mutex_release  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</ul>
<br>[Called By]<ul>
<li><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<li><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<li><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<li><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<li><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<li><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<li><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<li><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<li><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<li><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<li><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<li><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<li><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</ul>
<p><strong><a name="[1e4]"></a>get_fileinfo</strong>(526 bytes, Stack size 36 btyes, Obj/elmfat_ff.o(.text.get_fileinfo))<br>
<br>[Calls]<ul>
<li><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</ul>
<br>[Called By]<ul>
<li><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<li><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
</ul>
<p><strong><a name="[1e5]"></a>dir_next</strong>(332 bytes, Stack size 0 btyes, Obj/elmfat_ff.o(.text.dir_next))<br>
<br>[Stack]<ul><li>Max Depth = 48 + In Cycle
<li>Call Chain = dir_next &rArr; sync_window.part.5 &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<li><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<li><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<li><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<li><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read.constprop.11
<li><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<li><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<li><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<li><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
</ul>
<p><strong><a name="[1e6]"></a>load_xdir</strong>(226 bytes, Stack size 24 btyes, Obj/elmfat_ff.o(.text.load_xdir))<br>
<br>[Stack]<ul><li>Max Depth = 72 + In Cycle
<li>Call Chain = load_xdir &rArr; sync_window.part.5 &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</ul>
<br>[Called By]<ul>
<li><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read.constprop.11
<li><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<li><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</ul>
<p><strong><a name="[1e7]"></a>dir_alloc</strong>(112 bytes, Stack size 20 btyes, Obj/elmfat_ff.o(.text.dir_alloc))<br>
<br>[Stack]<ul><li>Max Depth = 68 + In Cycle
<li>Call Chain = dir_alloc &rArr; dir_sdi &rArr; sync_window.part.5  &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<li><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
</ul>
<br>[Called By]<ul>
<li><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</ul>
<p><strong><a name="[1e8]"></a>store_xdir</strong>(164 bytes, Stack size 28 btyes, Obj/elmfat_ff.o(.text.store_xdir))<br>
<br>[Stack]<ul><li>Max Depth = 76 + In Cycle
<li>Call Chain = store_xdir &rArr; dir_sdi &rArr; sync_window.part.5  &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
</ul>
<br>[Called By]<ul>
<li><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<li><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<li><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<li><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<li><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</ul>
<p><strong><a name="[1e9]"></a>dir_remove</strong>(106 bytes, Stack size 24 btyes, Obj/elmfat_ff.o(.text.dir_remove))<br>
<br>[Stack]<ul><li>Max Depth = 72 + In Cycle
<li>Call Chain = dir_remove &rArr; dir_sdi &rArr; sync_window.part.5  &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<li><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
</ul>
<br>[Called By]<ul>
<li><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<li><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</ul>
<p><strong><a name="[1ea]"></a>dir_read.constprop.11</strong>(328 bytes, Stack size 28 btyes, Obj/elmfat_ff.o(.text.dir_read.constprop.11))<br>
<br>[Stack]<ul><li>Max Depth = 100 + In Cycle
<li>Call Chain = dir_read.constprop.11 &rArr; load_xdir &rArr; sync_window.part.5  &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
<li><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
</ul>
<br>[Called By]<ul>
<li><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<li><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<li><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<li><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</ul>
<p><strong><a name="[1eb]"></a>dir_find</strong>(602 bytes, Stack size 56 btyes, Obj/elmfat_ff.o(.text.dir_find))<br>
<br>[Stack]<ul><li>Max Depth = 156 + In Cycle
<li>Call Chain = dir_find &rArr; dir_read.constprop.11 &rArr; load_xdir  &rArr; sync_window.part.5  &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<li><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
<li><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<li><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xname_sum
<li><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read.constprop.11
</ul>
<br>[Called By]<ul>
<li><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<li><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</ul>
<p><strong><a name="[1ec]"></a>follow_path</strong>(1156 bytes, Stack size 124 btyes, Obj/elmfat_ff.o(.text.follow_path))<br>
<br>[Stack]<ul><li>Max Depth = 280 + In Cycle
<li>Call Chain = follow_path &rArr; dir_find &rArr; dir_read.constprop.11  &rArr; load_xdir  &rArr; sync_window.part.5  &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<li><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<li><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</ul>
<br>[Called By]<ul>
<li><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<li><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<li><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<li><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<li><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<li><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</ul>
<p><strong><a name="[1ed]"></a>dir_register</strong>(1206 bytes, Stack size 128 btyes, Obj/elmfat_ff.o(.text.dir_register))<br>
<br>[Stack]<ul><li>Max Depth = 284 + In Cycle
<li>Call Chain = dir_register &rArr; dir_find &rArr; dir_read.constprop.11  &rArr; load_xdir  &rArr; sync_window.part.5  &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<li><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<li><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
<li><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<li><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<li><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<li><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xname_sum
<li><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_fat_chain.part.8
</ul>
<br>[Called By]<ul>
<li><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<li><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<li><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</ul>
<p><strong><a name="[1ff]"></a>move_window</strong>(70 bytes, Stack size 12 btyes, Obj/elmfat_ff.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 224 
<li>Call Chain = move_window &rArr; disk_read &rArr; rt_device_read  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
</ul>
<p><strong><a name="[200]"></a>change_bitmap</strong>(124 bytes, Stack size 32 btyes, Obj/elmfat_ff.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 80 + In Cycle
<li>Call Chain = change_bitmap &rArr; sync_window.part.5 &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
</ul>
<p><strong><a name="[201]"></a>get_fat</strong>(356 bytes, Stack size 20 btyes, Obj/elmfat_ff.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 68 + In Cycle
<li>Call Chain = get_fat &rArr; sync_window.part.5 &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
</ul>
<p><strong><a name="[202]"></a>put_fat.part.7</strong>(306 bytes, Stack size 36 btyes, Obj/elmfat_ff.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 84 + In Cycle
<li>Call Chain = put_fat.part.7 &rArr; sync_window.part.5 &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
</ul>
<p><strong><a name="[203]"></a>create_chain</strong>(448 bytes, Stack size 32 btyes, Obj/elmfat_ff.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 80 + In Cycle
<li>Call Chain = create_chain &rArr; sync_window.part.5 &rArr; disk_write  &rArr; rt_device_write  &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window.part.5
</ul>
<p><strong><a name="[208]"></a>dfs_net_poll</strong>(94 bytes, Stack size 12 btyes, Obj/net_dfs_net.o(.text.dfs_net_poll))<br>
<br>[Calls]<ul>
<li><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tryget_socket
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</ul>
<p><strong><a name="[209]"></a>dfs_net_write</strong>(10 bytes, Stack size 4 btyes, Obj/net_dfs_net.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 44 + In Cycle
<li>Call Chain = dfs_net_write &rArr; lwip_write &rArr; lwip_send  &rArr; netconn_write_partly  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_write
</ul>
<p><strong><a name="[20a]"></a>dfs_net_ioctl</strong>(10 bytes, Stack size 0 btyes, Obj/net_dfs_net.o(.text.dfs_net_ioctl))<br>
<br>[Stack]<ul><li>Max Depth = 220 
<li>Call Chain = dfs_net_ioctl &rArr; lwip_ioctl &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
</ul>
<p><strong><a name="[20b]"></a>dfs_net_close</strong>(18 bytes, Stack size 4 btyes, Obj/net_dfs_net.o(.text.dfs_net_close))<br>
<br>[Stack]<ul><li>Max Depth = 416 
<li>Call Chain = dfs_net_close &rArr; lwip_close &rArr; netconn_delete  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</ul>
<p><strong><a name="[20d]"></a>dfs_net_read</strong>(10 bytes, Stack size 4 btyes, Obj/net_dfs_net.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 532 
<li>Call Chain = dfs_net_read &rArr; lwip_read &rArr; lwip_recvfrom  &rArr; netconn_recv  &rArr; netconn_recv_data  &rArr; netconn_close_shutdown  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_read
</ul>
<p><strong><a name="[213]"></a>event_callback</strong>(284 bytes, Stack size 20 btyes, Obj/net_net_sockets.o(.text.event_callback))<br>
<br>[Stack]<ul><li>Max Depth = 288 
<li>Call Chain = event_callback &rArr; rt_wqueue_wakeup &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tryget_socket
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<p><strong><a name="[244]"></a>rt_crypto_open</strong>(4 bytes, Stack size 0 btyes, Obj/crypto_crypto_dev.o(.text.rt_crypto_open))<br>
<p><strong><a name="[245]"></a>rt_crypto_close</strong>(4 bytes, Stack size 0 btyes, Obj/crypto_crypto_dev.o(.text.rt_crypto_close))<br>
<p><strong><a name="[246]"></a>rt_crypto_write</strong>(4 bytes, Stack size 0 btyes, Obj/crypto_crypto_dev.o(.text.rt_crypto_write))<br>
<p><strong><a name="[247]"></a>rt_crypto_ioctl</strong>(48 bytes, Stack size 16 btyes, Obj/crypto_crypto_dev.o(.text.rt_crypto_ioctl))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = rt_crypto_ioctl &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[248]"></a>rt_crypto_init</strong>(88 bytes, Stack size 8 btyes, Obj/crypto_crypto_dev.o(.text.rt_crypto_init))<br>
<br>[Stack]<ul><li>Max Depth = 228 
<li>Call Chain = rt_crypto_init &rArr; rt_mutex_init &rArr; rt_object_init  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[249]"></a>rt_crypto_read</strong>(4 bytes, Stack size 0 btyes, Obj/crypto_crypto_dev.o(.text.rt_crypto_read))<br>
<p><strong><a name="[24b]"></a>rt_hwtimer_init</strong>(62 bytes, Stack size 8 btyes, Obj/hwtimer_hwtimer.o(.text.rt_hwtimer_init))<br>
<p><strong><a name="[24c]"></a>rt_hwtimer_open</strong>(28 bytes, Stack size 4 btyes, Obj/hwtimer_hwtimer.o(.text.rt_hwtimer_open))<br>
<p><strong><a name="[24d]"></a>rt_hwtimer_close</strong>(36 bytes, Stack size 8 btyes, Obj/hwtimer_hwtimer.o(.text.rt_hwtimer_close))<br>
<p><strong><a name="[24e]"></a>rt_hwtimer_write</strong>(342 bytes, Stack size 48 btyes, Obj/hwtimer_hwtimer.o(.text.rt_hwtimer_write))<br>
<br>[Stack]<ul><li>Max Depth = 132 
<li>Call Chain = rt_hwtimer_write &rArr; __fixunssfsi &rArr; __subsf3  &rArr; _fpadd_parts  </ul>
<br>[Calls]<ul>
<li><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__floatsisf
<li><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__divsf3
<li><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__addsf3
<li><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ltsf2
<li><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__floatunsisf
<li><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gesf2
<li><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mulsf3
<li><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fixunssfsi
<li><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subsf3
<li><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gtsf2
<li><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__eqsf2
</ul>
<p><strong><a name="[24f]"></a>rt_hwtimer_control</strong>(146 bytes, Stack size 12 btyes, Obj/hwtimer_hwtimer.o(.text.rt_hwtimer_control))<br>
<p><strong><a name="[250]"></a>rt_hwtimer_read</strong>(144 bytes, Stack size 32 btyes, Obj/hwtimer_hwtimer.o(.text.rt_hwtimer_read))<br>
<br>[Stack]<ul><li>Max Depth = 108 
<li>Call Chain = rt_hwtimer_read &rArr; __mulsf3 &rArr; __muldi3  </ul>
<br>[Calls]<ul>
<li><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__floatsisf
<li><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mulsf3
<li><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__floatunsisf
<li><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__divsf3
<li><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__addsf3
<li><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fixsfsi
<li><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subsf3
<li><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</ul>
<p><strong><a name="[259]"></a>i2c_bus_device_control</strong>(118 bytes, Stack size 16 btyes, Obj/i2c_i2c_dev.o(.text.i2c_bus_device_control))<br>
<br>[Stack]<ul><li>Max Depth = 348 
<li>Call Chain = i2c_bus_device_control &rArr; rt_i2c_transfer &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[25a]"></a>i2c_bus_device_write</strong>(68 bytes, Stack size 24 btyes, Obj/i2c_i2c_dev.o(.text.i2c_bus_device_write))<br>
<br>[Stack]<ul><li>Max Depth = 376 
<li>Call Chain = i2c_bus_device_write &rArr; rt_i2c_master_send &rArr; rt_i2c_transfer  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_send
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[25b]"></a>i2c_bus_device_read</strong>(68 bytes, Stack size 24 btyes, Obj/i2c_i2c_dev.o(.text.i2c_bus_device_read))<br>
<br>[Stack]<ul><li>Max Depth = 392 
<li>Call Chain = i2c_bus_device_read &rArr; rt_i2c_master_recv &rArr; rt_i2c_transfer  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_recv
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[25d]"></a>i2c_start</strong>(32 bytes, Stack size 0 btyes, Obj/i2c_i2c-bit-ops.o(.text.i2c_start))<br>
<p><strong><a name="[25e]"></a>SCL_H</strong>(76 bytes, Stack size 0 btyes, Obj/i2c_i2c-bit-ops.o(.text.SCL_H))<br>
<p><strong><a name="[25f]"></a>i2c_restart</strong>(56 bytes, Stack size 0 btyes, Obj/i2c_i2c-bit-ops.o(.text.i2c_restart))<br>
<p><strong><a name="[260]"></a>i2c_stop</strong>(54 bytes, Stack size 0 btyes, Obj/i2c_i2c-bit-ops.o(.text.i2c_stop))<br>
<p><strong><a name="[261]"></a>i2c_writeb.isra.3</strong>(134 bytes, Stack size 0 btyes, Obj/i2c_i2c-bit-ops.o(.text.i2c_writeb.isra.3))<br>
<p><strong><a name="[262]"></a>i2c_send_address</strong>(74 bytes, Stack size 0 btyes, Obj/i2c_i2c-bit-ops.o(.text.i2c_send_address))<br>
<p><strong><a name="[263]"></a>i2c_bit_xfer</strong>(592 bytes, Stack size 0 btyes, Obj/i2c_i2c-bit-ops.o(.text.i2c_bit_xfer))<br>
<p><strong><a name="[265]"></a>i2c_eeprom_open</strong>(4 bytes, Stack size 0 btyes, Obj/i2c_i2c_eeprom.o(.text.i2c_eeprom_open))<br>
<p><strong><a name="[266]"></a>i2c_eeprom_close</strong>(4 bytes, Stack size 0 btyes, Obj/i2c_i2c_eeprom.o(.text.i2c_eeprom_close))<br>
<p><strong><a name="[267]"></a>i2c_eeprom_control</strong>(4 bytes, Stack size 0 btyes, Obj/i2c_i2c_eeprom.o(.text.i2c_eeprom_control))<br>
<p><strong><a name="[269]"></a>i2c_eeprom_read</strong>(162 bytes, Stack size 44 btyes, Obj/i2c_i2c_eeprom.o(.text.i2c_eeprom_read))<br>
<br>[Stack]<ul><li>Max Depth = 376 
<li>Call Chain = i2c_eeprom_read &rArr; rt_i2c_transfer &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
<li><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[26a]"></a>i2c_eeprom_write</strong>(566 bytes, Stack size 144 btyes, Obj/i2c_i2c_eeprom.o(.text.i2c_eeprom_write))<br>
<br>[Stack]<ul><li>Max Depth = 476 
<li>Call Chain = i2c_eeprom_write &rArr; rt_i2c_transfer &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
<li><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[26b]"></a>i2c_eeprom_init</strong>(4 bytes, Stack size 0 btyes, Obj/i2c_i2c_eeprom.o(.text.i2c_eeprom_init))<br>
<p><strong><a name="[26c]"></a>_pin_control</strong>(48 bytes, Stack size 12 btyes, Obj/misc_pin.o(.text._pin_control))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = _pin_control &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[270]"></a>_pin_write</strong>(58 bytes, Stack size 16 btyes, Obj/misc_pin.o(.text._pin_write))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = _pin_write &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[271]"></a>_pin_read</strong>(56 bytes, Stack size 16 btyes, Obj/misc_pin.o(.text._pin_read))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = _pin_read &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[278]"></a>ntp_sync_thread_enrty</strong>(28 bytes, Stack size 4 btyes, Obj/rtc_rtc.o(.text.ntp_sync_thread_enrty))<br>
<br>[Stack]<ul><li>Max Depth = 700 
<li>Call Chain = ntp_sync_thread_enrty &rArr; ntp_sync_to_rtc &rArr; ntp_get_time  &rArr; recvfrom  &rArr; lwip_recvfrom  &rArr; netconn_recv  &rArr; netconn_recv_data  &rArr; netconn_close_shutdown  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<li><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_to_rtc
</ul>
<p><strong><a name="[27b]"></a>date</strong>(230 bytes, Stack size 36 btyes, Obj/rtc_rtc.o(.text.date))<br>
<br>[Stack]<ul><li>Max Depth = 344 
<li>Call Chain = date &rArr; set_time &rArr; localtime  &rArr; localtime_r  &rArr; gettimeofday  &rArr; rt_device_find  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<li><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
<li><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<li><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
</ul>
<p><strong><a name="[27d]"></a>soft_rtc_control</strong>(116 bytes, Stack size 56 btyes, Obj/rtc_soft_rtc.o(.text.soft_rtc_control))<br>
<br>[Stack]<ul><li>Max Depth = 240 
<li>Call Chain = soft_rtc_control &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[27e]"></a>rt_ata_open</strong>(4 bytes, Stack size 0 btyes, Obj/sata_sata.o(.fast))<br>
<p><strong><a name="[27f]"></a>rt_ata_init</strong>(74 bytes, Stack size 0 btyes, Obj/sata_sata.o(.text.rt_ata_init))<br>
<br>[Stack]<ul><li>Max Depth = 220 
<li>Call Chain = rt_ata_init &rArr; rt_mutex_init &rArr; rt_object_init  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[281]"></a>rt_ata_close</strong>(4 bytes, Stack size 0 btyes, Obj/sata_sata.o(.fast))<br>
<p><strong><a name="[282]"></a>rt_ata_ioctl</strong>(162 bytes, Stack size 20 btyes, Obj/sata_sata.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 332 
<li>Call Chain = rt_ata_ioctl &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[283]"></a>rt_ata_write</strong>(86 bytes, Stack size 24 btyes, Obj/sata_sata.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 336 
<li>Call Chain = rt_ata_write &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[284]"></a>rt_ata_read</strong>(86 bytes, Stack size 24 btyes, Obj/sata_sata.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 336 
<li>Call Chain = rt_ata_read &rArr; rt_mutex_take &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[285]"></a>_serial_fifo_calc_recved_len</strong>(66 bytes, Stack size 12 btyes, Obj/serial_serial.o(.text._serial_fifo_calc_recved_len))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<br>[Called By]<ul>
<li><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<li><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<li><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</ul>
<p><strong><a name="[286]"></a>rt_serial_init</strong>(50 bytes, Stack size 8 btyes, Obj/serial_serial.o(.text.rt_serial_init))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = rt_serial_init &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[287]"></a>serial_fops_poll</strong>(100 bytes, Stack size 16 btyes, Obj/serial_serial.o(.text.serial_fops_poll))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = serial_fops_poll &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[288]"></a>rt_serial_control</strong>(178 bytes, Stack size 20 btyes, Obj/serial_serial.o(.text.rt_serial_control))<br>
<br>[Stack]<ul><li>Max Depth = 216 
<li>Call Chain = rt_serial_control &rArr; _serial_fifo_calc_recved_len &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_calc_recved_len
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[289]"></a>serial_fops_write</strong>(18 bytes, Stack size 4 btyes, Obj/serial_serial.o(.text.serial_fops_write))<br>
<br>[Stack]<ul><li>Max Depth = 24 + In Cycle
<li>Call Chain = serial_fops_write &rArr; rt_device_write &rArr; rt_set_errno   (Cycle)</ul>
<br>[Calls]<ul>
<li><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</ul>
<p><strong><a name="[28a]"></a>serial_fops_read</strong>(62 bytes, Stack size 24 btyes, Obj/serial_serial.o(.text.serial_fops_read))<br>
<br>[Stack]<ul><li>Max Depth = 316 
<li>Call Chain = serial_fops_read &rArr; rt_wqueue_wait &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<li><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
</ul>
<p><strong><a name="[28b]"></a>serial_fops_ioctl</strong>(10 bytes, Stack size 4 btyes, Obj/serial_serial.o(.text.serial_fops_ioctl))<br>
<br>[Stack]<ul><li>Max Depth = 204 
<li>Call Chain = serial_fops_ioctl &rArr; rt_device_control &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</ul>
<p><strong><a name="[28c]"></a>serial_fops_close</strong>(22 bytes, Stack size 8 btyes, Obj/serial_serial.o(.text.serial_fops_close))<br>
<br>[Stack]<ul><li>Max Depth = 204 
<li>Call Chain = serial_fops_close &rArr; rt_device_set_rx_indicate &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<li><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
</ul>
<p><strong><a name="[28d]"></a>serial_fops_open</strong>(78 bytes, Stack size 12 btyes, Obj/serial_serial.o(.text.serial_fops_open))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = serial_fops_open &rArr; rt_device_open &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<li><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[28e]"></a>serial_fops_rx_ind</strong>(14 bytes, Stack size 4 btyes, Obj/serial_serial.o(.text.serial_fops_rx_ind))<br>
<br>[Stack]<ul><li>Max Depth = 272 
<li>Call Chain = serial_fops_rx_ind &rArr; rt_wqueue_wakeup &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
</ul>
<p><strong><a name="[28f]"></a>rt_serial_open</strong>(556 bytes, Stack size 24 btyes, Obj/serial_serial.o(.text.rt_serial_open))<br>
<br>[Stack]<ul><li>Max Depth = 352 
<li>Call Chain = rt_serial_open &rArr; rt_data_queue_init &rArr; rt_malloc  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<li><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<li><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
</ul>
<p><strong><a name="[290]"></a>rt_serial_write</strong>(244 bytes, Stack size 28 btyes, Obj/serial_serial.o(.text.rt_serial_write))<br>
<br>[Stack]<ul><li>Max Depth = 328 
<li>Call Chain = rt_serial_write &rArr; rt_data_queue_push &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[291]"></a>rt_serial_read</strong>(566 bytes, Stack size 36 btyes, Obj/serial_serial.o(.text.rt_serial_read))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = rt_serial_read &rArr; _serial_fifo_calc_recved_len &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_calc_recved_len
<li><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<li><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</ul>
<p><strong><a name="[292]"></a>rt_serial_close</strong>(304 bytes, Stack size 12 btyes, Obj/serial_serial.o(.text.rt_serial_close))<br>
<br>[Stack]<ul><li>Max Depth = 296 
<li>Call Chain = rt_serial_close &rArr; rt_free &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[2a0]"></a>_spidev_device_control</strong>(4 bytes, Stack size 0 btyes, Obj/spi_spi_dev.o(.text._spidev_device_control))<br>
<p><strong><a name="[2a1]"></a>_spi_bus_device_write</strong>(68 bytes, Stack size 16 btyes, Obj/spi_spi_dev.o(.text._spi_bus_device_write))<br>
<br>[Stack]<ul><li>Max Depth = 372 
<li>Call Chain = _spi_bus_device_write &rArr; rt_spi_transfer &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[2a2]"></a>_spi_bus_device_read</strong>(68 bytes, Stack size 16 btyes, Obj/spi_spi_dev.o(.text._spi_bus_device_read))<br>
<br>[Stack]<ul><li>Max Depth = 372 
<li>Call Chain = _spi_bus_device_read &rArr; rt_spi_transfer &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[2a3]"></a>_spidev_device_write</strong>(60 bytes, Stack size 16 btyes, Obj/spi_spi_dev.o(.text._spidev_device_write))<br>
<br>[Stack]<ul><li>Max Depth = 372 
<li>Call Chain = _spidev_device_write &rArr; rt_spi_transfer &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[2a4]"></a>_spidev_device_read</strong>(60 bytes, Stack size 16 btyes, Obj/spi_spi_dev.o(.text._spidev_device_read))<br>
<br>[Stack]<ul><li>Max Depth = 372 
<li>Call Chain = _spidev_device_read &rArr; rt_spi_transfer &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[2a5]"></a>_spi_bus_device_control</strong>(4 bytes, Stack size 0 btyes, Obj/spi_spi_dev.o(.text._spi_bus_device_control))<br>
<p><strong><a name="[2a8]"></a>mcp3202_adc_open</strong>(4 bytes, Stack size 0 btyes, Obj/spi_spi_adc.o(.text.mcp3202_adc_open))<br>
<p><strong><a name="[2a9]"></a>mcp3202_adc_close</strong>(4 bytes, Stack size 0 btyes, Obj/spi_spi_adc.o(.text.mcp3202_adc_close))<br>
<p><strong><a name="[2aa]"></a>mcp3202_adc_write</strong>(4 bytes, Stack size 0 btyes, Obj/spi_spi_adc.o(.text.mcp3202_adc_write))<br>
<p><strong><a name="[2ac]"></a>mcp3202_adc_control</strong>(46 bytes, Stack size 12 btyes, Obj/spi_spi_adc.o(.text.mcp3202_adc_control))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = mcp3202_adc_control &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[2ad]"></a>mcp3202_adc_read</strong>(142 bytes, Stack size 56 btyes, Obj/spi_spi_adc.o(.text.mcp3202_adc_read))<br>
<br>[Stack]<ul><li>Max Depth = 380 
<li>Call Chain = mcp3202_adc_read &rArr; rt_spi_transfer_message &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<li><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
<li><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</ul>
<p><strong><a name="[2ae]"></a>mcp3202_adc_init</strong>(4 bytes, Stack size 0 btyes, Obj/spi_spi_adc.o(.text.mcp3202_adc_init))<br>
<p><strong><a name="[2af]"></a>rt_watchdog_open</strong>(4 bytes, Stack size 0 btyes, Obj/watchdog_watchdog.o(.text.rt_watchdog_open))<br>
<p><strong><a name="[2b0]"></a>rt_watchdog_control</strong>(38 bytes, Stack size 16 btyes, Obj/watchdog_watchdog.o(.text.rt_watchdog_control))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = rt_watchdog_control &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[2b1]"></a>rt_watchdog_init</strong>(40 bytes, Stack size 8 btyes, Obj/watchdog_watchdog.o(.text.rt_watchdog_init))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = rt_watchdog_init &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[2b2]"></a>rt_watchdog_close</strong>(50 bytes, Stack size 8 btyes, Obj/watchdog_watchdog.o(.text.rt_watchdog_close))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = rt_watchdog_close &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<p><strong><a name="[2bf]"></a>pipe_fops_open</strong>(118 bytes, Stack size 0 btyes, Obj/src_pipe.o(.fast))<br>
<p><strong><a name="[2c1]"></a>pipe_fops_poll</strong>(152 bytes, Stack size 0 btyes, Obj/src_pipe.o(.fast))<br>
<p><strong><a name="[2c2]"></a>pipe_fops_ioctl</strong>(54 bytes, Stack size 0 btyes, Obj/src_pipe.o(.fast))<br>
<p><strong><a name="[2c3]"></a>pipe_fops_close</strong>(172 bytes, Stack size 0 btyes, Obj/src_pipe.o(.fast))<br>
<p><strong><a name="[2c4]"></a>pipe_fops_write</strong>(222 bytes, Stack size 0 btyes, Obj/src_pipe.o(.fast))<br>
<p><strong><a name="[2c5]"></a>pipe_fops_read</strong>(188 bytes, Stack size 0 btyes, Obj/src_pipe.o(.fast))<br>
<p><strong><a name="[2db]"></a>_workqueue_thread_entry</strong>(128 bytes, Stack size 0 btyes, Obj/src_workqueue.o(.fast))<br>
<p><strong><a name="[2e3]"></a>finsh_rx_ind</strong>(38 bytes, Stack size 8 btyes, Obj/finsh_shell.o(.text.finsh_rx_ind))<br>
<br>[Stack]<ul><li>Max Depth = 264 
<li>Call Chain = finsh_rx_ind &rArr; rt_sem_release &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[2e7]"></a>shell_handle_history</strong>(30 bytes, Stack size 8 btyes, Obj/finsh_shell.o(.text.shell_handle_history))<br>
<br>[Stack]<ul><li>Max Depth = 180 
<li>Call Chain = shell_handle_history &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</ul>
<br>[Called By]<ul>
<li><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</ul>
<p><strong><a name="[2f2]"></a>show_wait_queue</strong>(44 bytes, Stack size 20 btyes, Obj/finsh_cmd.o(.text.show_wait_queue))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<li><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<li><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<li><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
</ul>
<p><strong><a name="[2f4]"></a>object_name_maxlen</strong>(66 bytes, Stack size 16 btyes, Obj/finsh_cmd.o(.text.object_name_maxlen))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = object_name_maxlen &rArr; rt_enter_critical </ul>
<br>[Calls]<ul>
<li><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<li><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
</ul>
<br>[Called By]<ul>
<li><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<li><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<li><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<li><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<li><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<li><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<li><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<li><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<li><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
</ul>
<p><strong><a name="[33d]"></a>clock_gettime.part.0</strong>(50 bytes, Stack size 0 btyes, Obj/time_clock_time.o(.fast))<br>
<p><strong><a name="[343]"></a>netif_device_init</strong>(36 bytes, Stack size 12 btyes, Obj/arch_sys_arch.o(.text.netif_device_init))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = netif_device_init &rArr; rt_device_init &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
</ul>
<p><strong><a name="[349]"></a>tcpip_init_done_callback</strong>(216 bytes, Stack size 60 btyes, Obj/arch_sys_arch.o(.text.tcpip_init_done_callback))<br>
<br>[Stack]<ul><li>Max Depth = 804 
<li>Call Chain = tcpip_init_done_callback &rArr; netif_add &rArr; netif_set_addr  &rArr; netif_set_ipaddr  &rArr; tcp_netif_ip_addr_changed  &rArr; tcp_netif_ip_addr_changed_pcblist  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<li><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<li><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<li><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<li><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<li><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<li><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<li><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<li><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<li><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<li><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[367]"></a>netconn_close_shutdown</strong>(66 bytes, Stack size 28 btyes, Obj/api_api_lib.o(.text.netconn_close_shutdown))<br>
<br>[Stack]<ul><li>Max Depth = 368 
<li>Call Chain = netconn_close_shutdown &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</ul>
<p><strong><a name="[368]"></a>netconn_recv_data</strong>(352 bytes, Stack size 44 btyes, Obj/api_api_lib.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 412 
<li>Call Chain = netconn_recv_data &rArr; netconn_close_shutdown &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<li><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</ul>
<br>[Called By]<ul>
<li><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<li><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
</ul>
<p><strong><a name="[37b]"></a>recv_udp</strong>(202 bytes, Stack size 28 btyes, Obj/api_api_msg.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 352 
<li>Call Chain = recv_udp &rArr; netbuf_delete &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<li><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
</ul>
<br>[Called By]<ul>
<li><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<li><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<li><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
</ul>
<p><strong><a name="[37c]"></a>setup_tcp</strong>(48 bytes, Stack size 0 btyes, Obj/api_api_msg.o(.text.setup_tcp))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = setup_tcp &rArr; tcp_poll &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<li><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<li><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<li><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<li><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
</ul>
<br>[Called By]<ul>
<li><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
</ul>
<p><strong><a name="[37d]"></a>lwip_netconn_do_connected</strong>(216 bytes, Stack size 0 btyes, Obj/api_api_msg.o(.text.lwip_netconn_do_connected))<br>
<p><strong><a name="[37e]"></a>lwip_netconn_do_dns_found</strong>(40 bytes, Stack size 4 btyes, Obj/api_api_msg.o(.text.lwip_netconn_do_dns_found))<br>
<br>[Stack]<ul><li>Max Depth = 264 
<li>Call Chain = lwip_netconn_do_dns_found &rArr; sys_sem_signal &rArr; rt_sem_release  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</ul>
<p><strong><a name="[37f]"></a>lwip_netconn_do_close_internal</strong>(626 bytes, Stack size 0 btyes, Obj/api_api_msg.o(.text.lwip_netconn_do_close_internal))<br>
<br>[Stack]<ul><li>Max Depth = 656 
<li>Call Chain = lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<li><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<li><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<li><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<li><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<li><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<li><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<li><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<li><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<li><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</ul>
<br>[Called By]<ul>
<li><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<li><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<li><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<li><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
</ul>
<p><strong><a name="[383]"></a>netconn_drain</strong>(194 bytes, Stack size 28 btyes, Obj/api_api_msg.o(.text.netconn_drain))<br>
<br>[Stack]<ul><li>Max Depth = 684 
<li>Call Chain = netconn_drain &rArr; tcp_abort &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<li><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<li><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<li><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<li><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<li><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<li><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<li><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</ul>
<br>[Called By]<ul>
<li><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<li><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<li><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
</ul>
<p><strong><a name="[384]"></a>accept_function</strong>(234 bytes, Stack size 0 btyes, Obj/api_api_msg.o(.text.accept_function))<br>
<p><strong><a name="[38d]"></a>recv_raw</strong>(164 bytes, Stack size 24 btyes, Obj/api_api_msg.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 384 
<li>Call Chain = recv_raw &rArr; pbuf_alloc &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
</ul>
<p><strong><a name="[38e]"></a>err_tcp</strong>(318 bytes, Stack size 20 btyes, Obj/api_api_msg.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 332 
<li>Call Chain = err_tcp &rArr; sys_mbox_trypost &rArr; rt_mb_send  &rArr; rt_mb_send_wait  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<li><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<li><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
</ul>
<p><strong><a name="[38f]"></a>lwip_netconn_do_writemore</strong>(628 bytes, Stack size 32 btyes, Obj/api_api_msg.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 632 
<li>Call Chain = lwip_netconn_do_writemore &rArr; tcp_output &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<li><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<li><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</ul>
<p><strong><a name="[390]"></a>poll_tcp</strong>(116 bytes, Stack size 8 btyes, Obj/api_api_msg.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 664 
<li>Call Chain = poll_tcp &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<li><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<p><strong><a name="[391]"></a>recv_tcp</strong>(216 bytes, Stack size 28 btyes, Obj/api_api_msg.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 640 
<li>Call Chain = recv_tcp &rArr; tcp_recved &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<li><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</ul>
<p><strong><a name="[392]"></a>sent_tcp</strong>(110 bytes, Stack size 12 btyes, Obj/api_api_msg.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 668 
<li>Call Chain = sent_tcp &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<li><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<p><strong><a name="[3a4]"></a>netifapi_do_netif_add</strong>(56 bytes, Stack size 16 btyes, Obj/api_netifapi.o(.text.netifapi_do_netif_add))<br>
<br>[Stack]<ul><li>Max Depth = 760 
<li>Call Chain = netifapi_do_netif_add &rArr; netif_add &rArr; netif_set_addr  &rArr; netif_set_ipaddr  &rArr; tcp_netif_ip_addr_changed  &rArr; tcp_netif_ip_addr_changed_pcblist  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</ul>
<p><strong><a name="[3a5]"></a>netifapi_do_netif_set_addr</strong>(18 bytes, Stack size 4 btyes, Obj/api_netifapi.o(.text.netifapi_do_netif_set_addr))<br>
<br>[Stack]<ul><li>Max Depth = 716 
<li>Call Chain = netifapi_do_netif_set_addr &rArr; netif_set_addr &rArr; netif_set_ipaddr  &rArr; tcp_netif_ip_addr_changed  &rArr; tcp_netif_ip_addr_changed_pcblist  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</ul>
<p><strong><a name="[3a6]"></a>netifapi_do_netif_common</strong>(24 bytes, Stack size 8 btyes, Obj/api_netifapi.o(.text.netifapi_do_netif_common))<br>
<p><strong><a name="[3aa]"></a>alloc_socket</strong>(110 bytes, Stack size 28 btyes, Obj/api_sockets.o(.text.alloc_socket))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = alloc_socket &rArr; sys_arch_unprotect </ul>
<br>[Calls]<ul>
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</ul>
<br>[Called By]<ul>
<li><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</ul>
<p><strong><a name="[3ab]"></a>lwip_selscan</strong>(332 bytes, Stack size 72 btyes, Obj/api_sockets.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 76 
<li>Call Chain = lwip_selscan &rArr; sys_arch_protect </ul>
<br>[Calls]<ul>
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</ul>
<br>[Called By]<ul>
<li><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<li><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<li><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<li><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<li><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<li><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<li><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<li><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
</ul>
<p><strong><a name="[3ac]"></a>lwip_getaddrname</strong>(128 bytes, Stack size 0 btyes, Obj/api_sockets.o(.text.lwip_getaddrname))<br>
<p><strong><a name="[3be]"></a>get_socket</strong>(48 bytes, Stack size 8 btyes, Obj/api_sockets.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = get_socket &rArr; _rt_errno </ul>
<br>[Calls]<ul>
<li><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
</ul>
<p><strong><a name="[3bf]"></a>event_callback</strong>(314 bytes, Stack size 40 btyes, Obj/api_sockets.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 300 
<li>Call Chain = event_callback &rArr; sys_sem_signal &rArr; rt_sem_release  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<li><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<p><strong><a name="[3c8]"></a>tcpip_thread</strong>(124 bytes, Stack size 24 btyes, Obj/api_tcpip.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 388 
<li>Call Chain = tcpip_thread &rArr; sys_timeouts_mbox_fetch &rArr; sys_arch_mbox_fetch  &rArr; rt_mb_recv  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<li><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<li><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<li><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<p><strong><a name="[3c9]"></a>pbuf_free_int</strong>(8 bytes, Stack size 0 btyes, Obj/api_tcpip.o(.text.pbuf_free_int))<br>
<p><strong><a name="[3db]"></a>dns_call_found</strong>(148 bytes, Stack size 28 btyes, Obj/core_dns.o(.text.dns_call_found))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = dns_call_found &rArr; udp_remove &rArr; memp_free  &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
</ul>
<br>[Called By]<ul>
<li><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<li><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<li><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</ul>
<p><strong><a name="[3dc]"></a>dns_send</strong>(362 bytes, Stack size 56 btyes, Obj/core_dns.o(.text.dns_send))<br>
<br>[Stack]<ul><li>Max Depth = 660 
<li>Call Chain = dns_send &rArr; udp_sendto &rArr; udp_sendto_if  &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<li><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_put_at
<li><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<li><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
</ul>
<br>[Called By]<ul>
<li><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</ul>
<p><strong><a name="[3dd]"></a>dns_check_entry</strong>(240 bytes, Stack size 16 btyes, Obj/core_dns.o(.text.dns_check_entry))<br>
<br>[Stack]<ul><li>Max Depth = 676 
<li>Call Chain = dns_check_entry &rArr; dns_send &rArr; udp_sendto  &rArr; udp_sendto_if  &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<li><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
</ul>
<br>[Called By]<ul>
<li><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
<li><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</ul>
<p><strong><a name="[3de]"></a>dns_recv</strong>(606 bytes, Stack size 72 btyes, Obj/core_dns.o(.text.dns_recv))<br>
<br>[Stack]<ul><li>Max Depth = 388 
<li>Call Chain = dns_recv &rArr; pbuf_free &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
<li><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<li><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</ul>
<p><strong><a name="[3ef]"></a>do_memp_malloc_pool.isra.0</strong>(62 bytes, Stack size 12 btyes, Obj/core_memp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = do_memp_malloc_pool.isra.0 &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</ul>
<br>[Called By]<ul>
<li><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_pool
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free_pool
<li><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</ul>
<p><strong><a name="[3f2]"></a>do_memp_free_pool.isra.1</strong>(48 bytes, Stack size 12 btyes, Obj/core_memp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 208 
<li>Call Chain = do_memp_free_pool.isra.1 &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<li><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</ul>
<p><strong><a name="[3f7]"></a>netif_issue_reports.part.0</strong>(46 bytes, Stack size 8 btyes, Obj/core_netif.o(.text.netif_issue_reports.part.0))<br>
<br>[Stack]<ul><li>Max Depth = 416 
<li>Call Chain = netif_issue_reports.part.0 &rArr; etharp_request &rArr; etharp_raw  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_report_groups
<li><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</ul>
<br>[Called By]<ul>
<li><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<li><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<li><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
</ul>
<p><strong><a name="[40a]"></a>pbuf_header_impl</strong>(188 bytes, Stack size 8 btyes, Obj/core_pbuf.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 204 
<li>Call Chain = pbuf_header_impl &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<li><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<li><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memcmp
<li><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memfind
</ul>
<p><strong><a name="[40b]"></a>pbuf_memcmp.part.3</strong>(128 bytes, Stack size 8 btyes, Obj/core_pbuf.o(.fast))<br>
<p><strong><a name="[42d]"></a>tcp_new_port</strong>(90 bytes, Stack size 8 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<li><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<li><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<li><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<li><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</ul>
<p><strong><a name="[42e]"></a>tcp_close_shutdown_fin</strong>(104 bytes, Stack size 8 btyes, Obj/core_tcp.o(.text.tcp_close_shutdown_fin))<br>
<br>[Stack]<ul><li>Max Depth = 608 
<li>Call Chain = tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<li><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<li><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</ul>
<p><strong><a name="[441]"></a>tcp_close_shutdown</strong>(390 bytes, Stack size 20 btyes, Obj/core_tcp.o(.text.tcp_close_shutdown))<br>
<br>[Stack]<ul><li>Max Depth = 628 
<li>Call Chain = tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<li><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<li><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<li><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<li><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_trigger_input_pcb_close
<li><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
</ul>
<br>[Called By]<ul>
<li><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<li><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<li><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
</ul>
<p><strong><a name="[446]"></a>tcp_accept_null</strong>(16 bytes, Stack size 0 btyes, Obj/core_tcp.o(.text.tcp_accept_null))<br>
<p><strong><a name="[447]"></a>tcp_netif_ip_addr_changed_pcblist</strong>(38 bytes, Stack size 12 btyes, Obj/core_tcp.o(.text.tcp_netif_ip_addr_changed_pcblist))<br>
<br>[Stack]<ul><li>Max Depth = 664 
<li>Call Chain = tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abandon &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</ul>
<br>[Called By]<ul>
<li><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
</ul>
<p><strong><a name="[44f]"></a>tcp_pcb_purge.part.1</strong>(72 bytes, Stack size 12 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 336 
<li>Call Chain = tcp_pcb_purge.part.1 &rArr; tcp_seg_free &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</ul>
<p><strong><a name="[459]"></a>tcp_kill_state</strong>(90 bytes, Stack size 8 btyes, Obj/core_tcp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 660 
<li>Call Chain = tcp_kill_state &rArr; tcp_abandon &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</ul>
<p><strong><a name="[45c]"></a>tcp_receive</strong>(1856 bytes, Stack size 48 btyes, Obj/core_tcp_in.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 588 
<li>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<li><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<li><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<li><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<li><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<li><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<li><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
</ul>
<br>[Called By]<ul>
<li><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt.isra.1.part.2
<li><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</ul>
<p><strong><a name="[45d]"></a>tcp_getoptbyte</strong>(52 bytes, Stack size 0 btyes, Obj/core_tcp_in.o(.fast))<br>
<p><strong><a name="[45e]"></a>tcp_parseopt.isra.1.part.2</strong>(118 bytes, Stack size 28 btyes, Obj/core_tcp_in.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 616 
<li>Call Chain = tcp_parseopt.isra.1.part.2 &rArr; tcp_receive &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</ul>
<p><strong><a name="[45f]"></a>tcp_input_delayed_close.part.3</strong>(50 bytes, Stack size 8 btyes, Obj/core_tcp_in.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 616 
<li>Call Chain = tcp_input_delayed_close.part.3 &rArr; tcp_pcb_remove &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<li><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</ul>
<p><strong><a name="[462]"></a>tcp_pbuf_prealloc.isra.0</strong>(56 bytes, Stack size 16 btyes, Obj/core_tcp_out.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 376 
<li>Call Chain = tcp_pbuf_prealloc.isra.0 &rArr; pbuf_alloc &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<li><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<li><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<li><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<li><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</ul>
<p><strong><a name="[466]"></a>tcp_create_segment.isra.1</strong>(266 bytes, Stack size 36 btyes, Obj/core_tcp_out.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 360 
<li>Call Chain = tcp_create_segment.isra.1 &rArr; tcp_seg_free &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<li><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</ul>
<p><strong><a name="[467]"></a>tcp_output_alloc_header.constprop.2</strong>(180 bytes, Stack size 24 btyes, Obj/core_tcp_out.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 384 
<li>Call Chain = tcp_output_alloc_header.constprop.2 &rArr; pbuf_alloc &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<p><strong><a name="[473]"></a>tcpip_tcp_timer</strong>(40 bytes, Stack size 4 btyes, Obj/core_timeouts.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 692 
<li>Call Chain = tcpip_tcp_timer &rArr; tcp_tmr &rArr; tcp_fasttmr  &rArr; tcp_process_refused_data  &rArr; tcp_recv_null  &rArr; tcp_close_shutdown  &rArr; tcp_close_shutdown_fin  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<li><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</ul>
<p><strong><a name="[474]"></a>cyclic_timer</strong>(20 bytes, Stack size 8 btyes, Obj/core_timeouts.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 240 
<li>Call Chain = cyclic_timer &rArr; sys_timeout &rArr; memp_malloc  &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</ul>
<p><strong><a name="[488]"></a>eth_netif_device_init</strong>(86 bytes, Stack size 12 btyes, Obj/netif_ethernetif.o(.text.eth_netif_device_init))<br>
<br>[Stack]<ul><li>Max Depth = 640 
<li>Call Chain = eth_netif_device_init &rArr; netif_set_link_up &rArr; dhcp_network_changed  &rArr; dhcp_reboot  &rArr; udp_sendto_if  &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<li><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<li><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<li><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<li><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
</ul>
<p><strong><a name="[489]"></a>ethernetif_linkoutput</strong>(46 bytes, Stack size 12 btyes, Obj/netif_ethernetif.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = ethernetif_linkoutput &rArr; rt_assert_handler &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</ul>
<p><strong><a name="[495]"></a>eth_rx_thread_entry</strong>(122 bytes, Stack size 28 btyes, Obj/netif_ethernetif.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 404 
<li>Call Chain = eth_rx_thread_entry &rArr; netifapi_netif_common &rArr; tcpip_api_call  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<li><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<li><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
</ul>
<p><strong><a name="[4a2]"></a>dhcp_check</strong>(50 bytes, Stack size 8 btyes, Obj/ipv4_dhcp.o(.text.dhcp_check))<br>
<br>[Stack]<ul><li>Max Depth = 416 
<li>Call Chain = dhcp_check &rArr; etharp_query &rArr; etharp_raw  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</ul>
<br>[Called By]<ul>
<li><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<li><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</ul>
<p><strong><a name="[4a3]"></a>dhcp_bind</strong>(354 bytes, Stack size 12 btyes, Obj/ipv4_dhcp.o(.text.dhcp_bind))<br>
<br>[Stack]<ul><li>Max Depth = 724 
<li>Call Chain = dhcp_bind &rArr; netif_set_addr &rArr; netif_set_ipaddr  &rArr; tcp_netif_ip_addr_changed  &rArr; tcp_netif_ip_addr_changed_pcblist  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<li><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</ul>
<p><strong><a name="[4a4]"></a>dhcp_inc_pcb_refcount</strong>(94 bytes, Stack size 12 btyes, Obj/ipv4_dhcp.o(.text.dhcp_inc_pcb_refcount))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = dhcp_inc_pcb_refcount &rArr; udp_new &rArr; memp_malloc  &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<li><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<li><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<li><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
</ul>
<br>[Called By]<ul>
<li><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</ul>
<p><strong><a name="[4a5]"></a>dhcp_option_short.isra.0</strong>(68 bytes, Stack size 16 btyes, Obj/ipv4_dhcp.o(.text.dhcp_option_short.isra.0))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = dhcp_option_short.isra.0 &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<li><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<li><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<li><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<li><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</ul>
<p><strong><a name="[4a6]"></a>dhcp_option.isra.1</strong>(78 bytes, Stack size 20 btyes, Obj/ipv4_dhcp.o(.text.dhcp_option.isra.1))<br>
<br>[Stack]<ul><li>Max Depth = 216 
<li>Call Chain = dhcp_option.isra.1 &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<li><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<li><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<li><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<li><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<li><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<li><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<li><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</ul>
<p><strong><a name="[4a7]"></a>dhcp_option_byte.isra.2</strong>(50 bytes, Stack size 16 btyes, Obj/ipv4_dhcp.o(.text.dhcp_option_byte.isra.2))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = dhcp_option_byte.isra.2 &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<li><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<li><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<li><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<li><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<li><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</ul>
<p><strong><a name="[4a8]"></a>dhcp_create_msg</strong>(496 bytes, Stack size 24 btyes, Obj/ipv4_dhcp.o(.text.dhcp_create_msg))<br>
<br>[Stack]<ul><li>Max Depth = 384 
<li>Call Chain = dhcp_create_msg &rArr; pbuf_alloc &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option.isra.1
<li><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte.isra.2
<li><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</ul>
<br>[Called By]<ul>
<li><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<li><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<li><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<li><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<li><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<li><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<li><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</ul>
<p><strong><a name="[4a9]"></a>dhcp_option_trailer</strong>(124 bytes, Stack size 8 btyes, Obj/ipv4_dhcp.o(.text.dhcp_option_trailer))<br>
<br>[Stack]<ul><li>Max Depth = 204 
<li>Call Chain = dhcp_option_trailer &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<li><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<li><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<li><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<li><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<li><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<li><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</ul>
<p><strong><a name="[4aa]"></a>dhcp_option_long.isra.4</strong>(100 bytes, Stack size 16 btyes, Obj/ipv4_dhcp.o(.text.dhcp_option_long.isra.4))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = dhcp_option_long.isra.4 &rArr; sys_arch_assert &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<li><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<li><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<li><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</ul>
<p><strong><a name="[4ab]"></a>dhcp_delete_msg</strong>(96 bytes, Stack size 8 btyes, Obj/ipv4_dhcp.o(.text.dhcp_delete_msg))<br>
<br>[Stack]<ul><li>Max Depth = 324 
<li>Call Chain = dhcp_delete_msg &rArr; pbuf_free &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<li><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<li><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<li><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<li><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<li><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<li><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</ul>
<p><strong><a name="[4ac]"></a>dhcp_discover</strong>(224 bytes, Stack size 40 btyes, Obj/ipv4_dhcp.o(.text.dhcp_discover))<br>
<br>[Stack]<ul><li>Max Depth = 604 
<li>Call Chain = dhcp_discover &rArr; udp_sendto_if_src &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<li><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option.isra.1
<li><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short.isra.0
<li><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte.isra.2
<li><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<li><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<li><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<li><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
</ul>
<br>[Called By]<ul>
<li><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<li><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<li><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<li><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
<li><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</ul>
<p><strong><a name="[4ad]"></a>dhcp_select</strong>(280 bytes, Stack size 40 btyes, Obj/ipv4_dhcp.o(.text.dhcp_select))<br>
<br>[Stack]<ul><li>Max Depth = 604 
<li>Call Chain = dhcp_select &rArr; udp_sendto_if_src &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<li><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option.isra.1
<li><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short.isra.0
<li><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long.isra.4
<li><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte.isra.2
<li><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<li><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<li><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<li><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
</ul>
<br>[Called By]<ul>
<li><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<li><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</ul>
<p><strong><a name="[4ae]"></a>dhcp_reboot</strong>(250 bytes, Stack size 36 btyes, Obj/ipv4_dhcp.o(.text.dhcp_reboot))<br>
<br>[Stack]<ul><li>Max Depth = 616 
<li>Call Chain = dhcp_reboot &rArr; udp_sendto_if &rArr; udp_sendto_if_src  &rArr; ip4_output_if_src  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<li><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option.isra.1
<li><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short.isra.0
<li><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long.isra.4
<li><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte.isra.2
<li><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<li><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<li><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<li><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
</ul>
<br>[Called By]<ul>
<li><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<li><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</ul>
<p><strong><a name="[4af]"></a>dhcp_dec_pcb_refcount</strong>(52 bytes, Stack size 12 btyes, Obj/ipv4_dhcp.o(.text.dhcp_dec_pcb_refcount))<br>
<br>[Stack]<ul><li>Max Depth = 228 
<li>Call Chain = dhcp_dec_pcb_refcount &rArr; udp_remove &rArr; memp_free  &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<li><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</ul>
<p><strong><a name="[4b0]"></a>dhcp_handle_ack.isra.8</strong>(184 bytes, Stack size 16 btyes, Obj/ipv4_dhcp.o(.text.unlikely.dhcp_handle_ack.isra.8))<br>
<br>[Calls]<ul>
<li><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
</ul>
<br>[Called By]<ul>
<li><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</ul>
<p><strong><a name="[4b1]"></a>dhcp_recv</strong>(1402 bytes, Stack size 76 btyes, Obj/ipv4_dhcp.o(.text.dhcp_recv))<br>
<br>[Stack]<ul><li>Max Depth = 800 
<li>Call Chain = dhcp_recv &rArr; dhcp_bind &rArr; netif_set_addr  &rArr; netif_set_ipaddr  &rArr; tcp_netif_ip_addr_changed  &rArr; tcp_netif_ip_addr_changed_pcblist  &rArr; tcp_abandon  &rArr; tcp_pcb_remove  &rArr; tcp_output  &rArr; tcp_send_empty_ack  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<li><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<li><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<li><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack.isra.8
<li><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<li><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<li><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<li><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
</ul>
<p><strong><a name="[4b3]"></a>free_etharp_q</strong>(100 bytes, Stack size 20 btyes, Obj/ipv4_etharp.o(.text.free_etharp_q))<br>
<br>[Stack]<ul><li>Max Depth = 336 
<li>Call Chain = free_etharp_q &rArr; pbuf_free &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry.isra.0
<li><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</ul>
<p><strong><a name="[4b4]"></a>etharp_raw</strong>(276 bytes, Stack size 48 btyes, Obj/ipv4_etharp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 408 
<li>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</ul>
<br>[Called By]<ul>
<li><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<li><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_addr
<li><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<li><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<li><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<li><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</ul>
<p><strong><a name="[4b5]"></a>etharp_output_to_arp_index</strong>(244 bytes, Stack size 44 btyes, Obj/ipv4_etharp.o(.text.etharp_output_to_arp_index))<br>
<br>[Stack]<ul><li>Max Depth = 452 
<li>Call Chain = etharp_output_to_arp_index &rArr; etharp_raw &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<li><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</ul>
<p><strong><a name="[4b9]"></a>etharp_find_entry.isra.0</strong>(326 bytes, Stack size 40 btyes, Obj/ipv4_etharp.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 376 
<li>Call Chain = etharp_find_entry.isra.0 &rArr; free_etharp_q &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
</ul>
<p><strong><a name="[4bf]"></a>icmp_send_response.isra.0</strong>(166 bytes, Stack size 40 btyes, Obj/ipv4_icmp.o(.text.icmp_send_response.isra.0))<br>
<br>[Stack]<ul><li>Max Depth = 552 
<li>Call Chain = icmp_send_response.isra.0 &rArr; ip4_output_if &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<li><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<li><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<li><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
</ul>
<p><strong><a name="[4c3]"></a>igmp_send</strong>(208 bytes, Stack size 56 btyes, Obj/ipv4_igmp.o(.text.igmp_send))<br>
<br>[Stack]<ul><li>Max Depth = 576 
<li>Call Chain = igmp_send &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<li><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt
</ul>
<br>[Called By]<ul>
<li><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
<li><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<li><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_tmr
</ul>
<p><strong><a name="[4c4]"></a>igmp_delaying_member</strong>(70 bytes, Stack size 12 btyes, Obj/ipv4_igmp.o(.text.igmp_delaying_member))<br>
<br>[Calls]<ul>
<li><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</ul>
<br>[Called By]<ul>
<li><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_report_groups
<li><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
</ul>
<p><strong><a name="[4c5]"></a>igmp_lookup_group.isra.3</strong>(138 bytes, Stack size 20 btyes, Obj/ipv4_igmp.o(.text.igmp_lookup_group.isra.3))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = igmp_lookup_group.isra.3 &rArr; memp_malloc &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start
<li><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
</ul>
<p><strong><a name="[4df]"></a>ip_reass_dequeue_datagram</strong>(64 bytes, Stack size 12 btyes, Obj/ipv4_ip4_frag.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 224 
<li>Call Chain = ip_reass_dequeue_datagram &rArr; memp_free &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</ul>
<br>[Called By]<ul>
<li><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<li><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<li><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_tmr
<li><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</ul>
<p><strong><a name="[4e0]"></a>ip_reass_free_complete_datagram</strong>(264 bytes, Stack size 32 btyes, Obj/ipv4_ip4_frag.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 588 
<li>Call Chain = ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response.isra.0  &rArr; ip4_output_if  &rArr; ip4_output_if_opt_src  &rArr; ip4_frag  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<li><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<li><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<li><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<li><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
</ul>
<p><strong><a name="[4e1]"></a>ip_reass_remove_oldest_datagram</strong>(188 bytes, Stack size 32 btyes, Obj/ipv4_ip4_frag.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 256 
<li>Call Chain = ip_reass_remove_oldest_datagram &rArr; ip_reass_dequeue_datagram &rArr; memp_free  &rArr; do_memp_malloc_pool.isra.0  &rArr; sys_arch_assert  &rArr; rt_assert_handler  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
</ul>
<p><strong><a name="[4e5]"></a>sendto_ntp_server</strong>(82 bytes, Stack size 28 btyes, Obj/ntp_ntp.o(.text.sendto_ntp_server))<br>
<br>[Stack]<ul><li>Max Depth = 480 
<li>Call Chain = sendto_ntp_server &rArr; sendto &rArr; lwip_sendto  &rArr; netbuf_alloc  &rArr; pbuf_alloc  &rArr; pbuf_free  &rArr; mem_free  &rArr; rt_free  &rArr; rt_sem_take  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
<li><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<li><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<li><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</ul>
<br>[Called By]<ul>
<li><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
</ul>
<p><strong><a name="[4e9]"></a>ntp_sync</strong>(40 bytes, Stack size 8 btyes, Obj/ntp_ntp.o(.text.ntp_sync))<br>
<br>[Stack]<ul><li>Max Depth = 704 
<li>Call Chain = ntp_sync &rArr; ntp_sync_to_rtc &rArr; ntp_get_time  &rArr; recvfrom  &rArr; lwip_recvfrom  &rArr; netconn_recv  &rArr; netconn_recv_data  &rArr; netconn_close_shutdown  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_to_rtc
<li><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
<li><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ntp_sync
</ul>
<p><strong><a name="[4ea]"></a>cmd_ntp_sync</strong>(22 bytes, Stack size 4 btyes, Obj/ntp_ntp.o(.text.cmd_ntp_sync))<br>
<br>[Stack]<ul><li>Max Depth = 708 
<li>Call Chain = cmd_ntp_sync &rArr; ntp_sync &rArr; ntp_sync_to_rtc  &rArr; ntp_get_time  &rArr; recvfrom  &rArr; lwip_recvfrom  &rArr; netconn_recv  &rArr; netconn_recv_data  &rArr; netconn_close_shutdown  &rArr; tcpip_send_msg_wait_sem  &rArr; sys_mutex_lock  &rArr; rt_mutex_take  &rArr; rt_thread_control  &rArr; rt_thread_startup  &rArr; rt_schedule  &rArr; list_thread  &rArr; rt_kprintf  &rArr; rt_vsnprintf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync
</ul>
<p><strong><a name="[4ed]"></a>dma_channel_intr_enable</strong>(68 bytes, Stack size 0 btyes, bsp_dma.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_intr_status_get
<li><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_intr_status
<li><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_intr_enable
</ul>
<p><strong><a name="[4f2]"></a>dma_channel_intr_status_get.part.0</strong>(44 bytes, Stack size 0 btyes, bsp_dma.o(.fast))<br>
<p><strong><a name="[4f8]"></a>gpio_pull_mode_set.part.0</strong>(54 bytes, Stack size 0 btyes, bsp_gpio.o(.text.gpio_pull_mode_set.part.0))<br>
<br>[Called By]<ul>
<li><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_hw_init
</ul>
<p><strong><a name="[510]"></a>clock_source_set.part.0</strong>(172 bytes, Stack size 0 btyes, bsp_scu.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_freq_set
<li><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_source_set
<li><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_normal
</ul>
<p><strong><a name="[518]"></a>scu_emmc_clock_set.constprop.1</strong>(124 bytes, Stack size 0 btyes, bsp_scu.o(.fast))<br>
<p><strong><a name="[589]"></a>hash_dma_write</strong>(96 bytes, Stack size 0 btyes, crypto_hash.o(.fast))<br>
<p><strong><a name="[594]"></a>get_valid_bits.part.1</strong>(104 bytes, Stack size 0 btyes, crypto_pke.o(.text.get_valid_bits.part.1))<br>
<p><strong><a name="[595]"></a>Bigint_Check_1.part.3</strong>(36 bytes, Stack size 0 btyes, crypto_pke.o(.text.Bigint_Check_1.part.3))<br>
<p><strong><a name="[596]"></a>Bigint_Check_p_1.part.4</strong>(46 bytes, Stack size 0 btyes, crypto_pke.o(.text.Bigint_Check_p_1.part.4))<br>
<p><strong><a name="[5cc]"></a>RSA_Get_E2.part.0</strong>(144 bytes, Stack size 0 btyes, crypto_rsa_osr.o(.text.RSA_Get_E2.part.0))<br>
<p><strong><a name="[5f7]"></a>symm_param_cfg</strong>(162 bytes, Stack size 4 btyes, crypto_crypto.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</ul>
<br>[Called By]<ul>
<li><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_fifo_enable
<li><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bridge_enable
<li><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bridge_prd_enable
<li><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_dma_start
</ul>
<p><strong><a name="[618]"></a>norc_port_switch_cmd.part.0</strong>(48 bytes, Stack size 4 btyes, norflash_norflash.o(.text.norc_port_switch_cmd.part.0))<br>
<br>[Calls]<ul>
<li><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_irq_save
</ul>
<br>[Called By]<ul>
<li><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_hw_init
<li><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_byte_write
<li><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_write
<li><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_sector_erase
</ul>
<p><strong><a name="[619]"></a>norc_port_switch_xip.part.1</strong>(48 bytes, Stack size 4 btyes, norflash_norflash.o(.text.norc_port_switch_xip.part.1))<br>
<br>[Calls]<ul>
<li><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_irq_restore
</ul>
<br>[Called By]<ul>
<li><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_hw_init
<li><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_byte_write
<li><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_write
<li><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_sector_erase
</ul>
<p><strong><a name="[625]"></a>nftl_get_free</strong>(108 bytes, Stack size 0 btyes, norflash_nftl.o(.fast))<br>
<p><strong><a name="[627]"></a>nftl_garbage_collection</strong>(854 bytes, Stack size 0 btyes, norflash_nftl.o(.fast))<br>
<p><strong><a name="[628]"></a>nftl_rebuild</strong>(1368 bytes, Stack size 0 btyes, norflash_nftl.o(.fast))<br>
<p><strong><a name="[62f]"></a>usb_fifo_read</strong>(136 bytes, Stack size 0 btyes, usb_usb.o(.text.usb_fifo_read))<br>
<p><strong><a name="[630]"></a>usb_fifo_write</strong>(150 bytes, Stack size 0 btyes, usb_usb.o(.fast))<br>
<p><strong><a name="[631]"></a>gpio_set1.part.0</strong>(14 bytes, Stack size 0 btyes, usb_usb.o(.text.gpio_set1.part.0))<br>
<p><strong><a name="[632]"></a>writex</strong>(140 bytes, Stack size 0 btyes, usb_usb.o(.text.writex))<br>
<p><strong><a name="[633]"></a>clock</strong>(64 bytes, Stack size 0 btyes, usb_usb.o(.text.clock))<br>
<p><strong><a name="[634]"></a>i2c_write</strong>(184 bytes, Stack size 0 btyes, usb_usb.o(.text.i2c_write))<br>
<p><strong><a name="[6f6]"></a>ascii_to_dec</strong>(210 bytes, Stack size 60 btyes, common_log.o(.fast))<br>
<br>[Called By]<ul>
<li><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_st_data
</ul>
<p><strong><a name="[6fa]"></a>log_st_data.part.0</strong>(138 bytes, Stack size 184 btyes, common_log.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 288 
<li>Call Chain = log_st_data.part.0 &rArr; log_write &rArr; norflash_write  &rArr; norc_port_switch_xip.part.1  </ul>
<br>[Calls]<ul>
<li><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<li><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_write
</ul>
<p><strong><a name="[6ff]"></a>mem_hw_internal</strong>(110 bytes, Stack size 4 btyes, common_memcpy_hw.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = mem_hw_internal &rArr; dma_intr_status </ul>
<br>[Calls]<ul>
<li><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_intr_status
<li><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_intr_clear
</ul>
<br>[Called By]<ul>
<li><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<li><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_hw
</ul>
<p><strong><a name="[703]"></a>perf_timer_handler</strong>(92 bytes, Stack size 0 btyes, common_perf.o(.text.perf_timer_handler))<br>
<p><strong><a name="[708]"></a>mp_setup_update</strong>(418 bytes, Stack size 0 btyes, component_mp.o(.text.mp_setup_update))<br>
<p><strong><a name="[710]"></a>snfc_port_switch.part.0</strong>(46 bytes, Stack size 0 btyes, norflash_spiflash.o(.text.snfc_port_switch.part.0))<br>
<p><strong><a name="[721]"></a>sata_is_busy.part.2</strong>(34 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[743]"></a>sata_sdb_send_manual</strong>(386 bytes, Stack size 0 btyes, sata_device_sata.o(.fast))<br>
<p><strong><a name="[79e]"></a>xhci_halt.part.1</strong>(24 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_halt.part.1))<br>
<p><strong><a name="[79f]"></a>xhci_configure_endpoint.constprop.4</strong>(198 bytes, Stack size 0 btyes, xhci_xhci.o(.text.xhci_configure_endpoint.constprop.4))<br>
<p><strong><a name="[7c3]"></a>xhci_link_segments.part.1</strong>(62 bytes, Stack size 0 btyes, xhci_xhci_ring.o(.text.xhci_link_segments.part.1))<br>
<p><strong><a name="[81c]"></a>show_chunk_snapshot</strong>(32 bytes, Stack size 0 btyes, cklib_mm_leak.o(.text.show_chunk_snapshot))<br>
<p><strong><a name="[81d]"></a>traverse_one_list</strong>(104 bytes, Stack size 0 btyes, cklib_mm_leak.o(.text.traverse_one_list))<br>
<p><strong><a name="[81e]"></a>search_nearest</strong>(34 bytes, Stack size 0 btyes, cklib_mm_leak.o(.text.search_nearest))<br>
<p><strong><a name="[81f]"></a>show_corrupted_chunk</strong>(114 bytes, Stack size 0 btyes, cklib_mm_leak.o(.text.show_corrupted_chunk))<br>
<p><strong><a name="[831]"></a>print_number</strong>(524 bytes, Stack size 0 btyes, cklib_printf.o(.text.print_number))<br>
<p><strong><a name="[870]"></a>intr_cache_flush.part.0</strong>(30 bytes, Stack size 4 btyes, ck803_interrupt.o(.fast))<br>
<br>[Calls]<ul>
<li><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_dcache_clean_invalid_range
<li><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_dcache_invalid_range
</ul>
<br>[Called By]<ul>
<li><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_isr_connect
<li><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_connect
<li><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_disconnect
<li><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_hw_init
</ul>
<p><strong><a name="[873]"></a>intr_isr_connect</strong>(40 bytes, Stack size 4 btyes, ck803_interrupt.o(.fast))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = intr_isr_connect &rArr; intr_cache_flush.part.0 </ul>
<br>[Calls]<ul>
<li><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_cache_flush.part.0
</ul>
<p><strong><a name="[883]"></a>_fpadd_parts</strong>(324 bytes, Stack size 16 btyes, _addsub_sf.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__addsf3
<li><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subsf3
</ul>
<p><strong><a name="[891]"></a>_fpadd_parts</strong>(706 bytes, Stack size 44 btyes, _addsub_df.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__adddf3
<li><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subdf3
</ul>
</body>
</html>
